//
// THIS FILE IS GENERATED BY THE PREFIXER TOOL DO NOT EDIT
//
#ifndef _ossl_H_
#define _ossl_H_
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/aes.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/stack.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/safestack.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/cryptoerr_legacy.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/core.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/crypto.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/bio.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/bn.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/asn1.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/asn1t.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/async.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/blowfish.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/buffer.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/camellia.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/cast.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/core_dispatch.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/params.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/objects.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/evp.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/cmac.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/ec.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/rsa.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/dsa.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/dh.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/sha.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/x509.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/lhash.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/x509_vfy.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/pkcs7.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/conf.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/http.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/x509v3.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/crmf.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/trace.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/cmp_util.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/cmp.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/cms.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/comp.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/conf_api.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/ct.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/decoder.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/des.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/ebcdic.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/encoder.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/rand.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/pem.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/ui.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/err.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/engine.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/ess.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/hmac.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/idea.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/kdf.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/md4.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/md5.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/mdc2.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/modes.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/ocsp.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/param_build.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/pkcs12.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/provider.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/rc2.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/rc4.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/ripemd.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/seed.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/self_test.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/srp.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/sslerr_legacy.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/ssl.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/tls1.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/srtp.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/store.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/ts.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/txt_db.h"
#include "/build/bazel_root/base/sandbox/processwrapper-sandbox/3/execroot/envoy/bazel-out/k8-fastbuild/bin/bssl-compat/bssl-compat.build_tmpdir/include/ossl/openssl/whrlpool.h"

typedef const char * (*ossl_AES_options_t)();
typedef int (*ossl_AES_set_encrypt_key_t)(const unsigned char *userKey, const int bits, ossl_AES_KEY *key);
typedef int (*ossl_AES_set_decrypt_key_t)(const unsigned char *userKey, const int bits, ossl_AES_KEY *key);
typedef void (*ossl_AES_encrypt_t)(const unsigned char *in, unsigned char *out, const ossl_AES_KEY *key);
typedef void (*ossl_AES_decrypt_t)(const unsigned char *in, unsigned char *out, const ossl_AES_KEY *key);
typedef void (*ossl_AES_ecb_encrypt_t)(const unsigned char *in, unsigned char *out, const ossl_AES_KEY *key, const int enc);
typedef void (*ossl_AES_cbc_encrypt_t)(const unsigned char *in, unsigned char *out, size_t length, const ossl_AES_KEY *key, unsigned char *ivec, const int enc);
typedef void (*ossl_AES_cfb128_encrypt_t)(const unsigned char *in, unsigned char *out, size_t length, const ossl_AES_KEY *key, unsigned char *ivec, int *num, const int enc);
typedef void (*ossl_AES_cfb1_encrypt_t)(const unsigned char *in, unsigned char *out, size_t length, const ossl_AES_KEY *key, unsigned char *ivec, int *num, const int enc);
typedef void (*ossl_AES_cfb8_encrypt_t)(const unsigned char *in, unsigned char *out, size_t length, const ossl_AES_KEY *key, unsigned char *ivec, int *num, const int enc);
typedef void (*ossl_AES_ofb128_encrypt_t)(const unsigned char *in, unsigned char *out, size_t length, const ossl_AES_KEY *key, unsigned char *ivec, int *num);
typedef void (*ossl_AES_ige_encrypt_t)(const unsigned char *in, unsigned char *out, size_t length, const ossl_AES_KEY *key, unsigned char *ivec, const int enc);
typedef void (*ossl_AES_bi_ige_encrypt_t)(const unsigned char *in, unsigned char *out, size_t length, const ossl_AES_KEY *key, const ossl_AES_KEY *key2, const unsigned char *ivec, const int enc);
typedef int (*ossl_AES_wrap_key_t)(ossl_AES_KEY *key, const unsigned char *iv, unsigned char *out, const unsigned char *in, unsigned int inlen);
typedef int (*ossl_AES_unwrap_key_t)(ossl_AES_KEY *key, const unsigned char *iv, unsigned char *out, const unsigned char *in, unsigned int inlen);
typedef int (*ossl_OPENSSL_sk_num_t)(const ossl_OPENSSL_STACK *_p0);
typedef void * (*ossl_OPENSSL_sk_value_t)(const ossl_OPENSSL_STACK *_p0, int _p1);
typedef void * (*ossl_OPENSSL_sk_set_t)(ossl_OPENSSL_STACK *st, int i, const void *data);
typedef ossl_OPENSSL_STACK * (*ossl_OPENSSL_sk_new_t)(ossl_OPENSSL_sk_compfunc cmp);
typedef ossl_OPENSSL_STACK * (*ossl_OPENSSL_sk_new_null_t)();
typedef ossl_OPENSSL_STACK * (*ossl_OPENSSL_sk_new_reserve_t)(ossl_OPENSSL_sk_compfunc c, int n);
typedef int (*ossl_OPENSSL_sk_reserve_t)(ossl_OPENSSL_STACK *st, int n);
typedef void (*ossl_OPENSSL_sk_free_t)(ossl_OPENSSL_STACK *_p0);
typedef void (*ossl_OPENSSL_sk_pop_free_t)(ossl_OPENSSL_STACK *st, void (*func)(void *));
typedef ossl_OPENSSL_STACK * (*ossl_OPENSSL_sk_deep_copy_t)(const ossl_OPENSSL_STACK *_p0, ossl_OPENSSL_sk_copyfunc c, ossl_OPENSSL_sk_freefunc f);
typedef int (*ossl_OPENSSL_sk_insert_t)(ossl_OPENSSL_STACK *sk, const void *data, int where);
typedef void * (*ossl_OPENSSL_sk_delete_t)(ossl_OPENSSL_STACK *st, int loc);
typedef void * (*ossl_OPENSSL_sk_delete_ptr_t)(ossl_OPENSSL_STACK *st, const void *p);
typedef int (*ossl_OPENSSL_sk_find_t)(ossl_OPENSSL_STACK *st, const void *data);
typedef int (*ossl_OPENSSL_sk_find_ex_t)(ossl_OPENSSL_STACK *st, const void *data);
typedef int (*ossl_OPENSSL_sk_find_all_t)(ossl_OPENSSL_STACK *st, const void *data, int *pnum);
typedef int (*ossl_OPENSSL_sk_push_t)(ossl_OPENSSL_STACK *st, const void *data);
typedef int (*ossl_OPENSSL_sk_unshift_t)(ossl_OPENSSL_STACK *st, const void *data);
typedef void * (*ossl_OPENSSL_sk_shift_t)(ossl_OPENSSL_STACK *st);
typedef void * (*ossl_OPENSSL_sk_pop_t)(ossl_OPENSSL_STACK *st);
typedef void (*ossl_OPENSSL_sk_zero_t)(ossl_OPENSSL_STACK *st);
typedef ossl_OPENSSL_sk_compfunc (*ossl_OPENSSL_sk_set_cmp_func_t)(ossl_OPENSSL_STACK *sk, ossl_OPENSSL_sk_compfunc cmp);
typedef ossl_OPENSSL_STACK * (*ossl_OPENSSL_sk_dup_t)(const ossl_OPENSSL_STACK *st);
typedef void (*ossl_OPENSSL_sk_sort_t)(ossl_OPENSSL_STACK *st);
typedef int (*ossl_OPENSSL_sk_is_sorted_t)(const ossl_OPENSSL_STACK *st);
typedef int (*ossl_ERR_load_ASN1_strings_t)();
typedef int (*ossl_ERR_load_ASYNC_strings_t)();
typedef int (*ossl_ERR_load_BIO_strings_t)();
typedef int (*ossl_ERR_load_BN_strings_t)();
typedef int (*ossl_ERR_load_BUF_strings_t)();
typedef int (*ossl_ERR_load_CMS_strings_t)();
typedef int (*ossl_ERR_load_COMP_strings_t)();
typedef int (*ossl_ERR_load_CONF_strings_t)();
typedef int (*ossl_ERR_load_CRYPTO_strings_t)();
typedef int (*ossl_ERR_load_CT_strings_t)();
typedef int (*ossl_ERR_load_DH_strings_t)();
typedef int (*ossl_ERR_load_DSA_strings_t)();
typedef int (*ossl_ERR_load_EC_strings_t)();
typedef int (*ossl_ERR_load_ENGINE_strings_t)();
typedef int (*ossl_ERR_load_ERR_strings_t)();
typedef int (*ossl_ERR_load_EVP_strings_t)();
typedef int (*ossl_ERR_load_KDF_strings_t)();
typedef int (*ossl_ERR_load_OBJ_strings_t)();
typedef int (*ossl_ERR_load_OCSP_strings_t)();
typedef int (*ossl_ERR_load_PEM_strings_t)();
typedef int (*ossl_ERR_load_PKCS12_strings_t)();
typedef int (*ossl_ERR_load_PKCS7_strings_t)();
typedef int (*ossl_ERR_load_RAND_strings_t)();
typedef int (*ossl_ERR_load_RSA_strings_t)();
typedef int (*ossl_ERR_load_OSSL_STORE_strings_t)();
typedef int (*ossl_ERR_load_TS_strings_t)();
typedef int (*ossl_ERR_load_UI_strings_t)();
typedef int (*ossl_ERR_load_X509_strings_t)();
typedef int (*ossl_ERR_load_X509V3_strings_t)();
typedef int (*ossl_OSSL_provider_init_t)(const ossl_OSSL_CORE_HANDLE *_p0, const ossl_OSSL_DISPATCH *_p1, const ossl_OSSL_DISPATCH **_p2, void **_p3);
typedef ossl_CRYPTO_RWLOCK * (*ossl_CRYPTO_THREAD_lock_new_t)();
typedef int (*ossl_CRYPTO_THREAD_read_lock_t)(ossl_CRYPTO_RWLOCK *lock);
typedef int (*ossl_CRYPTO_THREAD_write_lock_t)(ossl_CRYPTO_RWLOCK *lock);
typedef int (*ossl_CRYPTO_THREAD_unlock_t)(ossl_CRYPTO_RWLOCK *lock);
typedef void (*ossl_CRYPTO_THREAD_lock_free_t)(ossl_CRYPTO_RWLOCK *lock);
typedef int (*ossl_CRYPTO_atomic_add_t)(int *val, int amount, int *ret, ossl_CRYPTO_RWLOCK *lock);
typedef int (*ossl_CRYPTO_atomic_or_t)(uint64_t *val, uint64_t op, uint64_t *ret, ossl_CRYPTO_RWLOCK *lock);
typedef int (*ossl_CRYPTO_atomic_load_t)(uint64_t *val, uint64_t *ret, ossl_CRYPTO_RWLOCK *lock);
typedef size_t (*ossl_OPENSSL_strlcpy_t)(char *dst, const char *src, size_t siz);
typedef size_t (*ossl_OPENSSL_strlcat_t)(char *dst, const char *src, size_t siz);
typedef size_t (*ossl_OPENSSL_strnlen_t)(const char *str, size_t maxlen);
typedef int (*ossl_OPENSSL_buf2hexstr_ex_t)(char *str, size_t str_n, size_t *strlength, const unsigned char *buf, size_t buflen, const char sep);
typedef char * (*ossl_OPENSSL_buf2hexstr_t)(const unsigned char *buf, long buflen);
typedef int (*ossl_OPENSSL_hexstr2buf_ex_t)(unsigned char *buf, size_t buf_n, size_t *buflen, const char *str, const char sep);
typedef unsigned char * (*ossl_OPENSSL_hexstr2buf_t)(const char *str, long *buflen);
typedef int (*ossl_OPENSSL_hexchar2int_t)(unsigned char c);
typedef int (*ossl_OPENSSL_strcasecmp_t)(const char *s1, const char *s2);
typedef int (*ossl_OPENSSL_strncasecmp_t)(const char *s1, const char *s2, size_t n);
typedef unsigned int (*ossl_OPENSSL_version_major_t)();
typedef unsigned int (*ossl_OPENSSL_version_minor_t)();
typedef unsigned int (*ossl_OPENSSL_version_patch_t)();
typedef const char * (*ossl_OPENSSL_version_pre_release_t)();
typedef const char * (*ossl_OPENSSL_version_build_metadata_t)();
typedef unsigned long (*ossl_OpenSSL_version_num_t)();
typedef const char * (*ossl_OpenSSL_version_t)(int type);
typedef const char * (*ossl_OPENSSL_info_t)(int type);
typedef int (*ossl_OPENSSL_issetugid_t)();
typedef int (*ossl_CRYPTO_get_ex_new_index_t)(int class_index, long argl, void *argp, ossl_CRYPTO_EX_new *new_func, ossl_CRYPTO_EX_dup *dup_func, ossl_CRYPTO_EX_free *free_func);
typedef int (*ossl_CRYPTO_free_ex_index_t)(int class_index, int idx);
typedef int (*ossl_CRYPTO_new_ex_data_t)(int class_index, void *obj, ossl_CRYPTO_EX_DATA *ad);
typedef int (*ossl_CRYPTO_dup_ex_data_t)(int class_index, ossl_CRYPTO_EX_DATA *to, const ossl_CRYPTO_EX_DATA *from);
typedef void (*ossl_CRYPTO_free_ex_data_t)(int class_index, void *obj, ossl_CRYPTO_EX_DATA *ad);
typedef int (*ossl_CRYPTO_alloc_ex_data_t)(int class_index, void *obj, ossl_CRYPTO_EX_DATA *ad, int idx);
typedef int (*ossl_CRYPTO_set_ex_data_t)(ossl_CRYPTO_EX_DATA *ad, int idx, void *val);
typedef void * (*ossl_CRYPTO_get_ex_data_t)(const ossl_CRYPTO_EX_DATA *ad, int idx);
typedef int (*ossl_CRYPTO_set_mem_functions_t)(ossl_CRYPTO_malloc_fn malloc_fn, ossl_CRYPTO_realloc_fn realloc_fn, ossl_CRYPTO_free_fn free_fn);
typedef void (*ossl_CRYPTO_get_mem_functions_t)(ossl_CRYPTO_malloc_fn *malloc_fn, ossl_CRYPTO_realloc_fn *realloc_fn, ossl_CRYPTO_free_fn *free_fn);
typedef void * (*ossl_CRYPTO_malloc_t)(size_t num, const char *file, int line);
typedef void * (*ossl_CRYPTO_zalloc_t)(size_t num, const char *file, int line);
typedef void * (*ossl_CRYPTO_memdup_t)(const void *str, size_t siz, const char *file, int line);
typedef char * (*ossl_CRYPTO_strdup_t)(const char *str, const char *file, int line);
typedef char * (*ossl_CRYPTO_strndup_t)(const char *str, size_t s, const char *file, int line);
typedef void (*ossl_CRYPTO_free_t)(void *ptr, const char *file, int line);
typedef void (*ossl_CRYPTO_clear_free_t)(void *ptr, size_t num, const char *file, int line);
typedef void * (*ossl_CRYPTO_realloc_t)(void *addr, size_t num, const char *file, int line);
typedef void * (*ossl_CRYPTO_clear_realloc_t)(void *addr, size_t old_num, size_t num, const char *file, int line);
typedef int (*ossl_CRYPTO_secure_malloc_init_t)(size_t sz, size_t minsize);
typedef int (*ossl_CRYPTO_secure_malloc_done_t)();
typedef void * (*ossl_CRYPTO_secure_malloc_t)(size_t num, const char *file, int line);
typedef void * (*ossl_CRYPTO_secure_zalloc_t)(size_t num, const char *file, int line);
typedef void (*ossl_CRYPTO_secure_free_t)(void *ptr, const char *file, int line);
typedef void (*ossl_CRYPTO_secure_clear_free_t)(void *ptr, size_t num, const char *file, int line);
typedef int (*ossl_CRYPTO_secure_allocated_t)(const void *ptr);
typedef int (*ossl_CRYPTO_secure_malloc_initialized_t)();
typedef size_t (*ossl_CRYPTO_secure_actual_size_t)(void *ptr);
typedef size_t (*ossl_CRYPTO_secure_used_t)();
typedef void (*ossl_OPENSSL_cleanse_t)(void *ptr, size_t len);
typedef void (*ossl_OPENSSL_die_t)(const char *assertion, const char *file, int line);
typedef int (*ossl_OPENSSL_isservice_t)();
typedef void (*ossl_OPENSSL_init_t)();
typedef void (*ossl_OPENSSL_fork_prepare_t)();
typedef void (*ossl_OPENSSL_fork_parent_t)();
typedef void (*ossl_OPENSSL_fork_child_t)();
typedef struct tm * (*ossl_OPENSSL_gmtime_t)(const time_t *timer, struct tm *result);
typedef int (*ossl_OPENSSL_gmtime_adj_t)(struct tm *tm, int offset_day, long offset_sec);
typedef int (*ossl_OPENSSL_gmtime_diff_t)(int *pday, int *psec, const struct tm *from, const struct tm *to);
typedef int (*ossl_CRYPTO_memcmp_t)(const void *in_a, const void *in_b, size_t len);
typedef void (*ossl_OPENSSL_cleanup_t)();
typedef int (*ossl_OPENSSL_init_crypto_t)(uint64_t opts, const ossl_OPENSSL_INIT_SETTINGS *settings);
typedef int (*ossl_OPENSSL_atexit_t)(void (*handler)(void));
typedef void (*ossl_OPENSSL_thread_stop_t)();
typedef void (*ossl_OPENSSL_thread_stop_ex_t)(ossl_OSSL_LIB_CTX *ctx);
typedef ossl_OPENSSL_INIT_SETTINGS * (*ossl_OPENSSL_INIT_new_t)();
typedef int (*ossl_OPENSSL_INIT_set_config_filename_t)(ossl_OPENSSL_INIT_SETTINGS *settings, const char *config_filename);
typedef void (*ossl_OPENSSL_INIT_set_config_file_flags_t)(ossl_OPENSSL_INIT_SETTINGS *settings, unsigned long flags);
typedef int (*ossl_OPENSSL_INIT_set_config_appname_t)(ossl_OPENSSL_INIT_SETTINGS *settings, const char *config_appname);
typedef void (*ossl_OPENSSL_INIT_free_t)(ossl_OPENSSL_INIT_SETTINGS *settings);
typedef int (*ossl_CRYPTO_THREAD_run_once_t)(ossl_CRYPTO_ONCE *once, void (*init)(void));
typedef int (*ossl_CRYPTO_THREAD_init_local_t)(ossl_CRYPTO_THREAD_LOCAL *key, void (*cleanup)(void *));
typedef void * (*ossl_CRYPTO_THREAD_get_local_t)(ossl_CRYPTO_THREAD_LOCAL *key);
typedef int (*ossl_CRYPTO_THREAD_set_local_t)(ossl_CRYPTO_THREAD_LOCAL *key, void *val);
typedef int (*ossl_CRYPTO_THREAD_cleanup_local_t)(ossl_CRYPTO_THREAD_LOCAL *key);
typedef ossl_CRYPTO_THREAD_ID (*ossl_CRYPTO_THREAD_get_current_id_t)();
typedef int (*ossl_CRYPTO_THREAD_compare_id_t)(ossl_CRYPTO_THREAD_ID a, ossl_CRYPTO_THREAD_ID b);
typedef ossl_OSSL_LIB_CTX * (*ossl_OSSL_LIB_CTX_new_t)();
typedef ossl_OSSL_LIB_CTX * (*ossl_OSSL_LIB_CTX_new_from_dispatch_t)(const ossl_OSSL_CORE_HANDLE *handle, const ossl_OSSL_DISPATCH *in);
typedef ossl_OSSL_LIB_CTX * (*ossl_OSSL_LIB_CTX_new_child_t)(const ossl_OSSL_CORE_HANDLE *handle, const ossl_OSSL_DISPATCH *in);
typedef int (*ossl_OSSL_LIB_CTX_load_config_t)(ossl_OSSL_LIB_CTX *ctx, const char *config_file);
typedef void (*ossl_OSSL_LIB_CTX_free_t)(ossl_OSSL_LIB_CTX *_p0);
typedef ossl_OSSL_LIB_CTX * (*ossl_OSSL_LIB_CTX_get0_global_default_t)();
typedef ossl_OSSL_LIB_CTX * (*ossl_OSSL_LIB_CTX_set0_default_t)(ossl_OSSL_LIB_CTX *libctx);
typedef int (*ossl_BIO_get_new_index_t)();
typedef void (*ossl_BIO_set_flags_t)(ossl_BIO *b, int flags);
typedef int (*ossl_BIO_test_flags_t)(const ossl_BIO *b, int flags);
typedef void (*ossl_BIO_clear_flags_t)(ossl_BIO *b, int flags);
typedef ossl_BIO_callback_fn (*ossl_BIO_get_callback_t)(const ossl_BIO *b);
typedef void (*ossl_BIO_set_callback_t)(ossl_BIO *b, ossl_BIO_callback_fn callback);
typedef long (*ossl_BIO_debug_callback_t)(ossl_BIO *bio, int cmd, const char *argp, int argi, long argl, long ret);
typedef ossl_BIO_callback_fn_ex (*ossl_BIO_get_callback_ex_t)(const ossl_BIO *b);
typedef void (*ossl_BIO_set_callback_ex_t)(ossl_BIO *b, ossl_BIO_callback_fn_ex callback);
typedef long (*ossl_BIO_debug_callback_ex_t)(ossl_BIO *bio, int oper, const char *argp, size_t len, int argi, long argl, int ret, size_t *processed);
typedef char * (*ossl_BIO_get_callback_arg_t)(const ossl_BIO *b);
typedef void (*ossl_BIO_set_callback_arg_t)(ossl_BIO *b, char *arg);
typedef const char * (*ossl_BIO_method_name_t)(const ossl_BIO *b);
typedef int (*ossl_BIO_method_type_t)(const ossl_BIO *b);
typedef size_t (*ossl_BIO_ctrl_pending_t)(ossl_BIO *b);
typedef size_t (*ossl_BIO_ctrl_wpending_t)(ossl_BIO *b);
typedef size_t (*ossl_BIO_ctrl_get_write_guarantee_t)(ossl_BIO *b);
typedef size_t (*ossl_BIO_ctrl_get_read_request_t)(ossl_BIO *b);
typedef int (*ossl_BIO_ctrl_reset_read_request_t)(ossl_BIO *b);
typedef int (*ossl_BIO_set_ex_data_t)(ossl_BIO *bio, int idx, void *data);
typedef void * (*ossl_BIO_get_ex_data_t)(const ossl_BIO *bio, int idx);
typedef uint64_t (*ossl_BIO_number_read_t)(ossl_BIO *bio);
typedef uint64_t (*ossl_BIO_number_written_t)(ossl_BIO *bio);
typedef int (*ossl_BIO_asn1_set_prefix_t)(ossl_BIO *b, ossl_asn1_ps_func *prefix, ossl_asn1_ps_func *prefix_free);
typedef int (*ossl_BIO_asn1_get_prefix_t)(ossl_BIO *b, ossl_asn1_ps_func **pprefix, ossl_asn1_ps_func **pprefix_free);
typedef int (*ossl_BIO_asn1_set_suffix_t)(ossl_BIO *b, ossl_asn1_ps_func *suffix, ossl_asn1_ps_func *suffix_free);
typedef int (*ossl_BIO_asn1_get_suffix_t)(ossl_BIO *b, ossl_asn1_ps_func **psuffix, ossl_asn1_ps_func **psuffix_free);
typedef const ossl_BIO_METHOD * (*ossl_BIO_s_file_t)();
typedef ossl_BIO * (*ossl_BIO_new_file_t)(const char *filename, const char *mode);
typedef ossl_BIO * (*ossl_BIO_new_from_core_bio_t)(ossl_OSSL_LIB_CTX *libctx, ossl_OSSL_CORE_BIO *corebio);
typedef ossl_BIO * (*ossl_BIO_new_fp_t)(FILE *stream, int close_flag);
typedef ossl_BIO * (*ossl_BIO_new_ex_t)(ossl_OSSL_LIB_CTX *libctx, const ossl_BIO_METHOD *method);
typedef ossl_BIO * (*ossl_BIO_new_t)(const ossl_BIO_METHOD *type);
typedef int (*ossl_BIO_free_t)(ossl_BIO *a);
typedef void (*ossl_BIO_set_data_t)(ossl_BIO *a, void *ptr);
typedef void * (*ossl_BIO_get_data_t)(ossl_BIO *a);
typedef void (*ossl_BIO_set_init_t)(ossl_BIO *a, int init);
typedef int (*ossl_BIO_get_init_t)(ossl_BIO *a);
typedef void (*ossl_BIO_set_shutdown_t)(ossl_BIO *a, int shut);
typedef int (*ossl_BIO_get_shutdown_t)(ossl_BIO *a);
typedef void (*ossl_BIO_vfree_t)(ossl_BIO *a);
typedef int (*ossl_BIO_up_ref_t)(ossl_BIO *a);
typedef int (*ossl_BIO_read_t)(ossl_BIO *b, void *data, int dlen);
typedef int (*ossl_BIO_read_ex_t)(ossl_BIO *b, void *data, size_t dlen, size_t *readbytes);
typedef int (*ossl_BIO_gets_t)(ossl_BIO *bp, char *buf, int size);
typedef int (*ossl_BIO_get_line_t)(ossl_BIO *bio, char *buf, int size);
typedef int (*ossl_BIO_write_t)(ossl_BIO *b, const void *data, int dlen);
typedef int (*ossl_BIO_write_ex_t)(ossl_BIO *b, const void *data, size_t dlen, size_t *written);
typedef int (*ossl_BIO_puts_t)(ossl_BIO *bp, const char *buf);
typedef int (*ossl_BIO_indent_t)(ossl_BIO *b, int indent, int max);
typedef long (*ossl_BIO_ctrl_t)(ossl_BIO *bp, int cmd, long larg, void *parg);
typedef long (*ossl_BIO_callback_ctrl_t)(ossl_BIO *b, int cmd, ossl_BIO_info_cb *fp);
typedef void * (*ossl_BIO_ptr_ctrl_t)(ossl_BIO *bp, int cmd, long larg);
typedef long (*ossl_BIO_int_ctrl_t)(ossl_BIO *bp, int cmd, long larg, int iarg);
typedef ossl_BIO * (*ossl_BIO_push_t)(ossl_BIO *b, ossl_BIO *append);
typedef ossl_BIO * (*ossl_BIO_pop_t)(ossl_BIO *b);
typedef void (*ossl_BIO_free_all_t)(ossl_BIO *a);
typedef ossl_BIO * (*ossl_BIO_find_type_t)(ossl_BIO *b, int bio_type);
typedef ossl_BIO * (*ossl_BIO_next_t)(ossl_BIO *b);
typedef void (*ossl_BIO_set_next_t)(ossl_BIO *b, ossl_BIO *next);
typedef ossl_BIO * (*ossl_BIO_get_retry_BIO_t)(ossl_BIO *bio, int *reason);
typedef int (*ossl_BIO_get_retry_reason_t)(ossl_BIO *bio);
typedef void (*ossl_BIO_set_retry_reason_t)(ossl_BIO *bio, int reason);
typedef ossl_BIO * (*ossl_BIO_dup_chain_t)(ossl_BIO *in);
typedef int (*ossl_BIO_nread0_t)(ossl_BIO *bio, char **buf);
typedef int (*ossl_BIO_nread_t)(ossl_BIO *bio, char **buf, int num);
typedef int (*ossl_BIO_nwrite0_t)(ossl_BIO *bio, char **buf);
typedef int (*ossl_BIO_nwrite_t)(ossl_BIO *bio, char **buf, int num);
typedef const ossl_BIO_METHOD * (*ossl_BIO_s_mem_t)();
typedef const ossl_BIO_METHOD * (*ossl_BIO_s_secmem_t)();
typedef ossl_BIO * (*ossl_BIO_new_mem_buf_t)(const void *buf, int len);
typedef const ossl_BIO_METHOD * (*ossl_BIO_s_socket_t)();
typedef const ossl_BIO_METHOD * (*ossl_BIO_s_connect_t)();
typedef const ossl_BIO_METHOD * (*ossl_BIO_s_accept_t)();
typedef const ossl_BIO_METHOD * (*ossl_BIO_s_fd_t)();
typedef const ossl_BIO_METHOD * (*ossl_BIO_s_log_t)();
typedef const ossl_BIO_METHOD * (*ossl_BIO_s_bio_t)();
typedef const ossl_BIO_METHOD * (*ossl_BIO_s_null_t)();
typedef const ossl_BIO_METHOD * (*ossl_BIO_f_null_t)();
typedef const ossl_BIO_METHOD * (*ossl_BIO_f_buffer_t)();
typedef const ossl_BIO_METHOD * (*ossl_BIO_f_readbuffer_t)();
typedef const ossl_BIO_METHOD * (*ossl_BIO_f_linebuffer_t)();
typedef const ossl_BIO_METHOD * (*ossl_BIO_f_nbio_test_t)();
typedef const ossl_BIO_METHOD * (*ossl_BIO_f_prefix_t)();
typedef const ossl_BIO_METHOD * (*ossl_BIO_s_core_t)();
typedef const ossl_BIO_METHOD * (*ossl_BIO_s_datagram_t)();
typedef int (*ossl_BIO_dgram_non_fatal_error_t)(int error);
typedef ossl_BIO * (*ossl_BIO_new_dgram_t)(int fd, int close_flag);
typedef int (*ossl_BIO_sock_should_retry_t)(int i);
typedef int (*ossl_BIO_sock_non_fatal_error_t)(int error);
typedef int (*ossl_BIO_socket_wait_t)(int fd, int for_read, time_t max_time);
typedef int (*ossl_BIO_wait_t)(ossl_BIO *bio, time_t max_time, unsigned int nap_milliseconds);
typedef int (*ossl_BIO_do_connect_retry_t)(ossl_BIO *bio, int timeout, int nap_milliseconds);
typedef int (*ossl_BIO_fd_should_retry_t)(int i);
typedef int (*ossl_BIO_fd_non_fatal_error_t)(int error);
typedef int (*ossl_BIO_dump_cb_t)(int (*cb)(const void *, size_t, void *), void *u, const void *s, int len);
typedef int (*ossl_BIO_dump_indent_cb_t)(int (*cb)(const void *, size_t, void *), void *u, const void *s, int len, int indent);
typedef int (*ossl_BIO_dump_t)(ossl_BIO *b, const void *bytes, int len);
typedef int (*ossl_BIO_dump_indent_t)(ossl_BIO *b, const void *bytes, int len, int indent);
typedef int (*ossl_BIO_dump_fp_t)(FILE *fp, const void *s, int len);
typedef int (*ossl_BIO_dump_indent_fp_t)(FILE *fp, const void *s, int len, int indent);
typedef int (*ossl_BIO_hex_string_t)(ossl_BIO *out, int indent, int width, const void *data, int datalen);
typedef ossl_BIO_ADDR * (*ossl_BIO_ADDR_new_t)();
typedef int (*ossl_BIO_ADDR_rawmake_t)(ossl_BIO_ADDR *ap, int family, const void *where, size_t wherelen, unsigned short port);
typedef void (*ossl_BIO_ADDR_free_t)(ossl_BIO_ADDR *_p0);
typedef void (*ossl_BIO_ADDR_clear_t)(ossl_BIO_ADDR *ap);
typedef int (*ossl_BIO_ADDR_family_t)(const ossl_BIO_ADDR *ap);
typedef int (*ossl_BIO_ADDR_rawaddress_t)(const ossl_BIO_ADDR *ap, void *p, size_t *l);
typedef unsigned short (*ossl_BIO_ADDR_rawport_t)(const ossl_BIO_ADDR *ap);
typedef char * (*ossl_BIO_ADDR_hostname_string_t)(const ossl_BIO_ADDR *ap, int numeric);
typedef char * (*ossl_BIO_ADDR_service_string_t)(const ossl_BIO_ADDR *ap, int numeric);
typedef char * (*ossl_BIO_ADDR_path_string_t)(const ossl_BIO_ADDR *ap);
typedef const ossl_BIO_ADDRINFO * (*ossl_BIO_ADDRINFO_next_t)(const ossl_BIO_ADDRINFO *bai);
typedef int (*ossl_BIO_ADDRINFO_family_t)(const ossl_BIO_ADDRINFO *bai);
typedef int (*ossl_BIO_ADDRINFO_socktype_t)(const ossl_BIO_ADDRINFO *bai);
typedef int (*ossl_BIO_ADDRINFO_protocol_t)(const ossl_BIO_ADDRINFO *bai);
typedef const ossl_BIO_ADDR * (*ossl_BIO_ADDRINFO_address_t)(const ossl_BIO_ADDRINFO *bai);
typedef void (*ossl_BIO_ADDRINFO_free_t)(ossl_BIO_ADDRINFO *bai);
typedef int (*ossl_BIO_parse_hostserv_t)(const char *hostserv, char **host, char **service, enum ossl_BIO_hostserv_priorities hostserv_prio);
typedef int (*ossl_BIO_lookup_t)(const char *host, const char *service, enum ossl_BIO_lookup_type lookup_type, int family, int socktype, ossl_BIO_ADDRINFO **res);
typedef int (*ossl_BIO_lookup_ex_t)(const char *host, const char *service, int lookup_type, int family, int socktype, int protocol, ossl_BIO_ADDRINFO **res);
typedef int (*ossl_BIO_sock_error_t)(int sock);
typedef int (*ossl_BIO_socket_ioctl_t)(int fd, long type, void *arg);
typedef int (*ossl_BIO_socket_nbio_t)(int fd, int mode);
typedef int (*ossl_BIO_sock_init_t)();
typedef int (*ossl_BIO_set_tcp_ndelay_t)(int sock, int turn_on);
typedef struct ossl_hostent * (*ossl_BIO_gethostbyname_t)(const char *name);
typedef int (*ossl_BIO_get_port_t)(const char *str, unsigned short *port_ptr);
typedef int (*ossl_BIO_get_host_ip_t)(const char *str, unsigned char *ip);
typedef int (*ossl_BIO_get_accept_socket_t)(char *host_port, int mode);
typedef int (*ossl_BIO_accept_t)(int sock, char **ip_port);
typedef int (*ossl_BIO_sock_info_t)(int sock, enum ossl_BIO_sock_info_type type, union ossl_BIO_sock_info_u *info);
typedef int (*ossl_BIO_socket_t)(int domain, int socktype, int protocol, int options);
typedef int (*ossl_BIO_connect_t)(int sock, const ossl_BIO_ADDR *addr, int options);
typedef int (*ossl_BIO_bind_t)(int sock, const ossl_BIO_ADDR *addr, int options);
typedef int (*ossl_BIO_listen_t)(int sock, const ossl_BIO_ADDR *addr, int options);
typedef int (*ossl_BIO_accept_ex_t)(int accept_sock, ossl_BIO_ADDR *addr, int options);
typedef int (*ossl_BIO_closesocket_t)(int sock);
typedef ossl_BIO * (*ossl_BIO_new_socket_t)(int sock, int close_flag);
typedef ossl_BIO * (*ossl_BIO_new_connect_t)(const char *host_port);
typedef ossl_BIO * (*ossl_BIO_new_accept_t)(const char *host_port);
typedef ossl_BIO * (*ossl_BIO_new_fd_t)(int fd, int close_flag);
typedef int (*ossl_BIO_new_bio_pair_t)(ossl_BIO **bio1, size_t writebuf1, ossl_BIO **bio2, size_t writebuf2);
typedef void (*ossl_BIO_copy_next_retry_t)(ossl_BIO *b);
typedef int (*ossl_BIO_printf_t)(ossl_BIO *bio, const char *format, ...);
typedef int (*ossl_BIO_vprintf_t)(ossl_BIO *bio, const char *format, va_list args);
typedef int (*ossl_BIO_snprintf_t)(char *buf, size_t n, const char *format, ...);
typedef int (*ossl_BIO_vsnprintf_t)(char *buf, size_t n, const char *format, va_list args);
typedef ossl_BIO_METHOD * (*ossl_BIO_meth_new_t)(int type, const char *name);
typedef void (*ossl_BIO_meth_free_t)(ossl_BIO_METHOD *biom);
typedef int (*BIO_meth_get_write_ret_t)(ossl_BIO *, const char *, int);
typedef BIO_meth_get_write_ret_t (*ossl_BIO_meth_get_write_t)(const ossl_BIO_METHOD *biom);
typedef int (*BIO_meth_get_write_ex_ret_t)(ossl_BIO *, const char *, size_t, size_t *);
typedef BIO_meth_get_write_ex_ret_t (*ossl_BIO_meth_get_write_ex_t)(const ossl_BIO_METHOD *biom);
typedef int (*ossl_BIO_meth_set_write_t)(ossl_BIO_METHOD *biom, int (*write)(ossl_BIO *, const char *, int));
typedef int (*ossl_BIO_meth_set_write_ex_t)(ossl_BIO_METHOD *biom, int (*bwrite)(ossl_BIO *, const char *, size_t, size_t *));
typedef int (*BIO_meth_get_read_ret_t)(ossl_BIO *, char *, int);
typedef BIO_meth_get_read_ret_t (*ossl_BIO_meth_get_read_t)(const ossl_BIO_METHOD *biom);
typedef int (*BIO_meth_get_read_ex_ret_t)(ossl_BIO *, char *, size_t, size_t *);
typedef BIO_meth_get_read_ex_ret_t (*ossl_BIO_meth_get_read_ex_t)(const ossl_BIO_METHOD *biom);
typedef int (*ossl_BIO_meth_set_read_t)(ossl_BIO_METHOD *biom, int (*read)(ossl_BIO *, char *, int));
typedef int (*ossl_BIO_meth_set_read_ex_t)(ossl_BIO_METHOD *biom, int (*bread)(ossl_BIO *, char *, size_t, size_t *));
typedef int (*BIO_meth_get_puts_ret_t)(ossl_BIO *, const char *);
typedef BIO_meth_get_puts_ret_t (*ossl_BIO_meth_get_puts_t)(const ossl_BIO_METHOD *biom);
typedef int (*ossl_BIO_meth_set_puts_t)(ossl_BIO_METHOD *biom, int (*puts)(ossl_BIO *, const char *));
typedef int (*BIO_meth_get_gets_ret_t)(ossl_BIO *, char *, int);
typedef BIO_meth_get_gets_ret_t (*ossl_BIO_meth_get_gets_t)(const ossl_BIO_METHOD *biom);
typedef int (*ossl_BIO_meth_set_gets_t)(ossl_BIO_METHOD *biom, int (*ossl_gets)(ossl_BIO *, char *, int));
typedef long (*BIO_meth_get_ctrl_ret_t)(ossl_BIO *, int, long, void *);
typedef BIO_meth_get_ctrl_ret_t (*ossl_BIO_meth_get_ctrl_t)(const ossl_BIO_METHOD *biom);
typedef int (*ossl_BIO_meth_set_ctrl_t)(ossl_BIO_METHOD *biom, long (*ctrl)(ossl_BIO *, int, long, void *));
typedef int (*BIO_meth_get_create_ret_t)(ossl_BIO *);
typedef BIO_meth_get_create_ret_t (*ossl_BIO_meth_get_create_t)(const ossl_BIO_METHOD *bion);
typedef int (*ossl_BIO_meth_set_create_t)(ossl_BIO_METHOD *biom, int (*create)(ossl_BIO *));
typedef int (*BIO_meth_get_destroy_ret_t)(ossl_BIO *);
typedef BIO_meth_get_destroy_ret_t (*ossl_BIO_meth_get_destroy_t)(const ossl_BIO_METHOD *biom);
typedef int (*ossl_BIO_meth_set_destroy_t)(ossl_BIO_METHOD *biom, int (*destroy)(ossl_BIO *));
typedef long (*BIO_meth_get_callback_ctrl_ret_t)(ossl_BIO *, int, ossl_BIO_info_cb *);
typedef BIO_meth_get_callback_ctrl_ret_t (*ossl_BIO_meth_get_callback_ctrl_t)(const ossl_BIO_METHOD *biom);
typedef int (*ossl_BIO_meth_set_callback_ctrl_t)(ossl_BIO_METHOD *biom, long (*callback_ctrl)(ossl_BIO *, int, ossl_BIO_info_cb *));
typedef void (*ossl_BN_set_flags_t)(ossl_BIGNUM *b, int n);
typedef int (*ossl_BN_get_flags_t)(const ossl_BIGNUM *b, int n);
typedef void (*ossl_BN_with_flags_t)(ossl_BIGNUM *dest, const ossl_BIGNUM *b, int flags);
typedef int (*ossl_BN_GENCB_call_t)(ossl_BN_GENCB *cb, int a, int b);
typedef ossl_BN_GENCB * (*ossl_BN_GENCB_new_t)();
typedef void (*ossl_BN_GENCB_free_t)(ossl_BN_GENCB *cb);
typedef void (*ossl_BN_GENCB_set_old_t)(ossl_BN_GENCB *gencb, void (*callback)(int, int, void *), void *cb_arg);
typedef void (*ossl_BN_GENCB_set_t)(ossl_BN_GENCB *gencb, int (*callback)(int, int, ossl_BN_GENCB *), void *cb_arg);
typedef void * (*ossl_BN_GENCB_get_arg_t)(ossl_BN_GENCB *cb);
typedef int (*ossl_BN_abs_is_word_t)(const ossl_BIGNUM *a, const unsigned long w);
typedef int (*ossl_BN_is_zero_t)(const ossl_BIGNUM *a);
typedef int (*ossl_BN_is_one_t)(const ossl_BIGNUM *a);
typedef int (*ossl_BN_is_word_t)(const ossl_BIGNUM *a, const unsigned long w);
typedef int (*ossl_BN_is_odd_t)(const ossl_BIGNUM *a);
typedef void (*ossl_BN_zero_ex_t)(ossl_BIGNUM *a);
typedef const ossl_BIGNUM * (*ossl_BN_value_one_t)();
typedef char * (*ossl_BN_options_t)();
typedef ossl_BN_CTX * (*ossl_BN_CTX_new_ex_t)(ossl_OSSL_LIB_CTX *ctx);
typedef ossl_BN_CTX * (*ossl_BN_CTX_new_t)();
typedef ossl_BN_CTX * (*ossl_BN_CTX_secure_new_ex_t)(ossl_OSSL_LIB_CTX *ctx);
typedef ossl_BN_CTX * (*ossl_BN_CTX_secure_new_t)();
typedef void (*ossl_BN_CTX_free_t)(ossl_BN_CTX *c);
typedef void (*ossl_BN_CTX_start_t)(ossl_BN_CTX *ctx);
typedef ossl_BIGNUM * (*ossl_BN_CTX_get_t)(ossl_BN_CTX *ctx);
typedef void (*ossl_BN_CTX_end_t)(ossl_BN_CTX *ctx);
typedef int (*ossl_BN_rand_ex_t)(ossl_BIGNUM *rnd, int bits, int top, int bottom, unsigned int strength, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_rand_t)(ossl_BIGNUM *rnd, int bits, int top, int bottom);
typedef int (*ossl_BN_priv_rand_ex_t)(ossl_BIGNUM *rnd, int bits, int top, int bottom, unsigned int strength, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_priv_rand_t)(ossl_BIGNUM *rnd, int bits, int top, int bottom);
typedef int (*ossl_BN_rand_range_ex_t)(ossl_BIGNUM *r, const ossl_BIGNUM *range, unsigned int strength, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_rand_range_t)(ossl_BIGNUM *rnd, const ossl_BIGNUM *range);
typedef int (*ossl_BN_priv_rand_range_ex_t)(ossl_BIGNUM *r, const ossl_BIGNUM *range, unsigned int strength, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_priv_rand_range_t)(ossl_BIGNUM *rnd, const ossl_BIGNUM *range);
typedef int (*ossl_BN_pseudo_rand_t)(ossl_BIGNUM *rnd, int bits, int top, int bottom);
typedef int (*ossl_BN_pseudo_rand_range_t)(ossl_BIGNUM *rnd, const ossl_BIGNUM *range);
typedef int (*ossl_BN_num_bits_t)(const ossl_BIGNUM *a);
typedef int (*ossl_BN_num_bits_word_t)(unsigned long l);
typedef int (*ossl_BN_security_bits_t)(int L, int N);
typedef ossl_BIGNUM * (*ossl_BN_new_t)();
typedef ossl_BIGNUM * (*ossl_BN_secure_new_t)();
typedef void (*ossl_BN_clear_free_t)(ossl_BIGNUM *a);
typedef ossl_BIGNUM * (*ossl_BN_copy_t)(ossl_BIGNUM *a, const ossl_BIGNUM *b);
typedef void (*ossl_BN_swap_t)(ossl_BIGNUM *a, ossl_BIGNUM *b);
typedef ossl_BIGNUM * (*ossl_BN_bin2bn_t)(const unsigned char *s, int len, ossl_BIGNUM *ret);
typedef int (*ossl_BN_bn2bin_t)(const ossl_BIGNUM *a, unsigned char *to);
typedef int (*ossl_BN_bn2binpad_t)(const ossl_BIGNUM *a, unsigned char *to, int tolen);
typedef ossl_BIGNUM * (*ossl_BN_lebin2bn_t)(const unsigned char *s, int len, ossl_BIGNUM *ret);
typedef int (*ossl_BN_bn2lebinpad_t)(const ossl_BIGNUM *a, unsigned char *to, int tolen);
typedef ossl_BIGNUM * (*ossl_BN_native2bn_t)(const unsigned char *s, int len, ossl_BIGNUM *ret);
typedef int (*ossl_BN_bn2nativepad_t)(const ossl_BIGNUM *a, unsigned char *to, int tolen);
typedef ossl_BIGNUM * (*ossl_BN_mpi2bn_t)(const unsigned char *s, int len, ossl_BIGNUM *ret);
typedef int (*ossl_BN_bn2mpi_t)(const ossl_BIGNUM *a, unsigned char *to);
typedef int (*ossl_BN_sub_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *b);
typedef int (*ossl_BN_usub_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *b);
typedef int (*ossl_BN_uadd_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *b);
typedef int (*ossl_BN_add_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *b);
typedef int (*ossl_BN_mul_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *b, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_sqr_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, ossl_BN_CTX *ctx);
typedef void (*ossl_BN_set_negative_t)(ossl_BIGNUM *b, int n);
typedef int (*ossl_BN_is_negative_t)(const ossl_BIGNUM *b);
typedef int (*ossl_BN_div_t)(ossl_BIGNUM *dv, ossl_BIGNUM *rem, const ossl_BIGNUM *m, const ossl_BIGNUM *d, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_nnmod_t)(ossl_BIGNUM *r, const ossl_BIGNUM *m, const ossl_BIGNUM *d, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_mod_add_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *b, const ossl_BIGNUM *m, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_mod_add_quick_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *b, const ossl_BIGNUM *m);
typedef int (*ossl_BN_mod_sub_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *b, const ossl_BIGNUM *m, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_mod_sub_quick_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *b, const ossl_BIGNUM *m);
typedef int (*ossl_BN_mod_mul_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *b, const ossl_BIGNUM *m, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_mod_sqr_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *m, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_mod_lshift1_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *m, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_mod_lshift1_quick_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *m);
typedef int (*ossl_BN_mod_lshift_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, int n, const ossl_BIGNUM *m, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_mod_lshift_quick_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, int n, const ossl_BIGNUM *m);
typedef unsigned long (*ossl_BN_mod_word_t)(const ossl_BIGNUM *a, unsigned long w);
typedef unsigned long (*ossl_BN_div_word_t)(ossl_BIGNUM *a, unsigned long w);
typedef int (*ossl_BN_mul_word_t)(ossl_BIGNUM *a, unsigned long w);
typedef int (*ossl_BN_add_word_t)(ossl_BIGNUM *a, unsigned long w);
typedef int (*ossl_BN_sub_word_t)(ossl_BIGNUM *a, unsigned long w);
typedef int (*ossl_BN_set_word_t)(ossl_BIGNUM *a, unsigned long w);
typedef unsigned long (*ossl_BN_get_word_t)(const ossl_BIGNUM *a);
typedef int (*ossl_BN_cmp_t)(const ossl_BIGNUM *a, const ossl_BIGNUM *b);
typedef void (*ossl_BN_free_t)(ossl_BIGNUM *a);
typedef int (*ossl_BN_is_bit_set_t)(const ossl_BIGNUM *a, int n);
typedef int (*ossl_BN_lshift_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, int n);
typedef int (*ossl_BN_lshift1_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a);
typedef int (*ossl_BN_exp_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *p, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_mod_exp_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *p, const ossl_BIGNUM *m, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_mod_exp_mont_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *p, const ossl_BIGNUM *m, ossl_BN_CTX *ctx, ossl_BN_MONT_CTX *m_ctx);
typedef int (*ossl_BN_mod_exp_mont_consttime_t)(ossl_BIGNUM *rr, const ossl_BIGNUM *a, const ossl_BIGNUM *p, const ossl_BIGNUM *m, ossl_BN_CTX *ctx, ossl_BN_MONT_CTX *in_mont);
typedef int (*ossl_BN_mod_exp_mont_word_t)(ossl_BIGNUM *r, unsigned long a, const ossl_BIGNUM *p, const ossl_BIGNUM *m, ossl_BN_CTX *ctx, ossl_BN_MONT_CTX *m_ctx);
typedef int (*ossl_BN_mod_exp2_mont_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a1, const ossl_BIGNUM *p1, const ossl_BIGNUM *a2, const ossl_BIGNUM *p2, const ossl_BIGNUM *m, ossl_BN_CTX *ctx, ossl_BN_MONT_CTX *m_ctx);
typedef int (*ossl_BN_mod_exp_simple_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *p, const ossl_BIGNUM *m, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_mod_exp_mont_consttime_x2_t)(ossl_BIGNUM *rr1, const ossl_BIGNUM *a1, const ossl_BIGNUM *p1, const ossl_BIGNUM *m1, ossl_BN_MONT_CTX *in_mont1, ossl_BIGNUM *rr2, const ossl_BIGNUM *a2, const ossl_BIGNUM *p2, const ossl_BIGNUM *m2, ossl_BN_MONT_CTX *in_mont2, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_mask_bits_t)(ossl_BIGNUM *a, int n);
typedef int (*ossl_BN_print_fp_t)(FILE *fp, const ossl_BIGNUM *a);
typedef int (*ossl_BN_print_t)(ossl_BIO *bio, const ossl_BIGNUM *a);
typedef int (*ossl_BN_reciprocal_t)(ossl_BIGNUM *r, const ossl_BIGNUM *m, int len, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_rshift_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, int n);
typedef int (*ossl_BN_rshift1_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a);
typedef void (*ossl_BN_clear_t)(ossl_BIGNUM *a);
typedef ossl_BIGNUM * (*ossl_BN_dup_t)(const ossl_BIGNUM *a);
typedef int (*ossl_BN_ucmp_t)(const ossl_BIGNUM *a, const ossl_BIGNUM *b);
typedef int (*ossl_BN_set_bit_t)(ossl_BIGNUM *a, int n);
typedef int (*ossl_BN_clear_bit_t)(ossl_BIGNUM *a, int n);
typedef char * (*ossl_BN_bn2hex_t)(const ossl_BIGNUM *a);
typedef char * (*ossl_BN_bn2dec_t)(const ossl_BIGNUM *a);
typedef int (*ossl_BN_hex2bn_t)(ossl_BIGNUM **a, const char *str);
typedef int (*ossl_BN_dec2bn_t)(ossl_BIGNUM **a, const char *str);
typedef int (*ossl_BN_asc2bn_t)(ossl_BIGNUM **a, const char *str);
typedef int (*ossl_BN_gcd_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *b, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_kronecker_t)(const ossl_BIGNUM *a, const ossl_BIGNUM *b, ossl_BN_CTX *ctx);
typedef ossl_BIGNUM * (*ossl_BN_mod_inverse_t)(ossl_BIGNUM *ret, const ossl_BIGNUM *a, const ossl_BIGNUM *n, ossl_BN_CTX *ctx);
typedef ossl_BIGNUM * (*ossl_BN_mod_sqrt_t)(ossl_BIGNUM *ret, const ossl_BIGNUM *a, const ossl_BIGNUM *n, ossl_BN_CTX *ctx);
typedef void (*ossl_BN_consttime_swap_t)(unsigned long swap, ossl_BIGNUM *a, ossl_BIGNUM *b, int nwords);
typedef ossl_BIGNUM * (*ossl_BN_generate_prime_t)(ossl_BIGNUM *ret, int bits, int safe, const ossl_BIGNUM *add, const ossl_BIGNUM *rem, void (*callback)(int, int, void *), void *cb_arg);
typedef int (*ossl_BN_is_prime_t)(const ossl_BIGNUM *p, int nchecks, void (*callback)(int, int, void *), ossl_BN_CTX *ctx, void *cb_arg);
typedef int (*ossl_BN_is_prime_fasttest_t)(const ossl_BIGNUM *p, int nchecks, void (*callback)(int, int, void *), ossl_BN_CTX *ctx, void *cb_arg, int do_trial_division);
typedef int (*ossl_BN_is_prime_ex_t)(const ossl_BIGNUM *p, int nchecks, ossl_BN_CTX *ctx, ossl_BN_GENCB *cb);
typedef int (*ossl_BN_is_prime_fasttest_ex_t)(const ossl_BIGNUM *p, int nchecks, ossl_BN_CTX *ctx, int do_trial_division, ossl_BN_GENCB *cb);
typedef int (*ossl_BN_generate_prime_ex2_t)(ossl_BIGNUM *ret, int bits, int safe, const ossl_BIGNUM *add, const ossl_BIGNUM *rem, ossl_BN_GENCB *cb, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_generate_prime_ex_t)(ossl_BIGNUM *ret, int bits, int safe, const ossl_BIGNUM *add, const ossl_BIGNUM *rem, ossl_BN_GENCB *cb);
typedef int (*ossl_BN_check_prime_t)(const ossl_BIGNUM *p, ossl_BN_CTX *ctx, ossl_BN_GENCB *cb);
typedef int (*ossl_BN_X931_generate_Xpq_t)(ossl_BIGNUM *Xp, ossl_BIGNUM *Xq, int nbits, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_X931_derive_prime_ex_t)(ossl_BIGNUM *p, ossl_BIGNUM *p1, ossl_BIGNUM *p2, const ossl_BIGNUM *Xp, const ossl_BIGNUM *Xp1, const ossl_BIGNUM *Xp2, const ossl_BIGNUM *e, ossl_BN_CTX *ctx, ossl_BN_GENCB *cb);
typedef int (*ossl_BN_X931_generate_prime_ex_t)(ossl_BIGNUM *p, ossl_BIGNUM *p1, ossl_BIGNUM *p2, ossl_BIGNUM *Xp1, ossl_BIGNUM *Xp2, const ossl_BIGNUM *Xp, const ossl_BIGNUM *e, ossl_BN_CTX *ctx, ossl_BN_GENCB *cb);
typedef ossl_BN_MONT_CTX * (*ossl_BN_MONT_CTX_new_t)();
typedef int (*ossl_BN_mod_mul_montgomery_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *b, ossl_BN_MONT_CTX *mont, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_to_montgomery_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, ossl_BN_MONT_CTX *mont, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_from_montgomery_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, ossl_BN_MONT_CTX *mont, ossl_BN_CTX *ctx);
typedef void (*ossl_BN_MONT_CTX_free_t)(ossl_BN_MONT_CTX *mont);
typedef int (*ossl_BN_MONT_CTX_set_t)(ossl_BN_MONT_CTX *mont, const ossl_BIGNUM *mod, ossl_BN_CTX *ctx);
typedef ossl_BN_MONT_CTX * (*ossl_BN_MONT_CTX_copy_t)(ossl_BN_MONT_CTX *to, ossl_BN_MONT_CTX *from);
typedef ossl_BN_MONT_CTX * (*ossl_BN_MONT_CTX_set_locked_t)(ossl_BN_MONT_CTX **pmont, ossl_CRYPTO_RWLOCK *lock, const ossl_BIGNUM *mod, ossl_BN_CTX *ctx);
typedef ossl_BN_BLINDING * (*ossl_BN_BLINDING_new_t)(const ossl_BIGNUM *A, const ossl_BIGNUM *Ai, ossl_BIGNUM *mod);
typedef void (*ossl_BN_BLINDING_free_t)(ossl_BN_BLINDING *b);
typedef int (*ossl_BN_BLINDING_update_t)(ossl_BN_BLINDING *b, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_BLINDING_convert_t)(ossl_BIGNUM *n, ossl_BN_BLINDING *b, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_BLINDING_invert_t)(ossl_BIGNUM *n, ossl_BN_BLINDING *b, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_BLINDING_convert_ex_t)(ossl_BIGNUM *n, ossl_BIGNUM *r, ossl_BN_BLINDING *b, ossl_BN_CTX *_p3);
typedef int (*ossl_BN_BLINDING_invert_ex_t)(ossl_BIGNUM *n, const ossl_BIGNUM *r, ossl_BN_BLINDING *b, ossl_BN_CTX *_p3);
typedef int (*ossl_BN_BLINDING_is_current_thread_t)(ossl_BN_BLINDING *b);
typedef void (*ossl_BN_BLINDING_set_current_thread_t)(ossl_BN_BLINDING *b);
typedef int (*ossl_BN_BLINDING_lock_t)(ossl_BN_BLINDING *b);
typedef int (*ossl_BN_BLINDING_unlock_t)(ossl_BN_BLINDING *b);
typedef unsigned long (*ossl_BN_BLINDING_get_flags_t)(const ossl_BN_BLINDING *_p0);
typedef void (*ossl_BN_BLINDING_set_flags_t)(ossl_BN_BLINDING *_p0, unsigned long _p1);
typedef ossl_BN_BLINDING * (*ossl_BN_BLINDING_create_param_t)(ossl_BN_BLINDING *b, const ossl_BIGNUM *e, ossl_BIGNUM *m, ossl_BN_CTX *ctx, int (*bn_mod_exp)(ossl_BIGNUM *, const ossl_BIGNUM *, const ossl_BIGNUM *, const ossl_BIGNUM *, ossl_BN_CTX *, ossl_BN_MONT_CTX *), ossl_BN_MONT_CTX *m_ctx);
typedef void (*ossl_BN_set_params_t)(int mul, int high, int low, int mont);
typedef int (*ossl_BN_get_params_t)(int which);
typedef ossl_BN_RECP_CTX * (*ossl_BN_RECP_CTX_new_t)();
typedef void (*ossl_BN_RECP_CTX_free_t)(ossl_BN_RECP_CTX *recp);
typedef int (*ossl_BN_RECP_CTX_set_t)(ossl_BN_RECP_CTX *recp, const ossl_BIGNUM *rdiv, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_mod_mul_reciprocal_t)(ossl_BIGNUM *r, const ossl_BIGNUM *x, const ossl_BIGNUM *y, ossl_BN_RECP_CTX *recp, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_mod_exp_recp_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *p, const ossl_BIGNUM *m, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_div_recp_t)(ossl_BIGNUM *dv, ossl_BIGNUM *rem, const ossl_BIGNUM *m, ossl_BN_RECP_CTX *recp, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_GF2m_add_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *b);
typedef int (*ossl_BN_GF2m_mod_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *p);
typedef int (*ossl_BN_GF2m_mod_mul_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *b, const ossl_BIGNUM *p, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_GF2m_mod_sqr_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *p, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_GF2m_mod_inv_t)(ossl_BIGNUM *r, const ossl_BIGNUM *b, const ossl_BIGNUM *p, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_GF2m_mod_div_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *b, const ossl_BIGNUM *p, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_GF2m_mod_exp_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *b, const ossl_BIGNUM *p, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_GF2m_mod_sqrt_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *p, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_GF2m_mod_solve_quad_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *p, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_GF2m_mod_arr_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const int p[]);
typedef int (*ossl_BN_GF2m_mod_mul_arr_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *b, const int p[], ossl_BN_CTX *ctx);
typedef int (*ossl_BN_GF2m_mod_sqr_arr_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const int p[], ossl_BN_CTX *ctx);
typedef int (*ossl_BN_GF2m_mod_inv_arr_t)(ossl_BIGNUM *r, const ossl_BIGNUM *b, const int p[], ossl_BN_CTX *ctx);
typedef int (*ossl_BN_GF2m_mod_div_arr_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *b, const int p[], ossl_BN_CTX *ctx);
typedef int (*ossl_BN_GF2m_mod_exp_arr_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *b, const int p[], ossl_BN_CTX *ctx);
typedef int (*ossl_BN_GF2m_mod_sqrt_arr_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const int p[], ossl_BN_CTX *ctx);
typedef int (*ossl_BN_GF2m_mod_solve_quad_arr_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const int p[], ossl_BN_CTX *ctx);
typedef int (*ossl_BN_GF2m_poly2arr_t)(const ossl_BIGNUM *a, int p[], int max);
typedef int (*ossl_BN_GF2m_arr2poly_t)(const int p[], ossl_BIGNUM *a);
typedef int (*ossl_BN_nist_mod_192_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *p, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_nist_mod_224_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *p, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_nist_mod_256_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *p, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_nist_mod_384_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *p, ossl_BN_CTX *ctx);
typedef int (*ossl_BN_nist_mod_521_t)(ossl_BIGNUM *r, const ossl_BIGNUM *a, const ossl_BIGNUM *p, ossl_BN_CTX *ctx);
typedef const ossl_BIGNUM * (*ossl_BN_get0_nist_prime_192_t)();
typedef const ossl_BIGNUM * (*ossl_BN_get0_nist_prime_224_t)();
typedef const ossl_BIGNUM * (*ossl_BN_get0_nist_prime_256_t)();
typedef const ossl_BIGNUM * (*ossl_BN_get0_nist_prime_384_t)();
typedef const ossl_BIGNUM * (*ossl_BN_get0_nist_prime_521_t)();
typedef int (*BN_nist_mod_func_ret_t)(ossl_BIGNUM *, const ossl_BIGNUM *, const ossl_BIGNUM *, ossl_BN_CTX *);
typedef BN_nist_mod_func_ret_t (*ossl_BN_nist_mod_func_t)(const ossl_BIGNUM *p);
typedef int (*ossl_BN_generate_dsa_nonce_t)(ossl_BIGNUM *out, const ossl_BIGNUM *range, const ossl_BIGNUM *priv, const unsigned char *message, size_t message_len, ossl_BN_CTX *ctx);
typedef ossl_BIGNUM * (*ossl_BN_get_rfc2409_prime_768_t)(ossl_BIGNUM *bn);
typedef ossl_BIGNUM * (*ossl_BN_get_rfc2409_prime_1024_t)(ossl_BIGNUM *bn);
typedef ossl_BIGNUM * (*ossl_BN_get_rfc3526_prime_1536_t)(ossl_BIGNUM *bn);
typedef ossl_BIGNUM * (*ossl_BN_get_rfc3526_prime_2048_t)(ossl_BIGNUM *bn);
typedef ossl_BIGNUM * (*ossl_BN_get_rfc3526_prime_3072_t)(ossl_BIGNUM *bn);
typedef ossl_BIGNUM * (*ossl_BN_get_rfc3526_prime_4096_t)(ossl_BIGNUM *bn);
typedef ossl_BIGNUM * (*ossl_BN_get_rfc3526_prime_6144_t)(ossl_BIGNUM *bn);
typedef ossl_BIGNUM * (*ossl_BN_get_rfc3526_prime_8192_t)(ossl_BIGNUM *bn);
typedef int (*ossl_BN_bntest_rand_t)(ossl_BIGNUM *rnd, int bits, int top, int bottom);
typedef ossl_ASN1_SEQUENCE_ANY * (*ossl_d2i_ASN1_SEQUENCE_ANY_t)(ossl_ASN1_SEQUENCE_ANY **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ASN1_SEQUENCE_ANY_t)(const ossl_ASN1_SEQUENCE_ANY *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_ASN1_SEQUENCE_ANY_it_t)();
typedef ossl_ASN1_SEQUENCE_ANY * (*ossl_d2i_ASN1_SET_ANY_t)(ossl_ASN1_SEQUENCE_ANY **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ASN1_SET_ANY_t)(const ossl_ASN1_SEQUENCE_ANY *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_ASN1_SET_ANY_it_t)();
typedef ossl_ASN1_TYPE * (*ossl_ASN1_TYPE_new_t)();
typedef void (*ossl_ASN1_TYPE_free_t)(ossl_ASN1_TYPE *a);
typedef ossl_ASN1_TYPE * (*ossl_d2i_ASN1_TYPE_t)(ossl_ASN1_TYPE **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ASN1_TYPE_t)(const ossl_ASN1_TYPE *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_ASN1_ANY_it_t)();
typedef int (*ossl_ASN1_TYPE_get_t)(const ossl_ASN1_TYPE *a);
typedef void (*ossl_ASN1_TYPE_set_t)(ossl_ASN1_TYPE *a, int type, void *value);
typedef int (*ossl_ASN1_TYPE_set1_t)(ossl_ASN1_TYPE *a, int type, const void *value);
typedef int (*ossl_ASN1_TYPE_cmp_t)(const ossl_ASN1_TYPE *a, const ossl_ASN1_TYPE *b);
typedef ossl_ASN1_TYPE * (*ossl_ASN1_TYPE_pack_sequence_t)(const ossl_ASN1_ITEM *it, void *s, ossl_ASN1_TYPE **t);
typedef void * (*ossl_ASN1_TYPE_unpack_sequence_t)(const ossl_ASN1_ITEM *it, const ossl_ASN1_TYPE *t);
typedef ossl_ASN1_OBJECT * (*ossl_ASN1_OBJECT_new_t)();
typedef void (*ossl_ASN1_OBJECT_free_t)(ossl_ASN1_OBJECT *a);
typedef ossl_ASN1_OBJECT * (*ossl_d2i_ASN1_OBJECT_t)(ossl_ASN1_OBJECT **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ASN1_OBJECT_t)(const ossl_ASN1_OBJECT *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_ASN1_OBJECT_it_t)();
typedef ossl_ASN1_STRING * (*ossl_ASN1_STRING_new_t)();
typedef void (*ossl_ASN1_STRING_free_t)(ossl_ASN1_STRING *a);
typedef void (*ossl_ASN1_STRING_clear_free_t)(ossl_ASN1_STRING *a);
typedef int (*ossl_ASN1_STRING_copy_t)(ossl_ASN1_STRING *dst, const ossl_ASN1_STRING *str);
typedef ossl_ASN1_STRING * (*ossl_ASN1_STRING_dup_t)(const ossl_ASN1_STRING *a);
typedef ossl_ASN1_STRING * (*ossl_ASN1_STRING_type_new_t)(int type);
typedef int (*ossl_ASN1_STRING_cmp_t)(const ossl_ASN1_STRING *a, const ossl_ASN1_STRING *b);
typedef int (*ossl_ASN1_STRING_set_t)(ossl_ASN1_STRING *str, const void *data, int len);
typedef void (*ossl_ASN1_STRING_set0_t)(ossl_ASN1_STRING *str, void *data, int len);
typedef int (*ossl_ASN1_STRING_length_t)(const ossl_ASN1_STRING *x);
typedef void (*ossl_ASN1_STRING_length_set_t)(ossl_ASN1_STRING *x, int n);
typedef int (*ossl_ASN1_STRING_type_t)(const ossl_ASN1_STRING *x);
typedef unsigned char * (*ossl_ASN1_STRING_data_t)(ossl_ASN1_STRING *x);
typedef const unsigned char * (*ossl_ASN1_STRING_get0_data_t)(const ossl_ASN1_STRING *x);
typedef ossl_ASN1_BIT_STRING * (*ossl_ASN1_BIT_STRING_new_t)();
typedef void (*ossl_ASN1_BIT_STRING_free_t)(ossl_ASN1_BIT_STRING *a);
typedef ossl_ASN1_BIT_STRING * (*ossl_d2i_ASN1_BIT_STRING_t)(ossl_ASN1_BIT_STRING **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ASN1_BIT_STRING_t)(const ossl_ASN1_BIT_STRING *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_ASN1_BIT_STRING_it_t)();
typedef int (*ossl_ASN1_BIT_STRING_set_t)(ossl_ASN1_BIT_STRING *a, unsigned char *d, int length);
typedef int (*ossl_ASN1_BIT_STRING_set_bit_t)(ossl_ASN1_BIT_STRING *a, int n, int value);
typedef int (*ossl_ASN1_BIT_STRING_get_bit_t)(const ossl_ASN1_BIT_STRING *a, int n);
typedef int (*ossl_ASN1_BIT_STRING_check_t)(const ossl_ASN1_BIT_STRING *a, const unsigned char *flags, int flags_len);
typedef int (*ossl_ASN1_BIT_STRING_name_print_t)(ossl_BIO *out, ossl_ASN1_BIT_STRING *bs, ossl_BIT_STRING_BITNAME *tbl, int indent);
typedef int (*ossl_ASN1_BIT_STRING_num_asc_t)(const char *name, ossl_BIT_STRING_BITNAME *tbl);
typedef int (*ossl_ASN1_BIT_STRING_set_asc_t)(ossl_ASN1_BIT_STRING *bs, const char *name, int value, ossl_BIT_STRING_BITNAME *tbl);
typedef ossl_ASN1_INTEGER * (*ossl_ASN1_INTEGER_new_t)();
typedef void (*ossl_ASN1_INTEGER_free_t)(ossl_ASN1_INTEGER *a);
typedef ossl_ASN1_INTEGER * (*ossl_d2i_ASN1_INTEGER_t)(ossl_ASN1_INTEGER **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ASN1_INTEGER_t)(const ossl_ASN1_INTEGER *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_ASN1_INTEGER_it_t)();
typedef ossl_ASN1_INTEGER * (*ossl_d2i_ASN1_UINTEGER_t)(ossl_ASN1_INTEGER **a, const unsigned char **pp, long length);
typedef ossl_ASN1_INTEGER * (*ossl_ASN1_INTEGER_dup_t)(const ossl_ASN1_INTEGER *a);
typedef int (*ossl_ASN1_INTEGER_cmp_t)(const ossl_ASN1_INTEGER *x, const ossl_ASN1_INTEGER *y);
typedef ossl_ASN1_ENUMERATED * (*ossl_ASN1_ENUMERATED_new_t)();
typedef void (*ossl_ASN1_ENUMERATED_free_t)(ossl_ASN1_ENUMERATED *a);
typedef ossl_ASN1_ENUMERATED * (*ossl_d2i_ASN1_ENUMERATED_t)(ossl_ASN1_ENUMERATED **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ASN1_ENUMERATED_t)(const ossl_ASN1_ENUMERATED *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_ASN1_ENUMERATED_it_t)();
typedef int (*ossl_ASN1_UTCTIME_check_t)(const ossl_ASN1_UTCTIME *a);
typedef ossl_ASN1_UTCTIME * (*ossl_ASN1_UTCTIME_set_t)(ossl_ASN1_UTCTIME *s, time_t t);
typedef ossl_ASN1_UTCTIME * (*ossl_ASN1_UTCTIME_adj_t)(ossl_ASN1_UTCTIME *s, time_t t, int offset_day, long offset_sec);
typedef int (*ossl_ASN1_UTCTIME_set_string_t)(ossl_ASN1_UTCTIME *s, const char *str);
typedef int (*ossl_ASN1_UTCTIME_cmp_time_t_t)(const ossl_ASN1_UTCTIME *s, time_t t);
typedef int (*ossl_ASN1_GENERALIZEDTIME_check_t)(const ossl_ASN1_GENERALIZEDTIME *a);
typedef ossl_ASN1_GENERALIZEDTIME * (*ossl_ASN1_GENERALIZEDTIME_set_t)(ossl_ASN1_GENERALIZEDTIME *s, time_t t);
typedef ossl_ASN1_GENERALIZEDTIME * (*ossl_ASN1_GENERALIZEDTIME_adj_t)(ossl_ASN1_GENERALIZEDTIME *s, time_t t, int offset_day, long offset_sec);
typedef int (*ossl_ASN1_GENERALIZEDTIME_set_string_t)(ossl_ASN1_GENERALIZEDTIME *s, const char *str);
typedef int (*ossl_ASN1_TIME_diff_t)(int *pday, int *psec, const ossl_ASN1_TIME *from, const ossl_ASN1_TIME *to);
typedef ossl_ASN1_OCTET_STRING * (*ossl_ASN1_OCTET_STRING_new_t)();
typedef void (*ossl_ASN1_OCTET_STRING_free_t)(ossl_ASN1_OCTET_STRING *a);
typedef ossl_ASN1_OCTET_STRING * (*ossl_d2i_ASN1_OCTET_STRING_t)(ossl_ASN1_OCTET_STRING **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ASN1_OCTET_STRING_t)(const ossl_ASN1_OCTET_STRING *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_ASN1_OCTET_STRING_it_t)();
typedef ossl_ASN1_OCTET_STRING * (*ossl_ASN1_OCTET_STRING_dup_t)(const ossl_ASN1_OCTET_STRING *a);
typedef int (*ossl_ASN1_OCTET_STRING_cmp_t)(const ossl_ASN1_OCTET_STRING *a, const ossl_ASN1_OCTET_STRING *b);
typedef int (*ossl_ASN1_OCTET_STRING_set_t)(ossl_ASN1_OCTET_STRING *str, const unsigned char *data, int len);
typedef ossl_ASN1_VISIBLESTRING * (*ossl_ASN1_VISIBLESTRING_new_t)();
typedef void (*ossl_ASN1_VISIBLESTRING_free_t)(ossl_ASN1_VISIBLESTRING *a);
typedef ossl_ASN1_VISIBLESTRING * (*ossl_d2i_ASN1_VISIBLESTRING_t)(ossl_ASN1_VISIBLESTRING **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ASN1_VISIBLESTRING_t)(const ossl_ASN1_VISIBLESTRING *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_ASN1_VISIBLESTRING_it_t)();
typedef ossl_ASN1_UNIVERSALSTRING * (*ossl_ASN1_UNIVERSALSTRING_new_t)();
typedef void (*ossl_ASN1_UNIVERSALSTRING_free_t)(ossl_ASN1_UNIVERSALSTRING *a);
typedef ossl_ASN1_UNIVERSALSTRING * (*ossl_d2i_ASN1_UNIVERSALSTRING_t)(ossl_ASN1_UNIVERSALSTRING **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ASN1_UNIVERSALSTRING_t)(const ossl_ASN1_UNIVERSALSTRING *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_ASN1_UNIVERSALSTRING_it_t)();
typedef ossl_ASN1_UTF8STRING * (*ossl_ASN1_UTF8STRING_new_t)();
typedef void (*ossl_ASN1_UTF8STRING_free_t)(ossl_ASN1_UTF8STRING *a);
typedef ossl_ASN1_UTF8STRING * (*ossl_d2i_ASN1_UTF8STRING_t)(ossl_ASN1_UTF8STRING **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ASN1_UTF8STRING_t)(const ossl_ASN1_UTF8STRING *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_ASN1_UTF8STRING_it_t)();
typedef ossl_ASN1_NULL * (*ossl_ASN1_NULL_new_t)();
typedef void (*ossl_ASN1_NULL_free_t)(ossl_ASN1_NULL *a);
typedef ossl_ASN1_NULL * (*ossl_d2i_ASN1_NULL_t)(ossl_ASN1_NULL **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ASN1_NULL_t)(const ossl_ASN1_NULL *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_ASN1_NULL_it_t)();
typedef ossl_ASN1_BMPSTRING * (*ossl_ASN1_BMPSTRING_new_t)();
typedef void (*ossl_ASN1_BMPSTRING_free_t)(ossl_ASN1_BMPSTRING *a);
typedef ossl_ASN1_BMPSTRING * (*ossl_d2i_ASN1_BMPSTRING_t)(ossl_ASN1_BMPSTRING **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ASN1_BMPSTRING_t)(const ossl_ASN1_BMPSTRING *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_ASN1_BMPSTRING_it_t)();
typedef int (*ossl_UTF8_getc_t)(const unsigned char *str, int len, unsigned long *val);
typedef int (*ossl_UTF8_putc_t)(unsigned char *str, int len, unsigned long value);
typedef ossl_ASN1_STRING * (*ossl_ASN1_PRINTABLE_new_t)();
typedef void (*ossl_ASN1_PRINTABLE_free_t)(ossl_ASN1_STRING *a);
typedef ossl_ASN1_STRING * (*ossl_d2i_ASN1_PRINTABLE_t)(ossl_ASN1_STRING **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ASN1_PRINTABLE_t)(const ossl_ASN1_STRING *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_ASN1_PRINTABLE_it_t)();
typedef ossl_ASN1_STRING * (*ossl_DIRECTORYSTRING_new_t)();
typedef void (*ossl_DIRECTORYSTRING_free_t)(ossl_ASN1_STRING *a);
typedef ossl_ASN1_STRING * (*ossl_d2i_DIRECTORYSTRING_t)(ossl_ASN1_STRING **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_DIRECTORYSTRING_t)(const ossl_ASN1_STRING *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_DIRECTORYSTRING_it_t)();
typedef ossl_ASN1_STRING * (*ossl_DISPLAYTEXT_new_t)();
typedef void (*ossl_DISPLAYTEXT_free_t)(ossl_ASN1_STRING *a);
typedef ossl_ASN1_STRING * (*ossl_d2i_DISPLAYTEXT_t)(ossl_ASN1_STRING **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_DISPLAYTEXT_t)(const ossl_ASN1_STRING *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_DISPLAYTEXT_it_t)();
typedef ossl_ASN1_PRINTABLESTRING * (*ossl_ASN1_PRINTABLESTRING_new_t)();
typedef void (*ossl_ASN1_PRINTABLESTRING_free_t)(ossl_ASN1_PRINTABLESTRING *a);
typedef ossl_ASN1_PRINTABLESTRING * (*ossl_d2i_ASN1_PRINTABLESTRING_t)(ossl_ASN1_PRINTABLESTRING **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ASN1_PRINTABLESTRING_t)(const ossl_ASN1_PRINTABLESTRING *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_ASN1_PRINTABLESTRING_it_t)();
typedef ossl_ASN1_T61STRING * (*ossl_ASN1_T61STRING_new_t)();
typedef void (*ossl_ASN1_T61STRING_free_t)(ossl_ASN1_T61STRING *a);
typedef ossl_ASN1_T61STRING * (*ossl_d2i_ASN1_T61STRING_t)(ossl_ASN1_T61STRING **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ASN1_T61STRING_t)(const ossl_ASN1_T61STRING *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_ASN1_T61STRING_it_t)();
typedef ossl_ASN1_IA5STRING * (*ossl_ASN1_IA5STRING_new_t)();
typedef void (*ossl_ASN1_IA5STRING_free_t)(ossl_ASN1_IA5STRING *a);
typedef ossl_ASN1_IA5STRING * (*ossl_d2i_ASN1_IA5STRING_t)(ossl_ASN1_IA5STRING **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ASN1_IA5STRING_t)(const ossl_ASN1_IA5STRING *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_ASN1_IA5STRING_it_t)();
typedef ossl_ASN1_GENERALSTRING * (*ossl_ASN1_GENERALSTRING_new_t)();
typedef void (*ossl_ASN1_GENERALSTRING_free_t)(ossl_ASN1_GENERALSTRING *a);
typedef ossl_ASN1_GENERALSTRING * (*ossl_d2i_ASN1_GENERALSTRING_t)(ossl_ASN1_GENERALSTRING **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ASN1_GENERALSTRING_t)(const ossl_ASN1_GENERALSTRING *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_ASN1_GENERALSTRING_it_t)();
typedef ossl_ASN1_UTCTIME * (*ossl_ASN1_UTCTIME_new_t)();
typedef void (*ossl_ASN1_UTCTIME_free_t)(ossl_ASN1_UTCTIME *a);
typedef ossl_ASN1_UTCTIME * (*ossl_d2i_ASN1_UTCTIME_t)(ossl_ASN1_UTCTIME **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ASN1_UTCTIME_t)(const ossl_ASN1_UTCTIME *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_ASN1_UTCTIME_it_t)();
typedef ossl_ASN1_GENERALIZEDTIME * (*ossl_ASN1_GENERALIZEDTIME_new_t)();
typedef void (*ossl_ASN1_GENERALIZEDTIME_free_t)(ossl_ASN1_GENERALIZEDTIME *a);
typedef ossl_ASN1_GENERALIZEDTIME * (*ossl_d2i_ASN1_GENERALIZEDTIME_t)(ossl_ASN1_GENERALIZEDTIME **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ASN1_GENERALIZEDTIME_t)(const ossl_ASN1_GENERALIZEDTIME *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_ASN1_GENERALIZEDTIME_it_t)();
typedef ossl_ASN1_TIME * (*ossl_ASN1_TIME_new_t)();
typedef void (*ossl_ASN1_TIME_free_t)(ossl_ASN1_TIME *a);
typedef ossl_ASN1_TIME * (*ossl_d2i_ASN1_TIME_t)(ossl_ASN1_TIME **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ASN1_TIME_t)(const ossl_ASN1_TIME *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_ASN1_TIME_it_t)();
typedef ossl_ASN1_TIME * (*ossl_ASN1_TIME_dup_t)(const ossl_ASN1_TIME *a);
typedef ossl_ASN1_UTCTIME * (*ossl_ASN1_UTCTIME_dup_t)(const ossl_ASN1_UTCTIME *a);
typedef ossl_ASN1_GENERALIZEDTIME * (*ossl_ASN1_GENERALIZEDTIME_dup_t)(const ossl_ASN1_GENERALIZEDTIME *a);
typedef const ossl_ASN1_ITEM * (*ossl_ASN1_OCTET_STRING_NDEF_it_t)();
typedef ossl_ASN1_TIME * (*ossl_ASN1_TIME_set_t)(ossl_ASN1_TIME *s, time_t t);
typedef ossl_ASN1_TIME * (*ossl_ASN1_TIME_adj_t)(ossl_ASN1_TIME *s, time_t t, int offset_day, long offset_sec);
typedef int (*ossl_ASN1_TIME_check_t)(const ossl_ASN1_TIME *t);
typedef ossl_ASN1_GENERALIZEDTIME * (*ossl_ASN1_TIME_to_generalizedtime_t)(const ossl_ASN1_TIME *t, ossl_ASN1_GENERALIZEDTIME **out);
typedef int (*ossl_ASN1_TIME_set_string_t)(ossl_ASN1_TIME *s, const char *str);
typedef int (*ossl_ASN1_TIME_set_string_X509_t)(ossl_ASN1_TIME *s, const char *str);
typedef int (*ossl_ASN1_TIME_to_tm_t)(const ossl_ASN1_TIME *s, struct tm *tm);
typedef int (*ossl_ASN1_TIME_normalize_t)(ossl_ASN1_TIME *s);
typedef int (*ossl_ASN1_TIME_cmp_time_t_t)(const ossl_ASN1_TIME *s, time_t t);
typedef int (*ossl_ASN1_TIME_compare_t)(const ossl_ASN1_TIME *a, const ossl_ASN1_TIME *b);
typedef int (*ossl_i2a_ASN1_INTEGER_t)(ossl_BIO *bp, const ossl_ASN1_INTEGER *a);
typedef int (*ossl_a2i_ASN1_INTEGER_t)(ossl_BIO *bp, ossl_ASN1_INTEGER *bs, char *buf, int size);
typedef int (*ossl_i2a_ASN1_ENUMERATED_t)(ossl_BIO *bp, const ossl_ASN1_ENUMERATED *a);
typedef int (*ossl_a2i_ASN1_ENUMERATED_t)(ossl_BIO *bp, ossl_ASN1_ENUMERATED *bs, char *buf, int size);
typedef int (*ossl_i2a_ASN1_OBJECT_t)(ossl_BIO *bp, const ossl_ASN1_OBJECT *a);
typedef int (*ossl_a2i_ASN1_STRING_t)(ossl_BIO *bp, ossl_ASN1_STRING *bs, char *buf, int size);
typedef int (*ossl_i2a_ASN1_STRING_t)(ossl_BIO *bp, const ossl_ASN1_STRING *a, int type);
typedef int (*ossl_i2t_ASN1_OBJECT_t)(char *buf, int buf_len, const ossl_ASN1_OBJECT *a);
typedef int (*ossl_a2d_ASN1_OBJECT_t)(unsigned char *out, int olen, const char *buf, int num);
typedef ossl_ASN1_OBJECT * (*ossl_ASN1_OBJECT_create_t)(int nid, unsigned char *data, int len, const char *sn, const char *ln);
typedef int (*ossl_ASN1_INTEGER_get_int64_t)(int64_t *pr, const ossl_ASN1_INTEGER *a);
typedef int (*ossl_ASN1_INTEGER_set_int64_t)(ossl_ASN1_INTEGER *a, int64_t r);
typedef int (*ossl_ASN1_INTEGER_get_uint64_t)(uint64_t *pr, const ossl_ASN1_INTEGER *a);
typedef int (*ossl_ASN1_INTEGER_set_uint64_t)(ossl_ASN1_INTEGER *a, uint64_t r);
typedef int (*ossl_ASN1_INTEGER_set_t)(ossl_ASN1_INTEGER *a, long v);
typedef long (*ossl_ASN1_INTEGER_get_t)(const ossl_ASN1_INTEGER *a);
typedef ossl_ASN1_INTEGER * (*ossl_BN_to_ASN1_INTEGER_t)(const ossl_BIGNUM *bn, ossl_ASN1_INTEGER *ai);
typedef ossl_BIGNUM * (*ossl_ASN1_INTEGER_to_BN_t)(const ossl_ASN1_INTEGER *ai, ossl_BIGNUM *bn);
typedef int (*ossl_ASN1_ENUMERATED_get_int64_t)(int64_t *pr, const ossl_ASN1_ENUMERATED *a);
typedef int (*ossl_ASN1_ENUMERATED_set_int64_t)(ossl_ASN1_ENUMERATED *a, int64_t r);
typedef int (*ossl_ASN1_ENUMERATED_set_t)(ossl_ASN1_ENUMERATED *a, long v);
typedef long (*ossl_ASN1_ENUMERATED_get_t)(const ossl_ASN1_ENUMERATED *a);
typedef ossl_ASN1_ENUMERATED * (*ossl_BN_to_ASN1_ENUMERATED_t)(const ossl_BIGNUM *bn, ossl_ASN1_ENUMERATED *ai);
typedef ossl_BIGNUM * (*ossl_ASN1_ENUMERATED_to_BN_t)(const ossl_ASN1_ENUMERATED *ai, ossl_BIGNUM *bn);
typedef int (*ossl_ASN1_PRINTABLE_type_t)(const unsigned char *s, int max);
typedef unsigned long (*ossl_ASN1_tag2bit_t)(int tag);
typedef int (*ossl_ASN1_get_object_t)(const unsigned char **pp, long *plength, int *ptag, int *pclass, long omax);
typedef int (*ossl_ASN1_check_infinite_end_t)(unsigned char **p, long len);
typedef int (*ossl_ASN1_const_check_infinite_end_t)(const unsigned char **p, long len);
typedef void (*ossl_ASN1_put_object_t)(unsigned char **pp, int constructed, int length, int tag, int xclass);
typedef int (*ossl_ASN1_put_eoc_t)(unsigned char **pp);
typedef int (*ossl_ASN1_object_size_t)(int constructed, int length, int tag);
typedef void * (*ossl_ASN1_dup_t)(ossl_i2d_of_void *i2d, ossl_d2i_of_void *d2i, const void *x);
typedef void * (*ossl_ASN1_item_dup_t)(const ossl_ASN1_ITEM *it, const void *x);
typedef int (*ossl_ASN1_item_sign_ex_t)(const ossl_ASN1_ITEM *it, ossl_X509_ALGOR *algor1, ossl_X509_ALGOR *algor2, ossl_ASN1_BIT_STRING *signature, const void *data, const ossl_ASN1_OCTET_STRING *id, ossl_EVP_PKEY *pkey, const ossl_EVP_MD *md, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_ASN1_item_verify_ex_t)(const ossl_ASN1_ITEM *it, const ossl_X509_ALGOR *alg, const ossl_ASN1_BIT_STRING *signature, const void *data, const ossl_ASN1_OCTET_STRING *id, ossl_EVP_PKEY *pkey, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef void * (*ossl_ASN1_d2i_fp_t)(void *(*xnew)(void), ossl_d2i_of_void *d2i, FILE *in, void **x);
typedef void * (*ossl_ASN1_item_d2i_fp_ex_t)(const ossl_ASN1_ITEM *it, FILE *in, void *x, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef void * (*ossl_ASN1_item_d2i_fp_t)(const ossl_ASN1_ITEM *it, FILE *in, void *x);
typedef int (*ossl_ASN1_i2d_fp_t)(ossl_i2d_of_void *i2d, FILE *out, const void *x);
typedef int (*ossl_ASN1_item_i2d_fp_t)(const ossl_ASN1_ITEM *it, FILE *out, const void *x);
typedef int (*ossl_ASN1_STRING_print_ex_fp_t)(FILE *fp, const ossl_ASN1_STRING *str, unsigned long flags);
typedef int (*ossl_ASN1_STRING_to_UTF8_t)(unsigned char **out, const ossl_ASN1_STRING *in);
typedef void * (*ossl_ASN1_d2i_bio_t)(void *(*xnew)(void), ossl_d2i_of_void *d2i, ossl_BIO *in, void **x);
typedef void * (*ossl_ASN1_item_d2i_bio_ex_t)(const ossl_ASN1_ITEM *it, ossl_BIO *in, void *pval, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef void * (*ossl_ASN1_item_d2i_bio_t)(const ossl_ASN1_ITEM *it, ossl_BIO *in, void *pval);
typedef int (*ossl_ASN1_i2d_bio_t)(ossl_i2d_of_void *i2d, ossl_BIO *out, const void *x);
typedef int (*ossl_ASN1_item_i2d_bio_t)(const ossl_ASN1_ITEM *it, ossl_BIO *out, const void *x);
typedef ossl_BIO * (*ossl_ASN1_item_i2d_mem_bio_t)(const ossl_ASN1_ITEM *it, const ossl_ASN1_VALUE *val);
typedef int (*ossl_ASN1_UTCTIME_print_t)(ossl_BIO *fp, const ossl_ASN1_UTCTIME *a);
typedef int (*ossl_ASN1_GENERALIZEDTIME_print_t)(ossl_BIO *fp, const ossl_ASN1_GENERALIZEDTIME *a);
typedef int (*ossl_ASN1_TIME_print_t)(ossl_BIO *bp, const ossl_ASN1_TIME *tm);
typedef int (*ossl_ASN1_TIME_print_ex_t)(ossl_BIO *bp, const ossl_ASN1_TIME *tm, unsigned long flags);
typedef int (*ossl_ASN1_STRING_print_t)(ossl_BIO *bp, const ossl_ASN1_STRING *v);
typedef int (*ossl_ASN1_STRING_print_ex_t)(ossl_BIO *out, const ossl_ASN1_STRING *str, unsigned long flags);
typedef int (*ossl_ASN1_buf_print_t)(ossl_BIO *bp, const unsigned char *buf, size_t buflen, int off);
typedef int (*ossl_ASN1_bn_print_t)(ossl_BIO *bp, const char *number, const ossl_BIGNUM *num, unsigned char *buf, int off);
typedef int (*ossl_ASN1_parse_t)(ossl_BIO *bp, const unsigned char *pp, long len, int indent);
typedef int (*ossl_ASN1_parse_dump_t)(ossl_BIO *bp, const unsigned char *pp, long len, int indent, int dump);
typedef const char * (*ossl_ASN1_tag2str_t)(int tag);
typedef int (*ossl_ASN1_UNIVERSALSTRING_to_string_t)(ossl_ASN1_UNIVERSALSTRING *s);
typedef int (*ossl_ASN1_TYPE_set_octetstring_t)(ossl_ASN1_TYPE *a, unsigned char *data, int len);
typedef int (*ossl_ASN1_TYPE_get_octetstring_t)(const ossl_ASN1_TYPE *a, unsigned char *data, int max_len);
typedef int (*ossl_ASN1_TYPE_set_int_octetstring_t)(ossl_ASN1_TYPE *a, long num, unsigned char *data, int len);
typedef int (*ossl_ASN1_TYPE_get_int_octetstring_t)(const ossl_ASN1_TYPE *a, long *num, unsigned char *data, int max_len);
typedef void * (*ossl_ASN1_item_unpack_t)(const ossl_ASN1_STRING *oct, const ossl_ASN1_ITEM *it);
typedef ossl_ASN1_STRING * (*ossl_ASN1_item_pack_t)(void *obj, const ossl_ASN1_ITEM *it, ossl_ASN1_OCTET_STRING **oct);
typedef void (*ossl_ASN1_STRING_set_default_mask_t)(unsigned long mask);
typedef int (*ossl_ASN1_STRING_set_default_mask_asc_t)(const char *p);
typedef unsigned long (*ossl_ASN1_STRING_get_default_mask_t)();
typedef int (*ossl_ASN1_mbstring_copy_t)(ossl_ASN1_STRING **out, const unsigned char *in, int len, int inform, unsigned long mask);
typedef int (*ossl_ASN1_mbstring_ncopy_t)(ossl_ASN1_STRING **out, const unsigned char *in, int len, int inform, unsigned long mask, long minsize, long maxsize);
typedef ossl_ASN1_STRING * (*ossl_ASN1_STRING_set_by_NID_t)(ossl_ASN1_STRING **out, const unsigned char *in, int inlen, int inform, int nid);
typedef ossl_ASN1_STRING_TABLE * (*ossl_ASN1_STRING_TABLE_get_t)(int nid);
typedef int (*ossl_ASN1_STRING_TABLE_add_t)(int _p0, long _p1, long _p2, unsigned long _p3, unsigned long _p4);
typedef void (*ossl_ASN1_STRING_TABLE_cleanup_t)();
typedef ossl_ASN1_VALUE * (*ossl_ASN1_item_new_t)(const ossl_ASN1_ITEM *it);
typedef ossl_ASN1_VALUE * (*ossl_ASN1_item_new_ex_t)(const ossl_ASN1_ITEM *it, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef void (*ossl_ASN1_item_free_t)(ossl_ASN1_VALUE *val, const ossl_ASN1_ITEM *it);
typedef ossl_ASN1_VALUE * (*ossl_ASN1_item_d2i_ex_t)(ossl_ASN1_VALUE **val, const unsigned char **in, long len, const ossl_ASN1_ITEM *it, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef ossl_ASN1_VALUE * (*ossl_ASN1_item_d2i_t)(ossl_ASN1_VALUE **val, const unsigned char **in, long len, const ossl_ASN1_ITEM *it);
typedef int (*ossl_ASN1_item_i2d_t)(const ossl_ASN1_VALUE *val, unsigned char **out, const ossl_ASN1_ITEM *it);
typedef int (*ossl_ASN1_item_ndef_i2d_t)(const ossl_ASN1_VALUE *val, unsigned char **out, const ossl_ASN1_ITEM *it);
typedef void (*ossl_ASN1_add_oid_module_t)();
typedef void (*ossl_ASN1_add_stable_module_t)();
typedef ossl_ASN1_TYPE * (*ossl_ASN1_generate_nconf_t)(const char *str, ossl_CONF *nconf);
typedef ossl_ASN1_TYPE * (*ossl_ASN1_generate_v3_t)(const char *str, ossl_X509V3_CTX *cnf);
typedef int (*ossl_ASN1_str2mask_t)(const char *str, unsigned long *pmask);
typedef int (*ossl_ASN1_item_print_t)(ossl_BIO *out, const ossl_ASN1_VALUE *ifld, int indent, const ossl_ASN1_ITEM *it, const ossl_ASN1_PCTX *pctx);
typedef ossl_ASN1_PCTX * (*ossl_ASN1_PCTX_new_t)();
typedef void (*ossl_ASN1_PCTX_free_t)(ossl_ASN1_PCTX *p);
typedef unsigned long (*ossl_ASN1_PCTX_get_flags_t)(const ossl_ASN1_PCTX *p);
typedef void (*ossl_ASN1_PCTX_set_flags_t)(ossl_ASN1_PCTX *p, unsigned long flags);
typedef unsigned long (*ossl_ASN1_PCTX_get_nm_flags_t)(const ossl_ASN1_PCTX *p);
typedef void (*ossl_ASN1_PCTX_set_nm_flags_t)(ossl_ASN1_PCTX *p, unsigned long flags);
typedef unsigned long (*ossl_ASN1_PCTX_get_cert_flags_t)(const ossl_ASN1_PCTX *p);
typedef void (*ossl_ASN1_PCTX_set_cert_flags_t)(ossl_ASN1_PCTX *p, unsigned long flags);
typedef unsigned long (*ossl_ASN1_PCTX_get_oid_flags_t)(const ossl_ASN1_PCTX *p);
typedef void (*ossl_ASN1_PCTX_set_oid_flags_t)(ossl_ASN1_PCTX *p, unsigned long flags);
typedef unsigned long (*ossl_ASN1_PCTX_get_str_flags_t)(const ossl_ASN1_PCTX *p);
typedef void (*ossl_ASN1_PCTX_set_str_flags_t)(ossl_ASN1_PCTX *p, unsigned long flags);
typedef ossl_ASN1_SCTX * (*ossl_ASN1_SCTX_new_t)(int (*scan_cb)(ossl_ASN1_SCTX *));
typedef void (*ossl_ASN1_SCTX_free_t)(ossl_ASN1_SCTX *p);
typedef const ossl_ASN1_ITEM * (*ossl_ASN1_SCTX_get_item_t)(ossl_ASN1_SCTX *p);
typedef const ossl_ASN1_TEMPLATE * (*ossl_ASN1_SCTX_get_template_t)(ossl_ASN1_SCTX *p);
typedef unsigned long (*ossl_ASN1_SCTX_get_flags_t)(ossl_ASN1_SCTX *p);
typedef void (*ossl_ASN1_SCTX_set_app_data_t)(ossl_ASN1_SCTX *p, void *data);
typedef void * (*ossl_ASN1_SCTX_get_app_data_t)(ossl_ASN1_SCTX *p);
typedef const ossl_BIO_METHOD * (*ossl_BIO_f_asn1_t)();
typedef ossl_BIO * (*ossl_BIO_new_NDEF_t)(ossl_BIO *out, ossl_ASN1_VALUE *val, const ossl_ASN1_ITEM *it);
typedef int (*ossl_i2d_ASN1_bio_stream_t)(ossl_BIO *out, ossl_ASN1_VALUE *val, ossl_BIO *in, int flags, const ossl_ASN1_ITEM *it);
typedef int (*ossl_PEM_write_bio_ASN1_stream_t)(ossl_BIO *out, ossl_ASN1_VALUE *val, ossl_BIO *in, int flags, const char *hdr, const ossl_ASN1_ITEM *it);
typedef int (*ossl_SMIME_write_ASN1_t)(ossl_BIO *bio, ossl_ASN1_VALUE *val, ossl_BIO *data, int flags, int ctype_nid, int econt_nid, ossl_STACK_OF(ossl_X509_ALGOR) *mdalgs, const ossl_ASN1_ITEM *it);
typedef int (*ossl_SMIME_write_ASN1_ex_t)(ossl_BIO *bio, ossl_ASN1_VALUE *val, ossl_BIO *data, int flags, int ctype_nid, int econt_nid, ossl_STACK_OF(ossl_X509_ALGOR) *mdalgs, const ossl_ASN1_ITEM *it, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef ossl_ASN1_VALUE * (*ossl_SMIME_read_ASN1_t)(ossl_BIO *bio, ossl_BIO **bcont, const ossl_ASN1_ITEM *it);
typedef ossl_ASN1_VALUE * (*ossl_SMIME_read_ASN1_ex_t)(ossl_BIO *bio, int flags, ossl_BIO **bcont, const ossl_ASN1_ITEM *it, ossl_ASN1_VALUE **x, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_SMIME_crlf_copy_t)(ossl_BIO *in, ossl_BIO *out, int flags);
typedef int (*ossl_SMIME_text_t)(ossl_BIO *in, ossl_BIO *out);
typedef const ossl_ASN1_ITEM * (*ossl_ASN1_ITEM_lookup_t)(const char *name);
typedef const ossl_ASN1_ITEM * (*ossl_ASN1_ITEM_get_t)(size_t i);
typedef const ossl_ASN1_ITEM * (*ossl_ASN1_BOOLEAN_it_t)();
typedef const ossl_ASN1_ITEM * (*ossl_ASN1_TBOOLEAN_it_t)();
typedef const ossl_ASN1_ITEM * (*ossl_ASN1_FBOOLEAN_it_t)();
typedef const ossl_ASN1_ITEM * (*ossl_ASN1_SEQUENCE_it_t)();
typedef const ossl_ASN1_ITEM * (*ossl_CBIGNUM_it_t)();
typedef const ossl_ASN1_ITEM * (*ossl_BIGNUM_it_t)();
typedef const ossl_ASN1_ITEM * (*ossl_INT32_it_t)();
typedef const ossl_ASN1_ITEM * (*ossl_ZINT32_it_t)();
typedef const ossl_ASN1_ITEM * (*ossl_UINT32_it_t)();
typedef const ossl_ASN1_ITEM * (*ossl_ZUINT32_it_t)();
typedef const ossl_ASN1_ITEM * (*ossl_INT64_it_t)();
typedef const ossl_ASN1_ITEM * (*ossl_ZINT64_it_t)();
typedef const ossl_ASN1_ITEM * (*ossl_UINT64_it_t)();
typedef const ossl_ASN1_ITEM * (*ossl_ZUINT64_it_t)();
typedef const ossl_ASN1_ITEM * (*ossl_LONG_it_t)();
typedef const ossl_ASN1_ITEM * (*ossl_ZLONG_it_t)();
typedef int (*ossl_ASN1_item_ex_new_t)(ossl_ASN1_VALUE **pval, const ossl_ASN1_ITEM *it);
typedef void (*ossl_ASN1_item_ex_free_t)(ossl_ASN1_VALUE **pval, const ossl_ASN1_ITEM *it);
typedef int (*ossl_ASN1_item_ex_d2i_t)(ossl_ASN1_VALUE **pval, const unsigned char **in, long len, const ossl_ASN1_ITEM *it, int tag, int aclass, char opt, ossl_ASN1_TLC *ctx);
typedef int (*ossl_ASN1_item_ex_i2d_t)(const ossl_ASN1_VALUE **pval, unsigned char **out, const ossl_ASN1_ITEM *it, int tag, int aclass);
typedef int (*ossl_ASYNC_init_thread_t)(size_t max_size, size_t init_size);
typedef void (*ossl_ASYNC_cleanup_thread_t)();
typedef ossl_ASYNC_WAIT_CTX * (*ossl_ASYNC_WAIT_CTX_new_t)();
typedef void (*ossl_ASYNC_WAIT_CTX_free_t)(ossl_ASYNC_WAIT_CTX *ctx);
typedef int (*ossl_ASYNC_WAIT_CTX_set_wait_fd_t)(ossl_ASYNC_WAIT_CTX *ctx, const void *key, int fd, void *custom_data, void (*cleanup)(ossl_ASYNC_WAIT_CTX *, const void *, int, void *));
typedef int (*ossl_ASYNC_WAIT_CTX_get_fd_t)(ossl_ASYNC_WAIT_CTX *ctx, const void *key, int *fd, void **custom_data);
typedef int (*ossl_ASYNC_WAIT_CTX_get_all_fds_t)(ossl_ASYNC_WAIT_CTX *ctx, int *fd, size_t *numfds);
typedef int (*ossl_ASYNC_WAIT_CTX_get_callback_t)(ossl_ASYNC_WAIT_CTX *ctx, ossl_ASYNC_callback_fn *callback, void **callback_arg);
typedef int (*ossl_ASYNC_WAIT_CTX_set_callback_t)(ossl_ASYNC_WAIT_CTX *ctx, ossl_ASYNC_callback_fn callback, void *callback_arg);
typedef int (*ossl_ASYNC_WAIT_CTX_set_status_t)(ossl_ASYNC_WAIT_CTX *ctx, int status);
typedef int (*ossl_ASYNC_WAIT_CTX_get_status_t)(ossl_ASYNC_WAIT_CTX *ctx);
typedef int (*ossl_ASYNC_WAIT_CTX_get_changed_fds_t)(ossl_ASYNC_WAIT_CTX *ctx, int *addfd, size_t *numaddfds, int *delfd, size_t *numdelfds);
typedef int (*ossl_ASYNC_WAIT_CTX_clear_fd_t)(ossl_ASYNC_WAIT_CTX *ctx, const void *key);
typedef int (*ossl_ASYNC_is_capable_t)();
typedef int (*ossl_ASYNC_start_job_t)(ossl_ASYNC_JOB **job, ossl_ASYNC_WAIT_CTX *ctx, int *ret, int (*func)(void *), void *args, size_t size);
typedef int (*ossl_ASYNC_pause_job_t)();
typedef ossl_ASYNC_JOB * (*ossl_ASYNC_get_current_job_t)();
typedef ossl_ASYNC_WAIT_CTX * (*ossl_ASYNC_get_wait_ctx_t)(ossl_ASYNC_JOB *job);
typedef void (*ossl_ASYNC_block_pause_t)();
typedef void (*ossl_ASYNC_unblock_pause_t)();
typedef void (*ossl_BF_set_key_t)(ossl_BF_KEY *key, int len, const unsigned char *data);
typedef void (*ossl_BF_encrypt_t)(unsigned int *data, const ossl_BF_KEY *key);
typedef void (*ossl_BF_decrypt_t)(unsigned int *data, const ossl_BF_KEY *key);
typedef void (*ossl_BF_ecb_encrypt_t)(const unsigned char *in, unsigned char *out, const ossl_BF_KEY *key, int enc);
typedef void (*ossl_BF_cbc_encrypt_t)(const unsigned char *in, unsigned char *out, long length, const ossl_BF_KEY *schedule, unsigned char *ivec, int enc);
typedef void (*ossl_BF_cfb64_encrypt_t)(const unsigned char *in, unsigned char *out, long length, const ossl_BF_KEY *schedule, unsigned char *ivec, int *num, int enc);
typedef void (*ossl_BF_ofb64_encrypt_t)(const unsigned char *in, unsigned char *out, long length, const ossl_BF_KEY *schedule, unsigned char *ivec, int *num);
typedef const char * (*ossl_BF_options_t)();
typedef ossl_BUF_MEM * (*ossl_BUF_MEM_new_t)();
typedef ossl_BUF_MEM * (*ossl_BUF_MEM_new_ex_t)(unsigned long flags);
typedef void (*ossl_BUF_MEM_free_t)(ossl_BUF_MEM *a);
typedef size_t (*ossl_BUF_MEM_grow_t)(ossl_BUF_MEM *str, size_t len);
typedef size_t (*ossl_BUF_MEM_grow_clean_t)(ossl_BUF_MEM *str, size_t len);
typedef void (*ossl_BUF_reverse_t)(unsigned char *out, const unsigned char *in, size_t siz);
typedef int (*ossl_Camellia_set_key_t)(const unsigned char *userKey, const int bits, ossl_CAMELLIA_KEY *key);
typedef void (*ossl_Camellia_encrypt_t)(const unsigned char *in, unsigned char *out, const ossl_CAMELLIA_KEY *key);
typedef void (*ossl_Camellia_decrypt_t)(const unsigned char *in, unsigned char *out, const ossl_CAMELLIA_KEY *key);
typedef void (*ossl_Camellia_ecb_encrypt_t)(const unsigned char *in, unsigned char *out, const ossl_CAMELLIA_KEY *key, const int enc);
typedef void (*ossl_Camellia_cbc_encrypt_t)(const unsigned char *in, unsigned char *out, size_t length, const ossl_CAMELLIA_KEY *key, unsigned char *ivec, const int enc);
typedef void (*ossl_Camellia_cfb128_encrypt_t)(const unsigned char *in, unsigned char *out, size_t length, const ossl_CAMELLIA_KEY *key, unsigned char *ivec, int *num, const int enc);
typedef void (*ossl_Camellia_cfb1_encrypt_t)(const unsigned char *in, unsigned char *out, size_t length, const ossl_CAMELLIA_KEY *key, unsigned char *ivec, int *num, const int enc);
typedef void (*ossl_Camellia_cfb8_encrypt_t)(const unsigned char *in, unsigned char *out, size_t length, const ossl_CAMELLIA_KEY *key, unsigned char *ivec, int *num, const int enc);
typedef void (*ossl_Camellia_ofb128_encrypt_t)(const unsigned char *in, unsigned char *out, size_t length, const ossl_CAMELLIA_KEY *key, unsigned char *ivec, int *num);
typedef void (*ossl_Camellia_ctr128_encrypt_t)(const unsigned char *in, unsigned char *out, size_t length, const ossl_CAMELLIA_KEY *key, unsigned char ivec[16], unsigned char ecount_buf[16], unsigned int *num);
typedef void (*ossl_CAST_set_key_t)(ossl_CAST_KEY *key, int len, const unsigned char *data);
typedef void (*ossl_CAST_ecb_encrypt_t)(const unsigned char *in, unsigned char *out, const ossl_CAST_KEY *key, int enc);
typedef void (*ossl_CAST_encrypt_t)(unsigned int *data, const ossl_CAST_KEY *key);
typedef void (*ossl_CAST_decrypt_t)(unsigned int *data, const ossl_CAST_KEY *key);
typedef void (*ossl_CAST_cbc_encrypt_t)(const unsigned char *in, unsigned char *out, long length, const ossl_CAST_KEY *ks, unsigned char *iv, int enc);
typedef void (*ossl_CAST_cfb64_encrypt_t)(const unsigned char *in, unsigned char *out, long length, const ossl_CAST_KEY *schedule, unsigned char *ivec, int *num, int enc);
typedef void (*ossl_CAST_ofb64_encrypt_t)(const unsigned char *in, unsigned char *out, long length, const ossl_CAST_KEY *schedule, unsigned char *ivec, int *num);
typedef ossl_OSSL_PARAM * (*ossl_OSSL_PARAM_locate_t)(ossl_OSSL_PARAM *p, const char *key);
typedef const ossl_OSSL_PARAM * (*ossl_OSSL_PARAM_locate_const_t)(const ossl_OSSL_PARAM *p, const char *key);
typedef ossl_OSSL_PARAM (*ossl_OSSL_PARAM_construct_int_t)(const char *key, int *buf);
typedef ossl_OSSL_PARAM (*ossl_OSSL_PARAM_construct_uint_t)(const char *key, unsigned int *buf);
typedef ossl_OSSL_PARAM (*ossl_OSSL_PARAM_construct_long_t)(const char *key, long *buf);
typedef ossl_OSSL_PARAM (*ossl_OSSL_PARAM_construct_ulong_t)(const char *key, unsigned long *buf);
typedef ossl_OSSL_PARAM (*ossl_OSSL_PARAM_construct_int32_t)(const char *key, int32_t *buf);
typedef ossl_OSSL_PARAM (*ossl_OSSL_PARAM_construct_uint32_t)(const char *key, uint32_t *buf);
typedef ossl_OSSL_PARAM (*ossl_OSSL_PARAM_construct_int64_t)(const char *key, int64_t *buf);
typedef ossl_OSSL_PARAM (*ossl_OSSL_PARAM_construct_uint64_t)(const char *key, uint64_t *buf);
typedef ossl_OSSL_PARAM (*ossl_OSSL_PARAM_construct_size_t_t)(const char *key, size_t *buf);
typedef ossl_OSSL_PARAM (*ossl_OSSL_PARAM_construct_time_t_t)(const char *key, time_t *buf);
typedef ossl_OSSL_PARAM (*ossl_OSSL_PARAM_construct_BN_t)(const char *key, unsigned char *buf, size_t bsize);
typedef ossl_OSSL_PARAM (*ossl_OSSL_PARAM_construct_double_t)(const char *key, double *buf);
typedef ossl_OSSL_PARAM (*ossl_OSSL_PARAM_construct_utf8_string_t)(const char *key, char *buf, size_t bsize);
typedef ossl_OSSL_PARAM (*ossl_OSSL_PARAM_construct_utf8_ptr_t)(const char *key, char **buf, size_t bsize);
typedef ossl_OSSL_PARAM (*ossl_OSSL_PARAM_construct_octet_string_t)(const char *key, void *buf, size_t bsize);
typedef ossl_OSSL_PARAM (*ossl_OSSL_PARAM_construct_octet_ptr_t)(const char *key, void **buf, size_t bsize);
typedef ossl_OSSL_PARAM (*ossl_OSSL_PARAM_construct_end_t)();
typedef int (*ossl_OSSL_PARAM_allocate_from_text_t)(ossl_OSSL_PARAM *to, const ossl_OSSL_PARAM *paramdefs, const char *key, const char *value, size_t value_n, int *found);
typedef int (*ossl_OSSL_PARAM_get_int_t)(const ossl_OSSL_PARAM *p, int *val);
typedef int (*ossl_OSSL_PARAM_get_uint_t)(const ossl_OSSL_PARAM *p, unsigned int *val);
typedef int (*ossl_OSSL_PARAM_get_long_t)(const ossl_OSSL_PARAM *p, long *val);
typedef int (*ossl_OSSL_PARAM_get_ulong_t)(const ossl_OSSL_PARAM *p, unsigned long *val);
typedef int (*ossl_OSSL_PARAM_get_int32_t)(const ossl_OSSL_PARAM *p, int32_t *val);
typedef int (*ossl_OSSL_PARAM_get_uint32_t)(const ossl_OSSL_PARAM *p, uint32_t *val);
typedef int (*ossl_OSSL_PARAM_get_int64_t)(const ossl_OSSL_PARAM *p, int64_t *val);
typedef int (*ossl_OSSL_PARAM_get_uint64_t)(const ossl_OSSL_PARAM *p, uint64_t *val);
typedef int (*ossl_OSSL_PARAM_get_size_t_t)(const ossl_OSSL_PARAM *p, size_t *val);
typedef int (*ossl_OSSL_PARAM_get_time_t_t)(const ossl_OSSL_PARAM *p, time_t *val);
typedef int (*ossl_OSSL_PARAM_set_int_t)(ossl_OSSL_PARAM *p, int val);
typedef int (*ossl_OSSL_PARAM_set_uint_t)(ossl_OSSL_PARAM *p, unsigned int val);
typedef int (*ossl_OSSL_PARAM_set_long_t)(ossl_OSSL_PARAM *p, long val);
typedef int (*ossl_OSSL_PARAM_set_ulong_t)(ossl_OSSL_PARAM *p, unsigned long val);
typedef int (*ossl_OSSL_PARAM_set_int32_t)(ossl_OSSL_PARAM *p, int32_t val);
typedef int (*ossl_OSSL_PARAM_set_uint32_t)(ossl_OSSL_PARAM *p, uint32_t val);
typedef int (*ossl_OSSL_PARAM_set_int64_t)(ossl_OSSL_PARAM *p, int64_t val);
typedef int (*ossl_OSSL_PARAM_set_uint64_t)(ossl_OSSL_PARAM *p, uint64_t val);
typedef int (*ossl_OSSL_PARAM_set_size_t_t)(ossl_OSSL_PARAM *p, size_t val);
typedef int (*ossl_OSSL_PARAM_set_time_t_t)(ossl_OSSL_PARAM *p, time_t val);
typedef int (*ossl_OSSL_PARAM_get_double_t)(const ossl_OSSL_PARAM *p, double *val);
typedef int (*ossl_OSSL_PARAM_set_double_t)(ossl_OSSL_PARAM *p, double val);
typedef int (*ossl_OSSL_PARAM_get_BN_t)(const ossl_OSSL_PARAM *p, ossl_BIGNUM **val);
typedef int (*ossl_OSSL_PARAM_set_BN_t)(ossl_OSSL_PARAM *p, const ossl_BIGNUM *val);
typedef int (*ossl_OSSL_PARAM_get_utf8_string_t)(const ossl_OSSL_PARAM *p, char **val, size_t max_len);
typedef int (*ossl_OSSL_PARAM_set_utf8_string_t)(ossl_OSSL_PARAM *p, const char *val);
typedef int (*ossl_OSSL_PARAM_get_octet_string_t)(const ossl_OSSL_PARAM *p, void **val, size_t max_len, size_t *used_len);
typedef int (*ossl_OSSL_PARAM_set_octet_string_t)(ossl_OSSL_PARAM *p, const void *val, size_t len);
typedef int (*ossl_OSSL_PARAM_get_utf8_ptr_t)(const ossl_OSSL_PARAM *p, const char **val);
typedef int (*ossl_OSSL_PARAM_set_utf8_ptr_t)(ossl_OSSL_PARAM *p, const char *val);
typedef int (*ossl_OSSL_PARAM_get_octet_ptr_t)(const ossl_OSSL_PARAM *p, const void **val, size_t *used_len);
typedef int (*ossl_OSSL_PARAM_set_octet_ptr_t)(ossl_OSSL_PARAM *p, const void *val, size_t used_len);
typedef int (*ossl_OSSL_PARAM_get_utf8_string_ptr_t)(const ossl_OSSL_PARAM *p, const char **val);
typedef int (*ossl_OSSL_PARAM_get_octet_string_ptr_t)(const ossl_OSSL_PARAM *p, const void **val, size_t *used_len);
typedef int (*ossl_OSSL_PARAM_modified_t)(const ossl_OSSL_PARAM *p);
typedef void (*ossl_OSSL_PARAM_set_all_unmodified_t)(ossl_OSSL_PARAM *p);
typedef ossl_OSSL_PARAM * (*ossl_OSSL_PARAM_dup_t)(const ossl_OSSL_PARAM *p);
typedef ossl_OSSL_PARAM * (*ossl_OSSL_PARAM_merge_t)(const ossl_OSSL_PARAM *p1, const ossl_OSSL_PARAM *p2);
typedef void (*ossl_OSSL_PARAM_free_t)(ossl_OSSL_PARAM *p);
typedef int (*ossl_OBJ_NAME_init_t)();
typedef int (*ossl_OBJ_NAME_new_index_t)(unsigned long (*hash_func)(const char *), int (*cmp_func)(const char *, const char *), void (*free_func)(const char *, int, const char *));
typedef const char * (*ossl_OBJ_NAME_get_t)(const char *name, int type);
typedef int (*ossl_OBJ_NAME_add_t)(const char *name, int type, const char *data);
typedef int (*ossl_OBJ_NAME_remove_t)(const char *name, int type);
typedef void (*ossl_OBJ_NAME_cleanup_t)(int type);
typedef void (*ossl_OBJ_NAME_do_all_t)(int type, void (*fn)(const ossl_OBJ_NAME *, void *), void *arg);
typedef void (*ossl_OBJ_NAME_do_all_sorted_t)(int type, void (*fn)(const ossl_OBJ_NAME *, void *), void *arg);
typedef ossl_ASN1_OBJECT * (*ossl_OBJ_dup_t)(const ossl_ASN1_OBJECT *a);
typedef ossl_ASN1_OBJECT * (*ossl_OBJ_nid2obj_t)(int n);
typedef const char * (*ossl_OBJ_nid2ln_t)(int n);
typedef const char * (*ossl_OBJ_nid2sn_t)(int n);
typedef int (*ossl_OBJ_obj2nid_t)(const ossl_ASN1_OBJECT *o);
typedef ossl_ASN1_OBJECT * (*ossl_OBJ_txt2obj_t)(const char *s, int no_name);
typedef int (*ossl_OBJ_obj2txt_t)(char *buf, int buf_len, const ossl_ASN1_OBJECT *a, int no_name);
typedef int (*ossl_OBJ_txt2nid_t)(const char *s);
typedef int (*ossl_OBJ_ln2nid_t)(const char *s);
typedef int (*ossl_OBJ_sn2nid_t)(const char *s);
typedef int (*ossl_OBJ_cmp_t)(const ossl_ASN1_OBJECT *a, const ossl_ASN1_OBJECT *b);
typedef const void * (*ossl_OBJ_bsearch__t)(const void *key, const void *base, int num, int size, int (*cmp)(const void *, const void *));
typedef const void * (*ossl_OBJ_bsearch_ex__t)(const void *key, const void *base, int num, int size, int (*cmp)(const void *, const void *), int flags);
typedef int (*ossl_OBJ_new_nid_t)(int num);
typedef int (*ossl_OBJ_add_object_t)(const ossl_ASN1_OBJECT *obj);
typedef int (*ossl_OBJ_create_t)(const char *oid, const char *sn, const char *ln);
typedef int (*ossl_OBJ_create_objects_t)(ossl_BIO *in);
typedef size_t (*ossl_OBJ_length_t)(const ossl_ASN1_OBJECT *obj);
typedef const unsigned char * (*ossl_OBJ_get0_data_t)(const ossl_ASN1_OBJECT *obj);
typedef int (*ossl_OBJ_find_sigid_algs_t)(int signid, int *pdig_nid, int *ppkey_nid);
typedef int (*ossl_OBJ_find_sigid_by_algs_t)(int *psignid, int dig_nid, int pkey_nid);
typedef int (*ossl_OBJ_add_sigid_t)(int signid, int dig_id, int pkey_id);
typedef void (*ossl_OBJ_sigid_free_t)();
typedef int (*ossl_EVP_set_default_properties_t)(ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_EVP_default_properties_is_fips_enabled_t)(ossl_OSSL_LIB_CTX *libctx);
typedef int (*ossl_EVP_default_properties_enable_fips_t)(ossl_OSSL_LIB_CTX *libctx, int enable);
typedef ossl_EVP_MD * (*ossl_EVP_MD_meth_new_t)(int md_type, int pkey_type);
typedef ossl_EVP_MD * (*ossl_EVP_MD_meth_dup_t)(const ossl_EVP_MD *md);
typedef void (*ossl_EVP_MD_meth_free_t)(ossl_EVP_MD *md);
typedef int (*ossl_EVP_MD_meth_set_input_blocksize_t)(ossl_EVP_MD *md, int blocksize);
typedef int (*ossl_EVP_MD_meth_set_result_size_t)(ossl_EVP_MD *md, int resultsize);
typedef int (*ossl_EVP_MD_meth_set_app_datasize_t)(ossl_EVP_MD *md, int datasize);
typedef int (*ossl_EVP_MD_meth_set_flags_t)(ossl_EVP_MD *md, unsigned long flags);
typedef int (*ossl_EVP_MD_meth_set_init_t)(ossl_EVP_MD *md, int (*init)(ossl_EVP_MD_CTX *));
typedef int (*ossl_EVP_MD_meth_set_update_t)(ossl_EVP_MD *md, int (*update)(ossl_EVP_MD_CTX *, const void *, size_t));
typedef int (*ossl_EVP_MD_meth_set_final_t)(ossl_EVP_MD *md, int (*final)(ossl_EVP_MD_CTX *, unsigned char *));
typedef int (*ossl_EVP_MD_meth_set_copy_t)(ossl_EVP_MD *md, int (*copy)(ossl_EVP_MD_CTX *, const ossl_EVP_MD_CTX *));
typedef int (*ossl_EVP_MD_meth_set_cleanup_t)(ossl_EVP_MD *md, int (*cleanup)(ossl_EVP_MD_CTX *));
typedef int (*ossl_EVP_MD_meth_set_ctrl_t)(ossl_EVP_MD *md, int (*ctrl)(ossl_EVP_MD_CTX *, int, int, void *));
typedef int (*ossl_EVP_MD_meth_get_input_blocksize_t)(const ossl_EVP_MD *md);
typedef int (*ossl_EVP_MD_meth_get_result_size_t)(const ossl_EVP_MD *md);
typedef int (*ossl_EVP_MD_meth_get_app_datasize_t)(const ossl_EVP_MD *md);
typedef unsigned long (*ossl_EVP_MD_meth_get_flags_t)(const ossl_EVP_MD *md);
typedef int (*EVP_MD_meth_get_init_ret_t)(ossl_EVP_MD_CTX *);
typedef EVP_MD_meth_get_init_ret_t (*ossl_EVP_MD_meth_get_init_t)(const ossl_EVP_MD *md);
typedef int (*EVP_MD_meth_get_update_ret_t)(ossl_EVP_MD_CTX *, const void *, size_t);
typedef EVP_MD_meth_get_update_ret_t (*ossl_EVP_MD_meth_get_update_t)(const ossl_EVP_MD *md);
typedef int (*EVP_MD_meth_get_final_ret_t)(ossl_EVP_MD_CTX *, unsigned char *);
typedef EVP_MD_meth_get_final_ret_t (*ossl_EVP_MD_meth_get_final_t)(const ossl_EVP_MD *md);
typedef int (*EVP_MD_meth_get_copy_ret_t)(ossl_EVP_MD_CTX *, const ossl_EVP_MD_CTX *);
typedef EVP_MD_meth_get_copy_ret_t (*ossl_EVP_MD_meth_get_copy_t)(const ossl_EVP_MD *md);
typedef int (*EVP_MD_meth_get_cleanup_ret_t)(ossl_EVP_MD_CTX *);
typedef EVP_MD_meth_get_cleanup_ret_t (*ossl_EVP_MD_meth_get_cleanup_t)(const ossl_EVP_MD *md);
typedef int (*EVP_MD_meth_get_ctrl_ret_t)(ossl_EVP_MD_CTX *, int, int, void *);
typedef EVP_MD_meth_get_ctrl_ret_t (*ossl_EVP_MD_meth_get_ctrl_t)(const ossl_EVP_MD *md);
typedef ossl_EVP_CIPHER * (*ossl_EVP_CIPHER_meth_new_t)(int cipher_type, int block_size, int key_len);
typedef ossl_EVP_CIPHER * (*ossl_EVP_CIPHER_meth_dup_t)(const ossl_EVP_CIPHER *cipher);
typedef void (*ossl_EVP_CIPHER_meth_free_t)(ossl_EVP_CIPHER *cipher);
typedef int (*ossl_EVP_CIPHER_meth_set_iv_length_t)(ossl_EVP_CIPHER *cipher, int iv_len);
typedef int (*ossl_EVP_CIPHER_meth_set_flags_t)(ossl_EVP_CIPHER *cipher, unsigned long flags);
typedef int (*ossl_EVP_CIPHER_meth_set_impl_ctx_size_t)(ossl_EVP_CIPHER *cipher, int ctx_size);
typedef int (*ossl_EVP_CIPHER_meth_set_init_t)(ossl_EVP_CIPHER *cipher, int (*init)(ossl_EVP_CIPHER_CTX *, const unsigned char *, const unsigned char *, int));
typedef int (*ossl_EVP_CIPHER_meth_set_do_cipher_t)(ossl_EVP_CIPHER *cipher, int (*do_cipher)(ossl_EVP_CIPHER_CTX *, unsigned char *, const unsigned char *, size_t));
typedef int (*ossl_EVP_CIPHER_meth_set_cleanup_t)(ossl_EVP_CIPHER *cipher, int (*cleanup)(ossl_EVP_CIPHER_CTX *));
typedef int (*ossl_EVP_CIPHER_meth_set_set_asn1_params_t)(ossl_EVP_CIPHER *cipher, int (*set_asn1_parameters)(ossl_EVP_CIPHER_CTX *, ossl_ASN1_TYPE *));
typedef int (*ossl_EVP_CIPHER_meth_set_get_asn1_params_t)(ossl_EVP_CIPHER *cipher, int (*get_asn1_parameters)(ossl_EVP_CIPHER_CTX *, ossl_ASN1_TYPE *));
typedef int (*ossl_EVP_CIPHER_meth_set_ctrl_t)(ossl_EVP_CIPHER *cipher, int (*ctrl)(ossl_EVP_CIPHER_CTX *, int, int, void *));
typedef int (*EVP_CIPHER_meth_get_init_ret_t)(ossl_EVP_CIPHER_CTX *, const unsigned char *, const unsigned char *, int);
typedef EVP_CIPHER_meth_get_init_ret_t (*ossl_EVP_CIPHER_meth_get_init_t)(const ossl_EVP_CIPHER *cipher);
typedef int (*EVP_CIPHER_meth_get_do_cipher_ret_t)(ossl_EVP_CIPHER_CTX *, unsigned char *, const unsigned char *, size_t);
typedef EVP_CIPHER_meth_get_do_cipher_ret_t (*ossl_EVP_CIPHER_meth_get_do_cipher_t)(const ossl_EVP_CIPHER *cipher);
typedef int (*EVP_CIPHER_meth_get_cleanup_ret_t)(ossl_EVP_CIPHER_CTX *);
typedef EVP_CIPHER_meth_get_cleanup_ret_t (*ossl_EVP_CIPHER_meth_get_cleanup_t)(const ossl_EVP_CIPHER *cipher);
typedef int (*EVP_CIPHER_meth_get_set_asn1_params_ret_t)(ossl_EVP_CIPHER_CTX *, ossl_ASN1_TYPE *);
typedef EVP_CIPHER_meth_get_set_asn1_params_ret_t (*ossl_EVP_CIPHER_meth_get_set_asn1_params_t)(const ossl_EVP_CIPHER *cipher);
typedef int (*EVP_CIPHER_meth_get_get_asn1_params_ret_t)(ossl_EVP_CIPHER_CTX *, ossl_ASN1_TYPE *);
typedef EVP_CIPHER_meth_get_get_asn1_params_ret_t (*ossl_EVP_CIPHER_meth_get_get_asn1_params_t)(const ossl_EVP_CIPHER *cipher);
typedef int (*EVP_CIPHER_meth_get_ctrl_ret_t)(ossl_EVP_CIPHER_CTX *, int, int, void *);
typedef EVP_CIPHER_meth_get_ctrl_ret_t (*ossl_EVP_CIPHER_meth_get_ctrl_t)(const ossl_EVP_CIPHER *cipher);
typedef int (*ossl_EVP_MD_get_type_t)(const ossl_EVP_MD *md);
typedef const char * (*ossl_EVP_MD_get0_name_t)(const ossl_EVP_MD *md);
typedef const char * (*ossl_EVP_MD_get0_description_t)(const ossl_EVP_MD *md);
typedef int (*ossl_EVP_MD_is_a_t)(const ossl_EVP_MD *md, const char *name);
typedef int (*ossl_EVP_MD_names_do_all_t)(const ossl_EVP_MD *md, void (*fn)(const char *, void *), void *data);
typedef const ossl_OSSL_PROVIDER * (*ossl_EVP_MD_get0_provider_t)(const ossl_EVP_MD *md);
typedef int (*ossl_EVP_MD_get_pkey_type_t)(const ossl_EVP_MD *md);
typedef int (*ossl_EVP_MD_get_size_t)(const ossl_EVP_MD *md);
typedef int (*ossl_EVP_MD_get_block_size_t)(const ossl_EVP_MD *md);
typedef unsigned long (*ossl_EVP_MD_get_flags_t)(const ossl_EVP_MD *md);
typedef const ossl_EVP_MD * (*ossl_EVP_MD_CTX_get0_md_t)(const ossl_EVP_MD_CTX *ctx);
typedef ossl_EVP_MD * (*ossl_EVP_MD_CTX_get1_md_t)(ossl_EVP_MD_CTX *ctx);
typedef const ossl_EVP_MD * (*ossl_EVP_MD_CTX_md_t)(const ossl_EVP_MD_CTX *ctx);
typedef int (*EVP_MD_CTX_update_fn_ret_t)(ossl_EVP_MD_CTX *, const void *, size_t);
typedef EVP_MD_CTX_update_fn_ret_t (*ossl_EVP_MD_CTX_update_fn_t)(ossl_EVP_MD_CTX *ctx);
typedef void (*ossl_EVP_MD_CTX_set_update_fn_t)(ossl_EVP_MD_CTX *ctx, int (*update)(ossl_EVP_MD_CTX *, const void *, size_t));
typedef ossl_EVP_PKEY_CTX * (*ossl_EVP_MD_CTX_get_pkey_ctx_t)(const ossl_EVP_MD_CTX *ctx);
typedef void (*ossl_EVP_MD_CTX_set_pkey_ctx_t)(ossl_EVP_MD_CTX *ctx, ossl_EVP_PKEY_CTX *pctx);
typedef void * (*ossl_EVP_MD_CTX_get0_md_data_t)(const ossl_EVP_MD_CTX *ctx);
typedef int (*ossl_EVP_CIPHER_get_nid_t)(const ossl_EVP_CIPHER *cipher);
typedef const char * (*ossl_EVP_CIPHER_get0_name_t)(const ossl_EVP_CIPHER *cipher);
typedef const char * (*ossl_EVP_CIPHER_get0_description_t)(const ossl_EVP_CIPHER *cipher);
typedef int (*ossl_EVP_CIPHER_is_a_t)(const ossl_EVP_CIPHER *cipher, const char *name);
typedef int (*ossl_EVP_CIPHER_names_do_all_t)(const ossl_EVP_CIPHER *cipher, void (*fn)(const char *, void *), void *data);
typedef const ossl_OSSL_PROVIDER * (*ossl_EVP_CIPHER_get0_provider_t)(const ossl_EVP_CIPHER *cipher);
typedef int (*ossl_EVP_CIPHER_get_block_size_t)(const ossl_EVP_CIPHER *cipher);
typedef int (*ossl_EVP_CIPHER_impl_ctx_size_t)(const ossl_EVP_CIPHER *cipher);
typedef int (*ossl_EVP_CIPHER_get_key_length_t)(const ossl_EVP_CIPHER *cipher);
typedef int (*ossl_EVP_CIPHER_get_iv_length_t)(const ossl_EVP_CIPHER *cipher);
typedef unsigned long (*ossl_EVP_CIPHER_get_flags_t)(const ossl_EVP_CIPHER *cipher);
typedef int (*ossl_EVP_CIPHER_get_mode_t)(const ossl_EVP_CIPHER *cipher);
typedef int (*ossl_EVP_CIPHER_get_type_t)(const ossl_EVP_CIPHER *cipher);
typedef ossl_EVP_CIPHER * (*ossl_EVP_CIPHER_fetch_t)(ossl_OSSL_LIB_CTX *ctx, const char *algorithm, const char *properties);
typedef int (*ossl_EVP_CIPHER_up_ref_t)(ossl_EVP_CIPHER *cipher);
typedef void (*ossl_EVP_CIPHER_free_t)(ossl_EVP_CIPHER *cipher);
typedef const ossl_EVP_CIPHER * (*ossl_EVP_CIPHER_CTX_get0_cipher_t)(const ossl_EVP_CIPHER_CTX *ctx);
typedef ossl_EVP_CIPHER * (*ossl_EVP_CIPHER_CTX_get1_cipher_t)(ossl_EVP_CIPHER_CTX *ctx);
typedef int (*ossl_EVP_CIPHER_CTX_is_encrypting_t)(const ossl_EVP_CIPHER_CTX *ctx);
typedef int (*ossl_EVP_CIPHER_CTX_get_nid_t)(const ossl_EVP_CIPHER_CTX *ctx);
typedef int (*ossl_EVP_CIPHER_CTX_get_block_size_t)(const ossl_EVP_CIPHER_CTX *ctx);
typedef int (*ossl_EVP_CIPHER_CTX_get_key_length_t)(const ossl_EVP_CIPHER_CTX *ctx);
typedef int (*ossl_EVP_CIPHER_CTX_get_iv_length_t)(const ossl_EVP_CIPHER_CTX *ctx);
typedef int (*ossl_EVP_CIPHER_CTX_get_tag_length_t)(const ossl_EVP_CIPHER_CTX *ctx);
typedef const ossl_EVP_CIPHER * (*ossl_EVP_CIPHER_CTX_cipher_t)(const ossl_EVP_CIPHER_CTX *ctx);
typedef const unsigned char * (*ossl_EVP_CIPHER_CTX_iv_t)(const ossl_EVP_CIPHER_CTX *ctx);
typedef const unsigned char * (*ossl_EVP_CIPHER_CTX_original_iv_t)(const ossl_EVP_CIPHER_CTX *ctx);
typedef unsigned char * (*ossl_EVP_CIPHER_CTX_iv_noconst_t)(ossl_EVP_CIPHER_CTX *ctx);
typedef int (*ossl_EVP_CIPHER_CTX_get_updated_iv_t)(ossl_EVP_CIPHER_CTX *ctx, void *buf, size_t len);
typedef int (*ossl_EVP_CIPHER_CTX_get_original_iv_t)(ossl_EVP_CIPHER_CTX *ctx, void *buf, size_t len);
typedef unsigned char * (*ossl_EVP_CIPHER_CTX_buf_noconst_t)(ossl_EVP_CIPHER_CTX *ctx);
typedef int (*ossl_EVP_CIPHER_CTX_get_num_t)(const ossl_EVP_CIPHER_CTX *ctx);
typedef int (*ossl_EVP_CIPHER_CTX_set_num_t)(ossl_EVP_CIPHER_CTX *ctx, int num);
typedef int (*ossl_EVP_CIPHER_CTX_copy_t)(ossl_EVP_CIPHER_CTX *out, const ossl_EVP_CIPHER_CTX *in);
typedef void * (*ossl_EVP_CIPHER_CTX_get_app_data_t)(const ossl_EVP_CIPHER_CTX *ctx);
typedef void (*ossl_EVP_CIPHER_CTX_set_app_data_t)(ossl_EVP_CIPHER_CTX *ctx, void *data);
typedef void * (*ossl_EVP_CIPHER_CTX_get_cipher_data_t)(const ossl_EVP_CIPHER_CTX *ctx);
typedef void * (*ossl_EVP_CIPHER_CTX_set_cipher_data_t)(ossl_EVP_CIPHER_CTX *ctx, void *cipher_data);
typedef int (*ossl_EVP_Cipher_t)(ossl_EVP_CIPHER_CTX *c, unsigned char *out, const unsigned char *in, unsigned int inl);
typedef int (*ossl_EVP_MD_get_params_t)(const ossl_EVP_MD *digest, ossl_OSSL_PARAM params[]);
typedef int (*ossl_EVP_MD_CTX_set_params_t)(ossl_EVP_MD_CTX *ctx, const ossl_OSSL_PARAM params[]);
typedef int (*ossl_EVP_MD_CTX_get_params_t)(ossl_EVP_MD_CTX *ctx, ossl_OSSL_PARAM params[]);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_MD_gettable_params_t)(const ossl_EVP_MD *digest);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_MD_settable_ctx_params_t)(const ossl_EVP_MD *md);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_MD_gettable_ctx_params_t)(const ossl_EVP_MD *md);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_MD_CTX_settable_params_t)(ossl_EVP_MD_CTX *ctx);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_MD_CTX_gettable_params_t)(ossl_EVP_MD_CTX *ctx);
typedef int (*ossl_EVP_MD_CTX_ctrl_t)(ossl_EVP_MD_CTX *ctx, int cmd, int p1, void *p2);
typedef ossl_EVP_MD_CTX * (*ossl_EVP_MD_CTX_new_t)();
typedef int (*ossl_EVP_MD_CTX_reset_t)(ossl_EVP_MD_CTX *ctx);
typedef void (*ossl_EVP_MD_CTX_free_t)(ossl_EVP_MD_CTX *ctx);
typedef int (*ossl_EVP_MD_CTX_copy_ex_t)(ossl_EVP_MD_CTX *out, const ossl_EVP_MD_CTX *in);
typedef void (*ossl_EVP_MD_CTX_set_flags_t)(ossl_EVP_MD_CTX *ctx, int flags);
typedef void (*ossl_EVP_MD_CTX_clear_flags_t)(ossl_EVP_MD_CTX *ctx, int flags);
typedef int (*ossl_EVP_MD_CTX_test_flags_t)(const ossl_EVP_MD_CTX *ctx, int flags);
typedef int (*ossl_EVP_DigestInit_ex2_t)(ossl_EVP_MD_CTX *ctx, const ossl_EVP_MD *type, const ossl_OSSL_PARAM params[]);
typedef int (*ossl_EVP_DigestInit_ex_t)(ossl_EVP_MD_CTX *ctx, const ossl_EVP_MD *type, ossl_ENGINE *impl);
typedef int (*ossl_EVP_DigestUpdate_t)(ossl_EVP_MD_CTX *ctx, const void *d, size_t cnt);
typedef int (*ossl_EVP_DigestFinal_ex_t)(ossl_EVP_MD_CTX *ctx, unsigned char *md, unsigned int *s);
typedef int (*ossl_EVP_Digest_t)(const void *data, size_t count, unsigned char *md, unsigned int *size, const ossl_EVP_MD *type, ossl_ENGINE *impl);
typedef int (*ossl_EVP_Q_digest_t)(ossl_OSSL_LIB_CTX *libctx, const char *name, const char *propq, const void *data, size_t datalen, unsigned char *md, size_t *mdlen);
typedef int (*ossl_EVP_MD_CTX_copy_t)(ossl_EVP_MD_CTX *out, const ossl_EVP_MD_CTX *in);
typedef int (*ossl_EVP_DigestInit_t)(ossl_EVP_MD_CTX *ctx, const ossl_EVP_MD *type);
typedef int (*ossl_EVP_DigestFinal_t)(ossl_EVP_MD_CTX *ctx, unsigned char *md, unsigned int *s);
typedef int (*ossl_EVP_DigestFinalXOF_t)(ossl_EVP_MD_CTX *ctx, unsigned char *md, size_t len);
typedef ossl_EVP_MD * (*ossl_EVP_MD_fetch_t)(ossl_OSSL_LIB_CTX *ctx, const char *algorithm, const char *properties);
typedef int (*ossl_EVP_MD_up_ref_t)(ossl_EVP_MD *md);
typedef void (*ossl_EVP_MD_free_t)(ossl_EVP_MD *md);
typedef int (*ossl_EVP_read_pw_string_t)(char *buf, int length, const char *prompt, int verify);
typedef int (*ossl_EVP_read_pw_string_min_t)(char *buf, int minlen, int maxlen, const char *prompt, int verify);
typedef void (*ossl_EVP_set_pw_prompt_t)(const char *prompt);
typedef char * (*ossl_EVP_get_pw_prompt_t)();
typedef int (*ossl_EVP_BytesToKey_t)(const ossl_EVP_CIPHER *type, const ossl_EVP_MD *md, const unsigned char *salt, const unsigned char *data, int datal, int count, unsigned char *key, unsigned char *iv);
typedef void (*ossl_EVP_CIPHER_CTX_set_flags_t)(ossl_EVP_CIPHER_CTX *ctx, int flags);
typedef void (*ossl_EVP_CIPHER_CTX_clear_flags_t)(ossl_EVP_CIPHER_CTX *ctx, int flags);
typedef int (*ossl_EVP_CIPHER_CTX_test_flags_t)(const ossl_EVP_CIPHER_CTX *ctx, int flags);
typedef int (*ossl_EVP_EncryptInit_t)(ossl_EVP_CIPHER_CTX *ctx, const ossl_EVP_CIPHER *cipher, const unsigned char *key, const unsigned char *iv);
typedef int (*ossl_EVP_EncryptInit_ex_t)(ossl_EVP_CIPHER_CTX *ctx, const ossl_EVP_CIPHER *cipher, ossl_ENGINE *impl, const unsigned char *key, const unsigned char *iv);
typedef int (*ossl_EVP_EncryptInit_ex2_t)(ossl_EVP_CIPHER_CTX *ctx, const ossl_EVP_CIPHER *cipher, const unsigned char *key, const unsigned char *iv, const ossl_OSSL_PARAM params[]);
typedef int (*ossl_EVP_EncryptUpdate_t)(ossl_EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl, const unsigned char *in, int inl);
typedef int (*ossl_EVP_EncryptFinal_ex_t)(ossl_EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl);
typedef int (*ossl_EVP_EncryptFinal_t)(ossl_EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl);
typedef int (*ossl_EVP_DecryptInit_t)(ossl_EVP_CIPHER_CTX *ctx, const ossl_EVP_CIPHER *cipher, const unsigned char *key, const unsigned char *iv);
typedef int (*ossl_EVP_DecryptInit_ex_t)(ossl_EVP_CIPHER_CTX *ctx, const ossl_EVP_CIPHER *cipher, ossl_ENGINE *impl, const unsigned char *key, const unsigned char *iv);
typedef int (*ossl_EVP_DecryptInit_ex2_t)(ossl_EVP_CIPHER_CTX *ctx, const ossl_EVP_CIPHER *cipher, const unsigned char *key, const unsigned char *iv, const ossl_OSSL_PARAM params[]);
typedef int (*ossl_EVP_DecryptUpdate_t)(ossl_EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl, const unsigned char *in, int inl);
typedef int (*ossl_EVP_DecryptFinal_t)(ossl_EVP_CIPHER_CTX *ctx, unsigned char *outm, int *outl);
typedef int (*ossl_EVP_DecryptFinal_ex_t)(ossl_EVP_CIPHER_CTX *ctx, unsigned char *outm, int *outl);
typedef int (*ossl_EVP_CipherInit_t)(ossl_EVP_CIPHER_CTX *ctx, const ossl_EVP_CIPHER *cipher, const unsigned char *key, const unsigned char *iv, int enc);
typedef int (*ossl_EVP_CipherInit_ex_t)(ossl_EVP_CIPHER_CTX *ctx, const ossl_EVP_CIPHER *cipher, ossl_ENGINE *impl, const unsigned char *key, const unsigned char *iv, int enc);
typedef int (*ossl_EVP_CipherInit_ex2_t)(ossl_EVP_CIPHER_CTX *ctx, const ossl_EVP_CIPHER *cipher, const unsigned char *key, const unsigned char *iv, int enc, const ossl_OSSL_PARAM params[]);
typedef int (*ossl_EVP_CipherUpdate_t)(ossl_EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl, const unsigned char *in, int inl);
typedef int (*ossl_EVP_CipherFinal_t)(ossl_EVP_CIPHER_CTX *ctx, unsigned char *outm, int *outl);
typedef int (*ossl_EVP_CipherFinal_ex_t)(ossl_EVP_CIPHER_CTX *ctx, unsigned char *outm, int *outl);
typedef int (*ossl_EVP_SignFinal_t)(ossl_EVP_MD_CTX *ctx, unsigned char *md, unsigned int *s, ossl_EVP_PKEY *pkey);
typedef int (*ossl_EVP_SignFinal_ex_t)(ossl_EVP_MD_CTX *ctx, unsigned char *md, unsigned int *s, ossl_EVP_PKEY *pkey, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_EVP_DigestSign_t)(ossl_EVP_MD_CTX *ctx, unsigned char *sigret, size_t *siglen, const unsigned char *tbs, size_t tbslen);
typedef int (*ossl_EVP_VerifyFinal_t)(ossl_EVP_MD_CTX *ctx, const unsigned char *sigbuf, unsigned int siglen, ossl_EVP_PKEY *pkey);
typedef int (*ossl_EVP_VerifyFinal_ex_t)(ossl_EVP_MD_CTX *ctx, const unsigned char *sigbuf, unsigned int siglen, ossl_EVP_PKEY *pkey, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_EVP_DigestVerify_t)(ossl_EVP_MD_CTX *ctx, const unsigned char *sigret, size_t siglen, const unsigned char *tbs, size_t tbslen);
typedef int (*ossl_EVP_DigestSignInit_ex_t)(ossl_EVP_MD_CTX *ctx, ossl_EVP_PKEY_CTX **pctx, const char *mdname, ossl_OSSL_LIB_CTX *libctx, const char *props, ossl_EVP_PKEY *pkey, const ossl_OSSL_PARAM params[]);
typedef int (*ossl_EVP_DigestSignInit_t)(ossl_EVP_MD_CTX *ctx, ossl_EVP_PKEY_CTX **pctx, const ossl_EVP_MD *type, ossl_ENGINE *e, ossl_EVP_PKEY *pkey);
typedef int (*ossl_EVP_DigestSignUpdate_t)(ossl_EVP_MD_CTX *ctx, const void *data, size_t dsize);
typedef int (*ossl_EVP_DigestSignFinal_t)(ossl_EVP_MD_CTX *ctx, unsigned char *sigret, size_t *siglen);
typedef int (*ossl_EVP_DigestVerifyInit_ex_t)(ossl_EVP_MD_CTX *ctx, ossl_EVP_PKEY_CTX **pctx, const char *mdname, ossl_OSSL_LIB_CTX *libctx, const char *props, ossl_EVP_PKEY *pkey, const ossl_OSSL_PARAM params[]);
typedef int (*ossl_EVP_DigestVerifyInit_t)(ossl_EVP_MD_CTX *ctx, ossl_EVP_PKEY_CTX **pctx, const ossl_EVP_MD *type, ossl_ENGINE *e, ossl_EVP_PKEY *pkey);
typedef int (*ossl_EVP_DigestVerifyUpdate_t)(ossl_EVP_MD_CTX *ctx, const void *data, size_t dsize);
typedef int (*ossl_EVP_DigestVerifyFinal_t)(ossl_EVP_MD_CTX *ctx, const unsigned char *sig, size_t siglen);
typedef int (*ossl_EVP_OpenInit_t)(ossl_EVP_CIPHER_CTX *ctx, const ossl_EVP_CIPHER *type, const unsigned char *ek, int ekl, const unsigned char *iv, ossl_EVP_PKEY *priv);
typedef int (*ossl_EVP_OpenFinal_t)(ossl_EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl);
typedef int (*ossl_EVP_SealInit_t)(ossl_EVP_CIPHER_CTX *ctx, const ossl_EVP_CIPHER *type, unsigned char **ek, int *ekl, unsigned char *iv, ossl_EVP_PKEY **pubk, int npubk);
typedef int (*ossl_EVP_SealFinal_t)(ossl_EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl);
typedef ossl_EVP_ENCODE_CTX * (*ossl_EVP_ENCODE_CTX_new_t)();
typedef void (*ossl_EVP_ENCODE_CTX_free_t)(ossl_EVP_ENCODE_CTX *ctx);
typedef int (*ossl_EVP_ENCODE_CTX_copy_t)(ossl_EVP_ENCODE_CTX *dctx, const ossl_EVP_ENCODE_CTX *sctx);
typedef int (*ossl_EVP_ENCODE_CTX_num_t)(ossl_EVP_ENCODE_CTX *ctx);
typedef void (*ossl_EVP_EncodeInit_t)(ossl_EVP_ENCODE_CTX *ctx);
typedef int (*ossl_EVP_EncodeUpdate_t)(ossl_EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl, const unsigned char *in, int inl);
typedef void (*ossl_EVP_EncodeFinal_t)(ossl_EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl);
typedef int (*ossl_EVP_EncodeBlock_t)(unsigned char *t, const unsigned char *f, int n);
typedef void (*ossl_EVP_DecodeInit_t)(ossl_EVP_ENCODE_CTX *ctx);
typedef int (*ossl_EVP_DecodeUpdate_t)(ossl_EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl, const unsigned char *in, int inl);
typedef int (*ossl_EVP_DecodeFinal_t)(ossl_EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl);
typedef int (*ossl_EVP_DecodeBlock_t)(unsigned char *t, const unsigned char *f, int n);
typedef ossl_EVP_CIPHER_CTX * (*ossl_EVP_CIPHER_CTX_new_t)();
typedef int (*ossl_EVP_CIPHER_CTX_reset_t)(ossl_EVP_CIPHER_CTX *c);
typedef void (*ossl_EVP_CIPHER_CTX_free_t)(ossl_EVP_CIPHER_CTX *c);
typedef int (*ossl_EVP_CIPHER_CTX_set_key_length_t)(ossl_EVP_CIPHER_CTX *x, int keylen);
typedef int (*ossl_EVP_CIPHER_CTX_set_padding_t)(ossl_EVP_CIPHER_CTX *c, int pad);
typedef int (*ossl_EVP_CIPHER_CTX_ctrl_t)(ossl_EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr);
typedef int (*ossl_EVP_CIPHER_CTX_rand_key_t)(ossl_EVP_CIPHER_CTX *ctx, unsigned char *key);
typedef int (*ossl_EVP_CIPHER_get_params_t)(ossl_EVP_CIPHER *cipher, ossl_OSSL_PARAM params[]);
typedef int (*ossl_EVP_CIPHER_CTX_set_params_t)(ossl_EVP_CIPHER_CTX *ctx, const ossl_OSSL_PARAM params[]);
typedef int (*ossl_EVP_CIPHER_CTX_get_params_t)(ossl_EVP_CIPHER_CTX *ctx, ossl_OSSL_PARAM params[]);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_CIPHER_gettable_params_t)(const ossl_EVP_CIPHER *cipher);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_CIPHER_settable_ctx_params_t)(const ossl_EVP_CIPHER *cipher);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_CIPHER_gettable_ctx_params_t)(const ossl_EVP_CIPHER *cipher);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_CIPHER_CTX_settable_params_t)(ossl_EVP_CIPHER_CTX *ctx);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_CIPHER_CTX_gettable_params_t)(ossl_EVP_CIPHER_CTX *ctx);
typedef const ossl_BIO_METHOD * (*ossl_BIO_f_md_t)();
typedef const ossl_BIO_METHOD * (*ossl_BIO_f_base64_t)();
typedef const ossl_BIO_METHOD * (*ossl_BIO_f_cipher_t)();
typedef const ossl_BIO_METHOD * (*ossl_BIO_f_reliable_t)();
typedef int (*ossl_BIO_set_cipher_t)(ossl_BIO *b, const ossl_EVP_CIPHER *c, const unsigned char *k, const unsigned char *i, int enc);
typedef const ossl_EVP_MD * (*ossl_EVP_md_null_t)();
typedef const ossl_EVP_MD * (*ossl_EVP_md4_t)();
typedef const ossl_EVP_MD * (*ossl_EVP_md5_t)();
typedef const ossl_EVP_MD * (*ossl_EVP_md5_sha1_t)();
typedef const ossl_EVP_MD * (*ossl_EVP_blake2b512_t)();
typedef const ossl_EVP_MD * (*ossl_EVP_blake2s256_t)();
typedef const ossl_EVP_MD * (*ossl_EVP_sha1_t)();
typedef const ossl_EVP_MD * (*ossl_EVP_sha224_t)();
typedef const ossl_EVP_MD * (*ossl_EVP_sha256_t)();
typedef const ossl_EVP_MD * (*ossl_EVP_sha384_t)();
typedef const ossl_EVP_MD * (*ossl_EVP_sha512_t)();
typedef const ossl_EVP_MD * (*ossl_EVP_sha512_224_t)();
typedef const ossl_EVP_MD * (*ossl_EVP_sha512_256_t)();
typedef const ossl_EVP_MD * (*ossl_EVP_sha3_224_t)();
typedef const ossl_EVP_MD * (*ossl_EVP_sha3_256_t)();
typedef const ossl_EVP_MD * (*ossl_EVP_sha3_384_t)();
typedef const ossl_EVP_MD * (*ossl_EVP_sha3_512_t)();
typedef const ossl_EVP_MD * (*ossl_EVP_shake128_t)();
typedef const ossl_EVP_MD * (*ossl_EVP_shake256_t)();
typedef const ossl_EVP_MD * (*ossl_EVP_mdc2_t)();
typedef const ossl_EVP_MD * (*ossl_EVP_ripemd160_t)();
typedef const ossl_EVP_MD * (*ossl_EVP_whirlpool_t)();
typedef const ossl_EVP_MD * (*ossl_EVP_sm3_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_enc_null_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_des_ecb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_des_ede_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_des_ede3_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_des_ede_ecb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_des_ede3_ecb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_des_cfb64_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_des_cfb1_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_des_cfb8_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_des_ede_cfb64_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_des_ede3_cfb64_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_des_ede3_cfb1_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_des_ede3_cfb8_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_des_ofb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_des_ede_ofb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_des_ede3_ofb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_des_cbc_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_des_ede_cbc_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_des_ede3_cbc_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_desx_cbc_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_des_ede3_wrap_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_rc4_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_rc4_40_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_rc4_hmac_md5_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_idea_ecb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_idea_cfb64_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_idea_ofb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_idea_cbc_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_rc2_ecb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_rc2_cbc_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_rc2_40_cbc_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_rc2_64_cbc_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_rc2_cfb64_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_rc2_ofb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_bf_ecb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_bf_cbc_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_bf_cfb64_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_bf_ofb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_cast5_ecb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_cast5_cbc_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_cast5_cfb64_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_cast5_ofb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_128_ecb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_128_cbc_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_128_cfb1_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_128_cfb8_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_128_cfb128_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_128_ofb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_128_ctr_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_128_ccm_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_128_gcm_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_128_xts_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_128_wrap_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_128_wrap_pad_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_128_ocb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_192_ecb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_192_cbc_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_192_cfb1_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_192_cfb8_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_192_cfb128_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_192_ofb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_192_ctr_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_192_ccm_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_192_gcm_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_192_wrap_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_192_wrap_pad_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_192_ocb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_256_ecb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_256_cbc_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_256_cfb1_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_256_cfb8_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_256_cfb128_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_256_ofb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_256_ctr_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_256_ccm_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_256_gcm_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_256_xts_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_256_wrap_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_256_wrap_pad_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_256_ocb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_128_cbc_hmac_sha1_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_256_cbc_hmac_sha1_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_128_cbc_hmac_sha256_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aes_256_cbc_hmac_sha256_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aria_128_ecb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aria_128_cbc_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aria_128_cfb1_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aria_128_cfb8_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aria_128_cfb128_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aria_128_ctr_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aria_128_ofb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aria_128_gcm_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aria_128_ccm_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aria_192_ecb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aria_192_cbc_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aria_192_cfb1_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aria_192_cfb8_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aria_192_cfb128_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aria_192_ctr_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aria_192_ofb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aria_192_gcm_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aria_192_ccm_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aria_256_ecb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aria_256_cbc_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aria_256_cfb1_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aria_256_cfb8_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aria_256_cfb128_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aria_256_ctr_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aria_256_ofb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aria_256_gcm_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_aria_256_ccm_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_camellia_128_ecb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_camellia_128_cbc_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_camellia_128_cfb1_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_camellia_128_cfb8_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_camellia_128_cfb128_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_camellia_128_ofb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_camellia_128_ctr_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_camellia_192_ecb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_camellia_192_cbc_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_camellia_192_cfb1_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_camellia_192_cfb8_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_camellia_192_cfb128_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_camellia_192_ofb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_camellia_192_ctr_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_camellia_256_ecb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_camellia_256_cbc_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_camellia_256_cfb1_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_camellia_256_cfb8_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_camellia_256_cfb128_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_camellia_256_ofb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_camellia_256_ctr_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_chacha20_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_chacha20_poly1305_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_seed_ecb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_seed_cbc_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_seed_cfb128_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_seed_ofb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_sm4_ecb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_sm4_cbc_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_sm4_cfb128_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_sm4_ofb_t)();
typedef const ossl_EVP_CIPHER * (*ossl_EVP_sm4_ctr_t)();
typedef int (*ossl_EVP_add_cipher_t)(const ossl_EVP_CIPHER *cipher);
typedef int (*ossl_EVP_add_digest_t)(const ossl_EVP_MD *digest);
typedef const ossl_EVP_CIPHER * (*ossl_EVP_get_cipherbyname_t)(const char *name);
typedef const ossl_EVP_MD * (*ossl_EVP_get_digestbyname_t)(const char *name);
typedef void (*ossl_EVP_CIPHER_do_all_t)(void (*fn)(const ossl_EVP_CIPHER *, const char *, const char *, void *), void *arg);
typedef void (*ossl_EVP_CIPHER_do_all_sorted_t)(void (*fn)(const ossl_EVP_CIPHER *, const char *, const char *, void *), void *arg);
typedef void (*ossl_EVP_CIPHER_do_all_provided_t)(ossl_OSSL_LIB_CTX *libctx, void (*fn)(ossl_EVP_CIPHER *, void *), void *arg);
typedef void (*ossl_EVP_MD_do_all_t)(void (*fn)(const ossl_EVP_MD *, const char *, const char *, void *), void *arg);
typedef void (*ossl_EVP_MD_do_all_sorted_t)(void (*fn)(const ossl_EVP_MD *, const char *, const char *, void *), void *arg);
typedef void (*ossl_EVP_MD_do_all_provided_t)(ossl_OSSL_LIB_CTX *libctx, void (*fn)(ossl_EVP_MD *, void *), void *arg);
typedef ossl_EVP_MAC * (*ossl_EVP_MAC_fetch_t)(ossl_OSSL_LIB_CTX *libctx, const char *algorithm, const char *properties);
typedef int (*ossl_EVP_MAC_up_ref_t)(ossl_EVP_MAC *mac);
typedef void (*ossl_EVP_MAC_free_t)(ossl_EVP_MAC *mac);
typedef const char * (*ossl_EVP_MAC_get0_name_t)(const ossl_EVP_MAC *mac);
typedef const char * (*ossl_EVP_MAC_get0_description_t)(const ossl_EVP_MAC *mac);
typedef int (*ossl_EVP_MAC_is_a_t)(const ossl_EVP_MAC *mac, const char *name);
typedef const ossl_OSSL_PROVIDER * (*ossl_EVP_MAC_get0_provider_t)(const ossl_EVP_MAC *mac);
typedef int (*ossl_EVP_MAC_get_params_t)(ossl_EVP_MAC *mac, ossl_OSSL_PARAM params[]);
typedef ossl_EVP_MAC_CTX * (*ossl_EVP_MAC_CTX_new_t)(ossl_EVP_MAC *mac);
typedef void (*ossl_EVP_MAC_CTX_free_t)(ossl_EVP_MAC_CTX *ctx);
typedef ossl_EVP_MAC_CTX * (*ossl_EVP_MAC_CTX_dup_t)(const ossl_EVP_MAC_CTX *src);
typedef ossl_EVP_MAC * (*ossl_EVP_MAC_CTX_get0_mac_t)(ossl_EVP_MAC_CTX *ctx);
typedef int (*ossl_EVP_MAC_CTX_get_params_t)(ossl_EVP_MAC_CTX *ctx, ossl_OSSL_PARAM params[]);
typedef int (*ossl_EVP_MAC_CTX_set_params_t)(ossl_EVP_MAC_CTX *ctx, const ossl_OSSL_PARAM params[]);
typedef size_t (*ossl_EVP_MAC_CTX_get_mac_size_t)(ossl_EVP_MAC_CTX *ctx);
typedef size_t (*ossl_EVP_MAC_CTX_get_block_size_t)(ossl_EVP_MAC_CTX *ctx);
typedef unsigned char * (*ossl_EVP_Q_mac_t)(ossl_OSSL_LIB_CTX *libctx, const char *name, const char *propq, const char *subalg, const ossl_OSSL_PARAM *params, const void *key, size_t keylen, const unsigned char *data, size_t datalen, unsigned char *out, size_t outsize, size_t *outlen);
typedef int (*ossl_EVP_MAC_init_t)(ossl_EVP_MAC_CTX *ctx, const unsigned char *key, size_t keylen, const ossl_OSSL_PARAM params[]);
typedef int (*ossl_EVP_MAC_update_t)(ossl_EVP_MAC_CTX *ctx, const unsigned char *data, size_t datalen);
typedef int (*ossl_EVP_MAC_final_t)(ossl_EVP_MAC_CTX *ctx, unsigned char *out, size_t *outl, size_t outsize);
typedef int (*ossl_EVP_MAC_finalXOF_t)(ossl_EVP_MAC_CTX *ctx, unsigned char *out, size_t outsize);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_MAC_gettable_params_t)(const ossl_EVP_MAC *mac);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_MAC_gettable_ctx_params_t)(const ossl_EVP_MAC *mac);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_MAC_settable_ctx_params_t)(const ossl_EVP_MAC *mac);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_MAC_CTX_gettable_params_t)(ossl_EVP_MAC_CTX *ctx);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_MAC_CTX_settable_params_t)(ossl_EVP_MAC_CTX *ctx);
typedef void (*ossl_EVP_MAC_do_all_provided_t)(ossl_OSSL_LIB_CTX *libctx, void (*fn)(ossl_EVP_MAC *, void *), void *arg);
typedef int (*ossl_EVP_MAC_names_do_all_t)(const ossl_EVP_MAC *mac, void (*fn)(const char *, void *), void *data);
typedef ossl_EVP_RAND * (*ossl_EVP_RAND_fetch_t)(ossl_OSSL_LIB_CTX *libctx, const char *algorithm, const char *properties);
typedef int (*ossl_EVP_RAND_up_ref_t)(ossl_EVP_RAND *rand);
typedef void (*ossl_EVP_RAND_free_t)(ossl_EVP_RAND *rand);
typedef const char * (*ossl_EVP_RAND_get0_name_t)(const ossl_EVP_RAND *rand);
typedef const char * (*ossl_EVP_RAND_get0_description_t)(const ossl_EVP_RAND *md);
typedef int (*ossl_EVP_RAND_is_a_t)(const ossl_EVP_RAND *rand, const char *name);
typedef const ossl_OSSL_PROVIDER * (*ossl_EVP_RAND_get0_provider_t)(const ossl_EVP_RAND *rand);
typedef int (*ossl_EVP_RAND_get_params_t)(ossl_EVP_RAND *rand, ossl_OSSL_PARAM params[]);
typedef ossl_EVP_RAND_CTX * (*ossl_EVP_RAND_CTX_new_t)(ossl_EVP_RAND *rand, ossl_EVP_RAND_CTX *parent);
typedef void (*ossl_EVP_RAND_CTX_free_t)(ossl_EVP_RAND_CTX *ctx);
typedef ossl_EVP_RAND * (*ossl_EVP_RAND_CTX_get0_rand_t)(ossl_EVP_RAND_CTX *ctx);
typedef int (*ossl_EVP_RAND_CTX_get_params_t)(ossl_EVP_RAND_CTX *ctx, ossl_OSSL_PARAM params[]);
typedef int (*ossl_EVP_RAND_CTX_set_params_t)(ossl_EVP_RAND_CTX *ctx, const ossl_OSSL_PARAM params[]);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_RAND_gettable_params_t)(const ossl_EVP_RAND *rand);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_RAND_gettable_ctx_params_t)(const ossl_EVP_RAND *rand);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_RAND_settable_ctx_params_t)(const ossl_EVP_RAND *rand);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_RAND_CTX_gettable_params_t)(ossl_EVP_RAND_CTX *ctx);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_RAND_CTX_settable_params_t)(ossl_EVP_RAND_CTX *ctx);
typedef void (*ossl_EVP_RAND_do_all_provided_t)(ossl_OSSL_LIB_CTX *libctx, void (*fn)(ossl_EVP_RAND *, void *), void *arg);
typedef int (*ossl_EVP_RAND_names_do_all_t)(const ossl_EVP_RAND *rand, void (*fn)(const char *, void *), void *data);
typedef int (*ossl_EVP_RAND_instantiate_t)(ossl_EVP_RAND_CTX *ctx, unsigned int strength, int prediction_resistance, const unsigned char *pstr, size_t pstr_len, const ossl_OSSL_PARAM params[]);
typedef int (*ossl_EVP_RAND_uninstantiate_t)(ossl_EVP_RAND_CTX *ctx);
typedef int (*ossl_EVP_RAND_generate_t)(ossl_EVP_RAND_CTX *ctx, unsigned char *out, size_t outlen, unsigned int strength, int prediction_resistance, const unsigned char *addin, size_t addin_len);
typedef int (*ossl_EVP_RAND_reseed_t)(ossl_EVP_RAND_CTX *ctx, int prediction_resistance, const unsigned char *ent, size_t ent_len, const unsigned char *addin, size_t addin_len);
typedef int (*ossl_EVP_RAND_nonce_t)(ossl_EVP_RAND_CTX *ctx, unsigned char *out, size_t outlen);
typedef int (*ossl_EVP_RAND_enable_locking_t)(ossl_EVP_RAND_CTX *ctx);
typedef int (*ossl_EVP_RAND_verify_zeroization_t)(ossl_EVP_RAND_CTX *ctx);
typedef unsigned int (*ossl_EVP_RAND_get_strength_t)(ossl_EVP_RAND_CTX *ctx);
typedef int (*ossl_EVP_RAND_get_state_t)(ossl_EVP_RAND_CTX *ctx);
typedef int (*ossl_EVP_PKEY_decrypt_old_t)(unsigned char *dec_key, const unsigned char *enc_key, int enc_key_len, ossl_EVP_PKEY *private_key);
typedef int (*ossl_EVP_PKEY_encrypt_old_t)(unsigned char *enc_key, const unsigned char *key, int key_len, ossl_EVP_PKEY *pub_key);
typedef int (*ossl_EVP_PKEY_is_a_t)(const ossl_EVP_PKEY *pkey, const char *name);
typedef int (*ossl_EVP_PKEY_type_names_do_all_t)(const ossl_EVP_PKEY *pkey, void (*fn)(const char *, void *), void *data);
typedef int (*ossl_EVP_PKEY_type_t)(int type);
typedef int (*ossl_EVP_PKEY_get_id_t)(const ossl_EVP_PKEY *pkey);
typedef int (*ossl_EVP_PKEY_get_base_id_t)(const ossl_EVP_PKEY *pkey);
typedef int (*ossl_EVP_PKEY_get_bits_t)(const ossl_EVP_PKEY *pkey);
typedef int (*ossl_EVP_PKEY_get_security_bits_t)(const ossl_EVP_PKEY *pkey);
typedef int (*ossl_EVP_PKEY_get_size_t)(const ossl_EVP_PKEY *pkey);
typedef int (*ossl_EVP_PKEY_can_sign_t)(const ossl_EVP_PKEY *pkey);
typedef int (*ossl_EVP_PKEY_set_type_t)(ossl_EVP_PKEY *pkey, int type);
typedef int (*ossl_EVP_PKEY_set_type_str_t)(ossl_EVP_PKEY *pkey, const char *str, int len);
typedef int (*ossl_EVP_PKEY_set_type_by_keymgmt_t)(ossl_EVP_PKEY *pkey, ossl_EVP_KEYMGMT *keymgmt);
typedef int (*ossl_EVP_PKEY_set1_engine_t)(ossl_EVP_PKEY *pkey, ossl_ENGINE *e);
typedef ossl_ENGINE * (*ossl_EVP_PKEY_get0_engine_t)(const ossl_EVP_PKEY *pkey);
typedef int (*ossl_EVP_PKEY_assign_t)(ossl_EVP_PKEY *pkey, int type, void *key);
typedef void * (*ossl_EVP_PKEY_get0_t)(const ossl_EVP_PKEY *pkey);
typedef const unsigned char * (*ossl_EVP_PKEY_get0_hmac_t)(const ossl_EVP_PKEY *pkey, size_t *len);
typedef const unsigned char * (*ossl_EVP_PKEY_get0_poly1305_t)(const ossl_EVP_PKEY *pkey, size_t *len);
typedef const unsigned char * (*ossl_EVP_PKEY_get0_siphash_t)(const ossl_EVP_PKEY *pkey, size_t *len);
typedef int (*ossl_EVP_PKEY_set1_RSA_t)(ossl_EVP_PKEY *pkey, struct ossl_rsa_st *key);
typedef const struct ossl_rsa_st * (*ossl_EVP_PKEY_get0_RSA_t)(const ossl_EVP_PKEY *pkey);
typedef struct ossl_rsa_st * (*ossl_EVP_PKEY_get1_RSA_t)(ossl_EVP_PKEY *pkey);
typedef int (*ossl_EVP_PKEY_set1_DSA_t)(ossl_EVP_PKEY *pkey, struct ossl_dsa_st *key);
typedef const struct ossl_dsa_st * (*ossl_EVP_PKEY_get0_DSA_t)(const ossl_EVP_PKEY *pkey);
typedef struct ossl_dsa_st * (*ossl_EVP_PKEY_get1_DSA_t)(ossl_EVP_PKEY *pkey);
typedef int (*ossl_EVP_PKEY_set1_DH_t)(ossl_EVP_PKEY *pkey, struct ossl_dh_st *key);
typedef const struct ossl_dh_st * (*ossl_EVP_PKEY_get0_DH_t)(const ossl_EVP_PKEY *pkey);
typedef struct ossl_dh_st * (*ossl_EVP_PKEY_get1_DH_t)(ossl_EVP_PKEY *pkey);
typedef int (*ossl_EVP_PKEY_set1_EC_KEY_t)(ossl_EVP_PKEY *pkey, struct ossl_ec_key_st *key);
typedef const struct ossl_ec_key_st * (*ossl_EVP_PKEY_get0_EC_KEY_t)(const ossl_EVP_PKEY *pkey);
typedef struct ossl_ec_key_st * (*ossl_EVP_PKEY_get1_EC_KEY_t)(ossl_EVP_PKEY *pkey);
typedef ossl_EVP_PKEY * (*ossl_EVP_PKEY_new_t)();
typedef int (*ossl_EVP_PKEY_up_ref_t)(ossl_EVP_PKEY *pkey);
typedef ossl_EVP_PKEY * (*ossl_EVP_PKEY_dup_t)(ossl_EVP_PKEY *pkey);
typedef void (*ossl_EVP_PKEY_free_t)(ossl_EVP_PKEY *pkey);
typedef const char * (*ossl_EVP_PKEY_get0_description_t)(const ossl_EVP_PKEY *pkey);
typedef const ossl_OSSL_PROVIDER * (*ossl_EVP_PKEY_get0_provider_t)(const ossl_EVP_PKEY *key);
typedef ossl_EVP_PKEY * (*ossl_d2i_PublicKey_t)(int type, ossl_EVP_PKEY **a, const unsigned char **pp, long length);
typedef int (*ossl_i2d_PublicKey_t)(const ossl_EVP_PKEY *a, unsigned char **pp);
typedef ossl_EVP_PKEY * (*ossl_d2i_PrivateKey_ex_t)(int type, ossl_EVP_PKEY **a, const unsigned char **pp, long length, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef ossl_EVP_PKEY * (*ossl_d2i_PrivateKey_t)(int type, ossl_EVP_PKEY **a, const unsigned char **pp, long length);
typedef ossl_EVP_PKEY * (*ossl_d2i_AutoPrivateKey_ex_t)(ossl_EVP_PKEY **a, const unsigned char **pp, long length, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef ossl_EVP_PKEY * (*ossl_d2i_AutoPrivateKey_t)(ossl_EVP_PKEY **a, const unsigned char **pp, long length);
typedef int (*ossl_i2d_PrivateKey_t)(const ossl_EVP_PKEY *a, unsigned char **pp);
typedef int (*ossl_i2d_KeyParams_t)(const ossl_EVP_PKEY *a, unsigned char **pp);
typedef ossl_EVP_PKEY * (*ossl_d2i_KeyParams_t)(int type, ossl_EVP_PKEY **a, const unsigned char **pp, long length);
typedef int (*ossl_i2d_KeyParams_bio_t)(ossl_BIO *bp, const ossl_EVP_PKEY *pkey);
typedef ossl_EVP_PKEY * (*ossl_d2i_KeyParams_bio_t)(int type, ossl_EVP_PKEY **a, ossl_BIO *in);
typedef int (*ossl_EVP_PKEY_copy_parameters_t)(ossl_EVP_PKEY *to, const ossl_EVP_PKEY *from);
typedef int (*ossl_EVP_PKEY_missing_parameters_t)(const ossl_EVP_PKEY *pkey);
typedef int (*ossl_EVP_PKEY_save_parameters_t)(ossl_EVP_PKEY *pkey, int mode);
typedef int (*ossl_EVP_PKEY_parameters_eq_t)(const ossl_EVP_PKEY *a, const ossl_EVP_PKEY *b);
typedef int (*ossl_EVP_PKEY_eq_t)(const ossl_EVP_PKEY *a, const ossl_EVP_PKEY *b);
typedef int (*ossl_EVP_PKEY_cmp_parameters_t)(const ossl_EVP_PKEY *a, const ossl_EVP_PKEY *b);
typedef int (*ossl_EVP_PKEY_cmp_t)(const ossl_EVP_PKEY *a, const ossl_EVP_PKEY *b);
typedef int (*ossl_EVP_PKEY_print_public_t)(ossl_BIO *out, const ossl_EVP_PKEY *pkey, int indent, ossl_ASN1_PCTX *pctx);
typedef int (*ossl_EVP_PKEY_print_private_t)(ossl_BIO *out, const ossl_EVP_PKEY *pkey, int indent, ossl_ASN1_PCTX *pctx);
typedef int (*ossl_EVP_PKEY_print_params_t)(ossl_BIO *out, const ossl_EVP_PKEY *pkey, int indent, ossl_ASN1_PCTX *pctx);
typedef int (*ossl_EVP_PKEY_print_public_fp_t)(FILE *fp, const ossl_EVP_PKEY *pkey, int indent, ossl_ASN1_PCTX *pctx);
typedef int (*ossl_EVP_PKEY_print_private_fp_t)(FILE *fp, const ossl_EVP_PKEY *pkey, int indent, ossl_ASN1_PCTX *pctx);
typedef int (*ossl_EVP_PKEY_print_params_fp_t)(FILE *fp, const ossl_EVP_PKEY *pkey, int indent, ossl_ASN1_PCTX *pctx);
typedef int (*ossl_EVP_PKEY_get_default_digest_nid_t)(ossl_EVP_PKEY *pkey, int *pnid);
typedef int (*ossl_EVP_PKEY_get_default_digest_name_t)(ossl_EVP_PKEY *pkey, char *mdname, size_t mdname_sz);
typedef int (*ossl_EVP_PKEY_digestsign_supports_digest_t)(ossl_EVP_PKEY *pkey, ossl_OSSL_LIB_CTX *libctx, const char *name, const char *propq);
typedef int (*ossl_EVP_PKEY_set1_encoded_public_key_t)(ossl_EVP_PKEY *pkey, const unsigned char *pub, size_t publen);
typedef size_t (*ossl_EVP_PKEY_get1_encoded_public_key_t)(ossl_EVP_PKEY *pkey, unsigned char **ppub);
typedef int (*ossl_EVP_CIPHER_param_to_asn1_t)(ossl_EVP_CIPHER_CTX *c, ossl_ASN1_TYPE *type);
typedef int (*ossl_EVP_CIPHER_asn1_to_param_t)(ossl_EVP_CIPHER_CTX *c, ossl_ASN1_TYPE *type);
typedef int (*ossl_EVP_CIPHER_set_asn1_iv_t)(ossl_EVP_CIPHER_CTX *c, ossl_ASN1_TYPE *type);
typedef int (*ossl_EVP_CIPHER_get_asn1_iv_t)(ossl_EVP_CIPHER_CTX *c, ossl_ASN1_TYPE *type);
typedef int (*ossl_PKCS5_PBE_keyivgen_t)(ossl_EVP_CIPHER_CTX *ctx, const char *pass, int passlen, ossl_ASN1_TYPE *param, const ossl_EVP_CIPHER *cipher, const ossl_EVP_MD *md, int en_de);
typedef int (*ossl_PKCS5_PBE_keyivgen_ex_t)(ossl_EVP_CIPHER_CTX *cctx, const char *pass, int passlen, ossl_ASN1_TYPE *param, const ossl_EVP_CIPHER *cipher, const ossl_EVP_MD *md, int en_de, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_PKCS5_PBKDF2_HMAC_SHA1_t)(const char *pass, int passlen, const unsigned char *salt, int saltlen, int iter, int keylen, unsigned char *out);
typedef int (*ossl_PKCS5_PBKDF2_HMAC_t)(const char *pass, int passlen, const unsigned char *salt, int saltlen, int iter, const ossl_EVP_MD *digest, int keylen, unsigned char *out);
typedef int (*ossl_PKCS5_v2_PBE_keyivgen_t)(ossl_EVP_CIPHER_CTX *ctx, const char *pass, int passlen, ossl_ASN1_TYPE *param, const ossl_EVP_CIPHER *cipher, const ossl_EVP_MD *md, int en_de);
typedef int (*ossl_PKCS5_v2_PBE_keyivgen_ex_t)(ossl_EVP_CIPHER_CTX *ctx, const char *pass, int passlen, ossl_ASN1_TYPE *param, const ossl_EVP_CIPHER *cipher, const ossl_EVP_MD *md, int en_de, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_EVP_PBE_scrypt_t)(const char *pass, size_t passlen, const unsigned char *salt, size_t saltlen, uint64_t N, uint64_t r, uint64_t p, uint64_t maxmem, unsigned char *key, size_t keylen);
typedef int (*ossl_EVP_PBE_scrypt_ex_t)(const char *pass, size_t passlen, const unsigned char *salt, size_t saltlen, uint64_t N, uint64_t r, uint64_t p, uint64_t maxmem, unsigned char *key, size_t keylen, ossl_OSSL_LIB_CTX *ctx, const char *propq);
typedef int (*ossl_PKCS5_v2_scrypt_keyivgen_t)(ossl_EVP_CIPHER_CTX *ctx, const char *pass, int passlen, ossl_ASN1_TYPE *param, const ossl_EVP_CIPHER *c, const ossl_EVP_MD *md, int en_de);
typedef int (*ossl_PKCS5_v2_scrypt_keyivgen_ex_t)(ossl_EVP_CIPHER_CTX *ctx, const char *pass, int passlen, ossl_ASN1_TYPE *param, const ossl_EVP_CIPHER *c, const ossl_EVP_MD *md, int en_de, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef void (*ossl_PKCS5_PBE_add_t)();
typedef int (*ossl_EVP_PBE_CipherInit_t)(ossl_ASN1_OBJECT *pbe_obj, const char *pass, int passlen, ossl_ASN1_TYPE *param, ossl_EVP_CIPHER_CTX *ctx, int en_de);
typedef int (*ossl_EVP_PBE_CipherInit_ex_t)(ossl_ASN1_OBJECT *pbe_obj, const char *pass, int passlen, ossl_ASN1_TYPE *param, ossl_EVP_CIPHER_CTX *ctx, int en_de, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_EVP_PBE_alg_add_type_t)(int pbe_type, int pbe_nid, int cipher_nid, int md_nid, ossl_EVP_PBE_KEYGEN *keygen);
typedef int (*ossl_EVP_PBE_alg_add_t)(int nid, const ossl_EVP_CIPHER *cipher, const ossl_EVP_MD *md, ossl_EVP_PBE_KEYGEN *keygen);
typedef int (*ossl_EVP_PBE_find_t)(int type, int pbe_nid, int *pcnid, int *pmnid, ossl_EVP_PBE_KEYGEN **pkeygen);
typedef int (*ossl_EVP_PBE_find_ex_t)(int type, int pbe_nid, int *pcnid, int *pmnid, ossl_EVP_PBE_KEYGEN **pkeygen, ossl_EVP_PBE_KEYGEN_EX **pkeygen_ex);
typedef void (*ossl_EVP_PBE_cleanup_t)();
typedef int (*ossl_EVP_PBE_get_t)(int *ptype, int *ppbe_nid, size_t num);
typedef int (*ossl_EVP_PKEY_asn1_get_count_t)();
typedef const ossl_EVP_PKEY_ASN1_METHOD * (*ossl_EVP_PKEY_asn1_get0_t)(int idx);
typedef const ossl_EVP_PKEY_ASN1_METHOD * (*ossl_EVP_PKEY_asn1_find_t)(ossl_ENGINE **pe, int type);
typedef const ossl_EVP_PKEY_ASN1_METHOD * (*ossl_EVP_PKEY_asn1_find_str_t)(ossl_ENGINE **pe, const char *str, int len);
typedef int (*ossl_EVP_PKEY_asn1_add0_t)(const ossl_EVP_PKEY_ASN1_METHOD *ameth);
typedef int (*ossl_EVP_PKEY_asn1_add_alias_t)(int to, int from);
typedef int (*ossl_EVP_PKEY_asn1_get0_info_t)(int *ppkey_id, int *pkey_base_id, int *ppkey_flags, const char **pinfo, const char **ppem_str, const ossl_EVP_PKEY_ASN1_METHOD *ameth);
typedef const ossl_EVP_PKEY_ASN1_METHOD * (*ossl_EVP_PKEY_get0_asn1_t)(const ossl_EVP_PKEY *pkey);
typedef ossl_EVP_PKEY_ASN1_METHOD * (*ossl_EVP_PKEY_asn1_new_t)(int id, int flags, const char *pem_str, const char *info);
typedef void (*ossl_EVP_PKEY_asn1_copy_t)(ossl_EVP_PKEY_ASN1_METHOD *dst, const ossl_EVP_PKEY_ASN1_METHOD *src);
typedef void (*ossl_EVP_PKEY_asn1_free_t)(ossl_EVP_PKEY_ASN1_METHOD *ameth);
typedef void (*ossl_EVP_PKEY_asn1_set_public_t)(ossl_EVP_PKEY_ASN1_METHOD *ameth, int (*pub_decode)(ossl_EVP_PKEY *, const ossl_X509_PUBKEY *), int (*pub_encode)(ossl_X509_PUBKEY *, const ossl_EVP_PKEY *), int (*pub_cmp)(const ossl_EVP_PKEY *, const ossl_EVP_PKEY *), int (*pub_print)(ossl_BIO *, const ossl_EVP_PKEY *, int, ossl_ASN1_PCTX *), int (*pkey_size)(const ossl_EVP_PKEY *), int (*pkey_bits)(const ossl_EVP_PKEY *));
typedef void (*ossl_EVP_PKEY_asn1_set_private_t)(ossl_EVP_PKEY_ASN1_METHOD *ameth, int (*priv_decode)(ossl_EVP_PKEY *, const ossl_PKCS8_PRIV_KEY_INFO *), int (*priv_encode)(ossl_PKCS8_PRIV_KEY_INFO *, const ossl_EVP_PKEY *), int (*priv_print)(ossl_BIO *, const ossl_EVP_PKEY *, int, ossl_ASN1_PCTX *));
typedef void (*ossl_EVP_PKEY_asn1_set_param_t)(ossl_EVP_PKEY_ASN1_METHOD *ameth, int (*param_decode)(ossl_EVP_PKEY *, const unsigned char **, int), int (*param_encode)(const ossl_EVP_PKEY *, unsigned char **), int (*param_missing)(const ossl_EVP_PKEY *), int (*param_copy)(ossl_EVP_PKEY *, const ossl_EVP_PKEY *), int (*param_cmp)(const ossl_EVP_PKEY *, const ossl_EVP_PKEY *), int (*param_print)(ossl_BIO *, const ossl_EVP_PKEY *, int, ossl_ASN1_PCTX *));
typedef void (*ossl_EVP_PKEY_asn1_set_free_t)(ossl_EVP_PKEY_ASN1_METHOD *ameth, void (*pkey_free)(ossl_EVP_PKEY *));
typedef void (*ossl_EVP_PKEY_asn1_set_ctrl_t)(ossl_EVP_PKEY_ASN1_METHOD *ameth, int (*pkey_ctrl)(ossl_EVP_PKEY *, int, long, void *));
typedef void (*ossl_EVP_PKEY_asn1_set_item_t)(ossl_EVP_PKEY_ASN1_METHOD *ameth, int (*item_verify)(ossl_EVP_MD_CTX *, const ossl_ASN1_ITEM *, const void *, const ossl_X509_ALGOR *, const ossl_ASN1_BIT_STRING *, ossl_EVP_PKEY *), int (*item_sign)(ossl_EVP_MD_CTX *, const ossl_ASN1_ITEM *, const void *, ossl_X509_ALGOR *, ossl_X509_ALGOR *, ossl_ASN1_BIT_STRING *));
typedef void (*ossl_EVP_PKEY_asn1_set_siginf_t)(ossl_EVP_PKEY_ASN1_METHOD *ameth, int (*siginf_set)(ossl_X509_SIG_INFO *, const ossl_X509_ALGOR *, const ossl_ASN1_STRING *));
typedef void (*ossl_EVP_PKEY_asn1_set_check_t)(ossl_EVP_PKEY_ASN1_METHOD *ameth, int (*pkey_check)(const ossl_EVP_PKEY *));
typedef void (*ossl_EVP_PKEY_asn1_set_public_check_t)(ossl_EVP_PKEY_ASN1_METHOD *ameth, int (*pkey_pub_check)(const ossl_EVP_PKEY *));
typedef void (*ossl_EVP_PKEY_asn1_set_param_check_t)(ossl_EVP_PKEY_ASN1_METHOD *ameth, int (*pkey_param_check)(const ossl_EVP_PKEY *));
typedef void (*ossl_EVP_PKEY_asn1_set_set_priv_key_t)(ossl_EVP_PKEY_ASN1_METHOD *ameth, int (*set_priv_key)(ossl_EVP_PKEY *, const unsigned char *, size_t));
typedef void (*ossl_EVP_PKEY_asn1_set_set_pub_key_t)(ossl_EVP_PKEY_ASN1_METHOD *ameth, int (*set_pub_key)(ossl_EVP_PKEY *, const unsigned char *, size_t));
typedef void (*ossl_EVP_PKEY_asn1_set_get_priv_key_t)(ossl_EVP_PKEY_ASN1_METHOD *ameth, int (*get_priv_key)(const ossl_EVP_PKEY *, unsigned char *, size_t *));
typedef void (*ossl_EVP_PKEY_asn1_set_get_pub_key_t)(ossl_EVP_PKEY_ASN1_METHOD *ameth, int (*get_pub_key)(const ossl_EVP_PKEY *, unsigned char *, size_t *));
typedef void (*ossl_EVP_PKEY_asn1_set_security_bits_t)(ossl_EVP_PKEY_ASN1_METHOD *ameth, int (*pkey_security_bits)(const ossl_EVP_PKEY *));
typedef int (*ossl_EVP_PKEY_CTX_get_signature_md_t)(ossl_EVP_PKEY_CTX *ctx, const ossl_EVP_MD **md);
typedef int (*ossl_EVP_PKEY_CTX_set_signature_md_t)(ossl_EVP_PKEY_CTX *ctx, const ossl_EVP_MD *md);
typedef int (*ossl_EVP_PKEY_CTX_set1_id_t)(ossl_EVP_PKEY_CTX *ctx, const void *id, int len);
typedef int (*ossl_EVP_PKEY_CTX_get1_id_t)(ossl_EVP_PKEY_CTX *ctx, void *id);
typedef int (*ossl_EVP_PKEY_CTX_get1_id_len_t)(ossl_EVP_PKEY_CTX *ctx, size_t *id_len);
typedef int (*ossl_EVP_PKEY_CTX_set_kem_op_t)(ossl_EVP_PKEY_CTX *ctx, const char *op);
typedef const char * (*ossl_EVP_PKEY_get0_type_name_t)(const ossl_EVP_PKEY *key);
typedef int (*ossl_EVP_PKEY_CTX_set_mac_key_t)(ossl_EVP_PKEY_CTX *ctx, const unsigned char *key, int keylen);
typedef const ossl_EVP_PKEY_METHOD * (*ossl_EVP_PKEY_meth_find_t)(int type);
typedef ossl_EVP_PKEY_METHOD * (*ossl_EVP_PKEY_meth_new_t)(int id, int flags);
typedef void (*ossl_EVP_PKEY_meth_get0_info_t)(int *ppkey_id, int *pflags, const ossl_EVP_PKEY_METHOD *meth);
typedef void (*ossl_EVP_PKEY_meth_copy_t)(ossl_EVP_PKEY_METHOD *dst, const ossl_EVP_PKEY_METHOD *src);
typedef void (*ossl_EVP_PKEY_meth_free_t)(ossl_EVP_PKEY_METHOD *pmeth);
typedef int (*ossl_EVP_PKEY_meth_add0_t)(const ossl_EVP_PKEY_METHOD *pmeth);
typedef int (*ossl_EVP_PKEY_meth_remove_t)(const ossl_EVP_PKEY_METHOD *pmeth);
typedef size_t (*ossl_EVP_PKEY_meth_get_count_t)();
typedef const ossl_EVP_PKEY_METHOD * (*ossl_EVP_PKEY_meth_get0_t)(size_t idx);
typedef ossl_EVP_KEYMGMT * (*ossl_EVP_KEYMGMT_fetch_t)(ossl_OSSL_LIB_CTX *ctx, const char *algorithm, const char *properties);
typedef int (*ossl_EVP_KEYMGMT_up_ref_t)(ossl_EVP_KEYMGMT *keymgmt);
typedef void (*ossl_EVP_KEYMGMT_free_t)(ossl_EVP_KEYMGMT *keymgmt);
typedef const ossl_OSSL_PROVIDER * (*ossl_EVP_KEYMGMT_get0_provider_t)(const ossl_EVP_KEYMGMT *keymgmt);
typedef const char * (*ossl_EVP_KEYMGMT_get0_name_t)(const ossl_EVP_KEYMGMT *keymgmt);
typedef const char * (*ossl_EVP_KEYMGMT_get0_description_t)(const ossl_EVP_KEYMGMT *keymgmt);
typedef int (*ossl_EVP_KEYMGMT_is_a_t)(const ossl_EVP_KEYMGMT *keymgmt, const char *name);
typedef void (*ossl_EVP_KEYMGMT_do_all_provided_t)(ossl_OSSL_LIB_CTX *libctx, void (*fn)(ossl_EVP_KEYMGMT *, void *), void *arg);
typedef int (*ossl_EVP_KEYMGMT_names_do_all_t)(const ossl_EVP_KEYMGMT *keymgmt, void (*fn)(const char *, void *), void *data);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_KEYMGMT_gettable_params_t)(const ossl_EVP_KEYMGMT *keymgmt);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_KEYMGMT_settable_params_t)(const ossl_EVP_KEYMGMT *keymgmt);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_KEYMGMT_gen_settable_params_t)(const ossl_EVP_KEYMGMT *keymgmt);
typedef ossl_EVP_PKEY_CTX * (*ossl_EVP_PKEY_CTX_new_t)(ossl_EVP_PKEY *pkey, ossl_ENGINE *e);
typedef ossl_EVP_PKEY_CTX * (*ossl_EVP_PKEY_CTX_new_id_t)(int id, ossl_ENGINE *e);
typedef ossl_EVP_PKEY_CTX * (*ossl_EVP_PKEY_CTX_new_from_name_t)(ossl_OSSL_LIB_CTX *libctx, const char *name, const char *propquery);
typedef ossl_EVP_PKEY_CTX * (*ossl_EVP_PKEY_CTX_new_from_pkey_t)(ossl_OSSL_LIB_CTX *libctx, ossl_EVP_PKEY *pkey, const char *propquery);
typedef ossl_EVP_PKEY_CTX * (*ossl_EVP_PKEY_CTX_dup_t)(const ossl_EVP_PKEY_CTX *ctx);
typedef void (*ossl_EVP_PKEY_CTX_free_t)(ossl_EVP_PKEY_CTX *ctx);
typedef int (*ossl_EVP_PKEY_CTX_is_a_t)(ossl_EVP_PKEY_CTX *ctx, const char *keytype);
typedef int (*ossl_EVP_PKEY_CTX_get_params_t)(ossl_EVP_PKEY_CTX *ctx, ossl_OSSL_PARAM *params);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_PKEY_CTX_gettable_params_t)(const ossl_EVP_PKEY_CTX *ctx);
typedef int (*ossl_EVP_PKEY_CTX_set_params_t)(ossl_EVP_PKEY_CTX *ctx, const ossl_OSSL_PARAM *params);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_PKEY_CTX_settable_params_t)(const ossl_EVP_PKEY_CTX *ctx);
typedef int (*ossl_EVP_PKEY_CTX_ctrl_t)(ossl_EVP_PKEY_CTX *ctx, int keytype, int optype, int cmd, int p1, void *p2);
typedef int (*ossl_EVP_PKEY_CTX_ctrl_str_t)(ossl_EVP_PKEY_CTX *ctx, const char *type, const char *value);
typedef int (*ossl_EVP_PKEY_CTX_ctrl_uint64_t)(ossl_EVP_PKEY_CTX *ctx, int keytype, int optype, int cmd, uint64_t value);
typedef int (*ossl_EVP_PKEY_CTX_str2ctrl_t)(ossl_EVP_PKEY_CTX *ctx, int cmd, const char *str);
typedef int (*ossl_EVP_PKEY_CTX_hex2ctrl_t)(ossl_EVP_PKEY_CTX *ctx, int cmd, const char *hex);
typedef int (*ossl_EVP_PKEY_CTX_md_t)(ossl_EVP_PKEY_CTX *ctx, int optype, int cmd, const char *md);
typedef int (*ossl_EVP_PKEY_CTX_get_operation_t)(ossl_EVP_PKEY_CTX *ctx);
typedef void (*ossl_EVP_PKEY_CTX_set0_keygen_info_t)(ossl_EVP_PKEY_CTX *ctx, int *dat, int datlen);
typedef ossl_EVP_PKEY * (*ossl_EVP_PKEY_new_mac_key_t)(int type, ossl_ENGINE *e, const unsigned char *key, int keylen);
typedef ossl_EVP_PKEY * (*ossl_EVP_PKEY_new_raw_private_key_ex_t)(ossl_OSSL_LIB_CTX *libctx, const char *keytype, const char *propq, const unsigned char *priv, size_t len);
typedef ossl_EVP_PKEY * (*ossl_EVP_PKEY_new_raw_private_key_t)(int type, ossl_ENGINE *e, const unsigned char *priv, size_t len);
typedef ossl_EVP_PKEY * (*ossl_EVP_PKEY_new_raw_public_key_ex_t)(ossl_OSSL_LIB_CTX *libctx, const char *keytype, const char *propq, const unsigned char *pub, size_t len);
typedef ossl_EVP_PKEY * (*ossl_EVP_PKEY_new_raw_public_key_t)(int type, ossl_ENGINE *e, const unsigned char *pub, size_t len);
typedef int (*ossl_EVP_PKEY_get_raw_private_key_t)(const ossl_EVP_PKEY *pkey, unsigned char *priv, size_t *len);
typedef int (*ossl_EVP_PKEY_get_raw_public_key_t)(const ossl_EVP_PKEY *pkey, unsigned char *pub, size_t *len);
typedef ossl_EVP_PKEY * (*ossl_EVP_PKEY_new_CMAC_key_t)(ossl_ENGINE *e, const unsigned char *priv, size_t len, const ossl_EVP_CIPHER *cipher);
typedef void (*ossl_EVP_PKEY_CTX_set_data_t)(ossl_EVP_PKEY_CTX *ctx, void *data);
typedef void * (*ossl_EVP_PKEY_CTX_get_data_t)(const ossl_EVP_PKEY_CTX *ctx);
typedef ossl_EVP_PKEY * (*ossl_EVP_PKEY_CTX_get0_pkey_t)(ossl_EVP_PKEY_CTX *ctx);
typedef ossl_EVP_PKEY * (*ossl_EVP_PKEY_CTX_get0_peerkey_t)(ossl_EVP_PKEY_CTX *ctx);
typedef void (*ossl_EVP_PKEY_CTX_set_app_data_t)(ossl_EVP_PKEY_CTX *ctx, void *data);
typedef void * (*ossl_EVP_PKEY_CTX_get_app_data_t)(ossl_EVP_PKEY_CTX *ctx);
typedef void (*ossl_EVP_SIGNATURE_free_t)(ossl_EVP_SIGNATURE *signature);
typedef int (*ossl_EVP_SIGNATURE_up_ref_t)(ossl_EVP_SIGNATURE *signature);
typedef ossl_OSSL_PROVIDER * (*ossl_EVP_SIGNATURE_get0_provider_t)(const ossl_EVP_SIGNATURE *signature);
typedef ossl_EVP_SIGNATURE * (*ossl_EVP_SIGNATURE_fetch_t)(ossl_OSSL_LIB_CTX *ctx, const char *algorithm, const char *properties);
typedef int (*ossl_EVP_SIGNATURE_is_a_t)(const ossl_EVP_SIGNATURE *signature, const char *name);
typedef const char * (*ossl_EVP_SIGNATURE_get0_name_t)(const ossl_EVP_SIGNATURE *signature);
typedef const char * (*ossl_EVP_SIGNATURE_get0_description_t)(const ossl_EVP_SIGNATURE *signature);
typedef void (*ossl_EVP_SIGNATURE_do_all_provided_t)(ossl_OSSL_LIB_CTX *libctx, void (*fn)(ossl_EVP_SIGNATURE *, void *), void *data);
typedef int (*ossl_EVP_SIGNATURE_names_do_all_t)(const ossl_EVP_SIGNATURE *signature, void (*fn)(const char *, void *), void *data);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_SIGNATURE_gettable_ctx_params_t)(const ossl_EVP_SIGNATURE *sig);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_SIGNATURE_settable_ctx_params_t)(const ossl_EVP_SIGNATURE *sig);
typedef void (*ossl_EVP_ASYM_CIPHER_free_t)(ossl_EVP_ASYM_CIPHER *cipher);
typedef int (*ossl_EVP_ASYM_CIPHER_up_ref_t)(ossl_EVP_ASYM_CIPHER *cipher);
typedef ossl_OSSL_PROVIDER * (*ossl_EVP_ASYM_CIPHER_get0_provider_t)(const ossl_EVP_ASYM_CIPHER *cipher);
typedef ossl_EVP_ASYM_CIPHER * (*ossl_EVP_ASYM_CIPHER_fetch_t)(ossl_OSSL_LIB_CTX *ctx, const char *algorithm, const char *properties);
typedef int (*ossl_EVP_ASYM_CIPHER_is_a_t)(const ossl_EVP_ASYM_CIPHER *cipher, const char *name);
typedef const char * (*ossl_EVP_ASYM_CIPHER_get0_name_t)(const ossl_EVP_ASYM_CIPHER *cipher);
typedef const char * (*ossl_EVP_ASYM_CIPHER_get0_description_t)(const ossl_EVP_ASYM_CIPHER *cipher);
typedef void (*ossl_EVP_ASYM_CIPHER_do_all_provided_t)(ossl_OSSL_LIB_CTX *libctx, void (*fn)(ossl_EVP_ASYM_CIPHER *, void *), void *arg);
typedef int (*ossl_EVP_ASYM_CIPHER_names_do_all_t)(const ossl_EVP_ASYM_CIPHER *cipher, void (*fn)(const char *, void *), void *data);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_ASYM_CIPHER_gettable_ctx_params_t)(const ossl_EVP_ASYM_CIPHER *ciph);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_ASYM_CIPHER_settable_ctx_params_t)(const ossl_EVP_ASYM_CIPHER *ciph);
typedef void (*ossl_EVP_KEM_free_t)(ossl_EVP_KEM *wrap);
typedef int (*ossl_EVP_KEM_up_ref_t)(ossl_EVP_KEM *wrap);
typedef ossl_OSSL_PROVIDER * (*ossl_EVP_KEM_get0_provider_t)(const ossl_EVP_KEM *wrap);
typedef ossl_EVP_KEM * (*ossl_EVP_KEM_fetch_t)(ossl_OSSL_LIB_CTX *ctx, const char *algorithm, const char *properties);
typedef int (*ossl_EVP_KEM_is_a_t)(const ossl_EVP_KEM *wrap, const char *name);
typedef const char * (*ossl_EVP_KEM_get0_name_t)(const ossl_EVP_KEM *wrap);
typedef const char * (*ossl_EVP_KEM_get0_description_t)(const ossl_EVP_KEM *wrap);
typedef void (*ossl_EVP_KEM_do_all_provided_t)(ossl_OSSL_LIB_CTX *libctx, void (*fn)(ossl_EVP_KEM *, void *), void *arg);
typedef int (*ossl_EVP_KEM_names_do_all_t)(const ossl_EVP_KEM *wrap, void (*fn)(const char *, void *), void *data);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_KEM_gettable_ctx_params_t)(const ossl_EVP_KEM *kem);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_KEM_settable_ctx_params_t)(const ossl_EVP_KEM *kem);
typedef int (*ossl_EVP_PKEY_sign_init_t)(ossl_EVP_PKEY_CTX *ctx);
typedef int (*ossl_EVP_PKEY_sign_init_ex_t)(ossl_EVP_PKEY_CTX *ctx, const ossl_OSSL_PARAM params[]);
typedef int (*ossl_EVP_PKEY_sign_t)(ossl_EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen, const unsigned char *tbs, size_t tbslen);
typedef int (*ossl_EVP_PKEY_verify_init_t)(ossl_EVP_PKEY_CTX *ctx);
typedef int (*ossl_EVP_PKEY_verify_init_ex_t)(ossl_EVP_PKEY_CTX *ctx, const ossl_OSSL_PARAM params[]);
typedef int (*ossl_EVP_PKEY_verify_t)(ossl_EVP_PKEY_CTX *ctx, const unsigned char *sig, size_t siglen, const unsigned char *tbs, size_t tbslen);
typedef int (*ossl_EVP_PKEY_verify_recover_init_t)(ossl_EVP_PKEY_CTX *ctx);
typedef int (*ossl_EVP_PKEY_verify_recover_init_ex_t)(ossl_EVP_PKEY_CTX *ctx, const ossl_OSSL_PARAM params[]);
typedef int (*ossl_EVP_PKEY_verify_recover_t)(ossl_EVP_PKEY_CTX *ctx, unsigned char *rout, size_t *routlen, const unsigned char *sig, size_t siglen);
typedef int (*ossl_EVP_PKEY_encrypt_init_t)(ossl_EVP_PKEY_CTX *ctx);
typedef int (*ossl_EVP_PKEY_encrypt_init_ex_t)(ossl_EVP_PKEY_CTX *ctx, const ossl_OSSL_PARAM params[]);
typedef int (*ossl_EVP_PKEY_encrypt_t)(ossl_EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen, const unsigned char *in, size_t inlen);
typedef int (*ossl_EVP_PKEY_decrypt_init_t)(ossl_EVP_PKEY_CTX *ctx);
typedef int (*ossl_EVP_PKEY_decrypt_init_ex_t)(ossl_EVP_PKEY_CTX *ctx, const ossl_OSSL_PARAM params[]);
typedef int (*ossl_EVP_PKEY_decrypt_t)(ossl_EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen, const unsigned char *in, size_t inlen);
typedef int (*ossl_EVP_PKEY_derive_init_t)(ossl_EVP_PKEY_CTX *ctx);
typedef int (*ossl_EVP_PKEY_derive_init_ex_t)(ossl_EVP_PKEY_CTX *ctx, const ossl_OSSL_PARAM params[]);
typedef int (*ossl_EVP_PKEY_derive_set_peer_ex_t)(ossl_EVP_PKEY_CTX *ctx, ossl_EVP_PKEY *peer, int validate_peer);
typedef int (*ossl_EVP_PKEY_derive_set_peer_t)(ossl_EVP_PKEY_CTX *ctx, ossl_EVP_PKEY *peer);
typedef int (*ossl_EVP_PKEY_derive_t)(ossl_EVP_PKEY_CTX *ctx, unsigned char *key, size_t *keylen);
typedef int (*ossl_EVP_PKEY_encapsulate_init_t)(ossl_EVP_PKEY_CTX *ctx, const ossl_OSSL_PARAM params[]);
typedef int (*ossl_EVP_PKEY_encapsulate_t)(ossl_EVP_PKEY_CTX *ctx, unsigned char *wrappedkey, size_t *wrappedkeylen, unsigned char *genkey, size_t *genkeylen);
typedef int (*ossl_EVP_PKEY_decapsulate_init_t)(ossl_EVP_PKEY_CTX *ctx, const ossl_OSSL_PARAM params[]);
typedef int (*ossl_EVP_PKEY_decapsulate_t)(ossl_EVP_PKEY_CTX *ctx, unsigned char *unwrapped, size_t *unwrappedlen, const unsigned char *wrapped, size_t wrappedlen);
typedef int (*ossl_EVP_PKEY_fromdata_init_t)(ossl_EVP_PKEY_CTX *ctx);
typedef int (*ossl_EVP_PKEY_fromdata_t)(ossl_EVP_PKEY_CTX *ctx, ossl_EVP_PKEY **ppkey, int selection, ossl_OSSL_PARAM param[]);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_PKEY_fromdata_settable_t)(ossl_EVP_PKEY_CTX *ctx, int selection);
typedef int (*ossl_EVP_PKEY_todata_t)(const ossl_EVP_PKEY *pkey, int selection, ossl_OSSL_PARAM **params);
typedef int (*ossl_EVP_PKEY_export_t)(const ossl_EVP_PKEY *pkey, int selection, ossl_OSSL_CALLBACK *export_cb, void *export_cbarg);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_PKEY_gettable_params_t)(const ossl_EVP_PKEY *pkey);
typedef int (*ossl_EVP_PKEY_get_params_t)(const ossl_EVP_PKEY *pkey, ossl_OSSL_PARAM params[]);
typedef int (*ossl_EVP_PKEY_get_int_param_t)(const ossl_EVP_PKEY *pkey, const char *key_name, int *out);
typedef int (*ossl_EVP_PKEY_get_size_t_param_t)(const ossl_EVP_PKEY *pkey, const char *key_name, size_t *out);
typedef int (*ossl_EVP_PKEY_get_bn_param_t)(const ossl_EVP_PKEY *pkey, const char *key_name, ossl_BIGNUM **bn);
typedef int (*ossl_EVP_PKEY_get_utf8_string_param_t)(const ossl_EVP_PKEY *pkey, const char *key_name, char *str, size_t max_buf_sz, size_t *out_sz);
typedef int (*ossl_EVP_PKEY_get_octet_string_param_t)(const ossl_EVP_PKEY *pkey, const char *key_name, unsigned char *buf, size_t max_buf_sz, size_t *out_sz);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_PKEY_settable_params_t)(const ossl_EVP_PKEY *pkey);
typedef int (*ossl_EVP_PKEY_set_params_t)(ossl_EVP_PKEY *pkey, ossl_OSSL_PARAM params[]);
typedef int (*ossl_EVP_PKEY_set_int_param_t)(ossl_EVP_PKEY *pkey, const char *key_name, int in);
typedef int (*ossl_EVP_PKEY_set_size_t_param_t)(ossl_EVP_PKEY *pkey, const char *key_name, size_t in);
typedef int (*ossl_EVP_PKEY_set_bn_param_t)(ossl_EVP_PKEY *pkey, const char *key_name, const ossl_BIGNUM *bn);
typedef int (*ossl_EVP_PKEY_set_utf8_string_param_t)(ossl_EVP_PKEY *pkey, const char *key_name, const char *str);
typedef int (*ossl_EVP_PKEY_set_octet_string_param_t)(ossl_EVP_PKEY *pkey, const char *key_name, const unsigned char *buf, size_t bsize);
typedef int (*ossl_EVP_PKEY_get_ec_point_conv_form_t)(const ossl_EVP_PKEY *pkey);
typedef int (*ossl_EVP_PKEY_get_field_type_t)(const ossl_EVP_PKEY *pkey);
typedef ossl_EVP_PKEY * (*ossl_EVP_PKEY_Q_keygen_t)(ossl_OSSL_LIB_CTX *libctx, const char *propq, const char *type, ...);
typedef int (*ossl_EVP_PKEY_paramgen_init_t)(ossl_EVP_PKEY_CTX *ctx);
typedef int (*ossl_EVP_PKEY_paramgen_t)(ossl_EVP_PKEY_CTX *ctx, ossl_EVP_PKEY **ppkey);
typedef int (*ossl_EVP_PKEY_keygen_init_t)(ossl_EVP_PKEY_CTX *ctx);
typedef int (*ossl_EVP_PKEY_keygen_t)(ossl_EVP_PKEY_CTX *ctx, ossl_EVP_PKEY **ppkey);
typedef int (*ossl_EVP_PKEY_generate_t)(ossl_EVP_PKEY_CTX *ctx, ossl_EVP_PKEY **ppkey);
typedef int (*ossl_EVP_PKEY_check_t)(ossl_EVP_PKEY_CTX *ctx);
typedef int (*ossl_EVP_PKEY_public_check_t)(ossl_EVP_PKEY_CTX *ctx);
typedef int (*ossl_EVP_PKEY_public_check_quick_t)(ossl_EVP_PKEY_CTX *ctx);
typedef int (*ossl_EVP_PKEY_param_check_t)(ossl_EVP_PKEY_CTX *ctx);
typedef int (*ossl_EVP_PKEY_param_check_quick_t)(ossl_EVP_PKEY_CTX *ctx);
typedef int (*ossl_EVP_PKEY_private_check_t)(ossl_EVP_PKEY_CTX *ctx);
typedef int (*ossl_EVP_PKEY_pairwise_check_t)(ossl_EVP_PKEY_CTX *ctx);
typedef int (*ossl_EVP_PKEY_set_ex_data_t)(ossl_EVP_PKEY *key, int idx, void *arg);
typedef void * (*ossl_EVP_PKEY_get_ex_data_t)(const ossl_EVP_PKEY *key, int idx);
typedef void (*ossl_EVP_PKEY_CTX_set_cb_t)(ossl_EVP_PKEY_CTX *ctx, ossl_EVP_PKEY_gen_cb *cb);
typedef ossl_EVP_PKEY_gen_cb *EVP_PKEY_CTX_get_cb_ret_t;
typedef EVP_PKEY_CTX_get_cb_ret_t (*ossl_EVP_PKEY_CTX_get_cb_t)(ossl_EVP_PKEY_CTX *ctx);
typedef int (*ossl_EVP_PKEY_CTX_get_keygen_info_t)(ossl_EVP_PKEY_CTX *ctx, int idx);
typedef void (*ossl_EVP_PKEY_meth_set_init_t)(ossl_EVP_PKEY_METHOD *pmeth, int (*init)(ossl_EVP_PKEY_CTX *));
typedef void (*ossl_EVP_PKEY_meth_set_copy_t)(ossl_EVP_PKEY_METHOD *pmeth, int (*copy)(ossl_EVP_PKEY_CTX *, const ossl_EVP_PKEY_CTX *));
typedef void (*ossl_EVP_PKEY_meth_set_cleanup_t)(ossl_EVP_PKEY_METHOD *pmeth, void (*cleanup)(ossl_EVP_PKEY_CTX *));
typedef void (*ossl_EVP_PKEY_meth_set_paramgen_t)(ossl_EVP_PKEY_METHOD *pmeth, int (*paramgen_init)(ossl_EVP_PKEY_CTX *), int (*paramgen)(ossl_EVP_PKEY_CTX *, ossl_EVP_PKEY *));
typedef void (*ossl_EVP_PKEY_meth_set_keygen_t)(ossl_EVP_PKEY_METHOD *pmeth, int (*keygen_init)(ossl_EVP_PKEY_CTX *), int (*keygen)(ossl_EVP_PKEY_CTX *, ossl_EVP_PKEY *));
typedef void (*ossl_EVP_PKEY_meth_set_sign_t)(ossl_EVP_PKEY_METHOD *pmeth, int (*sign_init)(ossl_EVP_PKEY_CTX *), int (*sign)(ossl_EVP_PKEY_CTX *, unsigned char *, size_t *, const unsigned char *, size_t));
typedef void (*ossl_EVP_PKEY_meth_set_verify_t)(ossl_EVP_PKEY_METHOD *pmeth, int (*verify_init)(ossl_EVP_PKEY_CTX *), int (*verify)(ossl_EVP_PKEY_CTX *, const unsigned char *, size_t, const unsigned char *, size_t));
typedef void (*ossl_EVP_PKEY_meth_set_verify_recover_t)(ossl_EVP_PKEY_METHOD *pmeth, int (*verify_recover_init)(ossl_EVP_PKEY_CTX *), int (*verify_recover)(ossl_EVP_PKEY_CTX *, unsigned char *, size_t *, const unsigned char *, size_t));
typedef void (*ossl_EVP_PKEY_meth_set_signctx_t)(ossl_EVP_PKEY_METHOD *pmeth, int (*signctx_init)(ossl_EVP_PKEY_CTX *, ossl_EVP_MD_CTX *), int (*signctx)(ossl_EVP_PKEY_CTX *, unsigned char *, size_t *, ossl_EVP_MD_CTX *));
typedef void (*ossl_EVP_PKEY_meth_set_verifyctx_t)(ossl_EVP_PKEY_METHOD *pmeth, int (*verifyctx_init)(ossl_EVP_PKEY_CTX *, ossl_EVP_MD_CTX *), int (*verifyctx)(ossl_EVP_PKEY_CTX *, const unsigned char *, int, ossl_EVP_MD_CTX *));
typedef void (*ossl_EVP_PKEY_meth_set_encrypt_t)(ossl_EVP_PKEY_METHOD *pmeth, int (*encrypt_init)(ossl_EVP_PKEY_CTX *), int (*encryptfn)(ossl_EVP_PKEY_CTX *, unsigned char *, size_t *, const unsigned char *, size_t));
typedef void (*ossl_EVP_PKEY_meth_set_decrypt_t)(ossl_EVP_PKEY_METHOD *pmeth, int (*decrypt_init)(ossl_EVP_PKEY_CTX *), int (*decrypt)(ossl_EVP_PKEY_CTX *, unsigned char *, size_t *, const unsigned char *, size_t));
typedef void (*ossl_EVP_PKEY_meth_set_derive_t)(ossl_EVP_PKEY_METHOD *pmeth, int (*derive_init)(ossl_EVP_PKEY_CTX *), int (*derive)(ossl_EVP_PKEY_CTX *, unsigned char *, size_t *));
typedef void (*ossl_EVP_PKEY_meth_set_ctrl_t)(ossl_EVP_PKEY_METHOD *pmeth, int (*ctrl)(ossl_EVP_PKEY_CTX *, int, int, void *), int (*ctrl_str)(ossl_EVP_PKEY_CTX *, const char *, const char *));
typedef void (*ossl_EVP_PKEY_meth_set_digestsign_t)(ossl_EVP_PKEY_METHOD *pmeth, int (*digestsign)(ossl_EVP_MD_CTX *, unsigned char *, size_t *, const unsigned char *, size_t));
typedef void (*ossl_EVP_PKEY_meth_set_digestverify_t)(ossl_EVP_PKEY_METHOD *pmeth, int (*digestverify)(ossl_EVP_MD_CTX *, const unsigned char *, size_t, const unsigned char *, size_t));
typedef void (*ossl_EVP_PKEY_meth_set_check_t)(ossl_EVP_PKEY_METHOD *pmeth, int (*check)(ossl_EVP_PKEY *));
typedef void (*ossl_EVP_PKEY_meth_set_public_check_t)(ossl_EVP_PKEY_METHOD *pmeth, int (*check)(ossl_EVP_PKEY *));
typedef void (*ossl_EVP_PKEY_meth_set_param_check_t)(ossl_EVP_PKEY_METHOD *pmeth, int (*check)(ossl_EVP_PKEY *));
typedef void (*ossl_EVP_PKEY_meth_set_digest_custom_t)(ossl_EVP_PKEY_METHOD *pmeth, int (*digest_custom)(ossl_EVP_PKEY_CTX *, ossl_EVP_MD_CTX *));
typedef void (*ossl_EVP_PKEY_meth_get_init_t)(const ossl_EVP_PKEY_METHOD *pmeth, int (**pinit)(ossl_EVP_PKEY_CTX *));
typedef void (*ossl_EVP_PKEY_meth_get_copy_t)(const ossl_EVP_PKEY_METHOD *pmeth, int (**pcopy)(ossl_EVP_PKEY_CTX *, const ossl_EVP_PKEY_CTX *));
typedef void (*ossl_EVP_PKEY_meth_get_cleanup_t)(const ossl_EVP_PKEY_METHOD *pmeth, void (**pcleanup)(ossl_EVP_PKEY_CTX *));
typedef void (*ossl_EVP_PKEY_meth_get_paramgen_t)(const ossl_EVP_PKEY_METHOD *pmeth, int (**pparamgen_init)(ossl_EVP_PKEY_CTX *), int (**pparamgen)(ossl_EVP_PKEY_CTX *, ossl_EVP_PKEY *));
typedef void (*ossl_EVP_PKEY_meth_get_keygen_t)(const ossl_EVP_PKEY_METHOD *pmeth, int (**pkeygen_init)(ossl_EVP_PKEY_CTX *), int (**pkeygen)(ossl_EVP_PKEY_CTX *, ossl_EVP_PKEY *));
typedef void (*ossl_EVP_PKEY_meth_get_sign_t)(const ossl_EVP_PKEY_METHOD *pmeth, int (**psign_init)(ossl_EVP_PKEY_CTX *), int (**psign)(ossl_EVP_PKEY_CTX *, unsigned char *, size_t *, const unsigned char *, size_t));
typedef void (*ossl_EVP_PKEY_meth_get_verify_t)(const ossl_EVP_PKEY_METHOD *pmeth, int (**pverify_init)(ossl_EVP_PKEY_CTX *), int (**pverify)(ossl_EVP_PKEY_CTX *, const unsigned char *, size_t, const unsigned char *, size_t));
typedef void (*ossl_EVP_PKEY_meth_get_verify_recover_t)(const ossl_EVP_PKEY_METHOD *pmeth, int (**pverify_recover_init)(ossl_EVP_PKEY_CTX *), int (**pverify_recover)(ossl_EVP_PKEY_CTX *, unsigned char *, size_t *, const unsigned char *, size_t));
typedef void (*ossl_EVP_PKEY_meth_get_signctx_t)(const ossl_EVP_PKEY_METHOD *pmeth, int (**psignctx_init)(ossl_EVP_PKEY_CTX *, ossl_EVP_MD_CTX *), int (**psignctx)(ossl_EVP_PKEY_CTX *, unsigned char *, size_t *, ossl_EVP_MD_CTX *));
typedef void (*ossl_EVP_PKEY_meth_get_verifyctx_t)(const ossl_EVP_PKEY_METHOD *pmeth, int (**pverifyctx_init)(ossl_EVP_PKEY_CTX *, ossl_EVP_MD_CTX *), int (**pverifyctx)(ossl_EVP_PKEY_CTX *, const unsigned char *, int, ossl_EVP_MD_CTX *));
typedef void (*ossl_EVP_PKEY_meth_get_encrypt_t)(const ossl_EVP_PKEY_METHOD *pmeth, int (**pencrypt_init)(ossl_EVP_PKEY_CTX *), int (**pencryptfn)(ossl_EVP_PKEY_CTX *, unsigned char *, size_t *, const unsigned char *, size_t));
typedef void (*ossl_EVP_PKEY_meth_get_decrypt_t)(const ossl_EVP_PKEY_METHOD *pmeth, int (**pdecrypt_init)(ossl_EVP_PKEY_CTX *), int (**pdecrypt)(ossl_EVP_PKEY_CTX *, unsigned char *, size_t *, const unsigned char *, size_t));
typedef void (*ossl_EVP_PKEY_meth_get_derive_t)(const ossl_EVP_PKEY_METHOD *pmeth, int (**pderive_init)(ossl_EVP_PKEY_CTX *), int (**pderive)(ossl_EVP_PKEY_CTX *, unsigned char *, size_t *));
typedef void (*ossl_EVP_PKEY_meth_get_ctrl_t)(const ossl_EVP_PKEY_METHOD *pmeth, int (**pctrl)(ossl_EVP_PKEY_CTX *, int, int, void *), int (**pctrl_str)(ossl_EVP_PKEY_CTX *, const char *, const char *));
typedef void (*ossl_EVP_PKEY_meth_get_digestsign_t)(const ossl_EVP_PKEY_METHOD *pmeth, int (**digestsign)(ossl_EVP_MD_CTX *, unsigned char *, size_t *, const unsigned char *, size_t));
typedef void (*ossl_EVP_PKEY_meth_get_digestverify_t)(const ossl_EVP_PKEY_METHOD *pmeth, int (**digestverify)(ossl_EVP_MD_CTX *, const unsigned char *, size_t, const unsigned char *, size_t));
typedef void (*ossl_EVP_PKEY_meth_get_check_t)(const ossl_EVP_PKEY_METHOD *pmeth, int (**pcheck)(ossl_EVP_PKEY *));
typedef void (*ossl_EVP_PKEY_meth_get_public_check_t)(const ossl_EVP_PKEY_METHOD *pmeth, int (**pcheck)(ossl_EVP_PKEY *));
typedef void (*ossl_EVP_PKEY_meth_get_param_check_t)(const ossl_EVP_PKEY_METHOD *pmeth, int (**pcheck)(ossl_EVP_PKEY *));
typedef void (*ossl_EVP_PKEY_meth_get_digest_custom_t)(const ossl_EVP_PKEY_METHOD *pmeth, int (**pdigest_custom)(ossl_EVP_PKEY_CTX *, ossl_EVP_MD_CTX *));
typedef void (*ossl_EVP_KEYEXCH_free_t)(ossl_EVP_KEYEXCH *exchange);
typedef int (*ossl_EVP_KEYEXCH_up_ref_t)(ossl_EVP_KEYEXCH *exchange);
typedef ossl_EVP_KEYEXCH * (*ossl_EVP_KEYEXCH_fetch_t)(ossl_OSSL_LIB_CTX *ctx, const char *algorithm, const char *properties);
typedef ossl_OSSL_PROVIDER * (*ossl_EVP_KEYEXCH_get0_provider_t)(const ossl_EVP_KEYEXCH *exchange);
typedef int (*ossl_EVP_KEYEXCH_is_a_t)(const ossl_EVP_KEYEXCH *keyexch, const char *name);
typedef const char * (*ossl_EVP_KEYEXCH_get0_name_t)(const ossl_EVP_KEYEXCH *keyexch);
typedef const char * (*ossl_EVP_KEYEXCH_get0_description_t)(const ossl_EVP_KEYEXCH *keyexch);
typedef void (*ossl_EVP_KEYEXCH_do_all_provided_t)(ossl_OSSL_LIB_CTX *libctx, void (*fn)(ossl_EVP_KEYEXCH *, void *), void *data);
typedef int (*ossl_EVP_KEYEXCH_names_do_all_t)(const ossl_EVP_KEYEXCH *keyexch, void (*fn)(const char *, void *), void *data);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_KEYEXCH_gettable_ctx_params_t)(const ossl_EVP_KEYEXCH *keyexch);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_KEYEXCH_settable_ctx_params_t)(const ossl_EVP_KEYEXCH *keyexch);
typedef void (*ossl_EVP_add_alg_module_t)();
typedef int (*ossl_EVP_PKEY_CTX_set_group_name_t)(ossl_EVP_PKEY_CTX *ctx, const char *name);
typedef int (*ossl_EVP_PKEY_CTX_get_group_name_t)(ossl_EVP_PKEY_CTX *ctx, char *name, size_t namelen);
typedef int (*ossl_EVP_PKEY_get_group_name_t)(const ossl_EVP_PKEY *pkey, char *name, size_t name_sz, size_t *gname_len);
typedef ossl_OSSL_LIB_CTX * (*ossl_EVP_PKEY_CTX_get0_libctx_t)(ossl_EVP_PKEY_CTX *ctx);
typedef const char * (*ossl_EVP_PKEY_CTX_get0_propq_t)(const ossl_EVP_PKEY_CTX *ctx);
typedef const ossl_OSSL_PROVIDER * (*ossl_EVP_PKEY_CTX_get0_provider_t)(const ossl_EVP_PKEY_CTX *ctx);
typedef ossl_CMAC_CTX * (*ossl_CMAC_CTX_new_t)();
typedef void (*ossl_CMAC_CTX_cleanup_t)(ossl_CMAC_CTX *ctx);
typedef void (*ossl_CMAC_CTX_free_t)(ossl_CMAC_CTX *ctx);
typedef ossl_EVP_CIPHER_CTX * (*ossl_CMAC_CTX_get0_cipher_ctx_t)(ossl_CMAC_CTX *ctx);
typedef int (*ossl_CMAC_CTX_copy_t)(ossl_CMAC_CTX *out, const ossl_CMAC_CTX *in);
typedef int (*ossl_CMAC_Init_t)(ossl_CMAC_CTX *ctx, const void *key, size_t keylen, const ossl_EVP_CIPHER *cipher, ossl_ENGINE *impl);
typedef int (*ossl_CMAC_Update_t)(ossl_CMAC_CTX *ctx, const void *data, size_t dlen);
typedef int (*ossl_CMAC_Final_t)(ossl_CMAC_CTX *ctx, unsigned char *out, size_t *poutlen);
typedef int (*ossl_CMAC_resume_t)(ossl_CMAC_CTX *ctx);
typedef int (*ossl_EVP_PKEY_CTX_set_ec_paramgen_curve_nid_t)(ossl_EVP_PKEY_CTX *ctx, int nid);
typedef int (*ossl_EVP_PKEY_CTX_set_ec_param_enc_t)(ossl_EVP_PKEY_CTX *ctx, int param_enc);
typedef int (*ossl_EVP_PKEY_CTX_set_ecdh_cofactor_mode_t)(ossl_EVP_PKEY_CTX *ctx, int cofactor_mode);
typedef int (*ossl_EVP_PKEY_CTX_get_ecdh_cofactor_mode_t)(ossl_EVP_PKEY_CTX *ctx);
typedef int (*ossl_EVP_PKEY_CTX_set_ecdh_kdf_type_t)(ossl_EVP_PKEY_CTX *ctx, int kdf);
typedef int (*ossl_EVP_PKEY_CTX_get_ecdh_kdf_type_t)(ossl_EVP_PKEY_CTX *ctx);
typedef int (*ossl_EVP_PKEY_CTX_set_ecdh_kdf_md_t)(ossl_EVP_PKEY_CTX *ctx, const ossl_EVP_MD *md);
typedef int (*ossl_EVP_PKEY_CTX_get_ecdh_kdf_md_t)(ossl_EVP_PKEY_CTX *ctx, const ossl_EVP_MD **md);
typedef int (*ossl_EVP_PKEY_CTX_set_ecdh_kdf_outlen_t)(ossl_EVP_PKEY_CTX *ctx, int len);
typedef int (*ossl_EVP_PKEY_CTX_get_ecdh_kdf_outlen_t)(ossl_EVP_PKEY_CTX *ctx, int *len);
typedef int (*ossl_EVP_PKEY_CTX_set0_ecdh_kdf_ukm_t)(ossl_EVP_PKEY_CTX *ctx, unsigned char *ukm, int len);
typedef int (*ossl_EVP_PKEY_CTX_get0_ecdh_kdf_ukm_t)(ossl_EVP_PKEY_CTX *ctx, unsigned char **ukm);
typedef const char * (*ossl_OSSL_EC_curve_nid2name_t)(int nid);
typedef const ossl_EC_METHOD * (*ossl_EC_GFp_simple_method_t)();
typedef const ossl_EC_METHOD * (*ossl_EC_GFp_mont_method_t)();
typedef const ossl_EC_METHOD * (*ossl_EC_GFp_nist_method_t)();
typedef const ossl_EC_METHOD * (*ossl_EC_GF2m_simple_method_t)();
typedef ossl_EC_GROUP * (*ossl_EC_GROUP_new_t)(const ossl_EC_METHOD *meth);
typedef void (*ossl_EC_GROUP_clear_free_t)(ossl_EC_GROUP *group);
typedef const ossl_EC_METHOD * (*ossl_EC_GROUP_method_of_t)(const ossl_EC_GROUP *group);
typedef int (*ossl_EC_METHOD_get_field_type_t)(const ossl_EC_METHOD *meth);
typedef void (*ossl_EC_GROUP_free_t)(ossl_EC_GROUP *group);
typedef int (*ossl_EC_GROUP_copy_t)(ossl_EC_GROUP *dst, const ossl_EC_GROUP *src);
typedef ossl_EC_GROUP * (*ossl_EC_GROUP_dup_t)(const ossl_EC_GROUP *src);
typedef int (*ossl_EC_GROUP_set_generator_t)(ossl_EC_GROUP *group, const ossl_EC_POINT *generator, const ossl_BIGNUM *order, const ossl_BIGNUM *cofactor);
typedef const ossl_EC_POINT * (*ossl_EC_GROUP_get0_generator_t)(const ossl_EC_GROUP *group);
typedef ossl_BN_MONT_CTX * (*ossl_EC_GROUP_get_mont_data_t)(const ossl_EC_GROUP *group);
typedef int (*ossl_EC_GROUP_get_order_t)(const ossl_EC_GROUP *group, ossl_BIGNUM *order, ossl_BN_CTX *ctx);
typedef const ossl_BIGNUM * (*ossl_EC_GROUP_get0_order_t)(const ossl_EC_GROUP *group);
typedef int (*ossl_EC_GROUP_order_bits_t)(const ossl_EC_GROUP *group);
typedef int (*ossl_EC_GROUP_get_cofactor_t)(const ossl_EC_GROUP *group, ossl_BIGNUM *cofactor, ossl_BN_CTX *ctx);
typedef const ossl_BIGNUM * (*ossl_EC_GROUP_get0_cofactor_t)(const ossl_EC_GROUP *group);
typedef void (*ossl_EC_GROUP_set_curve_name_t)(ossl_EC_GROUP *group, int nid);
typedef int (*ossl_EC_GROUP_get_curve_name_t)(const ossl_EC_GROUP *group);
typedef const ossl_BIGNUM * (*ossl_EC_GROUP_get0_field_t)(const ossl_EC_GROUP *group);
typedef int (*ossl_EC_GROUP_get_field_type_t)(const ossl_EC_GROUP *group);
typedef void (*ossl_EC_GROUP_set_asn1_flag_t)(ossl_EC_GROUP *group, int flag);
typedef int (*ossl_EC_GROUP_get_asn1_flag_t)(const ossl_EC_GROUP *group);
typedef void (*ossl_EC_GROUP_set_point_conversion_form_t)(ossl_EC_GROUP *group, ossl_point_conversion_form_t form);
typedef ossl_point_conversion_form_t (*ossl_EC_GROUP_get_point_conversion_form_t)(const ossl_EC_GROUP *_p0);
typedef unsigned char * (*ossl_EC_GROUP_get0_seed_t)(const ossl_EC_GROUP *x);
typedef size_t (*ossl_EC_GROUP_get_seed_len_t)(const ossl_EC_GROUP *_p0);
typedef size_t (*ossl_EC_GROUP_set_seed_t)(ossl_EC_GROUP *_p0, const unsigned char *_p1, size_t len);
typedef int (*ossl_EC_GROUP_set_curve_t)(ossl_EC_GROUP *group, const ossl_BIGNUM *p, const ossl_BIGNUM *a, const ossl_BIGNUM *b, ossl_BN_CTX *ctx);
typedef int (*ossl_EC_GROUP_get_curve_t)(const ossl_EC_GROUP *group, ossl_BIGNUM *p, ossl_BIGNUM *a, ossl_BIGNUM *b, ossl_BN_CTX *ctx);
typedef int (*ossl_EC_GROUP_set_curve_GFp_t)(ossl_EC_GROUP *group, const ossl_BIGNUM *p, const ossl_BIGNUM *a, const ossl_BIGNUM *b, ossl_BN_CTX *ctx);
typedef int (*ossl_EC_GROUP_get_curve_GFp_t)(const ossl_EC_GROUP *group, ossl_BIGNUM *p, ossl_BIGNUM *a, ossl_BIGNUM *b, ossl_BN_CTX *ctx);
typedef int (*ossl_EC_GROUP_set_curve_GF2m_t)(ossl_EC_GROUP *group, const ossl_BIGNUM *p, const ossl_BIGNUM *a, const ossl_BIGNUM *b, ossl_BN_CTX *ctx);
typedef int (*ossl_EC_GROUP_get_curve_GF2m_t)(const ossl_EC_GROUP *group, ossl_BIGNUM *p, ossl_BIGNUM *a, ossl_BIGNUM *b, ossl_BN_CTX *ctx);
typedef int (*ossl_EC_GROUP_get_degree_t)(const ossl_EC_GROUP *group);
typedef int (*ossl_EC_GROUP_check_t)(const ossl_EC_GROUP *group, ossl_BN_CTX *ctx);
typedef int (*ossl_EC_GROUP_check_discriminant_t)(const ossl_EC_GROUP *group, ossl_BN_CTX *ctx);
typedef int (*ossl_EC_GROUP_cmp_t)(const ossl_EC_GROUP *a, const ossl_EC_GROUP *b, ossl_BN_CTX *ctx);
typedef ossl_EC_GROUP * (*ossl_EC_GROUP_new_curve_GFp_t)(const ossl_BIGNUM *p, const ossl_BIGNUM *a, const ossl_BIGNUM *b, ossl_BN_CTX *ctx);
typedef ossl_EC_GROUP * (*ossl_EC_GROUP_new_curve_GF2m_t)(const ossl_BIGNUM *p, const ossl_BIGNUM *a, const ossl_BIGNUM *b, ossl_BN_CTX *ctx);
typedef ossl_EC_GROUP * (*ossl_EC_GROUP_new_from_params_t)(const ossl_OSSL_PARAM params[], ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef ossl_EC_GROUP * (*ossl_EC_GROUP_new_by_curve_name_ex_t)(ossl_OSSL_LIB_CTX *libctx, const char *propq, int nid);
typedef ossl_EC_GROUP * (*ossl_EC_GROUP_new_by_curve_name_t)(int nid);
typedef ossl_EC_GROUP * (*ossl_EC_GROUP_new_from_ecparameters_t)(const ossl_ECPARAMETERS *params);
typedef ossl_ECPARAMETERS * (*ossl_EC_GROUP_get_ecparameters_t)(const ossl_EC_GROUP *group, ossl_ECPARAMETERS *params);
typedef ossl_EC_GROUP * (*ossl_EC_GROUP_new_from_ecpkparameters_t)(const ossl_ECPKPARAMETERS *params);
typedef ossl_ECPKPARAMETERS * (*ossl_EC_GROUP_get_ecpkparameters_t)(const ossl_EC_GROUP *group, ossl_ECPKPARAMETERS *params);
typedef size_t (*ossl_EC_get_builtin_curves_t)(ossl_EC_builtin_curve *r, size_t nitems);
typedef const char * (*ossl_EC_curve_nid2nist_t)(int nid);
typedef int (*ossl_EC_curve_nist2nid_t)(const char *name);
typedef int (*ossl_EC_GROUP_check_named_curve_t)(const ossl_EC_GROUP *group, int nist_only, ossl_BN_CTX *ctx);
typedef ossl_EC_POINT * (*ossl_EC_POINT_new_t)(const ossl_EC_GROUP *group);
typedef void (*ossl_EC_POINT_free_t)(ossl_EC_POINT *point);
typedef void (*ossl_EC_POINT_clear_free_t)(ossl_EC_POINT *point);
typedef int (*ossl_EC_POINT_copy_t)(ossl_EC_POINT *dst, const ossl_EC_POINT *src);
typedef ossl_EC_POINT * (*ossl_EC_POINT_dup_t)(const ossl_EC_POINT *src, const ossl_EC_GROUP *group);
typedef int (*ossl_EC_POINT_set_to_infinity_t)(const ossl_EC_GROUP *group, ossl_EC_POINT *point);
typedef const ossl_EC_METHOD * (*ossl_EC_POINT_method_of_t)(const ossl_EC_POINT *point);
typedef int (*ossl_EC_POINT_set_Jprojective_coordinates_GFp_t)(const ossl_EC_GROUP *group, ossl_EC_POINT *p, const ossl_BIGNUM *x, const ossl_BIGNUM *y, const ossl_BIGNUM *z, ossl_BN_CTX *ctx);
typedef int (*ossl_EC_POINT_get_Jprojective_coordinates_GFp_t)(const ossl_EC_GROUP *group, const ossl_EC_POINT *p, ossl_BIGNUM *x, ossl_BIGNUM *y, ossl_BIGNUM *z, ossl_BN_CTX *ctx);
typedef int (*ossl_EC_POINT_set_affine_coordinates_t)(const ossl_EC_GROUP *group, ossl_EC_POINT *p, const ossl_BIGNUM *x, const ossl_BIGNUM *y, ossl_BN_CTX *ctx);
typedef int (*ossl_EC_POINT_get_affine_coordinates_t)(const ossl_EC_GROUP *group, const ossl_EC_POINT *p, ossl_BIGNUM *x, ossl_BIGNUM *y, ossl_BN_CTX *ctx);
typedef int (*ossl_EC_POINT_set_affine_coordinates_GFp_t)(const ossl_EC_GROUP *group, ossl_EC_POINT *p, const ossl_BIGNUM *x, const ossl_BIGNUM *y, ossl_BN_CTX *ctx);
typedef int (*ossl_EC_POINT_get_affine_coordinates_GFp_t)(const ossl_EC_GROUP *group, const ossl_EC_POINT *p, ossl_BIGNUM *x, ossl_BIGNUM *y, ossl_BN_CTX *ctx);
typedef int (*ossl_EC_POINT_set_compressed_coordinates_t)(const ossl_EC_GROUP *group, ossl_EC_POINT *p, const ossl_BIGNUM *x, int y_bit, ossl_BN_CTX *ctx);
typedef int (*ossl_EC_POINT_set_compressed_coordinates_GFp_t)(const ossl_EC_GROUP *group, ossl_EC_POINT *p, const ossl_BIGNUM *x, int y_bit, ossl_BN_CTX *ctx);
typedef int (*ossl_EC_POINT_set_affine_coordinates_GF2m_t)(const ossl_EC_GROUP *group, ossl_EC_POINT *p, const ossl_BIGNUM *x, const ossl_BIGNUM *y, ossl_BN_CTX *ctx);
typedef int (*ossl_EC_POINT_get_affine_coordinates_GF2m_t)(const ossl_EC_GROUP *group, const ossl_EC_POINT *p, ossl_BIGNUM *x, ossl_BIGNUM *y, ossl_BN_CTX *ctx);
typedef int (*ossl_EC_POINT_set_compressed_coordinates_GF2m_t)(const ossl_EC_GROUP *group, ossl_EC_POINT *p, const ossl_BIGNUM *x, int y_bit, ossl_BN_CTX *ctx);
typedef size_t (*ossl_EC_POINT_point2oct_t)(const ossl_EC_GROUP *group, const ossl_EC_POINT *p, ossl_point_conversion_form_t form, unsigned char *buf, size_t len, ossl_BN_CTX *ctx);
typedef int (*ossl_EC_POINT_oct2point_t)(const ossl_EC_GROUP *group, ossl_EC_POINT *p, const unsigned char *buf, size_t len, ossl_BN_CTX *ctx);
typedef size_t (*ossl_EC_POINT_point2buf_t)(const ossl_EC_GROUP *group, const ossl_EC_POINT *point, ossl_point_conversion_form_t form, unsigned char **pbuf, ossl_BN_CTX *ctx);
typedef ossl_BIGNUM * (*ossl_EC_POINT_point2bn_t)(const ossl_EC_GROUP *_p0, const ossl_EC_POINT *_p1, ossl_point_conversion_form_t form, ossl_BIGNUM *_p3, ossl_BN_CTX *_p4);
typedef ossl_EC_POINT * (*ossl_EC_POINT_bn2point_t)(const ossl_EC_GROUP *_p0, const ossl_BIGNUM *_p1, ossl_EC_POINT *_p2, ossl_BN_CTX *_p3);
typedef char * (*ossl_EC_POINT_point2hex_t)(const ossl_EC_GROUP *_p0, const ossl_EC_POINT *_p1, ossl_point_conversion_form_t form, ossl_BN_CTX *_p3);
typedef ossl_EC_POINT * (*ossl_EC_POINT_hex2point_t)(const ossl_EC_GROUP *_p0, const char *_p1, ossl_EC_POINT *_p2, ossl_BN_CTX *_p3);
typedef int (*ossl_EC_POINT_add_t)(const ossl_EC_GROUP *group, ossl_EC_POINT *r, const ossl_EC_POINT *a, const ossl_EC_POINT *b, ossl_BN_CTX *ctx);
typedef int (*ossl_EC_POINT_dbl_t)(const ossl_EC_GROUP *group, ossl_EC_POINT *r, const ossl_EC_POINT *a, ossl_BN_CTX *ctx);
typedef int (*ossl_EC_POINT_invert_t)(const ossl_EC_GROUP *group, ossl_EC_POINT *a, ossl_BN_CTX *ctx);
typedef int (*ossl_EC_POINT_is_at_infinity_t)(const ossl_EC_GROUP *group, const ossl_EC_POINT *p);
typedef int (*ossl_EC_POINT_is_on_curve_t)(const ossl_EC_GROUP *group, const ossl_EC_POINT *point, ossl_BN_CTX *ctx);
typedef int (*ossl_EC_POINT_cmp_t)(const ossl_EC_GROUP *group, const ossl_EC_POINT *a, const ossl_EC_POINT *b, ossl_BN_CTX *ctx);
typedef int (*ossl_EC_POINT_make_affine_t)(const ossl_EC_GROUP *group, ossl_EC_POINT *point, ossl_BN_CTX *ctx);
typedef int (*ossl_EC_POINTs_make_affine_t)(const ossl_EC_GROUP *group, size_t num, ossl_EC_POINT *points[], ossl_BN_CTX *ctx);
typedef int (*ossl_EC_POINTs_mul_t)(const ossl_EC_GROUP *group, ossl_EC_POINT *r, const ossl_BIGNUM *n, size_t num, const ossl_EC_POINT *p[], const ossl_BIGNUM *m[], ossl_BN_CTX *ctx);
typedef int (*ossl_EC_POINT_mul_t)(const ossl_EC_GROUP *group, ossl_EC_POINT *r, const ossl_BIGNUM *n, const ossl_EC_POINT *q, const ossl_BIGNUM *m, ossl_BN_CTX *ctx);
typedef int (*ossl_EC_GROUP_precompute_mult_t)(ossl_EC_GROUP *group, ossl_BN_CTX *ctx);
typedef int (*ossl_EC_GROUP_have_precompute_mult_t)(const ossl_EC_GROUP *group);
typedef const ossl_ASN1_ITEM * (*ossl_ECPKPARAMETERS_it_t)();
typedef ossl_ECPKPARAMETERS * (*ossl_ECPKPARAMETERS_new_t)();
typedef void (*ossl_ECPKPARAMETERS_free_t)(ossl_ECPKPARAMETERS *a);
typedef const ossl_ASN1_ITEM * (*ossl_ECPARAMETERS_it_t)();
typedef ossl_ECPARAMETERS * (*ossl_ECPARAMETERS_new_t)();
typedef void (*ossl_ECPARAMETERS_free_t)(ossl_ECPARAMETERS *a);
typedef int (*ossl_EC_GROUP_get_basis_type_t)(const ossl_EC_GROUP *_p0);
typedef int (*ossl_EC_GROUP_get_trinomial_basis_t)(const ossl_EC_GROUP *_p0, unsigned int *k);
typedef int (*ossl_EC_GROUP_get_pentanomial_basis_t)(const ossl_EC_GROUP *_p0, unsigned int *k1, unsigned int *k2, unsigned int *k3);
typedef ossl_EC_GROUP * (*ossl_d2i_ECPKParameters_t)(ossl_EC_GROUP **_p0, const unsigned char **in, long len);
typedef int (*ossl_i2d_ECPKParameters_t)(const ossl_EC_GROUP *_p0, unsigned char **out);
typedef int (*ossl_ECPKParameters_print_t)(ossl_BIO *bp, const ossl_EC_GROUP *x, int off);
typedef int (*ossl_ECPKParameters_print_fp_t)(FILE *fp, const ossl_EC_GROUP *x, int off);
typedef ossl_EC_KEY * (*ossl_EC_KEY_new_ex_t)(ossl_OSSL_LIB_CTX *ctx, const char *propq);
typedef ossl_EC_KEY * (*ossl_EC_KEY_new_t)();
typedef int (*ossl_EC_KEY_get_flags_t)(const ossl_EC_KEY *key);
typedef void (*ossl_EC_KEY_set_flags_t)(ossl_EC_KEY *key, int flags);
typedef void (*ossl_EC_KEY_clear_flags_t)(ossl_EC_KEY *key, int flags);
typedef int (*ossl_EC_KEY_decoded_from_explicit_params_t)(const ossl_EC_KEY *key);
typedef ossl_EC_KEY * (*ossl_EC_KEY_new_by_curve_name_ex_t)(ossl_OSSL_LIB_CTX *ctx, const char *propq, int nid);
typedef ossl_EC_KEY * (*ossl_EC_KEY_new_by_curve_name_t)(int nid);
typedef void (*ossl_EC_KEY_free_t)(ossl_EC_KEY *key);
typedef ossl_EC_KEY * (*ossl_EC_KEY_copy_t)(ossl_EC_KEY *dst, const ossl_EC_KEY *src);
typedef ossl_EC_KEY * (*ossl_EC_KEY_dup_t)(const ossl_EC_KEY *src);
typedef int (*ossl_EC_KEY_up_ref_t)(ossl_EC_KEY *key);
typedef ossl_ENGINE * (*ossl_EC_KEY_get0_engine_t)(const ossl_EC_KEY *eckey);
typedef const ossl_EC_GROUP * (*ossl_EC_KEY_get0_group_t)(const ossl_EC_KEY *key);
typedef int (*ossl_EC_KEY_set_group_t)(ossl_EC_KEY *key, const ossl_EC_GROUP *group);
typedef const ossl_BIGNUM * (*ossl_EC_KEY_get0_private_key_t)(const ossl_EC_KEY *key);
typedef int (*ossl_EC_KEY_set_private_key_t)(ossl_EC_KEY *key, const ossl_BIGNUM *prv);
typedef const ossl_EC_POINT * (*ossl_EC_KEY_get0_public_key_t)(const ossl_EC_KEY *key);
typedef int (*ossl_EC_KEY_set_public_key_t)(ossl_EC_KEY *key, const ossl_EC_POINT *pub);
typedef unsigned int (*ossl_EC_KEY_get_enc_flags_t)(const ossl_EC_KEY *key);
typedef void (*ossl_EC_KEY_set_enc_flags_t)(ossl_EC_KEY *eckey, unsigned int flags);
typedef ossl_point_conversion_form_t (*ossl_EC_KEY_get_conv_form_t)(const ossl_EC_KEY *key);
typedef void (*ossl_EC_KEY_set_conv_form_t)(ossl_EC_KEY *eckey, ossl_point_conversion_form_t cform);
typedef int (*ossl_EC_KEY_set_ex_data_t)(ossl_EC_KEY *key, int idx, void *arg);
typedef void * (*ossl_EC_KEY_get_ex_data_t)(const ossl_EC_KEY *key, int idx);
typedef void (*ossl_EC_KEY_set_asn1_flag_t)(ossl_EC_KEY *eckey, int asn1_flag);
typedef int (*ossl_EC_KEY_precompute_mult_t)(ossl_EC_KEY *key, ossl_BN_CTX *ctx);
typedef int (*ossl_EC_KEY_generate_key_t)(ossl_EC_KEY *key);
typedef int (*ossl_EC_KEY_check_key_t)(const ossl_EC_KEY *key);
typedef int (*ossl_EC_KEY_can_sign_t)(const ossl_EC_KEY *eckey);
typedef int (*ossl_EC_KEY_set_public_key_affine_coordinates_t)(ossl_EC_KEY *key, ossl_BIGNUM *x, ossl_BIGNUM *y);
typedef size_t (*ossl_EC_KEY_key2buf_t)(const ossl_EC_KEY *key, ossl_point_conversion_form_t form, unsigned char **pbuf, ossl_BN_CTX *ctx);
typedef int (*ossl_EC_KEY_oct2key_t)(ossl_EC_KEY *key, const unsigned char *buf, size_t len, ossl_BN_CTX *ctx);
typedef int (*ossl_EC_KEY_oct2priv_t)(ossl_EC_KEY *key, const unsigned char *buf, size_t len);
typedef size_t (*ossl_EC_KEY_priv2oct_t)(const ossl_EC_KEY *key, unsigned char *buf, size_t len);
typedef size_t (*ossl_EC_KEY_priv2buf_t)(const ossl_EC_KEY *eckey, unsigned char **pbuf);
typedef ossl_EC_KEY * (*ossl_d2i_ECPrivateKey_t)(ossl_EC_KEY **key, const unsigned char **in, long len);
typedef int (*ossl_i2d_ECPrivateKey_t)(const ossl_EC_KEY *key, unsigned char **out);
typedef ossl_EC_KEY * (*ossl_d2i_ECParameters_t)(ossl_EC_KEY **key, const unsigned char **in, long len);
typedef int (*ossl_i2d_ECParameters_t)(const ossl_EC_KEY *key, unsigned char **out);
typedef ossl_EC_KEY * (*ossl_o2i_ECPublicKey_t)(ossl_EC_KEY **key, const unsigned char **in, long len);
typedef int (*ossl_i2o_ECPublicKey_t)(const ossl_EC_KEY *key, unsigned char **out);
typedef int (*ossl_ECParameters_print_t)(ossl_BIO *bp, const ossl_EC_KEY *key);
typedef int (*ossl_EC_KEY_print_t)(ossl_BIO *bp, const ossl_EC_KEY *key, int off);
typedef int (*ossl_ECParameters_print_fp_t)(FILE *fp, const ossl_EC_KEY *key);
typedef int (*ossl_EC_KEY_print_fp_t)(FILE *fp, const ossl_EC_KEY *key, int off);
typedef const ossl_EC_KEY_METHOD * (*ossl_EC_KEY_OpenSSL_t)();
typedef const ossl_EC_KEY_METHOD * (*ossl_EC_KEY_get_default_method_t)();
typedef void (*ossl_EC_KEY_set_default_method_t)(const ossl_EC_KEY_METHOD *meth);
typedef const ossl_EC_KEY_METHOD * (*ossl_EC_KEY_get_method_t)(const ossl_EC_KEY *key);
typedef int (*ossl_EC_KEY_set_method_t)(ossl_EC_KEY *key, const ossl_EC_KEY_METHOD *meth);
typedef ossl_EC_KEY * (*ossl_EC_KEY_new_method_t)(ossl_ENGINE *engine);
typedef int (*ossl_ECDH_KDF_X9_62_t)(unsigned char *out, size_t outlen, const unsigned char *Z, size_t Zlen, const unsigned char *sinfo, size_t sinfolen, const ossl_EVP_MD *md);
typedef int (*ossl_ECDH_compute_key_t)(void *out, size_t outlen, const ossl_EC_POINT *pub_key, const ossl_EC_KEY *ecdh, void *(*KDF)(const void *, size_t, void *, size_t *));
typedef ossl_ECDSA_SIG * (*ossl_ECDSA_SIG_new_t)();
typedef void (*ossl_ECDSA_SIG_free_t)(ossl_ECDSA_SIG *sig);
typedef ossl_ECDSA_SIG * (*ossl_d2i_ECDSA_SIG_t)(ossl_ECDSA_SIG **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ECDSA_SIG_t)(const ossl_ECDSA_SIG *a, unsigned char **out);
typedef void (*ossl_ECDSA_SIG_get0_t)(const ossl_ECDSA_SIG *sig, const ossl_BIGNUM **pr, const ossl_BIGNUM **ps);
typedef const ossl_BIGNUM * (*ossl_ECDSA_SIG_get0_r_t)(const ossl_ECDSA_SIG *sig);
typedef const ossl_BIGNUM * (*ossl_ECDSA_SIG_get0_s_t)(const ossl_ECDSA_SIG *sig);
typedef int (*ossl_ECDSA_SIG_set0_t)(ossl_ECDSA_SIG *sig, ossl_BIGNUM *r, ossl_BIGNUM *s);
typedef ossl_ECDSA_SIG * (*ossl_ECDSA_do_sign_t)(const unsigned char *dgst, int dgst_len, ossl_EC_KEY *eckey);
typedef ossl_ECDSA_SIG * (*ossl_ECDSA_do_sign_ex_t)(const unsigned char *dgst, int dgstlen, const ossl_BIGNUM *kinv, const ossl_BIGNUM *rp, ossl_EC_KEY *eckey);
typedef int (*ossl_ECDSA_do_verify_t)(const unsigned char *dgst, int dgst_len, const ossl_ECDSA_SIG *sig, ossl_EC_KEY *eckey);
typedef int (*ossl_ECDSA_sign_setup_t)(ossl_EC_KEY *eckey, ossl_BN_CTX *ctx, ossl_BIGNUM **kinv, ossl_BIGNUM **rp);
typedef int (*ossl_ECDSA_sign_t)(int type, const unsigned char *dgst, int dgstlen, unsigned char *sig, unsigned int *siglen, ossl_EC_KEY *eckey);
typedef int (*ossl_ECDSA_sign_ex_t)(int type, const unsigned char *dgst, int dgstlen, unsigned char *sig, unsigned int *siglen, const ossl_BIGNUM *kinv, const ossl_BIGNUM *rp, ossl_EC_KEY *eckey);
typedef int (*ossl_ECDSA_verify_t)(int type, const unsigned char *dgst, int dgstlen, const unsigned char *sig, int siglen, ossl_EC_KEY *eckey);
typedef int (*ossl_ECDSA_size_t)(const ossl_EC_KEY *eckey);
typedef ossl_EC_KEY_METHOD * (*ossl_EC_KEY_METHOD_new_t)(const ossl_EC_KEY_METHOD *meth);
typedef void (*ossl_EC_KEY_METHOD_free_t)(ossl_EC_KEY_METHOD *meth);
typedef void (*ossl_EC_KEY_METHOD_set_init_t)(ossl_EC_KEY_METHOD *meth, int (*init)(ossl_EC_KEY *), void (*finish)(ossl_EC_KEY *), int (*copy)(ossl_EC_KEY *, const ossl_EC_KEY *), int (*set_group)(ossl_EC_KEY *, const ossl_EC_GROUP *), int (*set_private)(ossl_EC_KEY *, const ossl_BIGNUM *), int (*set_public)(ossl_EC_KEY *, const ossl_EC_POINT *));
typedef void (*ossl_EC_KEY_METHOD_set_keygen_t)(ossl_EC_KEY_METHOD *meth, int (*keygen)(ossl_EC_KEY *));
typedef void (*ossl_EC_KEY_METHOD_set_compute_key_t)(ossl_EC_KEY_METHOD *meth, int (*ckey)(unsigned char **, size_t *, const ossl_EC_POINT *, const ossl_EC_KEY *));
typedef void (*ossl_EC_KEY_METHOD_set_sign_t)(ossl_EC_KEY_METHOD *meth, int (*sign)(int, const unsigned char *, int, unsigned char *, unsigned int *, const ossl_BIGNUM *, const ossl_BIGNUM *, ossl_EC_KEY *), int (*sign_setup)(ossl_EC_KEY *, ossl_BN_CTX *, ossl_BIGNUM **, ossl_BIGNUM **), ossl_ECDSA_SIG *(*sign_sig)(const unsigned char *, int, const ossl_BIGNUM *, const ossl_BIGNUM *, ossl_EC_KEY *));
typedef void (*ossl_EC_KEY_METHOD_set_verify_t)(ossl_EC_KEY_METHOD *meth, int (*verify)(int, const unsigned char *, int, const unsigned char *, int, ossl_EC_KEY *), int (*verify_sig)(const unsigned char *, int, const ossl_ECDSA_SIG *, ossl_EC_KEY *));
typedef void (*ossl_EC_KEY_METHOD_get_init_t)(const ossl_EC_KEY_METHOD *meth, int (**pinit)(ossl_EC_KEY *), void (**pfinish)(ossl_EC_KEY *), int (**pcopy)(ossl_EC_KEY *, const ossl_EC_KEY *), int (**pset_group)(ossl_EC_KEY *, const ossl_EC_GROUP *), int (**pset_private)(ossl_EC_KEY *, const ossl_BIGNUM *), int (**pset_public)(ossl_EC_KEY *, const ossl_EC_POINT *));
typedef void (*ossl_EC_KEY_METHOD_get_keygen_t)(const ossl_EC_KEY_METHOD *meth, int (**pkeygen)(ossl_EC_KEY *));
typedef void (*ossl_EC_KEY_METHOD_get_compute_key_t)(const ossl_EC_KEY_METHOD *meth, int (**pck)(unsigned char **, size_t *, const ossl_EC_POINT *, const ossl_EC_KEY *));
typedef void (*ossl_EC_KEY_METHOD_get_sign_t)(const ossl_EC_KEY_METHOD *meth, int (**psign)(int, const unsigned char *, int, unsigned char *, unsigned int *, const ossl_BIGNUM *, const ossl_BIGNUM *, ossl_EC_KEY *), int (**psign_setup)(ossl_EC_KEY *, ossl_BN_CTX *, ossl_BIGNUM **, ossl_BIGNUM **), ossl_ECDSA_SIG *(**psign_sig)(const unsigned char *, int, const ossl_BIGNUM *, const ossl_BIGNUM *, ossl_EC_KEY *));
typedef void (*ossl_EC_KEY_METHOD_get_verify_t)(const ossl_EC_KEY_METHOD *meth, int (**pverify)(int, const unsigned char *, int, const unsigned char *, int, ossl_EC_KEY *), int (**pverify_sig)(const unsigned char *, int, const ossl_ECDSA_SIG *, ossl_EC_KEY *));
typedef int (*ossl_EVP_PKEY_CTX_set_rsa_padding_t)(ossl_EVP_PKEY_CTX *ctx, int pad_mode);
typedef int (*ossl_EVP_PKEY_CTX_get_rsa_padding_t)(ossl_EVP_PKEY_CTX *ctx, int *pad_mode);
typedef int (*ossl_EVP_PKEY_CTX_set_rsa_pss_saltlen_t)(ossl_EVP_PKEY_CTX *ctx, int saltlen);
typedef int (*ossl_EVP_PKEY_CTX_get_rsa_pss_saltlen_t)(ossl_EVP_PKEY_CTX *ctx, int *saltlen);
typedef int (*ossl_EVP_PKEY_CTX_set_rsa_keygen_bits_t)(ossl_EVP_PKEY_CTX *ctx, int bits);
typedef int (*ossl_EVP_PKEY_CTX_set1_rsa_keygen_pubexp_t)(ossl_EVP_PKEY_CTX *ctx, ossl_BIGNUM *pubexp);
typedef int (*ossl_EVP_PKEY_CTX_set_rsa_keygen_primes_t)(ossl_EVP_PKEY_CTX *ctx, int primes);
typedef int (*ossl_EVP_PKEY_CTX_set_rsa_pss_keygen_saltlen_t)(ossl_EVP_PKEY_CTX *ctx, int saltlen);
typedef int (*ossl_EVP_PKEY_CTX_set_rsa_keygen_pubexp_t)(ossl_EVP_PKEY_CTX *ctx, ossl_BIGNUM *pubexp);
typedef int (*ossl_EVP_PKEY_CTX_set_rsa_mgf1_md_t)(ossl_EVP_PKEY_CTX *ctx, const ossl_EVP_MD *md);
typedef int (*ossl_EVP_PKEY_CTX_set_rsa_mgf1_md_name_t)(ossl_EVP_PKEY_CTX *ctx, const char *mdname, const char *mdprops);
typedef int (*ossl_EVP_PKEY_CTX_get_rsa_mgf1_md_t)(ossl_EVP_PKEY_CTX *ctx, const ossl_EVP_MD **md);
typedef int (*ossl_EVP_PKEY_CTX_get_rsa_mgf1_md_name_t)(ossl_EVP_PKEY_CTX *ctx, char *name, size_t namelen);
typedef int (*ossl_EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md_t)(ossl_EVP_PKEY_CTX *ctx, const ossl_EVP_MD *md);
typedef int (*ossl_EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md_name_t)(ossl_EVP_PKEY_CTX *ctx, const char *mdname);
typedef int (*ossl_EVP_PKEY_CTX_set_rsa_pss_keygen_md_t)(ossl_EVP_PKEY_CTX *ctx, const ossl_EVP_MD *md);
typedef int (*ossl_EVP_PKEY_CTX_set_rsa_pss_keygen_md_name_t)(ossl_EVP_PKEY_CTX *ctx, const char *mdname, const char *mdprops);
typedef int (*ossl_EVP_PKEY_CTX_set_rsa_oaep_md_t)(ossl_EVP_PKEY_CTX *ctx, const ossl_EVP_MD *md);
typedef int (*ossl_EVP_PKEY_CTX_set_rsa_oaep_md_name_t)(ossl_EVP_PKEY_CTX *ctx, const char *mdname, const char *mdprops);
typedef int (*ossl_EVP_PKEY_CTX_get_rsa_oaep_md_t)(ossl_EVP_PKEY_CTX *ctx, const ossl_EVP_MD **md);
typedef int (*ossl_EVP_PKEY_CTX_get_rsa_oaep_md_name_t)(ossl_EVP_PKEY_CTX *ctx, char *name, size_t namelen);
typedef int (*ossl_EVP_PKEY_CTX_set0_rsa_oaep_label_t)(ossl_EVP_PKEY_CTX *ctx, void *label, int llen);
typedef int (*ossl_EVP_PKEY_CTX_get0_rsa_oaep_label_t)(ossl_EVP_PKEY_CTX *ctx, unsigned char **label);
typedef ossl_RSA * (*ossl_RSA_new_t)();
typedef ossl_RSA * (*ossl_RSA_new_method_t)(ossl_ENGINE *engine);
typedef int (*ossl_RSA_bits_t)(const ossl_RSA *rsa);
typedef int (*ossl_RSA_size_t)(const ossl_RSA *rsa);
typedef int (*ossl_RSA_security_bits_t)(const ossl_RSA *rsa);
typedef int (*ossl_RSA_set0_key_t)(ossl_RSA *r, ossl_BIGNUM *n, ossl_BIGNUM *e, ossl_BIGNUM *d);
typedef int (*ossl_RSA_set0_factors_t)(ossl_RSA *r, ossl_BIGNUM *p, ossl_BIGNUM *q);
typedef int (*ossl_RSA_set0_crt_params_t)(ossl_RSA *r, ossl_BIGNUM *dmp1, ossl_BIGNUM *dmq1, ossl_BIGNUM *iqmp);
typedef int (*ossl_RSA_set0_multi_prime_params_t)(ossl_RSA *r, ossl_BIGNUM *primes[], ossl_BIGNUM *exps[], ossl_BIGNUM *coeffs[], int pnum);
typedef void (*ossl_RSA_get0_key_t)(const ossl_RSA *r, const ossl_BIGNUM **n, const ossl_BIGNUM **e, const ossl_BIGNUM **d);
typedef void (*ossl_RSA_get0_factors_t)(const ossl_RSA *r, const ossl_BIGNUM **p, const ossl_BIGNUM **q);
typedef int (*ossl_RSA_get_multi_prime_extra_count_t)(const ossl_RSA *r);
typedef int (*ossl_RSA_get0_multi_prime_factors_t)(const ossl_RSA *r, const ossl_BIGNUM *primes[]);
typedef void (*ossl_RSA_get0_crt_params_t)(const ossl_RSA *r, const ossl_BIGNUM **dmp1, const ossl_BIGNUM **dmq1, const ossl_BIGNUM **iqmp);
typedef int (*ossl_RSA_get0_multi_prime_crt_params_t)(const ossl_RSA *r, const ossl_BIGNUM *exps[], const ossl_BIGNUM *coeffs[]);
typedef const ossl_BIGNUM * (*ossl_RSA_get0_n_t)(const ossl_RSA *d);
typedef const ossl_BIGNUM * (*ossl_RSA_get0_e_t)(const ossl_RSA *d);
typedef const ossl_BIGNUM * (*ossl_RSA_get0_d_t)(const ossl_RSA *d);
typedef const ossl_BIGNUM * (*ossl_RSA_get0_p_t)(const ossl_RSA *d);
typedef const ossl_BIGNUM * (*ossl_RSA_get0_q_t)(const ossl_RSA *d);
typedef const ossl_BIGNUM * (*ossl_RSA_get0_dmp1_t)(const ossl_RSA *r);
typedef const ossl_BIGNUM * (*ossl_RSA_get0_dmq1_t)(const ossl_RSA *r);
typedef const ossl_BIGNUM * (*ossl_RSA_get0_iqmp_t)(const ossl_RSA *r);
typedef const ossl_RSA_PSS_PARAMS * (*ossl_RSA_get0_pss_params_t)(const ossl_RSA *r);
typedef void (*ossl_RSA_clear_flags_t)(ossl_RSA *r, int flags);
typedef int (*ossl_RSA_test_flags_t)(const ossl_RSA *r, int flags);
typedef void (*ossl_RSA_set_flags_t)(ossl_RSA *r, int flags);
typedef int (*ossl_RSA_get_version_t)(ossl_RSA *r);
typedef ossl_ENGINE * (*ossl_RSA_get0_engine_t)(const ossl_RSA *r);
typedef ossl_RSA * (*ossl_RSA_generate_key_t)(int bits, unsigned long e, void (*callback)(int, int, void *), void *cb_arg);
typedef int (*ossl_RSA_generate_key_ex_t)(ossl_RSA *rsa, int bits, ossl_BIGNUM *e, ossl_BN_GENCB *cb);
typedef int (*ossl_RSA_generate_multi_prime_key_t)(ossl_RSA *rsa, int bits, int primes, ossl_BIGNUM *e, ossl_BN_GENCB *cb);
typedef int (*ossl_RSA_X931_derive_ex_t)(ossl_RSA *rsa, ossl_BIGNUM *p1, ossl_BIGNUM *p2, ossl_BIGNUM *q1, ossl_BIGNUM *q2, const ossl_BIGNUM *Xp1, const ossl_BIGNUM *Xp2, const ossl_BIGNUM *Xp, const ossl_BIGNUM *Xq1, const ossl_BIGNUM *Xq2, const ossl_BIGNUM *Xq, const ossl_BIGNUM *e, ossl_BN_GENCB *cb);
typedef int (*ossl_RSA_X931_generate_key_ex_t)(ossl_RSA *rsa, int bits, const ossl_BIGNUM *e, ossl_BN_GENCB *cb);
typedef int (*ossl_RSA_check_key_t)(const ossl_RSA *_p0);
typedef int (*ossl_RSA_check_key_ex_t)(const ossl_RSA *_p0, ossl_BN_GENCB *cb);
typedef int (*ossl_RSA_public_encrypt_t)(int flen, const unsigned char *from, unsigned char *to, ossl_RSA *rsa, int padding);
typedef int (*ossl_RSA_private_encrypt_t)(int flen, const unsigned char *from, unsigned char *to, ossl_RSA *rsa, int padding);
typedef int (*ossl_RSA_public_decrypt_t)(int flen, const unsigned char *from, unsigned char *to, ossl_RSA *rsa, int padding);
typedef int (*ossl_RSA_private_decrypt_t)(int flen, const unsigned char *from, unsigned char *to, ossl_RSA *rsa, int padding);
typedef void (*ossl_RSA_free_t)(ossl_RSA *r);
typedef int (*ossl_RSA_up_ref_t)(ossl_RSA *r);
typedef int (*ossl_RSA_flags_t)(const ossl_RSA *r);
typedef void (*ossl_RSA_set_default_method_t)(const ossl_RSA_METHOD *meth);
typedef const ossl_RSA_METHOD * (*ossl_RSA_get_default_method_t)();
typedef const ossl_RSA_METHOD * (*ossl_RSA_null_method_t)();
typedef const ossl_RSA_METHOD * (*ossl_RSA_get_method_t)(const ossl_RSA *rsa);
typedef int (*ossl_RSA_set_method_t)(ossl_RSA *rsa, const ossl_RSA_METHOD *meth);
typedef const ossl_RSA_METHOD * (*ossl_RSA_PKCS1_OpenSSL_t)();
typedef ossl_RSA * (*ossl_d2i_RSAPublicKey_t)(ossl_RSA **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_RSAPublicKey_t)(const ossl_RSA *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_RSAPublicKey_it_t)();
typedef ossl_RSA * (*ossl_d2i_RSAPrivateKey_t)(ossl_RSA **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_RSAPrivateKey_t)(const ossl_RSA *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_RSAPrivateKey_it_t)();
typedef int (*ossl_RSA_pkey_ctx_ctrl_t)(ossl_EVP_PKEY_CTX *ctx, int optype, int cmd, int p1, void *p2);
typedef ossl_RSA_PSS_PARAMS * (*ossl_RSA_PSS_PARAMS_new_t)();
typedef void (*ossl_RSA_PSS_PARAMS_free_t)(ossl_RSA_PSS_PARAMS *a);
typedef ossl_RSA_PSS_PARAMS * (*ossl_d2i_RSA_PSS_PARAMS_t)(ossl_RSA_PSS_PARAMS **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_RSA_PSS_PARAMS_t)(const ossl_RSA_PSS_PARAMS *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_RSA_PSS_PARAMS_it_t)();
typedef ossl_RSA_PSS_PARAMS * (*ossl_RSA_PSS_PARAMS_dup_t)(const ossl_RSA_PSS_PARAMS *a);
typedef ossl_RSA_OAEP_PARAMS * (*ossl_RSA_OAEP_PARAMS_new_t)();
typedef void (*ossl_RSA_OAEP_PARAMS_free_t)(ossl_RSA_OAEP_PARAMS *a);
typedef ossl_RSA_OAEP_PARAMS * (*ossl_d2i_RSA_OAEP_PARAMS_t)(ossl_RSA_OAEP_PARAMS **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_RSA_OAEP_PARAMS_t)(const ossl_RSA_OAEP_PARAMS *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_RSA_OAEP_PARAMS_it_t)();
typedef int (*ossl_RSA_print_fp_t)(FILE *fp, const ossl_RSA *r, int offset);
typedef int (*ossl_RSA_print_t)(ossl_BIO *bp, const ossl_RSA *r, int offset);
typedef int (*ossl_RSA_sign_t)(int type, const unsigned char *m, unsigned int m_length, unsigned char *sigret, unsigned int *siglen, ossl_RSA *rsa);
typedef int (*ossl_RSA_verify_t)(int type, const unsigned char *m, unsigned int m_length, const unsigned char *sigbuf, unsigned int siglen, ossl_RSA *rsa);
typedef int (*ossl_RSA_sign_ASN1_OCTET_STRING_t)(int type, const unsigned char *m, unsigned int m_length, unsigned char *sigret, unsigned int *siglen, ossl_RSA *rsa);
typedef int (*ossl_RSA_verify_ASN1_OCTET_STRING_t)(int type, const unsigned char *m, unsigned int m_length, unsigned char *sigbuf, unsigned int siglen, ossl_RSA *rsa);
typedef int (*ossl_RSA_blinding_on_t)(ossl_RSA *rsa, ossl_BN_CTX *ctx);
typedef void (*ossl_RSA_blinding_off_t)(ossl_RSA *rsa);
typedef ossl_BN_BLINDING * (*ossl_RSA_setup_blinding_t)(ossl_RSA *rsa, ossl_BN_CTX *ctx);
typedef int (*ossl_RSA_padding_add_PKCS1_type_1_t)(unsigned char *to, int tlen, const unsigned char *f, int fl);
typedef int (*ossl_RSA_padding_check_PKCS1_type_1_t)(unsigned char *to, int tlen, const unsigned char *f, int fl, int rsa_len);
typedef int (*ossl_RSA_padding_add_PKCS1_type_2_t)(unsigned char *to, int tlen, const unsigned char *f, int fl);
typedef int (*ossl_RSA_padding_check_PKCS1_type_2_t)(unsigned char *to, int tlen, const unsigned char *f, int fl, int rsa_len);
typedef int (*ossl_PKCS1_MGF1_t)(unsigned char *mask, long len, const unsigned char *seed, long seedlen, const ossl_EVP_MD *dgst);
typedef int (*ossl_RSA_padding_add_PKCS1_OAEP_t)(unsigned char *to, int tlen, const unsigned char *f, int fl, const unsigned char *p, int pl);
typedef int (*ossl_RSA_padding_check_PKCS1_OAEP_t)(unsigned char *to, int tlen, const unsigned char *f, int fl, int rsa_len, const unsigned char *p, int pl);
typedef int (*ossl_RSA_padding_add_PKCS1_OAEP_mgf1_t)(unsigned char *to, int tlen, const unsigned char *from, int flen, const unsigned char *param, int plen, const ossl_EVP_MD *md, const ossl_EVP_MD *mgf1md);
typedef int (*ossl_RSA_padding_check_PKCS1_OAEP_mgf1_t)(unsigned char *to, int tlen, const unsigned char *from, int flen, int num, const unsigned char *param, int plen, const ossl_EVP_MD *md, const ossl_EVP_MD *mgf1md);
typedef int (*ossl_RSA_padding_add_none_t)(unsigned char *to, int tlen, const unsigned char *f, int fl);
typedef int (*ossl_RSA_padding_check_none_t)(unsigned char *to, int tlen, const unsigned char *f, int fl, int rsa_len);
typedef int (*ossl_RSA_padding_add_X931_t)(unsigned char *to, int tlen, const unsigned char *f, int fl);
typedef int (*ossl_RSA_padding_check_X931_t)(unsigned char *to, int tlen, const unsigned char *f, int fl, int rsa_len);
typedef int (*ossl_RSA_X931_hash_id_t)(int nid);
typedef int (*ossl_RSA_verify_PKCS1_PSS_t)(ossl_RSA *rsa, const unsigned char *mHash, const ossl_EVP_MD *Hash, const unsigned char *EM, int sLen);
typedef int (*ossl_RSA_padding_add_PKCS1_PSS_t)(ossl_RSA *rsa, unsigned char *EM, const unsigned char *mHash, const ossl_EVP_MD *Hash, int sLen);
typedef int (*ossl_RSA_verify_PKCS1_PSS_mgf1_t)(ossl_RSA *rsa, const unsigned char *mHash, const ossl_EVP_MD *Hash, const ossl_EVP_MD *mgf1Hash, const unsigned char *EM, int sLen);
typedef int (*ossl_RSA_padding_add_PKCS1_PSS_mgf1_t)(ossl_RSA *rsa, unsigned char *EM, const unsigned char *mHash, const ossl_EVP_MD *Hash, const ossl_EVP_MD *mgf1Hash, int sLen);
typedef int (*ossl_RSA_set_ex_data_t)(ossl_RSA *r, int idx, void *arg);
typedef void * (*ossl_RSA_get_ex_data_t)(const ossl_RSA *r, int idx);
typedef ossl_RSA * (*ossl_RSAPublicKey_dup_t)(const ossl_RSA *a);
typedef ossl_RSA * (*ossl_RSAPrivateKey_dup_t)(const ossl_RSA *a);
typedef ossl_RSA_METHOD * (*ossl_RSA_meth_new_t)(const char *name, int flags);
typedef void (*ossl_RSA_meth_free_t)(ossl_RSA_METHOD *meth);
typedef ossl_RSA_METHOD * (*ossl_RSA_meth_dup_t)(const ossl_RSA_METHOD *meth);
typedef const char * (*ossl_RSA_meth_get0_name_t)(const ossl_RSA_METHOD *meth);
typedef int (*ossl_RSA_meth_set1_name_t)(ossl_RSA_METHOD *meth, const char *name);
typedef int (*ossl_RSA_meth_get_flags_t)(const ossl_RSA_METHOD *meth);
typedef int (*ossl_RSA_meth_set_flags_t)(ossl_RSA_METHOD *meth, int flags);
typedef void * (*ossl_RSA_meth_get0_app_data_t)(const ossl_RSA_METHOD *meth);
typedef int (*ossl_RSA_meth_set0_app_data_t)(ossl_RSA_METHOD *meth, void *app_data);
typedef int (*RSA_meth_get_pub_enc_ret_t)(int, const unsigned char *, unsigned char *, ossl_RSA *, int);
typedef RSA_meth_get_pub_enc_ret_t (*ossl_RSA_meth_get_pub_enc_t)(const ossl_RSA_METHOD *meth);
typedef int (*ossl_RSA_meth_set_pub_enc_t)(ossl_RSA_METHOD *rsa, int (*pub_enc)(int, const unsigned char *, unsigned char *, ossl_RSA *, int));
typedef int (*RSA_meth_get_pub_dec_ret_t)(int, const unsigned char *, unsigned char *, ossl_RSA *, int);
typedef RSA_meth_get_pub_dec_ret_t (*ossl_RSA_meth_get_pub_dec_t)(const ossl_RSA_METHOD *meth);
typedef int (*ossl_RSA_meth_set_pub_dec_t)(ossl_RSA_METHOD *rsa, int (*pub_dec)(int, const unsigned char *, unsigned char *, ossl_RSA *, int));
typedef int (*RSA_meth_get_priv_enc_ret_t)(int, const unsigned char *, unsigned char *, ossl_RSA *, int);
typedef RSA_meth_get_priv_enc_ret_t (*ossl_RSA_meth_get_priv_enc_t)(const ossl_RSA_METHOD *meth);
typedef int (*ossl_RSA_meth_set_priv_enc_t)(ossl_RSA_METHOD *rsa, int (*priv_enc)(int, const unsigned char *, unsigned char *, ossl_RSA *, int));
typedef int (*RSA_meth_get_priv_dec_ret_t)(int, const unsigned char *, unsigned char *, ossl_RSA *, int);
typedef RSA_meth_get_priv_dec_ret_t (*ossl_RSA_meth_get_priv_dec_t)(const ossl_RSA_METHOD *meth);
typedef int (*ossl_RSA_meth_set_priv_dec_t)(ossl_RSA_METHOD *rsa, int (*priv_dec)(int, const unsigned char *, unsigned char *, ossl_RSA *, int));
typedef int (*RSA_meth_get_mod_exp_ret_t)(ossl_BIGNUM *, const ossl_BIGNUM *, ossl_RSA *, ossl_BN_CTX *);
typedef RSA_meth_get_mod_exp_ret_t (*ossl_RSA_meth_get_mod_exp_t)(const ossl_RSA_METHOD *meth);
typedef int (*ossl_RSA_meth_set_mod_exp_t)(ossl_RSA_METHOD *rsa, int (*mod_exp)(ossl_BIGNUM *, const ossl_BIGNUM *, ossl_RSA *, ossl_BN_CTX *));
typedef int (*RSA_meth_get_bn_mod_exp_ret_t)(ossl_BIGNUM *, const ossl_BIGNUM *, const ossl_BIGNUM *, const ossl_BIGNUM *, ossl_BN_CTX *, ossl_BN_MONT_CTX *);
typedef RSA_meth_get_bn_mod_exp_ret_t (*ossl_RSA_meth_get_bn_mod_exp_t)(const ossl_RSA_METHOD *meth);
typedef int (*ossl_RSA_meth_set_bn_mod_exp_t)(ossl_RSA_METHOD *rsa, int (*bn_mod_exp)(ossl_BIGNUM *, const ossl_BIGNUM *, const ossl_BIGNUM *, const ossl_BIGNUM *, ossl_BN_CTX *, ossl_BN_MONT_CTX *));
typedef int (*RSA_meth_get_init_ret_t)(ossl_RSA *);
typedef RSA_meth_get_init_ret_t (*ossl_RSA_meth_get_init_t)(const ossl_RSA_METHOD *meth);
typedef int (*ossl_RSA_meth_set_init_t)(ossl_RSA_METHOD *rsa, int (*init)(ossl_RSA *));
typedef int (*RSA_meth_get_finish_ret_t)(ossl_RSA *);
typedef RSA_meth_get_finish_ret_t (*ossl_RSA_meth_get_finish_t)(const ossl_RSA_METHOD *meth);
typedef int (*ossl_RSA_meth_set_finish_t)(ossl_RSA_METHOD *rsa, int (*finish)(ossl_RSA *));
typedef int (*RSA_meth_get_sign_ret_t)(int, const unsigned char *, unsigned int, unsigned char *, unsigned int *, const ossl_RSA *);
typedef RSA_meth_get_sign_ret_t (*ossl_RSA_meth_get_sign_t)(const ossl_RSA_METHOD *meth);
typedef int (*ossl_RSA_meth_set_sign_t)(ossl_RSA_METHOD *rsa, int (*sign)(int, const unsigned char *, unsigned int, unsigned char *, unsigned int *, const ossl_RSA *));
typedef int (*RSA_meth_get_verify_ret_t)(int, const unsigned char *, unsigned int, const unsigned char *, unsigned int, const ossl_RSA *);
typedef RSA_meth_get_verify_ret_t (*ossl_RSA_meth_get_verify_t)(const ossl_RSA_METHOD *meth);
typedef int (*ossl_RSA_meth_set_verify_t)(ossl_RSA_METHOD *rsa, int (*verify)(int, const unsigned char *, unsigned int, const unsigned char *, unsigned int, const ossl_RSA *));
typedef int (*RSA_meth_get_keygen_ret_t)(ossl_RSA *, int, ossl_BIGNUM *, ossl_BN_GENCB *);
typedef RSA_meth_get_keygen_ret_t (*ossl_RSA_meth_get_keygen_t)(const ossl_RSA_METHOD *meth);
typedef int (*ossl_RSA_meth_set_keygen_t)(ossl_RSA_METHOD *rsa, int (*keygen)(ossl_RSA *, int, ossl_BIGNUM *, ossl_BN_GENCB *));
typedef int (*RSA_meth_get_multi_prime_keygen_ret_t)(ossl_RSA *, int, int, ossl_BIGNUM *, ossl_BN_GENCB *);
typedef RSA_meth_get_multi_prime_keygen_ret_t (*ossl_RSA_meth_get_multi_prime_keygen_t)(const ossl_RSA_METHOD *meth);
typedef int (*ossl_RSA_meth_set_multi_prime_keygen_t)(ossl_RSA_METHOD *meth, int (*keygen)(ossl_RSA *, int, int, ossl_BIGNUM *, ossl_BN_GENCB *));
typedef int (*ossl_EVP_PKEY_CTX_set_dsa_paramgen_bits_t)(ossl_EVP_PKEY_CTX *ctx, int nbits);
typedef int (*ossl_EVP_PKEY_CTX_set_dsa_paramgen_q_bits_t)(ossl_EVP_PKEY_CTX *ctx, int qbits);
typedef int (*ossl_EVP_PKEY_CTX_set_dsa_paramgen_md_props_t)(ossl_EVP_PKEY_CTX *ctx, const char *md_name, const char *md_properties);
typedef int (*ossl_EVP_PKEY_CTX_set_dsa_paramgen_gindex_t)(ossl_EVP_PKEY_CTX *ctx, int gindex);
typedef int (*ossl_EVP_PKEY_CTX_set_dsa_paramgen_type_t)(ossl_EVP_PKEY_CTX *ctx, const char *name);
typedef int (*ossl_EVP_PKEY_CTX_set_dsa_paramgen_seed_t)(ossl_EVP_PKEY_CTX *ctx, const unsigned char *seed, size_t seedlen);
typedef int (*ossl_EVP_PKEY_CTX_set_dsa_paramgen_md_t)(ossl_EVP_PKEY_CTX *ctx, const ossl_EVP_MD *md);
typedef int (*ossl_EVP_PKEY_CTX_set_dh_paramgen_type_t)(ossl_EVP_PKEY_CTX *ctx, int typ);
typedef int (*ossl_EVP_PKEY_CTX_set_dh_paramgen_gindex_t)(ossl_EVP_PKEY_CTX *ctx, int gindex);
typedef int (*ossl_EVP_PKEY_CTX_set_dh_paramgen_seed_t)(ossl_EVP_PKEY_CTX *ctx, const unsigned char *seed, size_t seedlen);
typedef int (*ossl_EVP_PKEY_CTX_set_dh_paramgen_prime_len_t)(ossl_EVP_PKEY_CTX *ctx, int pbits);
typedef int (*ossl_EVP_PKEY_CTX_set_dh_paramgen_subprime_len_t)(ossl_EVP_PKEY_CTX *ctx, int qlen);
typedef int (*ossl_EVP_PKEY_CTX_set_dh_paramgen_generator_t)(ossl_EVP_PKEY_CTX *ctx, int gen);
typedef int (*ossl_EVP_PKEY_CTX_set_dh_nid_t)(ossl_EVP_PKEY_CTX *ctx, int nid);
typedef int (*ossl_EVP_PKEY_CTX_set_dh_rfc5114_t)(ossl_EVP_PKEY_CTX *ctx, int gen);
typedef int (*ossl_EVP_PKEY_CTX_set_dhx_rfc5114_t)(ossl_EVP_PKEY_CTX *ctx, int gen);
typedef int (*ossl_EVP_PKEY_CTX_set_dh_pad_t)(ossl_EVP_PKEY_CTX *ctx, int pad);
typedef int (*ossl_EVP_PKEY_CTX_set_dh_kdf_type_t)(ossl_EVP_PKEY_CTX *ctx, int kdf);
typedef int (*ossl_EVP_PKEY_CTX_get_dh_kdf_type_t)(ossl_EVP_PKEY_CTX *ctx);
typedef int (*ossl_EVP_PKEY_CTX_set0_dh_kdf_oid_t)(ossl_EVP_PKEY_CTX *ctx, ossl_ASN1_OBJECT *oid);
typedef int (*ossl_EVP_PKEY_CTX_get0_dh_kdf_oid_t)(ossl_EVP_PKEY_CTX *ctx, ossl_ASN1_OBJECT **oid);
typedef int (*ossl_EVP_PKEY_CTX_set_dh_kdf_md_t)(ossl_EVP_PKEY_CTX *ctx, const ossl_EVP_MD *md);
typedef int (*ossl_EVP_PKEY_CTX_get_dh_kdf_md_t)(ossl_EVP_PKEY_CTX *ctx, const ossl_EVP_MD **md);
typedef int (*ossl_EVP_PKEY_CTX_set_dh_kdf_outlen_t)(ossl_EVP_PKEY_CTX *ctx, int len);
typedef int (*ossl_EVP_PKEY_CTX_get_dh_kdf_outlen_t)(ossl_EVP_PKEY_CTX *ctx, int *len);
typedef int (*ossl_EVP_PKEY_CTX_set0_dh_kdf_ukm_t)(ossl_EVP_PKEY_CTX *ctx, unsigned char *ukm, int len);
typedef int (*ossl_EVP_PKEY_CTX_get0_dh_kdf_ukm_t)(ossl_EVP_PKEY_CTX *ctx, unsigned char **ukm);
typedef const ossl_ASN1_ITEM * (*ossl_DHparams_it_t)();
typedef ossl_DH * (*ossl_DHparams_dup_t)(const ossl_DH *a);
typedef const ossl_DH_METHOD * (*ossl_DH_OpenSSL_t)();
typedef void (*ossl_DH_set_default_method_t)(const ossl_DH_METHOD *meth);
typedef const ossl_DH_METHOD * (*ossl_DH_get_default_method_t)();
typedef int (*ossl_DH_set_method_t)(ossl_DH *dh, const ossl_DH_METHOD *meth);
typedef ossl_DH * (*ossl_DH_new_method_t)(ossl_ENGINE *engine);
typedef ossl_DH * (*ossl_DH_new_t)();
typedef void (*ossl_DH_free_t)(ossl_DH *dh);
typedef int (*ossl_DH_up_ref_t)(ossl_DH *dh);
typedef int (*ossl_DH_bits_t)(const ossl_DH *dh);
typedef int (*ossl_DH_size_t)(const ossl_DH *dh);
typedef int (*ossl_DH_security_bits_t)(const ossl_DH *dh);
typedef int (*ossl_DH_set_ex_data_t)(ossl_DH *d, int idx, void *arg);
typedef void * (*ossl_DH_get_ex_data_t)(const ossl_DH *d, int idx);
typedef int (*ossl_DH_generate_parameters_ex_t)(ossl_DH *dh, int prime_len, int generator, ossl_BN_GENCB *cb);
typedef int (*ossl_DH_check_params_ex_t)(const ossl_DH *dh);
typedef int (*ossl_DH_check_ex_t)(const ossl_DH *dh);
typedef int (*ossl_DH_check_pub_key_ex_t)(const ossl_DH *dh, const ossl_BIGNUM *pub_key);
typedef int (*ossl_DH_check_params_t)(const ossl_DH *dh, int *ret);
typedef int (*ossl_DH_check_t)(const ossl_DH *dh, int *codes);
typedef int (*ossl_DH_check_pub_key_t)(const ossl_DH *dh, const ossl_BIGNUM *pub_key, int *codes);
typedef int (*ossl_DH_generate_key_t)(ossl_DH *dh);
typedef int (*ossl_DH_compute_key_t)(unsigned char *key, const ossl_BIGNUM *pub_key, ossl_DH *dh);
typedef int (*ossl_DH_compute_key_padded_t)(unsigned char *key, const ossl_BIGNUM *pub_key, ossl_DH *dh);
typedef ossl_DH * (*ossl_d2i_DHparams_t)(ossl_DH **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_DHparams_t)(const ossl_DH *a, unsigned char **out);
typedef ossl_DH * (*ossl_d2i_DHxparams_t)(ossl_DH **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_DHxparams_t)(const ossl_DH *a, unsigned char **out);
typedef int (*ossl_DHparams_print_fp_t)(FILE *fp, const ossl_DH *x);
typedef int (*ossl_DHparams_print_t)(ossl_BIO *bp, const ossl_DH *x);
typedef ossl_DH * (*ossl_DH_get_1024_160_t)();
typedef ossl_DH * (*ossl_DH_get_2048_224_t)();
typedef ossl_DH * (*ossl_DH_get_2048_256_t)();
typedef ossl_DH * (*ossl_DH_new_by_nid_t)(int nid);
typedef int (*ossl_DH_get_nid_t)(const ossl_DH *dh);
typedef int (*ossl_DH_KDF_X9_42_t)(unsigned char *out, size_t outlen, const unsigned char *Z, size_t Zlen, ossl_ASN1_OBJECT *key_oid, const unsigned char *ukm, size_t ukmlen, const ossl_EVP_MD *md);
typedef void (*ossl_DH_get0_pqg_t)(const ossl_DH *dh, const ossl_BIGNUM **p, const ossl_BIGNUM **q, const ossl_BIGNUM **g);
typedef int (*ossl_DH_set0_pqg_t)(ossl_DH *dh, ossl_BIGNUM *p, ossl_BIGNUM *q, ossl_BIGNUM *g);
typedef void (*ossl_DH_get0_key_t)(const ossl_DH *dh, const ossl_BIGNUM **pub_key, const ossl_BIGNUM **priv_key);
typedef int (*ossl_DH_set0_key_t)(ossl_DH *dh, ossl_BIGNUM *pub_key, ossl_BIGNUM *priv_key);
typedef const ossl_BIGNUM * (*ossl_DH_get0_p_t)(const ossl_DH *dh);
typedef const ossl_BIGNUM * (*ossl_DH_get0_q_t)(const ossl_DH *dh);
typedef const ossl_BIGNUM * (*ossl_DH_get0_g_t)(const ossl_DH *dh);
typedef const ossl_BIGNUM * (*ossl_DH_get0_priv_key_t)(const ossl_DH *dh);
typedef const ossl_BIGNUM * (*ossl_DH_get0_pub_key_t)(const ossl_DH *dh);
typedef void (*ossl_DH_clear_flags_t)(ossl_DH *dh, int flags);
typedef int (*ossl_DH_test_flags_t)(const ossl_DH *dh, int flags);
typedef void (*ossl_DH_set_flags_t)(ossl_DH *dh, int flags);
typedef ossl_ENGINE * (*ossl_DH_get0_engine_t)(ossl_DH *d);
typedef long (*ossl_DH_get_length_t)(const ossl_DH *dh);
typedef int (*ossl_DH_set_length_t)(ossl_DH *dh, long length);
typedef ossl_DH_METHOD * (*ossl_DH_meth_new_t)(const char *name, int flags);
typedef void (*ossl_DH_meth_free_t)(ossl_DH_METHOD *dhm);
typedef ossl_DH_METHOD * (*ossl_DH_meth_dup_t)(const ossl_DH_METHOD *dhm);
typedef const char * (*ossl_DH_meth_get0_name_t)(const ossl_DH_METHOD *dhm);
typedef int (*ossl_DH_meth_set1_name_t)(ossl_DH_METHOD *dhm, const char *name);
typedef int (*ossl_DH_meth_get_flags_t)(const ossl_DH_METHOD *dhm);
typedef int (*ossl_DH_meth_set_flags_t)(ossl_DH_METHOD *dhm, int flags);
typedef void * (*ossl_DH_meth_get0_app_data_t)(const ossl_DH_METHOD *dhm);
typedef int (*ossl_DH_meth_set0_app_data_t)(ossl_DH_METHOD *dhm, void *app_data);
typedef int (*DH_meth_get_generate_key_ret_t)(ossl_DH *);
typedef DH_meth_get_generate_key_ret_t (*ossl_DH_meth_get_generate_key_t)(const ossl_DH_METHOD *dhm);
typedef int (*ossl_DH_meth_set_generate_key_t)(ossl_DH_METHOD *dhm, int (*generate_key)(ossl_DH *));
typedef int (*DH_meth_get_compute_key_ret_t)(unsigned char *, const ossl_BIGNUM *, ossl_DH *);
typedef DH_meth_get_compute_key_ret_t (*ossl_DH_meth_get_compute_key_t)(const ossl_DH_METHOD *dhm);
typedef int (*ossl_DH_meth_set_compute_key_t)(ossl_DH_METHOD *dhm, int (*compute_key)(unsigned char *, const ossl_BIGNUM *, ossl_DH *));
typedef int (*DH_meth_get_bn_mod_exp_ret_t)(const ossl_DH *, ossl_BIGNUM *, const ossl_BIGNUM *, const ossl_BIGNUM *, const ossl_BIGNUM *, ossl_BN_CTX *, ossl_BN_MONT_CTX *);
typedef DH_meth_get_bn_mod_exp_ret_t (*ossl_DH_meth_get_bn_mod_exp_t)(const ossl_DH_METHOD *dhm);
typedef int (*ossl_DH_meth_set_bn_mod_exp_t)(ossl_DH_METHOD *dhm, int (*bn_mod_exp)(const ossl_DH *, ossl_BIGNUM *, const ossl_BIGNUM *, const ossl_BIGNUM *, const ossl_BIGNUM *, ossl_BN_CTX *, ossl_BN_MONT_CTX *));
typedef int (*DH_meth_get_init_ret_t)(ossl_DH *);
typedef DH_meth_get_init_ret_t (*ossl_DH_meth_get_init_t)(const ossl_DH_METHOD *dhm);
typedef int (*ossl_DH_meth_set_init_t)(ossl_DH_METHOD *dhm, int (*init)(ossl_DH *));
typedef int (*DH_meth_get_finish_ret_t)(ossl_DH *);
typedef DH_meth_get_finish_ret_t (*ossl_DH_meth_get_finish_t)(const ossl_DH_METHOD *dhm);
typedef int (*ossl_DH_meth_set_finish_t)(ossl_DH_METHOD *dhm, int (*finish)(ossl_DH *));
typedef int (*DH_meth_get_generate_params_ret_t)(ossl_DH *, int, int, ossl_BN_GENCB *);
typedef DH_meth_get_generate_params_ret_t (*ossl_DH_meth_get_generate_params_t)(const ossl_DH_METHOD *dhm);
typedef int (*ossl_DH_meth_set_generate_params_t)(ossl_DH_METHOD *dhm, int (*generate_params)(ossl_DH *, int, int, ossl_BN_GENCB *));
typedef ossl_DH * (*ossl_DH_generate_parameters_t)(int prime_len, int generator, void (*callback)(int, int, void *), void *cb_arg);
typedef ossl_DSA_SIG * (*ossl_DSA_SIG_new_t)();
typedef void (*ossl_DSA_SIG_free_t)(ossl_DSA_SIG *a);
typedef ossl_DSA_SIG * (*ossl_d2i_DSA_SIG_t)(ossl_DSA_SIG **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_DSA_SIG_t)(const ossl_DSA_SIG *a, unsigned char **out);
typedef void (*ossl_DSA_SIG_get0_t)(const ossl_DSA_SIG *sig, const ossl_BIGNUM **pr, const ossl_BIGNUM **ps);
typedef int (*ossl_DSA_SIG_set0_t)(ossl_DSA_SIG *sig, ossl_BIGNUM *r, ossl_BIGNUM *s);
typedef ossl_DSA * (*ossl_DSAparams_dup_t)(const ossl_DSA *a);
typedef ossl_DSA_SIG * (*ossl_DSA_do_sign_t)(const unsigned char *dgst, int dlen, ossl_DSA *dsa);
typedef int (*ossl_DSA_do_verify_t)(const unsigned char *dgst, int dgst_len, ossl_DSA_SIG *sig, ossl_DSA *dsa);
typedef const ossl_DSA_METHOD * (*ossl_DSA_OpenSSL_t)();
typedef void (*ossl_DSA_set_default_method_t)(const ossl_DSA_METHOD *_p0);
typedef const ossl_DSA_METHOD * (*ossl_DSA_get_default_method_t)();
typedef int (*ossl_DSA_set_method_t)(ossl_DSA *dsa, const ossl_DSA_METHOD *_p1);
typedef const ossl_DSA_METHOD * (*ossl_DSA_get_method_t)(ossl_DSA *d);
typedef ossl_DSA * (*ossl_DSA_new_t)();
typedef ossl_DSA * (*ossl_DSA_new_method_t)(ossl_ENGINE *engine);
typedef void (*ossl_DSA_free_t)(ossl_DSA *r);
typedef int (*ossl_DSA_up_ref_t)(ossl_DSA *r);
typedef int (*ossl_DSA_size_t)(const ossl_DSA *_p0);
typedef int (*ossl_DSA_bits_t)(const ossl_DSA *d);
typedef int (*ossl_DSA_security_bits_t)(const ossl_DSA *d);
typedef int (*ossl_DSA_sign_setup_t)(ossl_DSA *dsa, ossl_BN_CTX *ctx_in, ossl_BIGNUM **kinvp, ossl_BIGNUM **rp);
typedef int (*ossl_DSA_sign_t)(int type, const unsigned char *dgst, int dlen, unsigned char *sig, unsigned int *siglen, ossl_DSA *dsa);
typedef int (*ossl_DSA_verify_t)(int type, const unsigned char *dgst, int dgst_len, const unsigned char *sigbuf, int siglen, ossl_DSA *dsa);
typedef int (*ossl_DSA_set_ex_data_t)(ossl_DSA *d, int idx, void *arg);
typedef void * (*ossl_DSA_get_ex_data_t)(const ossl_DSA *d, int idx);
typedef ossl_DSA * (*ossl_d2i_DSAPublicKey_t)(ossl_DSA **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_DSAPublicKey_t)(const ossl_DSA *a, unsigned char **out);
typedef ossl_DSA * (*ossl_d2i_DSAPrivateKey_t)(ossl_DSA **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_DSAPrivateKey_t)(const ossl_DSA *a, unsigned char **out);
typedef ossl_DSA * (*ossl_d2i_DSAparams_t)(ossl_DSA **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_DSAparams_t)(const ossl_DSA *a, unsigned char **out);
typedef ossl_DSA * (*ossl_DSA_generate_parameters_t)(int bits, unsigned char *seed, int seed_len, int *counter_ret, unsigned long *h_ret, void (*callback)(int, int, void *), void *cb_arg);
typedef int (*ossl_DSA_generate_parameters_ex_t)(ossl_DSA *dsa, int bits, const unsigned char *seed, int seed_len, int *counter_ret, unsigned long *h_ret, ossl_BN_GENCB *cb);
typedef int (*ossl_DSA_generate_key_t)(ossl_DSA *a);
typedef int (*ossl_DSAparams_print_t)(ossl_BIO *bp, const ossl_DSA *x);
typedef int (*ossl_DSA_print_t)(ossl_BIO *bp, const ossl_DSA *x, int off);
typedef int (*ossl_DSAparams_print_fp_t)(FILE *fp, const ossl_DSA *x);
typedef int (*ossl_DSA_print_fp_t)(FILE *bp, const ossl_DSA *x, int off);
typedef ossl_DH * (*ossl_DSA_dup_DH_t)(const ossl_DSA *r);
typedef void (*ossl_DSA_get0_pqg_t)(const ossl_DSA *d, const ossl_BIGNUM **p, const ossl_BIGNUM **q, const ossl_BIGNUM **g);
typedef int (*ossl_DSA_set0_pqg_t)(ossl_DSA *d, ossl_BIGNUM *p, ossl_BIGNUM *q, ossl_BIGNUM *g);
typedef void (*ossl_DSA_get0_key_t)(const ossl_DSA *d, const ossl_BIGNUM **pub_key, const ossl_BIGNUM **priv_key);
typedef int (*ossl_DSA_set0_key_t)(ossl_DSA *d, ossl_BIGNUM *pub_key, ossl_BIGNUM *priv_key);
typedef const ossl_BIGNUM * (*ossl_DSA_get0_p_t)(const ossl_DSA *d);
typedef const ossl_BIGNUM * (*ossl_DSA_get0_q_t)(const ossl_DSA *d);
typedef const ossl_BIGNUM * (*ossl_DSA_get0_g_t)(const ossl_DSA *d);
typedef const ossl_BIGNUM * (*ossl_DSA_get0_pub_key_t)(const ossl_DSA *d);
typedef const ossl_BIGNUM * (*ossl_DSA_get0_priv_key_t)(const ossl_DSA *d);
typedef void (*ossl_DSA_clear_flags_t)(ossl_DSA *d, int flags);
typedef int (*ossl_DSA_test_flags_t)(const ossl_DSA *d, int flags);
typedef void (*ossl_DSA_set_flags_t)(ossl_DSA *d, int flags);
typedef ossl_ENGINE * (*ossl_DSA_get0_engine_t)(ossl_DSA *d);
typedef ossl_DSA_METHOD * (*ossl_DSA_meth_new_t)(const char *name, int flags);
typedef void (*ossl_DSA_meth_free_t)(ossl_DSA_METHOD *dsam);
typedef ossl_DSA_METHOD * (*ossl_DSA_meth_dup_t)(const ossl_DSA_METHOD *dsam);
typedef const char * (*ossl_DSA_meth_get0_name_t)(const ossl_DSA_METHOD *dsam);
typedef int (*ossl_DSA_meth_set1_name_t)(ossl_DSA_METHOD *dsam, const char *name);
typedef int (*ossl_DSA_meth_get_flags_t)(const ossl_DSA_METHOD *dsam);
typedef int (*ossl_DSA_meth_set_flags_t)(ossl_DSA_METHOD *dsam, int flags);
typedef void * (*ossl_DSA_meth_get0_app_data_t)(const ossl_DSA_METHOD *dsam);
typedef int (*ossl_DSA_meth_set0_app_data_t)(ossl_DSA_METHOD *dsam, void *app_data);
typedef ossl_DSA_SIG *(*DSA_meth_get_sign_ret_t)(const unsigned char *, int, ossl_DSA *);
typedef DSA_meth_get_sign_ret_t (*ossl_DSA_meth_get_sign_t)(const ossl_DSA_METHOD *dsam);
typedef int (*ossl_DSA_meth_set_sign_t)(ossl_DSA_METHOD *dsam, ossl_DSA_SIG *(*sign)(const unsigned char *, int, ossl_DSA *));
typedef int (*DSA_meth_get_sign_setup_ret_t)(ossl_DSA *, ossl_BN_CTX *, ossl_BIGNUM **, ossl_BIGNUM **);
typedef DSA_meth_get_sign_setup_ret_t (*ossl_DSA_meth_get_sign_setup_t)(const ossl_DSA_METHOD *dsam);
typedef int (*ossl_DSA_meth_set_sign_setup_t)(ossl_DSA_METHOD *dsam, int (*sign_setup)(ossl_DSA *, ossl_BN_CTX *, ossl_BIGNUM **, ossl_BIGNUM **));
typedef int (*DSA_meth_get_verify_ret_t)(const unsigned char *, int, ossl_DSA_SIG *, ossl_DSA *);
typedef DSA_meth_get_verify_ret_t (*ossl_DSA_meth_get_verify_t)(const ossl_DSA_METHOD *dsam);
typedef int (*ossl_DSA_meth_set_verify_t)(ossl_DSA_METHOD *dsam, int (*verify)(const unsigned char *, int, ossl_DSA_SIG *, ossl_DSA *));
typedef int (*DSA_meth_get_mod_exp_ret_t)(ossl_DSA *, ossl_BIGNUM *, const ossl_BIGNUM *, const ossl_BIGNUM *, const ossl_BIGNUM *, const ossl_BIGNUM *, const ossl_BIGNUM *, ossl_BN_CTX *, ossl_BN_MONT_CTX *);
typedef DSA_meth_get_mod_exp_ret_t (*ossl_DSA_meth_get_mod_exp_t)(const ossl_DSA_METHOD *dsam);
typedef int (*ossl_DSA_meth_set_mod_exp_t)(ossl_DSA_METHOD *dsam, int (*mod_exp)(ossl_DSA *, ossl_BIGNUM *, const ossl_BIGNUM *, const ossl_BIGNUM *, const ossl_BIGNUM *, const ossl_BIGNUM *, const ossl_BIGNUM *, ossl_BN_CTX *, ossl_BN_MONT_CTX *));
typedef int (*DSA_meth_get_bn_mod_exp_ret_t)(ossl_DSA *, ossl_BIGNUM *, const ossl_BIGNUM *, const ossl_BIGNUM *, const ossl_BIGNUM *, ossl_BN_CTX *, ossl_BN_MONT_CTX *);
typedef DSA_meth_get_bn_mod_exp_ret_t (*ossl_DSA_meth_get_bn_mod_exp_t)(const ossl_DSA_METHOD *dsam);
typedef int (*ossl_DSA_meth_set_bn_mod_exp_t)(ossl_DSA_METHOD *dsam, int (*bn_mod_exp)(ossl_DSA *, ossl_BIGNUM *, const ossl_BIGNUM *, const ossl_BIGNUM *, const ossl_BIGNUM *, ossl_BN_CTX *, ossl_BN_MONT_CTX *));
typedef int (*DSA_meth_get_init_ret_t)(ossl_DSA *);
typedef DSA_meth_get_init_ret_t (*ossl_DSA_meth_get_init_t)(const ossl_DSA_METHOD *dsam);
typedef int (*ossl_DSA_meth_set_init_t)(ossl_DSA_METHOD *dsam, int (*init)(ossl_DSA *));
typedef int (*DSA_meth_get_finish_ret_t)(ossl_DSA *);
typedef DSA_meth_get_finish_ret_t (*ossl_DSA_meth_get_finish_t)(const ossl_DSA_METHOD *dsam);
typedef int (*ossl_DSA_meth_set_finish_t)(ossl_DSA_METHOD *dsam, int (*finish)(ossl_DSA *));
typedef int (*DSA_meth_get_paramgen_ret_t)(ossl_DSA *, int, const unsigned char *, int, int *, unsigned long *, ossl_BN_GENCB *);
typedef DSA_meth_get_paramgen_ret_t (*ossl_DSA_meth_get_paramgen_t)(const ossl_DSA_METHOD *dsam);
typedef int (*ossl_DSA_meth_set_paramgen_t)(ossl_DSA_METHOD *dsam, int (*paramgen)(ossl_DSA *, int, const unsigned char *, int, int *, unsigned long *, ossl_BN_GENCB *));
typedef int (*DSA_meth_get_keygen_ret_t)(ossl_DSA *);
typedef DSA_meth_get_keygen_ret_t (*ossl_DSA_meth_get_keygen_t)(const ossl_DSA_METHOD *dsam);
typedef int (*ossl_DSA_meth_set_keygen_t)(ossl_DSA_METHOD *dsam, int (*keygen)(ossl_DSA *));
typedef int (*ossl_SHA1_Init_t)(ossl_SHA_CTX *c);
typedef int (*ossl_SHA1_Update_t)(ossl_SHA_CTX *c, const void *data, size_t len);
typedef int (*ossl_SHA1_Final_t)(unsigned char *md, ossl_SHA_CTX *c);
typedef void (*ossl_SHA1_Transform_t)(ossl_SHA_CTX *c, const unsigned char *data);
typedef unsigned char * (*ossl_SHA1_t)(const unsigned char *d, size_t n, unsigned char *md);
typedef int (*ossl_SHA224_Init_t)(ossl_SHA256_CTX *c);
typedef int (*ossl_SHA224_Update_t)(ossl_SHA256_CTX *c, const void *data, size_t len);
typedef int (*ossl_SHA224_Final_t)(unsigned char *md, ossl_SHA256_CTX *c);
typedef int (*ossl_SHA256_Init_t)(ossl_SHA256_CTX *c);
typedef int (*ossl_SHA256_Update_t)(ossl_SHA256_CTX *c, const void *data, size_t len);
typedef int (*ossl_SHA256_Final_t)(unsigned char *md, ossl_SHA256_CTX *c);
typedef void (*ossl_SHA256_Transform_t)(ossl_SHA256_CTX *c, const unsigned char *data);
typedef unsigned char * (*ossl_SHA224_t)(const unsigned char *d, size_t n, unsigned char *md);
typedef unsigned char * (*ossl_SHA256_t)(const unsigned char *d, size_t n, unsigned char *md);
typedef int (*ossl_SHA384_Init_t)(ossl_SHA512_CTX *c);
typedef int (*ossl_SHA384_Update_t)(ossl_SHA512_CTX *c, const void *data, size_t len);
typedef int (*ossl_SHA384_Final_t)(unsigned char *md, ossl_SHA512_CTX *c);
typedef int (*ossl_SHA512_Init_t)(ossl_SHA512_CTX *c);
typedef int (*ossl_SHA512_Update_t)(ossl_SHA512_CTX *c, const void *data, size_t len);
typedef int (*ossl_SHA512_Final_t)(unsigned char *md, ossl_SHA512_CTX *c);
typedef void (*ossl_SHA512_Transform_t)(ossl_SHA512_CTX *c, const unsigned char *data);
typedef unsigned char * (*ossl_SHA384_t)(const unsigned char *d, size_t n, unsigned char *md);
typedef unsigned char * (*ossl_SHA512_t)(const unsigned char *d, size_t n, unsigned char *md);
typedef int (*ossl_OPENSSL_LH_error_t)(ossl_OPENSSL_LHASH *lh);
typedef ossl_OPENSSL_LHASH * (*ossl_OPENSSL_LH_new_t)(ossl_OPENSSL_LH_HASHFUNC h, ossl_OPENSSL_LH_COMPFUNC c);
typedef void (*ossl_OPENSSL_LH_free_t)(ossl_OPENSSL_LHASH *lh);
typedef void (*ossl_OPENSSL_LH_flush_t)(ossl_OPENSSL_LHASH *lh);
typedef void * (*ossl_OPENSSL_LH_insert_t)(ossl_OPENSSL_LHASH *lh, void *data);
typedef void * (*ossl_OPENSSL_LH_delete_t)(ossl_OPENSSL_LHASH *lh, const void *data);
typedef void * (*ossl_OPENSSL_LH_retrieve_t)(ossl_OPENSSL_LHASH *lh, const void *data);
typedef void (*ossl_OPENSSL_LH_doall_t)(ossl_OPENSSL_LHASH *lh, ossl_OPENSSL_LH_DOALL_FUNC func);
typedef void (*ossl_OPENSSL_LH_doall_arg_t)(ossl_OPENSSL_LHASH *lh, ossl_OPENSSL_LH_DOALL_FUNCARG func, void *arg);
typedef unsigned long (*ossl_OPENSSL_LH_strhash_t)(const char *c);
typedef unsigned long (*ossl_OPENSSL_LH_num_items_t)(const ossl_OPENSSL_LHASH *lh);
typedef unsigned long (*ossl_OPENSSL_LH_get_down_load_t)(const ossl_OPENSSL_LHASH *lh);
typedef void (*ossl_OPENSSL_LH_set_down_load_t)(ossl_OPENSSL_LHASH *lh, unsigned long down_load);
typedef void (*ossl_OPENSSL_LH_stats_t)(const ossl_OPENSSL_LHASH *lh, FILE *fp);
typedef void (*ossl_OPENSSL_LH_node_stats_t)(const ossl_OPENSSL_LHASH *lh, FILE *fp);
typedef void (*ossl_OPENSSL_LH_node_usage_stats_t)(const ossl_OPENSSL_LHASH *lh, FILE *fp);
typedef void (*ossl_OPENSSL_LH_stats_bio_t)(const ossl_OPENSSL_LHASH *lh, ossl_BIO *out);
typedef void (*ossl_OPENSSL_LH_node_stats_bio_t)(const ossl_OPENSSL_LHASH *lh, ossl_BIO *out);
typedef void (*ossl_OPENSSL_LH_node_usage_stats_bio_t)(const ossl_OPENSSL_LHASH *lh, ossl_BIO *out);
typedef int (*ossl_X509_TRUST_set_t)(int *t, int trust);
typedef int (*ossl_X509_TRUST_get_count_t)();
typedef ossl_X509_TRUST * (*ossl_X509_TRUST_get0_t)(int idx);
typedef int (*ossl_X509_TRUST_get_by_id_t)(int id);
typedef int (*ossl_X509_TRUST_add_t)(int id, int flags, int (*ck)(ossl_X509_TRUST *, ossl_X509 *, int), const char *name, int arg1, void *arg2);
typedef void (*ossl_X509_TRUST_cleanup_t)();
typedef int (*ossl_X509_TRUST_get_flags_t)(const ossl_X509_TRUST *xp);
typedef char * (*ossl_X509_TRUST_get0_name_t)(const ossl_X509_TRUST *xp);
typedef int (*ossl_X509_TRUST_get_trust_t)(const ossl_X509_TRUST *xp);
typedef int (*ossl_X509_trusted_t)(const ossl_X509 *x);
typedef int (*ossl_X509_add1_trust_object_t)(ossl_X509 *x, const ossl_ASN1_OBJECT *obj);
typedef int (*ossl_X509_add1_reject_object_t)(ossl_X509 *x, const ossl_ASN1_OBJECT *obj);
typedef void (*ossl_X509_trust_clear_t)(ossl_X509 *x);
typedef void (*ossl_X509_reject_clear_t)(ossl_X509 *x);
typedef ossl_STACK_OF(ossl_ASN1_OBJECT) * (*ossl_X509_get0_trust_objects_t)(ossl_X509 *x);
typedef ossl_STACK_OF(ossl_ASN1_OBJECT) * (*ossl_X509_get0_reject_objects_t)(ossl_X509 *x);
typedef int (*X509_TRUST_set_default_ret_t)(int, ossl_X509 *, int);
typedef X509_TRUST_set_default_ret_t (*ossl_X509_TRUST_set_default_t)(int (*trust)(int, ossl_X509 *, int));
typedef int (*ossl_X509_check_trust_t)(ossl_X509 *x, int id, int flags);
typedef int (*ossl_X509_verify_cert_t)(ossl_X509_STORE_CTX *ctx);
typedef int (*ossl_X509_STORE_CTX_verify_t)(ossl_X509_STORE_CTX *ctx);
typedef ossl_STACK_OF(ossl_X509) * (*ossl_X509_build_chain_t)(ossl_X509 *target, ossl_STACK_OF(ossl_X509) *certs, ossl_X509_STORE *store, int with_self_signed, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_X509_STORE_set_depth_t)(ossl_X509_STORE *store, int depth);
typedef int (*ossl_X509_STORE_CTX_print_verify_cb_t)(int ok, ossl_X509_STORE_CTX *ctx);
typedef void (*ossl_X509_STORE_CTX_set_depth_t)(ossl_X509_STORE_CTX *ctx, int depth);
typedef int (*ossl_X509_OBJECT_idx_by_subject_t)(ossl_STACK_OF(ossl_X509_OBJECT) *h, ossl_X509_LOOKUP_TYPE type, const ossl_X509_NAME *name);
typedef ossl_X509_OBJECT * (*ossl_X509_OBJECT_retrieve_by_subject_t)(ossl_STACK_OF(ossl_X509_OBJECT) *h, ossl_X509_LOOKUP_TYPE type, const ossl_X509_NAME *name);
typedef ossl_X509_OBJECT * (*ossl_X509_OBJECT_retrieve_match_t)(ossl_STACK_OF(ossl_X509_OBJECT) *h, ossl_X509_OBJECT *x);
typedef int (*ossl_X509_OBJECT_up_ref_count_t)(ossl_X509_OBJECT *a);
typedef ossl_X509_OBJECT * (*ossl_X509_OBJECT_new_t)();
typedef void (*ossl_X509_OBJECT_free_t)(ossl_X509_OBJECT *a);
typedef ossl_X509_LOOKUP_TYPE (*ossl_X509_OBJECT_get_type_t)(const ossl_X509_OBJECT *a);
typedef ossl_X509 * (*ossl_X509_OBJECT_get0_X509_t)(const ossl_X509_OBJECT *a);
typedef int (*ossl_X509_OBJECT_set1_X509_t)(ossl_X509_OBJECT *a, ossl_X509 *obj);
typedef ossl_X509_CRL * (*ossl_X509_OBJECT_get0_X509_CRL_t)(const ossl_X509_OBJECT *a);
typedef int (*ossl_X509_OBJECT_set1_X509_CRL_t)(ossl_X509_OBJECT *a, ossl_X509_CRL *obj);
typedef ossl_X509_STORE * (*ossl_X509_STORE_new_t)();
typedef void (*ossl_X509_STORE_free_t)(ossl_X509_STORE *v);
typedef int (*ossl_X509_STORE_lock_t)(ossl_X509_STORE *ctx);
typedef int (*ossl_X509_STORE_unlock_t)(ossl_X509_STORE *ctx);
typedef int (*ossl_X509_STORE_up_ref_t)(ossl_X509_STORE *v);
typedef ossl_STACK_OF(ossl_X509_OBJECT) * (*ossl_X509_STORE_get0_objects_t)(const ossl_X509_STORE *v);
typedef ossl_STACK_OF(ossl_X509) * (*ossl_X509_STORE_get1_all_certs_t)(ossl_X509_STORE *st);
typedef ossl_STACK_OF(ossl_X509) * (*ossl_X509_STORE_CTX_get1_certs_t)(ossl_X509_STORE_CTX *st, const ossl_X509_NAME *nm);
typedef ossl_STACK_OF(ossl_X509_CRL) * (*ossl_X509_STORE_CTX_get1_crls_t)(const ossl_X509_STORE_CTX *st, const ossl_X509_NAME *nm);
typedef int (*ossl_X509_STORE_set_flags_t)(ossl_X509_STORE *ctx, unsigned long flags);
typedef int (*ossl_X509_STORE_set_purpose_t)(ossl_X509_STORE *ctx, int purpose);
typedef int (*ossl_X509_STORE_set_trust_t)(ossl_X509_STORE *ctx, int trust);
typedef int (*ossl_X509_STORE_set1_param_t)(ossl_X509_STORE *ctx, const ossl_X509_VERIFY_PARAM *pm);
typedef ossl_X509_VERIFY_PARAM * (*ossl_X509_STORE_get0_param_t)(const ossl_X509_STORE *ctx);
typedef void (*ossl_X509_STORE_set_verify_t)(ossl_X509_STORE *ctx, ossl_X509_STORE_CTX_verify_fn verify);
typedef void (*ossl_X509_STORE_CTX_set_verify_t)(ossl_X509_STORE_CTX *ctx, ossl_X509_STORE_CTX_verify_fn verify);
typedef ossl_X509_STORE_CTX_verify_fn (*ossl_X509_STORE_get_verify_t)(const ossl_X509_STORE *ctx);
typedef void (*ossl_X509_STORE_set_verify_cb_t)(ossl_X509_STORE *ctx, ossl_X509_STORE_CTX_verify_cb verify_cb);
typedef ossl_X509_STORE_CTX_verify_cb (*ossl_X509_STORE_get_verify_cb_t)(const ossl_X509_STORE *ctx);
typedef void (*ossl_X509_STORE_set_get_issuer_t)(ossl_X509_STORE *ctx, ossl_X509_STORE_CTX_get_issuer_fn get_issuer);
typedef ossl_X509_STORE_CTX_get_issuer_fn (*ossl_X509_STORE_get_get_issuer_t)(const ossl_X509_STORE *ctx);
typedef void (*ossl_X509_STORE_set_check_issued_t)(ossl_X509_STORE *ctx, ossl_X509_STORE_CTX_check_issued_fn check_issued);
typedef ossl_X509_STORE_CTX_check_issued_fn (*ossl_X509_STORE_get_check_issued_t)(const ossl_X509_STORE *ctx);
typedef void (*ossl_X509_STORE_set_check_revocation_t)(ossl_X509_STORE *ctx, ossl_X509_STORE_CTX_check_revocation_fn check_revocation);
typedef ossl_X509_STORE_CTX_check_revocation_fn (*ossl_X509_STORE_get_check_revocation_t)(const ossl_X509_STORE *ctx);
typedef void (*ossl_X509_STORE_set_get_crl_t)(ossl_X509_STORE *ctx, ossl_X509_STORE_CTX_get_crl_fn get_crl);
typedef ossl_X509_STORE_CTX_get_crl_fn (*ossl_X509_STORE_get_get_crl_t)(const ossl_X509_STORE *ctx);
typedef void (*ossl_X509_STORE_set_check_crl_t)(ossl_X509_STORE *ctx, ossl_X509_STORE_CTX_check_crl_fn check_crl);
typedef ossl_X509_STORE_CTX_check_crl_fn (*ossl_X509_STORE_get_check_crl_t)(const ossl_X509_STORE *ctx);
typedef void (*ossl_X509_STORE_set_cert_crl_t)(ossl_X509_STORE *ctx, ossl_X509_STORE_CTX_cert_crl_fn cert_crl);
typedef ossl_X509_STORE_CTX_cert_crl_fn (*ossl_X509_STORE_get_cert_crl_t)(const ossl_X509_STORE *ctx);
typedef void (*ossl_X509_STORE_set_check_policy_t)(ossl_X509_STORE *ctx, ossl_X509_STORE_CTX_check_policy_fn check_policy);
typedef ossl_X509_STORE_CTX_check_policy_fn (*ossl_X509_STORE_get_check_policy_t)(const ossl_X509_STORE *ctx);
typedef void (*ossl_X509_STORE_set_lookup_certs_t)(ossl_X509_STORE *ctx, ossl_X509_STORE_CTX_lookup_certs_fn lookup_certs);
typedef ossl_X509_STORE_CTX_lookup_certs_fn (*ossl_X509_STORE_get_lookup_certs_t)(const ossl_X509_STORE *ctx);
typedef void (*ossl_X509_STORE_set_lookup_crls_t)(ossl_X509_STORE *ctx, ossl_X509_STORE_CTX_lookup_crls_fn lookup_crls);
typedef ossl_X509_STORE_CTX_lookup_crls_fn (*ossl_X509_STORE_get_lookup_crls_t)(const ossl_X509_STORE *ctx);
typedef void (*ossl_X509_STORE_set_cleanup_t)(ossl_X509_STORE *ctx, ossl_X509_STORE_CTX_cleanup_fn cleanup);
typedef ossl_X509_STORE_CTX_cleanup_fn (*ossl_X509_STORE_get_cleanup_t)(const ossl_X509_STORE *ctx);
typedef int (*ossl_X509_STORE_set_ex_data_t)(ossl_X509_STORE *ctx, int idx, void *data);
typedef void * (*ossl_X509_STORE_get_ex_data_t)(const ossl_X509_STORE *ctx, int idx);
typedef ossl_X509_STORE_CTX * (*ossl_X509_STORE_CTX_new_ex_t)(ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef ossl_X509_STORE_CTX * (*ossl_X509_STORE_CTX_new_t)();
typedef int (*ossl_X509_STORE_CTX_get1_issuer_t)(ossl_X509 **issuer, ossl_X509_STORE_CTX *ctx, ossl_X509 *x);
typedef void (*ossl_X509_STORE_CTX_free_t)(ossl_X509_STORE_CTX *ctx);
typedef int (*ossl_X509_STORE_CTX_init_t)(ossl_X509_STORE_CTX *ctx, ossl_X509_STORE *trust_store, ossl_X509 *target, ossl_STACK_OF(ossl_X509) *untrusted);
typedef void (*ossl_X509_STORE_CTX_set0_trusted_stack_t)(ossl_X509_STORE_CTX *ctx, ossl_STACK_OF(ossl_X509) *sk);
typedef void (*ossl_X509_STORE_CTX_cleanup_t)(ossl_X509_STORE_CTX *ctx);
typedef ossl_X509_STORE * (*ossl_X509_STORE_CTX_get0_store_t)(const ossl_X509_STORE_CTX *ctx);
typedef ossl_X509 * (*ossl_X509_STORE_CTX_get0_cert_t)(const ossl_X509_STORE_CTX *ctx);
typedef ossl_STACK_OF(ossl_X509) * (*ossl_X509_STORE_CTX_get0_untrusted_t)(const ossl_X509_STORE_CTX *ctx);
typedef void (*ossl_X509_STORE_CTX_set0_untrusted_t)(ossl_X509_STORE_CTX *ctx, ossl_STACK_OF(ossl_X509) *sk);
typedef void (*ossl_X509_STORE_CTX_set_verify_cb_t)(ossl_X509_STORE_CTX *ctx, ossl_X509_STORE_CTX_verify_cb verify);
typedef ossl_X509_STORE_CTX_verify_cb (*ossl_X509_STORE_CTX_get_verify_cb_t)(const ossl_X509_STORE_CTX *ctx);
typedef ossl_X509_STORE_CTX_verify_fn (*ossl_X509_STORE_CTX_get_verify_t)(const ossl_X509_STORE_CTX *ctx);
typedef ossl_X509_STORE_CTX_get_issuer_fn (*ossl_X509_STORE_CTX_get_get_issuer_t)(const ossl_X509_STORE_CTX *ctx);
typedef ossl_X509_STORE_CTX_check_issued_fn (*ossl_X509_STORE_CTX_get_check_issued_t)(const ossl_X509_STORE_CTX *ctx);
typedef ossl_X509_STORE_CTX_check_revocation_fn (*ossl_X509_STORE_CTX_get_check_revocation_t)(const ossl_X509_STORE_CTX *ctx);
typedef ossl_X509_STORE_CTX_get_crl_fn (*ossl_X509_STORE_CTX_get_get_crl_t)(const ossl_X509_STORE_CTX *ctx);
typedef ossl_X509_STORE_CTX_check_crl_fn (*ossl_X509_STORE_CTX_get_check_crl_t)(const ossl_X509_STORE_CTX *ctx);
typedef ossl_X509_STORE_CTX_cert_crl_fn (*ossl_X509_STORE_CTX_get_cert_crl_t)(const ossl_X509_STORE_CTX *ctx);
typedef ossl_X509_STORE_CTX_check_policy_fn (*ossl_X509_STORE_CTX_get_check_policy_t)(const ossl_X509_STORE_CTX *ctx);
typedef ossl_X509_STORE_CTX_lookup_certs_fn (*ossl_X509_STORE_CTX_get_lookup_certs_t)(const ossl_X509_STORE_CTX *ctx);
typedef ossl_X509_STORE_CTX_lookup_crls_fn (*ossl_X509_STORE_CTX_get_lookup_crls_t)(const ossl_X509_STORE_CTX *ctx);
typedef ossl_X509_STORE_CTX_cleanup_fn (*ossl_X509_STORE_CTX_get_cleanup_t)(const ossl_X509_STORE_CTX *ctx);
typedef ossl_X509_LOOKUP * (*ossl_X509_STORE_add_lookup_t)(ossl_X509_STORE *v, ossl_X509_LOOKUP_METHOD *m);
typedef ossl_X509_LOOKUP_METHOD * (*ossl_X509_LOOKUP_hash_dir_t)();
typedef ossl_X509_LOOKUP_METHOD * (*ossl_X509_LOOKUP_file_t)();
typedef ossl_X509_LOOKUP_METHOD * (*ossl_X509_LOOKUP_store_t)();
typedef ossl_X509_LOOKUP_METHOD * (*ossl_X509_LOOKUP_meth_new_t)(const char *name);
typedef void (*ossl_X509_LOOKUP_meth_free_t)(ossl_X509_LOOKUP_METHOD *method);
typedef int (*ossl_X509_LOOKUP_meth_set_new_item_t)(ossl_X509_LOOKUP_METHOD *method, int (*new_item)(ossl_X509_LOOKUP *));
typedef int (*X509_LOOKUP_meth_get_new_item_ret_t)(ossl_X509_LOOKUP *);
typedef X509_LOOKUP_meth_get_new_item_ret_t (*ossl_X509_LOOKUP_meth_get_new_item_t)(const ossl_X509_LOOKUP_METHOD *method);
typedef int (*ossl_X509_LOOKUP_meth_set_free_t)(ossl_X509_LOOKUP_METHOD *method, void (*free_fn)(ossl_X509_LOOKUP *));
typedef void (*X509_LOOKUP_meth_get_free_ret_t)(ossl_X509_LOOKUP *);
typedef X509_LOOKUP_meth_get_free_ret_t (*ossl_X509_LOOKUP_meth_get_free_t)(const ossl_X509_LOOKUP_METHOD *method);
typedef int (*ossl_X509_LOOKUP_meth_set_init_t)(ossl_X509_LOOKUP_METHOD *method, int (*init)(ossl_X509_LOOKUP *));
typedef int (*X509_LOOKUP_meth_get_init_ret_t)(ossl_X509_LOOKUP *);
typedef X509_LOOKUP_meth_get_init_ret_t (*ossl_X509_LOOKUP_meth_get_init_t)(const ossl_X509_LOOKUP_METHOD *method);
typedef int (*ossl_X509_LOOKUP_meth_set_shutdown_t)(ossl_X509_LOOKUP_METHOD *method, int (*shutdown)(ossl_X509_LOOKUP *));
typedef int (*X509_LOOKUP_meth_get_shutdown_ret_t)(ossl_X509_LOOKUP *);
typedef X509_LOOKUP_meth_get_shutdown_ret_t (*ossl_X509_LOOKUP_meth_get_shutdown_t)(const ossl_X509_LOOKUP_METHOD *method);
typedef int (*ossl_X509_LOOKUP_meth_set_ctrl_t)(ossl_X509_LOOKUP_METHOD *method, ossl_X509_LOOKUP_ctrl_fn ctrl_fn);
typedef ossl_X509_LOOKUP_ctrl_fn (*ossl_X509_LOOKUP_meth_get_ctrl_t)(const ossl_X509_LOOKUP_METHOD *method);
typedef int (*ossl_X509_LOOKUP_meth_set_get_by_subject_t)(ossl_X509_LOOKUP_METHOD *method, ossl_X509_LOOKUP_get_by_subject_fn fn);
typedef ossl_X509_LOOKUP_get_by_subject_fn (*ossl_X509_LOOKUP_meth_get_get_by_subject_t)(const ossl_X509_LOOKUP_METHOD *method);
typedef int (*ossl_X509_LOOKUP_meth_set_get_by_issuer_serial_t)(ossl_X509_LOOKUP_METHOD *method, ossl_X509_LOOKUP_get_by_issuer_serial_fn fn);
typedef ossl_X509_LOOKUP_get_by_issuer_serial_fn (*ossl_X509_LOOKUP_meth_get_get_by_issuer_serial_t)(const ossl_X509_LOOKUP_METHOD *method);
typedef int (*ossl_X509_LOOKUP_meth_set_get_by_fingerprint_t)(ossl_X509_LOOKUP_METHOD *method, ossl_X509_LOOKUP_get_by_fingerprint_fn fn);
typedef ossl_X509_LOOKUP_get_by_fingerprint_fn (*ossl_X509_LOOKUP_meth_get_get_by_fingerprint_t)(const ossl_X509_LOOKUP_METHOD *method);
typedef int (*ossl_X509_LOOKUP_meth_set_get_by_alias_t)(ossl_X509_LOOKUP_METHOD *method, ossl_X509_LOOKUP_get_by_alias_fn fn);
typedef ossl_X509_LOOKUP_get_by_alias_fn (*ossl_X509_LOOKUP_meth_get_get_by_alias_t)(const ossl_X509_LOOKUP_METHOD *method);
typedef int (*ossl_X509_STORE_add_cert_t)(ossl_X509_STORE *ctx, ossl_X509 *x);
typedef int (*ossl_X509_STORE_add_crl_t)(ossl_X509_STORE *ctx, ossl_X509_CRL *x);
typedef int (*ossl_X509_STORE_CTX_get_by_subject_t)(const ossl_X509_STORE_CTX *vs, ossl_X509_LOOKUP_TYPE type, const ossl_X509_NAME *name, ossl_X509_OBJECT *ret);
typedef ossl_X509_OBJECT * (*ossl_X509_STORE_CTX_get_obj_by_subject_t)(ossl_X509_STORE_CTX *vs, ossl_X509_LOOKUP_TYPE type, const ossl_X509_NAME *name);
typedef int (*ossl_X509_LOOKUP_ctrl_t)(ossl_X509_LOOKUP *ctx, int cmd, const char *argc, long argl, char **ret);
typedef int (*ossl_X509_LOOKUP_ctrl_ex_t)(ossl_X509_LOOKUP *ctx, int cmd, const char *argc, long argl, char **ret, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_X509_load_cert_file_t)(ossl_X509_LOOKUP *ctx, const char *file, int type);
typedef int (*ossl_X509_load_cert_file_ex_t)(ossl_X509_LOOKUP *ctx, const char *file, int type, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_X509_load_crl_file_t)(ossl_X509_LOOKUP *ctx, const char *file, int type);
typedef int (*ossl_X509_load_cert_crl_file_t)(ossl_X509_LOOKUP *ctx, const char *file, int type);
typedef int (*ossl_X509_load_cert_crl_file_ex_t)(ossl_X509_LOOKUP *ctx, const char *file, int type, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef ossl_X509_LOOKUP * (*ossl_X509_LOOKUP_new_t)(ossl_X509_LOOKUP_METHOD *method);
typedef void (*ossl_X509_LOOKUP_free_t)(ossl_X509_LOOKUP *ctx);
typedef int (*ossl_X509_LOOKUP_init_t)(ossl_X509_LOOKUP *ctx);
typedef int (*ossl_X509_LOOKUP_by_subject_t)(ossl_X509_LOOKUP *ctx, ossl_X509_LOOKUP_TYPE type, const ossl_X509_NAME *name, ossl_X509_OBJECT *ret);
typedef int (*ossl_X509_LOOKUP_by_subject_ex_t)(ossl_X509_LOOKUP *ctx, ossl_X509_LOOKUP_TYPE type, const ossl_X509_NAME *name, ossl_X509_OBJECT *ret, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_X509_LOOKUP_by_issuer_serial_t)(ossl_X509_LOOKUP *ctx, ossl_X509_LOOKUP_TYPE type, const ossl_X509_NAME *name, const ossl_ASN1_INTEGER *serial, ossl_X509_OBJECT *ret);
typedef int (*ossl_X509_LOOKUP_by_fingerprint_t)(ossl_X509_LOOKUP *ctx, ossl_X509_LOOKUP_TYPE type, const unsigned char *bytes, int len, ossl_X509_OBJECT *ret);
typedef int (*ossl_X509_LOOKUP_by_alias_t)(ossl_X509_LOOKUP *ctx, ossl_X509_LOOKUP_TYPE type, const char *str, int len, ossl_X509_OBJECT *ret);
typedef int (*ossl_X509_LOOKUP_set_method_data_t)(ossl_X509_LOOKUP *ctx, void *data);
typedef void * (*ossl_X509_LOOKUP_get_method_data_t)(const ossl_X509_LOOKUP *ctx);
typedef ossl_X509_STORE * (*ossl_X509_LOOKUP_get_store_t)(const ossl_X509_LOOKUP *ctx);
typedef int (*ossl_X509_LOOKUP_shutdown_t)(ossl_X509_LOOKUP *ctx);
typedef int (*ossl_X509_STORE_load_file_t)(ossl_X509_STORE *ctx, const char *file);
typedef int (*ossl_X509_STORE_load_path_t)(ossl_X509_STORE *ctx, const char *path);
typedef int (*ossl_X509_STORE_load_store_t)(ossl_X509_STORE *ctx, const char *store);
typedef int (*ossl_X509_STORE_load_locations_t)(ossl_X509_STORE *ctx, const char *file, const char *dir);
typedef int (*ossl_X509_STORE_set_default_paths_t)(ossl_X509_STORE *ctx);
typedef int (*ossl_X509_STORE_load_file_ex_t)(ossl_X509_STORE *ctx, const char *file, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_X509_STORE_load_store_ex_t)(ossl_X509_STORE *ctx, const char *store, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_X509_STORE_load_locations_ex_t)(ossl_X509_STORE *ctx, const char *file, const char *dir, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_X509_STORE_set_default_paths_ex_t)(ossl_X509_STORE *ctx, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_X509_STORE_CTX_set_ex_data_t)(ossl_X509_STORE_CTX *ctx, int idx, void *data);
typedef void * (*ossl_X509_STORE_CTX_get_ex_data_t)(const ossl_X509_STORE_CTX *ctx, int idx);
typedef int (*ossl_X509_STORE_CTX_get_error_t)(const ossl_X509_STORE_CTX *ctx);
typedef void (*ossl_X509_STORE_CTX_set_error_t)(ossl_X509_STORE_CTX *ctx, int s);
typedef int (*ossl_X509_STORE_CTX_get_error_depth_t)(const ossl_X509_STORE_CTX *ctx);
typedef void (*ossl_X509_STORE_CTX_set_error_depth_t)(ossl_X509_STORE_CTX *ctx, int depth);
typedef ossl_X509 * (*ossl_X509_STORE_CTX_get_current_cert_t)(const ossl_X509_STORE_CTX *ctx);
typedef void (*ossl_X509_STORE_CTX_set_current_cert_t)(ossl_X509_STORE_CTX *ctx, ossl_X509 *x);
typedef ossl_X509 * (*ossl_X509_STORE_CTX_get0_current_issuer_t)(const ossl_X509_STORE_CTX *ctx);
typedef ossl_X509_CRL * (*ossl_X509_STORE_CTX_get0_current_crl_t)(const ossl_X509_STORE_CTX *ctx);
typedef ossl_X509_STORE_CTX * (*ossl_X509_STORE_CTX_get0_parent_ctx_t)(const ossl_X509_STORE_CTX *ctx);
typedef ossl_STACK_OF(ossl_X509) * (*ossl_X509_STORE_CTX_get0_chain_t)(const ossl_X509_STORE_CTX *ctx);
typedef ossl_STACK_OF(ossl_X509) * (*ossl_X509_STORE_CTX_get1_chain_t)(const ossl_X509_STORE_CTX *ctx);
typedef void (*ossl_X509_STORE_CTX_set_cert_t)(ossl_X509_STORE_CTX *ctx, ossl_X509 *target);
typedef void (*ossl_X509_STORE_CTX_set0_verified_chain_t)(ossl_X509_STORE_CTX *c, ossl_STACK_OF(ossl_X509) *sk);
typedef void (*ossl_X509_STORE_CTX_set0_crls_t)(ossl_X509_STORE_CTX *ctx, ossl_STACK_OF(ossl_X509_CRL) *sk);
typedef int (*ossl_X509_STORE_CTX_set_purpose_t)(ossl_X509_STORE_CTX *ctx, int purpose);
typedef int (*ossl_X509_STORE_CTX_set_trust_t)(ossl_X509_STORE_CTX *ctx, int trust);
typedef int (*ossl_X509_STORE_CTX_purpose_inherit_t)(ossl_X509_STORE_CTX *ctx, int def_purpose, int purpose, int trust);
typedef void (*ossl_X509_STORE_CTX_set_flags_t)(ossl_X509_STORE_CTX *ctx, unsigned long flags);
typedef void (*ossl_X509_STORE_CTX_set_time_t)(ossl_X509_STORE_CTX *ctx, unsigned long flags, time_t t);
typedef ossl_X509_POLICY_TREE * (*ossl_X509_STORE_CTX_get0_policy_tree_t)(const ossl_X509_STORE_CTX *ctx);
typedef int (*ossl_X509_STORE_CTX_get_explicit_policy_t)(const ossl_X509_STORE_CTX *ctx);
typedef int (*ossl_X509_STORE_CTX_get_num_untrusted_t)(const ossl_X509_STORE_CTX *ctx);
typedef ossl_X509_VERIFY_PARAM * (*ossl_X509_STORE_CTX_get0_param_t)(const ossl_X509_STORE_CTX *ctx);
typedef void (*ossl_X509_STORE_CTX_set0_param_t)(ossl_X509_STORE_CTX *ctx, ossl_X509_VERIFY_PARAM *param);
typedef int (*ossl_X509_STORE_CTX_set_default_t)(ossl_X509_STORE_CTX *ctx, const char *name);
typedef void (*ossl_X509_STORE_CTX_set0_dane_t)(ossl_X509_STORE_CTX *ctx, ossl_SSL_DANE *dane);
typedef ossl_X509_VERIFY_PARAM * (*ossl_X509_VERIFY_PARAM_new_t)();
typedef void (*ossl_X509_VERIFY_PARAM_free_t)(ossl_X509_VERIFY_PARAM *param);
typedef int (*ossl_X509_VERIFY_PARAM_inherit_t)(ossl_X509_VERIFY_PARAM *to, const ossl_X509_VERIFY_PARAM *from);
typedef int (*ossl_X509_VERIFY_PARAM_set1_t)(ossl_X509_VERIFY_PARAM *to, const ossl_X509_VERIFY_PARAM *from);
typedef int (*ossl_X509_VERIFY_PARAM_set1_name_t)(ossl_X509_VERIFY_PARAM *param, const char *name);
typedef int (*ossl_X509_VERIFY_PARAM_set_flags_t)(ossl_X509_VERIFY_PARAM *param, unsigned long flags);
typedef int (*ossl_X509_VERIFY_PARAM_clear_flags_t)(ossl_X509_VERIFY_PARAM *param, unsigned long flags);
typedef unsigned long (*ossl_X509_VERIFY_PARAM_get_flags_t)(const ossl_X509_VERIFY_PARAM *param);
typedef int (*ossl_X509_VERIFY_PARAM_set_purpose_t)(ossl_X509_VERIFY_PARAM *param, int purpose);
typedef int (*ossl_X509_VERIFY_PARAM_set_trust_t)(ossl_X509_VERIFY_PARAM *param, int trust);
typedef void (*ossl_X509_VERIFY_PARAM_set_depth_t)(ossl_X509_VERIFY_PARAM *param, int depth);
typedef void (*ossl_X509_VERIFY_PARAM_set_auth_level_t)(ossl_X509_VERIFY_PARAM *param, int auth_level);
typedef time_t (*ossl_X509_VERIFY_PARAM_get_time_t)(const ossl_X509_VERIFY_PARAM *param);
typedef void (*ossl_X509_VERIFY_PARAM_set_time_t)(ossl_X509_VERIFY_PARAM *param, time_t t);
typedef int (*ossl_X509_VERIFY_PARAM_add0_policy_t)(ossl_X509_VERIFY_PARAM *param, ossl_ASN1_OBJECT *policy);
typedef int (*ossl_X509_VERIFY_PARAM_set1_policies_t)(ossl_X509_VERIFY_PARAM *param, ossl_STACK_OF(ossl_ASN1_OBJECT) *policies);
typedef int (*ossl_X509_VERIFY_PARAM_set_inh_flags_t)(ossl_X509_VERIFY_PARAM *param, uint32_t flags);
typedef uint32_t (*ossl_X509_VERIFY_PARAM_get_inh_flags_t)(const ossl_X509_VERIFY_PARAM *param);
typedef char * (*ossl_X509_VERIFY_PARAM_get0_host_t)(ossl_X509_VERIFY_PARAM *param, int idx);
typedef int (*ossl_X509_VERIFY_PARAM_set1_host_t)(ossl_X509_VERIFY_PARAM *param, const char *name, size_t namelen);
typedef int (*ossl_X509_VERIFY_PARAM_add1_host_t)(ossl_X509_VERIFY_PARAM *param, const char *name, size_t namelen);
typedef void (*ossl_X509_VERIFY_PARAM_set_hostflags_t)(ossl_X509_VERIFY_PARAM *param, unsigned int flags);
typedef unsigned int (*ossl_X509_VERIFY_PARAM_get_hostflags_t)(const ossl_X509_VERIFY_PARAM *param);
typedef char * (*ossl_X509_VERIFY_PARAM_get0_peername_t)(const ossl_X509_VERIFY_PARAM *param);
typedef void (*ossl_X509_VERIFY_PARAM_move_peername_t)(ossl_X509_VERIFY_PARAM *_p0, ossl_X509_VERIFY_PARAM *_p1);
typedef char * (*ossl_X509_VERIFY_PARAM_get0_email_t)(ossl_X509_VERIFY_PARAM *param);
typedef int (*ossl_X509_VERIFY_PARAM_set1_email_t)(ossl_X509_VERIFY_PARAM *param, const char *email, size_t emaillen);
typedef char * (*ossl_X509_VERIFY_PARAM_get1_ip_asc_t)(ossl_X509_VERIFY_PARAM *param);
typedef int (*ossl_X509_VERIFY_PARAM_set1_ip_t)(ossl_X509_VERIFY_PARAM *param, const unsigned char *ip, size_t iplen);
typedef int (*ossl_X509_VERIFY_PARAM_set1_ip_asc_t)(ossl_X509_VERIFY_PARAM *param, const char *ipasc);
typedef int (*ossl_X509_VERIFY_PARAM_get_depth_t)(const ossl_X509_VERIFY_PARAM *param);
typedef int (*ossl_X509_VERIFY_PARAM_get_auth_level_t)(const ossl_X509_VERIFY_PARAM *param);
typedef const char * (*ossl_X509_VERIFY_PARAM_get0_name_t)(const ossl_X509_VERIFY_PARAM *param);
typedef int (*ossl_X509_VERIFY_PARAM_add0_table_t)(ossl_X509_VERIFY_PARAM *param);
typedef int (*ossl_X509_VERIFY_PARAM_get_count_t)();
typedef const ossl_X509_VERIFY_PARAM * (*ossl_X509_VERIFY_PARAM_get0_t)(int id);
typedef const ossl_X509_VERIFY_PARAM * (*ossl_X509_VERIFY_PARAM_lookup_t)(const char *name);
typedef void (*ossl_X509_VERIFY_PARAM_table_cleanup_t)();
typedef int (*ossl_X509_policy_check_t)(ossl_X509_POLICY_TREE **ptree, int *pexplicit_policy, ossl_STACK_OF(ossl_X509) *certs, ossl_STACK_OF(ossl_ASN1_OBJECT) *policy_oids, unsigned int flags);
typedef void (*ossl_X509_policy_tree_free_t)(ossl_X509_POLICY_TREE *tree);
typedef int (*ossl_X509_policy_tree_level_count_t)(const ossl_X509_POLICY_TREE *tree);
typedef ossl_X509_POLICY_LEVEL * (*ossl_X509_policy_tree_get0_level_t)(const ossl_X509_POLICY_TREE *tree, int i);
typedef ossl_STACK_OF(ossl_X509_POLICY_NODE) * (*ossl_X509_policy_tree_get0_policies_t)(const ossl_X509_POLICY_TREE *tree);
typedef ossl_STACK_OF(ossl_X509_POLICY_NODE) * (*ossl_X509_policy_tree_get0_user_policies_t)(const ossl_X509_POLICY_TREE *tree);
typedef int (*ossl_X509_policy_level_node_count_t)(ossl_X509_POLICY_LEVEL *level);
typedef ossl_X509_POLICY_NODE * (*ossl_X509_policy_level_get0_node_t)(const ossl_X509_POLICY_LEVEL *level, int i);
typedef const ossl_ASN1_OBJECT * (*ossl_X509_policy_node_get0_policy_t)(const ossl_X509_POLICY_NODE *node);
typedef ossl_STACK_OF(ossl_POLICYQUALINFO) * (*ossl_X509_policy_node_get0_qualifiers_t)(const ossl_X509_POLICY_NODE *node);
typedef const ossl_X509_POLICY_NODE * (*ossl_X509_policy_node_get0_parent_t)(const ossl_X509_POLICY_NODE *node);
typedef ossl_PKCS7_ISSUER_AND_SERIAL * (*ossl_PKCS7_ISSUER_AND_SERIAL_new_t)();
typedef void (*ossl_PKCS7_ISSUER_AND_SERIAL_free_t)(ossl_PKCS7_ISSUER_AND_SERIAL *a);
typedef ossl_PKCS7_ISSUER_AND_SERIAL * (*ossl_d2i_PKCS7_ISSUER_AND_SERIAL_t)(ossl_PKCS7_ISSUER_AND_SERIAL **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_PKCS7_ISSUER_AND_SERIAL_t)(const ossl_PKCS7_ISSUER_AND_SERIAL *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_PKCS7_ISSUER_AND_SERIAL_it_t)();
typedef int (*ossl_PKCS7_ISSUER_AND_SERIAL_digest_t)(ossl_PKCS7_ISSUER_AND_SERIAL *data, const ossl_EVP_MD *type, unsigned char *md, unsigned int *len);
typedef ossl_PKCS7 * (*ossl_d2i_PKCS7_fp_t)(FILE *fp, ossl_PKCS7 **p7);
typedef int (*ossl_i2d_PKCS7_fp_t)(FILE *fp, const ossl_PKCS7 *p7);
typedef ossl_PKCS7 * (*ossl_PKCS7_dup_t)(const ossl_PKCS7 *a);
typedef ossl_PKCS7 * (*ossl_d2i_PKCS7_bio_t)(ossl_BIO *bp, ossl_PKCS7 **p7);
typedef int (*ossl_i2d_PKCS7_bio_t)(ossl_BIO *bp, const ossl_PKCS7 *p7);
typedef int (*ossl_i2d_PKCS7_bio_stream_t)(ossl_BIO *out, ossl_PKCS7 *p7, ossl_BIO *in, int flags);
typedef int (*ossl_PEM_write_bio_PKCS7_stream_t)(ossl_BIO *out, ossl_PKCS7 *p7, ossl_BIO *in, int flags);
typedef ossl_PKCS7_SIGNER_INFO * (*ossl_PKCS7_SIGNER_INFO_new_t)();
typedef void (*ossl_PKCS7_SIGNER_INFO_free_t)(ossl_PKCS7_SIGNER_INFO *a);
typedef ossl_PKCS7_SIGNER_INFO * (*ossl_d2i_PKCS7_SIGNER_INFO_t)(ossl_PKCS7_SIGNER_INFO **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_PKCS7_SIGNER_INFO_t)(const ossl_PKCS7_SIGNER_INFO *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_PKCS7_SIGNER_INFO_it_t)();
typedef ossl_PKCS7_RECIP_INFO * (*ossl_PKCS7_RECIP_INFO_new_t)();
typedef void (*ossl_PKCS7_RECIP_INFO_free_t)(ossl_PKCS7_RECIP_INFO *a);
typedef ossl_PKCS7_RECIP_INFO * (*ossl_d2i_PKCS7_RECIP_INFO_t)(ossl_PKCS7_RECIP_INFO **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_PKCS7_RECIP_INFO_t)(const ossl_PKCS7_RECIP_INFO *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_PKCS7_RECIP_INFO_it_t)();
typedef ossl_PKCS7_SIGNED * (*ossl_PKCS7_SIGNED_new_t)();
typedef void (*ossl_PKCS7_SIGNED_free_t)(ossl_PKCS7_SIGNED *a);
typedef ossl_PKCS7_SIGNED * (*ossl_d2i_PKCS7_SIGNED_t)(ossl_PKCS7_SIGNED **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_PKCS7_SIGNED_t)(const ossl_PKCS7_SIGNED *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_PKCS7_SIGNED_it_t)();
typedef ossl_PKCS7_ENC_CONTENT * (*ossl_PKCS7_ENC_CONTENT_new_t)();
typedef void (*ossl_PKCS7_ENC_CONTENT_free_t)(ossl_PKCS7_ENC_CONTENT *a);
typedef ossl_PKCS7_ENC_CONTENT * (*ossl_d2i_PKCS7_ENC_CONTENT_t)(ossl_PKCS7_ENC_CONTENT **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_PKCS7_ENC_CONTENT_t)(const ossl_PKCS7_ENC_CONTENT *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_PKCS7_ENC_CONTENT_it_t)();
typedef ossl_PKCS7_ENVELOPE * (*ossl_PKCS7_ENVELOPE_new_t)();
typedef void (*ossl_PKCS7_ENVELOPE_free_t)(ossl_PKCS7_ENVELOPE *a);
typedef ossl_PKCS7_ENVELOPE * (*ossl_d2i_PKCS7_ENVELOPE_t)(ossl_PKCS7_ENVELOPE **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_PKCS7_ENVELOPE_t)(const ossl_PKCS7_ENVELOPE *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_PKCS7_ENVELOPE_it_t)();
typedef ossl_PKCS7_SIGN_ENVELOPE * (*ossl_PKCS7_SIGN_ENVELOPE_new_t)();
typedef void (*ossl_PKCS7_SIGN_ENVELOPE_free_t)(ossl_PKCS7_SIGN_ENVELOPE *a);
typedef ossl_PKCS7_SIGN_ENVELOPE * (*ossl_d2i_PKCS7_SIGN_ENVELOPE_t)(ossl_PKCS7_SIGN_ENVELOPE **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_PKCS7_SIGN_ENVELOPE_t)(const ossl_PKCS7_SIGN_ENVELOPE *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_PKCS7_SIGN_ENVELOPE_it_t)();
typedef ossl_PKCS7_DIGEST * (*ossl_PKCS7_DIGEST_new_t)();
typedef void (*ossl_PKCS7_DIGEST_free_t)(ossl_PKCS7_DIGEST *a);
typedef ossl_PKCS7_DIGEST * (*ossl_d2i_PKCS7_DIGEST_t)(ossl_PKCS7_DIGEST **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_PKCS7_DIGEST_t)(const ossl_PKCS7_DIGEST *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_PKCS7_DIGEST_it_t)();
typedef ossl_PKCS7_ENCRYPT * (*ossl_PKCS7_ENCRYPT_new_t)();
typedef void (*ossl_PKCS7_ENCRYPT_free_t)(ossl_PKCS7_ENCRYPT *a);
typedef ossl_PKCS7_ENCRYPT * (*ossl_d2i_PKCS7_ENCRYPT_t)(ossl_PKCS7_ENCRYPT **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_PKCS7_ENCRYPT_t)(const ossl_PKCS7_ENCRYPT *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_PKCS7_ENCRYPT_it_t)();
typedef ossl_PKCS7 * (*ossl_PKCS7_new_t)();
typedef void (*ossl_PKCS7_free_t)(ossl_PKCS7 *a);
typedef ossl_PKCS7 * (*ossl_d2i_PKCS7_t)(ossl_PKCS7 **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_PKCS7_t)(const ossl_PKCS7 *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_PKCS7_it_t)();
typedef ossl_PKCS7 * (*ossl_PKCS7_new_ex_t)(ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef const ossl_ASN1_ITEM * (*ossl_PKCS7_ATTR_SIGN_it_t)();
typedef const ossl_ASN1_ITEM * (*ossl_PKCS7_ATTR_VERIFY_it_t)();
typedef int (*ossl_i2d_PKCS7_NDEF_t)(const ossl_PKCS7 *a, unsigned char **out);
typedef int (*ossl_PKCS7_print_ctx_t)(ossl_BIO *out, const ossl_PKCS7 *x, int indent, const ossl_ASN1_PCTX *pctx);
typedef long (*ossl_PKCS7_ctrl_t)(ossl_PKCS7 *p7, int cmd, long larg, char *parg);
typedef int (*ossl_PKCS7_type_is_other_t)(ossl_PKCS7 *p7);
typedef int (*ossl_PKCS7_set_type_t)(ossl_PKCS7 *p7, int type);
typedef int (*ossl_PKCS7_set0_type_other_t)(ossl_PKCS7 *p7, int type, ossl_ASN1_TYPE *other);
typedef int (*ossl_PKCS7_set_content_t)(ossl_PKCS7 *p7, ossl_PKCS7 *p7_data);
typedef int (*ossl_PKCS7_SIGNER_INFO_set_t)(ossl_PKCS7_SIGNER_INFO *p7i, ossl_X509 *x509, ossl_EVP_PKEY *pkey, const ossl_EVP_MD *dgst);
typedef int (*ossl_PKCS7_SIGNER_INFO_sign_t)(ossl_PKCS7_SIGNER_INFO *si);
typedef int (*ossl_PKCS7_add_signer_t)(ossl_PKCS7 *p7, ossl_PKCS7_SIGNER_INFO *p7i);
typedef int (*ossl_PKCS7_add_certificate_t)(ossl_PKCS7 *p7, ossl_X509 *x509);
typedef int (*ossl_PKCS7_add_crl_t)(ossl_PKCS7 *p7, ossl_X509_CRL *x509);
typedef int (*ossl_PKCS7_content_new_t)(ossl_PKCS7 *p7, int nid);
typedef int (*ossl_PKCS7_dataVerify_t)(ossl_X509_STORE *cert_store, ossl_X509_STORE_CTX *ctx, ossl_BIO *bio, ossl_PKCS7 *p7, ossl_PKCS7_SIGNER_INFO *si);
typedef int (*ossl_PKCS7_signatureVerify_t)(ossl_BIO *bio, ossl_PKCS7 *p7, ossl_PKCS7_SIGNER_INFO *si, ossl_X509 *x509);
typedef ossl_BIO * (*ossl_PKCS7_dataInit_t)(ossl_PKCS7 *p7, ossl_BIO *bio);
typedef int (*ossl_PKCS7_dataFinal_t)(ossl_PKCS7 *p7, ossl_BIO *bio);
typedef ossl_BIO * (*ossl_PKCS7_dataDecode_t)(ossl_PKCS7 *p7, ossl_EVP_PKEY *pkey, ossl_BIO *in_bio, ossl_X509 *pcert);
typedef ossl_PKCS7_SIGNER_INFO * (*ossl_PKCS7_add_signature_t)(ossl_PKCS7 *p7, ossl_X509 *x509, ossl_EVP_PKEY *pkey, const ossl_EVP_MD *dgst);
typedef ossl_X509 * (*ossl_PKCS7_cert_from_signer_info_t)(ossl_PKCS7 *p7, ossl_PKCS7_SIGNER_INFO *si);
typedef int (*ossl_PKCS7_set_digest_t)(ossl_PKCS7 *p7, const ossl_EVP_MD *md);
typedef ossl_STACK_OF(ossl_PKCS7_SIGNER_INFO) * (*ossl_PKCS7_get_signer_info_t)(ossl_PKCS7 *p7);
typedef ossl_PKCS7_RECIP_INFO * (*ossl_PKCS7_add_recipient_t)(ossl_PKCS7 *p7, ossl_X509 *x509);
typedef void (*ossl_PKCS7_SIGNER_INFO_get0_algs_t)(ossl_PKCS7_SIGNER_INFO *si, ossl_EVP_PKEY **pk, ossl_X509_ALGOR **pdig, ossl_X509_ALGOR **psig);
typedef void (*ossl_PKCS7_RECIP_INFO_get0_alg_t)(ossl_PKCS7_RECIP_INFO *ri, ossl_X509_ALGOR **penc);
typedef int (*ossl_PKCS7_add_recipient_info_t)(ossl_PKCS7 *p7, ossl_PKCS7_RECIP_INFO *ri);
typedef int (*ossl_PKCS7_RECIP_INFO_set_t)(ossl_PKCS7_RECIP_INFO *p7i, ossl_X509 *x509);
typedef int (*ossl_PKCS7_set_cipher_t)(ossl_PKCS7 *p7, const ossl_EVP_CIPHER *cipher);
typedef int (*ossl_PKCS7_stream_t)(unsigned char ***boundary, ossl_PKCS7 *p7);
typedef ossl_PKCS7_ISSUER_AND_SERIAL * (*ossl_PKCS7_get_issuer_and_serial_t)(ossl_PKCS7 *p7, int idx);
typedef ossl_ASN1_OCTET_STRING * (*ossl_PKCS7_get_octet_string_t)(ossl_PKCS7 *p7);
typedef ossl_ASN1_OCTET_STRING * (*ossl_PKCS7_digest_from_attributes_t)(ossl_STACK_OF(ossl_X509_ATTRIBUTE) *sk);
typedef int (*ossl_PKCS7_add_signed_attribute_t)(ossl_PKCS7_SIGNER_INFO *p7si, int nid, int type, void *data);
typedef int (*ossl_PKCS7_add_attribute_t)(ossl_PKCS7_SIGNER_INFO *p7si, int nid, int atrtype, void *value);
typedef ossl_ASN1_TYPE * (*ossl_PKCS7_get_attribute_t)(const ossl_PKCS7_SIGNER_INFO *si, int nid);
typedef ossl_ASN1_TYPE * (*ossl_PKCS7_get_signed_attribute_t)(const ossl_PKCS7_SIGNER_INFO *si, int nid);
typedef int (*ossl_PKCS7_set_signed_attributes_t)(ossl_PKCS7_SIGNER_INFO *p7si, ossl_STACK_OF(ossl_X509_ATTRIBUTE) *sk);
typedef int (*ossl_PKCS7_set_attributes_t)(ossl_PKCS7_SIGNER_INFO *p7si, ossl_STACK_OF(ossl_X509_ATTRIBUTE) *sk);
typedef ossl_PKCS7 * (*ossl_PKCS7_sign_t)(ossl_X509 *signcert, ossl_EVP_PKEY *pkey, ossl_STACK_OF(ossl_X509) *certs, ossl_BIO *data, int flags);
typedef ossl_PKCS7 * (*ossl_PKCS7_sign_ex_t)(ossl_X509 *signcert, ossl_EVP_PKEY *pkey, ossl_STACK_OF(ossl_X509) *certs, ossl_BIO *data, int flags, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef ossl_PKCS7_SIGNER_INFO * (*ossl_PKCS7_sign_add_signer_t)(ossl_PKCS7 *p7, ossl_X509 *signcert, ossl_EVP_PKEY *pkey, const ossl_EVP_MD *md, int flags);
typedef int (*ossl_PKCS7_final_t)(ossl_PKCS7 *p7, ossl_BIO *data, int flags);
typedef int (*ossl_PKCS7_verify_t)(ossl_PKCS7 *p7, ossl_STACK_OF(ossl_X509) *certs, ossl_X509_STORE *store, ossl_BIO *indata, ossl_BIO *out, int flags);
typedef ossl_STACK_OF(ossl_X509) * (*ossl_PKCS7_get0_signers_t)(ossl_PKCS7 *p7, ossl_STACK_OF(ossl_X509) *certs, int flags);
typedef ossl_PKCS7 * (*ossl_PKCS7_encrypt_t)(ossl_STACK_OF(ossl_X509) *certs, ossl_BIO *in, const ossl_EVP_CIPHER *cipher, int flags);
typedef ossl_PKCS7 * (*ossl_PKCS7_encrypt_ex_t)(ossl_STACK_OF(ossl_X509) *certs, ossl_BIO *in, const ossl_EVP_CIPHER *cipher, int flags, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_PKCS7_decrypt_t)(ossl_PKCS7 *p7, ossl_EVP_PKEY *pkey, ossl_X509 *cert, ossl_BIO *data, int flags);
typedef int (*ossl_PKCS7_add_attrib_smimecap_t)(ossl_PKCS7_SIGNER_INFO *si, ossl_STACK_OF(ossl_X509_ALGOR) *cap);
typedef ossl_STACK_OF(ossl_X509_ALGOR) * (*ossl_PKCS7_get_smimecap_t)(ossl_PKCS7_SIGNER_INFO *si);
typedef int (*ossl_PKCS7_simple_smimecap_t)(ossl_STACK_OF(ossl_X509_ALGOR) *sk, int nid, int arg);
typedef int (*ossl_PKCS7_add_attrib_content_type_t)(ossl_PKCS7_SIGNER_INFO *si, ossl_ASN1_OBJECT *coid);
typedef int (*ossl_PKCS7_add0_attrib_signing_time_t)(ossl_PKCS7_SIGNER_INFO *si, ossl_ASN1_TIME *t);
typedef int (*ossl_PKCS7_add1_attrib_digest_t)(ossl_PKCS7_SIGNER_INFO *si, const unsigned char *md, int mdlen);
typedef int (*ossl_SMIME_write_PKCS7_t)(ossl_BIO *bio, ossl_PKCS7 *p7, ossl_BIO *data, int flags);
typedef ossl_PKCS7 * (*ossl_SMIME_read_PKCS7_ex_t)(ossl_BIO *bio, ossl_BIO **bcont, ossl_PKCS7 **p7);
typedef ossl_PKCS7 * (*ossl_SMIME_read_PKCS7_t)(ossl_BIO *bio, ossl_BIO **bcont);
typedef ossl_BIO * (*ossl_BIO_new_PKCS7_t)(ossl_BIO *out, ossl_PKCS7 *p7);
typedef void (*ossl_X509_CRL_set_default_method_t)(const ossl_X509_CRL_METHOD *meth);
typedef ossl_X509_CRL_METHOD * (*ossl_X509_CRL_METHOD_new_t)(int (*crl_init)(ossl_X509_CRL *), int (*crl_free)(ossl_X509_CRL *), int (*crl_lookup)(ossl_X509_CRL *, ossl_X509_REVOKED **, const ossl_ASN1_INTEGER *, const ossl_X509_NAME *), int (*crl_verify)(ossl_X509_CRL *, ossl_EVP_PKEY *));
typedef void (*ossl_X509_CRL_METHOD_free_t)(ossl_X509_CRL_METHOD *m);
typedef void (*ossl_X509_CRL_set_meth_data_t)(ossl_X509_CRL *crl, void *dat);
typedef void * (*ossl_X509_CRL_get_meth_data_t)(ossl_X509_CRL *crl);
typedef const char * (*ossl_X509_verify_cert_error_string_t)(long n);
typedef int (*ossl_X509_verify_t)(ossl_X509 *a, ossl_EVP_PKEY *r);
typedef int (*ossl_X509_self_signed_t)(ossl_X509 *cert, int verify_signature);
typedef int (*ossl_X509_REQ_verify_ex_t)(ossl_X509_REQ *a, ossl_EVP_PKEY *r, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_X509_REQ_verify_t)(ossl_X509_REQ *a, ossl_EVP_PKEY *r);
typedef int (*ossl_X509_CRL_verify_t)(ossl_X509_CRL *a, ossl_EVP_PKEY *r);
typedef int (*ossl_NETSCAPE_SPKI_verify_t)(ossl_NETSCAPE_SPKI *a, ossl_EVP_PKEY *r);
typedef ossl_NETSCAPE_SPKI * (*ossl_NETSCAPE_SPKI_b64_decode_t)(const char *str, int len);
typedef char * (*ossl_NETSCAPE_SPKI_b64_encode_t)(ossl_NETSCAPE_SPKI *x);
typedef ossl_EVP_PKEY * (*ossl_NETSCAPE_SPKI_get_pubkey_t)(ossl_NETSCAPE_SPKI *x);
typedef int (*ossl_NETSCAPE_SPKI_set_pubkey_t)(ossl_NETSCAPE_SPKI *x, ossl_EVP_PKEY *pkey);
typedef int (*ossl_NETSCAPE_SPKI_print_t)(ossl_BIO *out, ossl_NETSCAPE_SPKI *spki);
typedef int (*ossl_X509_signature_dump_t)(ossl_BIO *bp, const ossl_ASN1_STRING *sig, int indent);
typedef int (*ossl_X509_signature_print_t)(ossl_BIO *bp, const ossl_X509_ALGOR *alg, const ossl_ASN1_STRING *sig);
typedef int (*ossl_X509_sign_t)(ossl_X509 *x, ossl_EVP_PKEY *pkey, const ossl_EVP_MD *md);
typedef int (*ossl_X509_sign_ctx_t)(ossl_X509 *x, ossl_EVP_MD_CTX *ctx);
typedef int (*ossl_X509_REQ_sign_t)(ossl_X509_REQ *x, ossl_EVP_PKEY *pkey, const ossl_EVP_MD *md);
typedef int (*ossl_X509_REQ_sign_ctx_t)(ossl_X509_REQ *x, ossl_EVP_MD_CTX *ctx);
typedef int (*ossl_X509_CRL_sign_t)(ossl_X509_CRL *x, ossl_EVP_PKEY *pkey, const ossl_EVP_MD *md);
typedef int (*ossl_X509_CRL_sign_ctx_t)(ossl_X509_CRL *x, ossl_EVP_MD_CTX *ctx);
typedef int (*ossl_NETSCAPE_SPKI_sign_t)(ossl_NETSCAPE_SPKI *x, ossl_EVP_PKEY *pkey, const ossl_EVP_MD *md);
typedef int (*ossl_X509_pubkey_digest_t)(const ossl_X509 *data, const ossl_EVP_MD *type, unsigned char *md, unsigned int *len);
typedef int (*ossl_X509_digest_t)(const ossl_X509 *data, const ossl_EVP_MD *type, unsigned char *md, unsigned int *len);
typedef ossl_ASN1_OCTET_STRING * (*ossl_X509_digest_sig_t)(const ossl_X509 *cert, ossl_EVP_MD **md_used, int *md_is_fallback);
typedef int (*ossl_X509_CRL_digest_t)(const ossl_X509_CRL *data, const ossl_EVP_MD *type, unsigned char *md, unsigned int *len);
typedef int (*ossl_X509_REQ_digest_t)(const ossl_X509_REQ *data, const ossl_EVP_MD *type, unsigned char *md, unsigned int *len);
typedef int (*ossl_X509_NAME_digest_t)(const ossl_X509_NAME *data, const ossl_EVP_MD *type, unsigned char *md, unsigned int *len);
typedef ossl_X509 * (*ossl_X509_load_http_t)(const char *url, ossl_BIO *bio, ossl_BIO *rbio, int timeout);
typedef ossl_X509_CRL * (*ossl_X509_CRL_load_http_t)(const char *url, ossl_BIO *bio, ossl_BIO *rbio, int timeout);
typedef int (*ossl_CONF_set_default_method_t)(ossl_CONF_METHOD *meth);
typedef void (*ossl_CONF_set_nconf_t)(ossl_CONF *conf, ossl_LHASH_OF(ossl_CONF_VALUE) *hash);
typedef ossl_LHASH_OF(ossl_CONF_VALUE) * (*ossl_CONF_load_t)(ossl_LHASH_OF(ossl_CONF_VALUE) *conf, const char *file, long *eline);
typedef ossl_LHASH_OF(ossl_CONF_VALUE) * (*ossl_CONF_load_fp_t)(ossl_LHASH_OF(ossl_CONF_VALUE) *conf, FILE *fp, long *eline);
typedef ossl_LHASH_OF(ossl_CONF_VALUE) * (*ossl_CONF_load_bio_t)(ossl_LHASH_OF(ossl_CONF_VALUE) *conf, ossl_BIO *bp, long *eline);
typedef ossl_STACK_OF(ossl_CONF_VALUE) * (*ossl_CONF_get_section_t)(ossl_LHASH_OF(ossl_CONF_VALUE) *conf, const char *section);
typedef char * (*ossl_CONF_get_string_t)(ossl_LHASH_OF(ossl_CONF_VALUE) *conf, const char *group, const char *name);
typedef long (*ossl_CONF_get_number_t)(ossl_LHASH_OF(ossl_CONF_VALUE) *conf, const char *group, const char *name);
typedef void (*ossl_CONF_free_t)(ossl_LHASH_OF(ossl_CONF_VALUE) *conf);
typedef int (*ossl_CONF_dump_fp_t)(ossl_LHASH_OF(ossl_CONF_VALUE) *conf, FILE *out);
typedef int (*ossl_CONF_dump_bio_t)(ossl_LHASH_OF(ossl_CONF_VALUE) *conf, ossl_BIO *out);
typedef void (*ossl_OPENSSL_config_t)(const char *config_name);
typedef ossl_CONF * (*ossl_NCONF_new_ex_t)(ossl_OSSL_LIB_CTX *libctx, ossl_CONF_METHOD *meth);
typedef ossl_OSSL_LIB_CTX * (*ossl_NCONF_get0_libctx_t)(const ossl_CONF *conf);
typedef ossl_CONF * (*ossl_NCONF_new_t)(ossl_CONF_METHOD *meth);
typedef ossl_CONF_METHOD * (*ossl_NCONF_default_t)();
typedef ossl_CONF_METHOD * (*ossl_NCONF_WIN32_t)();
typedef void (*ossl_NCONF_free_t)(ossl_CONF *conf);
typedef void (*ossl_NCONF_free_data_t)(ossl_CONF *conf);
typedef int (*ossl_NCONF_load_t)(ossl_CONF *conf, const char *file, long *eline);
typedef int (*ossl_NCONF_load_fp_t)(ossl_CONF *conf, FILE *fp, long *eline);
typedef int (*ossl_NCONF_load_bio_t)(ossl_CONF *conf, ossl_BIO *bp, long *eline);
typedef ossl_STACK_OF(ossl_OPENSSL_CSTRING) * (*ossl_NCONF_get_section_names_t)(const ossl_CONF *conf);
typedef ossl_STACK_OF(ossl_CONF_VALUE) * (*ossl_NCONF_get_section_t)(const ossl_CONF *conf, const char *section);
typedef char * (*ossl_NCONF_get_string_t)(const ossl_CONF *conf, const char *group, const char *name);
typedef int (*ossl_NCONF_get_number_e_t)(const ossl_CONF *conf, const char *group, const char *name, long *result);
typedef int (*ossl_NCONF_dump_fp_t)(const ossl_CONF *conf, FILE *out);
typedef int (*ossl_NCONF_dump_bio_t)(const ossl_CONF *conf, ossl_BIO *out);
typedef int (*ossl_CONF_modules_load_t)(const ossl_CONF *cnf, const char *appname, unsigned long flags);
typedef int (*ossl_CONF_modules_load_file_ex_t)(ossl_OSSL_LIB_CTX *libctx, const char *filename, const char *appname, unsigned long flags);
typedef int (*ossl_CONF_modules_load_file_t)(const char *filename, const char *appname, unsigned long flags);
typedef void (*ossl_CONF_modules_unload_t)(int all);
typedef void (*ossl_CONF_modules_finish_t)();
typedef int (*ossl_CONF_module_add_t)(const char *name, ossl_conf_init_func *ifunc, ossl_conf_finish_func *ffunc);
typedef const char * (*ossl_CONF_imodule_get_name_t)(const ossl_CONF_IMODULE *md);
typedef const char * (*ossl_CONF_imodule_get_value_t)(const ossl_CONF_IMODULE *md);
typedef void * (*ossl_CONF_imodule_get_usr_data_t)(const ossl_CONF_IMODULE *md);
typedef void (*ossl_CONF_imodule_set_usr_data_t)(ossl_CONF_IMODULE *md, void *usr_data);
typedef ossl_CONF_MODULE * (*ossl_CONF_imodule_get_module_t)(const ossl_CONF_IMODULE *md);
typedef unsigned long (*ossl_CONF_imodule_get_flags_t)(const ossl_CONF_IMODULE *md);
typedef void (*ossl_CONF_imodule_set_flags_t)(ossl_CONF_IMODULE *md, unsigned long flags);
typedef void * (*ossl_CONF_module_get_usr_data_t)(ossl_CONF_MODULE *pmod);
typedef void (*ossl_CONF_module_set_usr_data_t)(ossl_CONF_MODULE *pmod, void *usr_data);
typedef char * (*ossl_CONF_get1_default_config_file_t)();
typedef int (*ossl_CONF_parse_list_t)(const char *list, int sep, int nospc, int (*list_cb)(const char *, int, void *), void *arg);
typedef void (*ossl_OPENSSL_load_builtin_modules_t)();
typedef ossl_OSSL_HTTP_REQ_CTX * (*ossl_OSSL_HTTP_REQ_CTX_new_t)(ossl_BIO *wbio, ossl_BIO *rbio, int buf_size);
typedef void (*ossl_OSSL_HTTP_REQ_CTX_free_t)(ossl_OSSL_HTTP_REQ_CTX *rctx);
typedef int (*ossl_OSSL_HTTP_REQ_CTX_set_request_line_t)(ossl_OSSL_HTTP_REQ_CTX *rctx, int method_POST, const char *server, const char *port, const char *path);
typedef int (*ossl_OSSL_HTTP_REQ_CTX_add1_header_t)(ossl_OSSL_HTTP_REQ_CTX *rctx, const char *name, const char *value);
typedef int (*ossl_OSSL_HTTP_REQ_CTX_set_expected_t)(ossl_OSSL_HTTP_REQ_CTX *rctx, const char *content_type, int asn1, int timeout, int keep_alive);
typedef int (*ossl_OSSL_HTTP_REQ_CTX_set1_req_t)(ossl_OSSL_HTTP_REQ_CTX *rctx, const char *content_type, const ossl_ASN1_ITEM *it, const ossl_ASN1_VALUE *req);
typedef int (*ossl_OSSL_HTTP_REQ_CTX_nbio_t)(ossl_OSSL_HTTP_REQ_CTX *rctx);
typedef int (*ossl_OSSL_HTTP_REQ_CTX_nbio_d2i_t)(ossl_OSSL_HTTP_REQ_CTX *rctx, ossl_ASN1_VALUE **pval, const ossl_ASN1_ITEM *it);
typedef ossl_BIO * (*ossl_OSSL_HTTP_REQ_CTX_exchange_t)(ossl_OSSL_HTTP_REQ_CTX *rctx);
typedef ossl_BIO * (*ossl_OSSL_HTTP_REQ_CTX_get0_mem_bio_t)(const ossl_OSSL_HTTP_REQ_CTX *rctx);
typedef size_t (*ossl_OSSL_HTTP_REQ_CTX_get_resp_len_t)(const ossl_OSSL_HTTP_REQ_CTX *rctx);
typedef void (*ossl_OSSL_HTTP_REQ_CTX_set_max_response_length_t)(ossl_OSSL_HTTP_REQ_CTX *rctx, unsigned long len);
typedef int (*ossl_OSSL_HTTP_is_alive_t)(const ossl_OSSL_HTTP_REQ_CTX *rctx);
typedef ossl_OSSL_HTTP_REQ_CTX * (*ossl_OSSL_HTTP_open_t)(const char *server, const char *port, const char *proxy, const char *no_proxy, int use_ssl, ossl_BIO *bio, ossl_BIO *rbio, ossl_OSSL_HTTP_bio_cb_t bio_update_fn, void *arg, int buf_size, int overall_timeout);
typedef int (*ossl_OSSL_HTTP_proxy_connect_t)(ossl_BIO *bio, const char *server, const char *port, const char *proxyuser, const char *proxypass, int timeout, ossl_BIO *bio_err, const char *prog);
typedef int (*ossl_OSSL_HTTP_set1_request_t)(ossl_OSSL_HTTP_REQ_CTX *rctx, const char *path, const ossl_STACK_OF(ossl_CONF_VALUE) *headers, const char *content_type, ossl_BIO *req, const char *expected_content_type, int expect_asn1, size_t max_resp_len, int timeout, int keep_alive);
typedef ossl_BIO * (*ossl_OSSL_HTTP_exchange_t)(ossl_OSSL_HTTP_REQ_CTX *rctx, char **redirection_url);
typedef ossl_BIO * (*ossl_OSSL_HTTP_get_t)(const char *url, const char *proxy, const char *no_proxy, ossl_BIO *bio, ossl_BIO *rbio, ossl_OSSL_HTTP_bio_cb_t bio_update_fn, void *arg, int buf_size, const ossl_STACK_OF(ossl_CONF_VALUE) *headers, const char *expected_content_type, int expect_asn1, size_t max_resp_len, int timeout);
typedef ossl_BIO * (*ossl_OSSL_HTTP_transfer_t)(ossl_OSSL_HTTP_REQ_CTX **prctx, const char *server, const char *port, const char *path, int use_ssl, const char *proxy, const char *no_proxy, ossl_BIO *bio, ossl_BIO *rbio, ossl_OSSL_HTTP_bio_cb_t bio_update_fn, void *arg, int buf_size, const ossl_STACK_OF(ossl_CONF_VALUE) *headers, const char *content_type, ossl_BIO *req, const char *expected_content_type, int expect_asn1, size_t max_resp_len, int timeout, int keep_alive);
typedef int (*ossl_OSSL_HTTP_close_t)(ossl_OSSL_HTTP_REQ_CTX *rctx, int ok);
typedef int (*ossl_OSSL_parse_url_t)(const char *url, char **pscheme, char **puser, char **phost, char **pport, int *pport_num, char **ppath, char **pquery, char **pfrag);
typedef int (*ossl_OSSL_HTTP_parse_url_t)(const char *url, int *pssl, char **puser, char **phost, char **pport, int *pport_num, char **ppath, char **pquery, char **pfrag);
typedef const char * (*ossl_OSSL_HTTP_adapt_proxy_t)(const char *proxy, const char *no_proxy, const char *server, int use_ssl);
typedef ossl_X509 * (*ossl_d2i_X509_fp_t)(FILE *fp, ossl_X509 **x509);
typedef int (*ossl_i2d_X509_fp_t)(FILE *fp, const ossl_X509 *x509);
typedef ossl_X509_CRL * (*ossl_d2i_X509_CRL_fp_t)(FILE *fp, ossl_X509_CRL **crl);
typedef int (*ossl_i2d_X509_CRL_fp_t)(FILE *fp, const ossl_X509_CRL *crl);
typedef ossl_X509_REQ * (*ossl_d2i_X509_REQ_fp_t)(FILE *fp, ossl_X509_REQ **req);
typedef int (*ossl_i2d_X509_REQ_fp_t)(FILE *fp, const ossl_X509_REQ *req);
typedef ossl_RSA * (*ossl_d2i_RSAPrivateKey_fp_t)(FILE *fp, ossl_RSA **rsa);
typedef int (*ossl_i2d_RSAPrivateKey_fp_t)(FILE *fp, const ossl_RSA *rsa);
typedef ossl_RSA * (*ossl_d2i_RSAPublicKey_fp_t)(FILE *fp, ossl_RSA **rsa);
typedef int (*ossl_i2d_RSAPublicKey_fp_t)(FILE *fp, const ossl_RSA *rsa);
typedef ossl_RSA * (*ossl_d2i_RSA_PUBKEY_fp_t)(FILE *fp, ossl_RSA **rsa);
typedef int (*ossl_i2d_RSA_PUBKEY_fp_t)(FILE *fp, const ossl_RSA *rsa);
typedef ossl_DSA * (*ossl_d2i_DSA_PUBKEY_fp_t)(FILE *fp, ossl_DSA **dsa);
typedef int (*ossl_i2d_DSA_PUBKEY_fp_t)(FILE *fp, const ossl_DSA *dsa);
typedef ossl_DSA * (*ossl_d2i_DSAPrivateKey_fp_t)(FILE *fp, ossl_DSA **dsa);
typedef int (*ossl_i2d_DSAPrivateKey_fp_t)(FILE *fp, const ossl_DSA *dsa);
typedef ossl_EC_KEY * (*ossl_d2i_EC_PUBKEY_fp_t)(FILE *fp, ossl_EC_KEY **eckey);
typedef int (*ossl_i2d_EC_PUBKEY_fp_t)(FILE *fp, const ossl_EC_KEY *eckey);
typedef ossl_EC_KEY * (*ossl_d2i_ECPrivateKey_fp_t)(FILE *fp, ossl_EC_KEY **eckey);
typedef int (*ossl_i2d_ECPrivateKey_fp_t)(FILE *fp, const ossl_EC_KEY *eckey);
typedef ossl_X509_SIG * (*ossl_d2i_PKCS8_fp_t)(FILE *fp, ossl_X509_SIG **p8);
typedef int (*ossl_i2d_PKCS8_fp_t)(FILE *fp, const ossl_X509_SIG *p8);
typedef ossl_X509_PUBKEY * (*ossl_d2i_X509_PUBKEY_fp_t)(FILE *fp, ossl_X509_PUBKEY **xpk);
typedef int (*ossl_i2d_X509_PUBKEY_fp_t)(FILE *fp, const ossl_X509_PUBKEY *xpk);
typedef ossl_PKCS8_PRIV_KEY_INFO * (*ossl_d2i_PKCS8_PRIV_KEY_INFO_fp_t)(FILE *fp, ossl_PKCS8_PRIV_KEY_INFO **p8inf);
typedef int (*ossl_i2d_PKCS8_PRIV_KEY_INFO_fp_t)(FILE *fp, const ossl_PKCS8_PRIV_KEY_INFO *p8inf);
typedef int (*ossl_i2d_PKCS8PrivateKeyInfo_fp_t)(FILE *fp, const ossl_EVP_PKEY *key);
typedef int (*ossl_i2d_PrivateKey_fp_t)(FILE *fp, const ossl_EVP_PKEY *pkey);
typedef ossl_EVP_PKEY * (*ossl_d2i_PrivateKey_ex_fp_t)(FILE *fp, ossl_EVP_PKEY **a, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef ossl_EVP_PKEY * (*ossl_d2i_PrivateKey_fp_t)(FILE *fp, ossl_EVP_PKEY **a);
typedef int (*ossl_i2d_PUBKEY_fp_t)(FILE *fp, const ossl_EVP_PKEY *pkey);
typedef ossl_EVP_PKEY * (*ossl_d2i_PUBKEY_fp_t)(FILE *fp, ossl_EVP_PKEY **a);
typedef ossl_X509 * (*ossl_d2i_X509_bio_t)(ossl_BIO *bp, ossl_X509 **x509);
typedef int (*ossl_i2d_X509_bio_t)(ossl_BIO *bp, const ossl_X509 *x509);
typedef ossl_X509_CRL * (*ossl_d2i_X509_CRL_bio_t)(ossl_BIO *bp, ossl_X509_CRL **crl);
typedef int (*ossl_i2d_X509_CRL_bio_t)(ossl_BIO *bp, const ossl_X509_CRL *crl);
typedef ossl_X509_REQ * (*ossl_d2i_X509_REQ_bio_t)(ossl_BIO *bp, ossl_X509_REQ **req);
typedef int (*ossl_i2d_X509_REQ_bio_t)(ossl_BIO *bp, const ossl_X509_REQ *req);
typedef ossl_RSA * (*ossl_d2i_RSAPrivateKey_bio_t)(ossl_BIO *bp, ossl_RSA **rsa);
typedef int (*ossl_i2d_RSAPrivateKey_bio_t)(ossl_BIO *bp, const ossl_RSA *rsa);
typedef ossl_RSA * (*ossl_d2i_RSAPublicKey_bio_t)(ossl_BIO *bp, ossl_RSA **rsa);
typedef int (*ossl_i2d_RSAPublicKey_bio_t)(ossl_BIO *bp, const ossl_RSA *rsa);
typedef ossl_RSA * (*ossl_d2i_RSA_PUBKEY_bio_t)(ossl_BIO *bp, ossl_RSA **rsa);
typedef int (*ossl_i2d_RSA_PUBKEY_bio_t)(ossl_BIO *bp, const ossl_RSA *rsa);
typedef ossl_DSA * (*ossl_d2i_DSA_PUBKEY_bio_t)(ossl_BIO *bp, ossl_DSA **dsa);
typedef int (*ossl_i2d_DSA_PUBKEY_bio_t)(ossl_BIO *bp, const ossl_DSA *dsa);
typedef ossl_DSA * (*ossl_d2i_DSAPrivateKey_bio_t)(ossl_BIO *bp, ossl_DSA **dsa);
typedef int (*ossl_i2d_DSAPrivateKey_bio_t)(ossl_BIO *bp, const ossl_DSA *dsa);
typedef ossl_EC_KEY * (*ossl_d2i_EC_PUBKEY_bio_t)(ossl_BIO *bp, ossl_EC_KEY **eckey);
typedef int (*ossl_i2d_EC_PUBKEY_bio_t)(ossl_BIO *bp, const ossl_EC_KEY *eckey);
typedef ossl_EC_KEY * (*ossl_d2i_ECPrivateKey_bio_t)(ossl_BIO *bp, ossl_EC_KEY **eckey);
typedef int (*ossl_i2d_ECPrivateKey_bio_t)(ossl_BIO *bp, const ossl_EC_KEY *eckey);
typedef ossl_X509_SIG * (*ossl_d2i_PKCS8_bio_t)(ossl_BIO *bp, ossl_X509_SIG **p8);
typedef int (*ossl_i2d_PKCS8_bio_t)(ossl_BIO *bp, const ossl_X509_SIG *p8);
typedef ossl_X509_PUBKEY * (*ossl_d2i_X509_PUBKEY_bio_t)(ossl_BIO *bp, ossl_X509_PUBKEY **xpk);
typedef int (*ossl_i2d_X509_PUBKEY_bio_t)(ossl_BIO *bp, const ossl_X509_PUBKEY *xpk);
typedef ossl_PKCS8_PRIV_KEY_INFO * (*ossl_d2i_PKCS8_PRIV_KEY_INFO_bio_t)(ossl_BIO *bp, ossl_PKCS8_PRIV_KEY_INFO **p8inf);
typedef int (*ossl_i2d_PKCS8_PRIV_KEY_INFO_bio_t)(ossl_BIO *bp, const ossl_PKCS8_PRIV_KEY_INFO *p8inf);
typedef int (*ossl_i2d_PKCS8PrivateKeyInfo_bio_t)(ossl_BIO *bp, const ossl_EVP_PKEY *key);
typedef int (*ossl_i2d_PrivateKey_bio_t)(ossl_BIO *bp, const ossl_EVP_PKEY *pkey);
typedef ossl_EVP_PKEY * (*ossl_d2i_PrivateKey_ex_bio_t)(ossl_BIO *bp, ossl_EVP_PKEY **a, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef ossl_EVP_PKEY * (*ossl_d2i_PrivateKey_bio_t)(ossl_BIO *bp, ossl_EVP_PKEY **a);
typedef int (*ossl_i2d_PUBKEY_bio_t)(ossl_BIO *bp, const ossl_EVP_PKEY *pkey);
typedef ossl_EVP_PKEY * (*ossl_d2i_PUBKEY_bio_t)(ossl_BIO *bp, ossl_EVP_PKEY **a);
typedef ossl_X509 * (*ossl_X509_dup_t)(const ossl_X509 *a);
typedef ossl_X509_ALGOR * (*ossl_X509_ALGOR_dup_t)(const ossl_X509_ALGOR *a);
typedef ossl_X509_ATTRIBUTE * (*ossl_X509_ATTRIBUTE_dup_t)(const ossl_X509_ATTRIBUTE *a);
typedef ossl_X509_CRL * (*ossl_X509_CRL_dup_t)(const ossl_X509_CRL *a);
typedef ossl_X509_EXTENSION * (*ossl_X509_EXTENSION_dup_t)(const ossl_X509_EXTENSION *a);
typedef ossl_X509_PUBKEY * (*ossl_X509_PUBKEY_dup_t)(const ossl_X509_PUBKEY *a);
typedef ossl_X509_REQ * (*ossl_X509_REQ_dup_t)(const ossl_X509_REQ *a);
typedef ossl_X509_REVOKED * (*ossl_X509_REVOKED_dup_t)(const ossl_X509_REVOKED *a);
typedef int (*ossl_X509_ALGOR_set0_t)(ossl_X509_ALGOR *alg, ossl_ASN1_OBJECT *aobj, int ptype, void *pval);
typedef void (*ossl_X509_ALGOR_get0_t)(const ossl_ASN1_OBJECT **paobj, int *pptype, const void **ppval, const ossl_X509_ALGOR *algor);
typedef void (*ossl_X509_ALGOR_set_md_t)(ossl_X509_ALGOR *alg, const ossl_EVP_MD *md);
typedef int (*ossl_X509_ALGOR_cmp_t)(const ossl_X509_ALGOR *a, const ossl_X509_ALGOR *b);
typedef int (*ossl_X509_ALGOR_copy_t)(ossl_X509_ALGOR *dest, const ossl_X509_ALGOR *src);
typedef ossl_X509_NAME * (*ossl_X509_NAME_dup_t)(const ossl_X509_NAME *a);
typedef ossl_X509_NAME_ENTRY * (*ossl_X509_NAME_ENTRY_dup_t)(const ossl_X509_NAME_ENTRY *a);
typedef int (*ossl_X509_cmp_time_t)(const ossl_ASN1_TIME *s, time_t *t);
typedef int (*ossl_X509_cmp_current_time_t)(const ossl_ASN1_TIME *s);
typedef int (*ossl_X509_cmp_timeframe_t)(const ossl_X509_VERIFY_PARAM *vpm, const ossl_ASN1_TIME *start, const ossl_ASN1_TIME *end);
typedef ossl_ASN1_TIME * (*ossl_X509_time_adj_t)(ossl_ASN1_TIME *s, long adj, time_t *t);
typedef ossl_ASN1_TIME * (*ossl_X509_time_adj_ex_t)(ossl_ASN1_TIME *s, int offset_day, long offset_sec, time_t *t);
typedef ossl_ASN1_TIME * (*ossl_X509_gmtime_adj_t)(ossl_ASN1_TIME *s, long adj);
typedef const char * (*ossl_X509_get_default_cert_area_t)();
typedef const char * (*ossl_X509_get_default_cert_dir_t)();
typedef const char * (*ossl_X509_get_default_cert_file_t)();
typedef const char * (*ossl_X509_get_default_cert_dir_env_t)();
typedef const char * (*ossl_X509_get_default_cert_file_env_t)();
typedef const char * (*ossl_X509_get_default_private_dir_t)();
typedef ossl_X509_REQ * (*ossl_X509_to_X509_REQ_t)(ossl_X509 *x, ossl_EVP_PKEY *pkey, const ossl_EVP_MD *md);
typedef ossl_X509 * (*ossl_X509_REQ_to_X509_t)(ossl_X509_REQ *r, int days, ossl_EVP_PKEY *pkey);
typedef ossl_X509_ALGOR * (*ossl_X509_ALGOR_new_t)();
typedef void (*ossl_X509_ALGOR_free_t)(ossl_X509_ALGOR *a);
typedef ossl_X509_ALGOR * (*ossl_d2i_X509_ALGOR_t)(ossl_X509_ALGOR **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_X509_ALGOR_t)(const ossl_X509_ALGOR *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_X509_ALGOR_it_t)();
typedef ossl_X509_ALGORS * (*ossl_d2i_X509_ALGORS_t)(ossl_X509_ALGORS **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_X509_ALGORS_t)(const ossl_X509_ALGORS *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_X509_ALGORS_it_t)();
typedef ossl_X509_VAL * (*ossl_X509_VAL_new_t)();
typedef void (*ossl_X509_VAL_free_t)(ossl_X509_VAL *a);
typedef ossl_X509_VAL * (*ossl_d2i_X509_VAL_t)(ossl_X509_VAL **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_X509_VAL_t)(const ossl_X509_VAL *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_X509_VAL_it_t)();
typedef ossl_X509_PUBKEY * (*ossl_X509_PUBKEY_new_t)();
typedef void (*ossl_X509_PUBKEY_free_t)(ossl_X509_PUBKEY *a);
typedef ossl_X509_PUBKEY * (*ossl_d2i_X509_PUBKEY_t)(ossl_X509_PUBKEY **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_X509_PUBKEY_t)(const ossl_X509_PUBKEY *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_X509_PUBKEY_it_t)();
typedef ossl_X509_PUBKEY * (*ossl_X509_PUBKEY_new_ex_t)(ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_X509_PUBKEY_set_t)(ossl_X509_PUBKEY **x, ossl_EVP_PKEY *pkey);
typedef ossl_EVP_PKEY * (*ossl_X509_PUBKEY_get0_t)(const ossl_X509_PUBKEY *key);
typedef ossl_EVP_PKEY * (*ossl_X509_PUBKEY_get_t)(const ossl_X509_PUBKEY *key);
typedef int (*ossl_X509_get_pubkey_parameters_t)(ossl_EVP_PKEY *pkey, ossl_STACK_OF(ossl_X509) *chain);
typedef long (*ossl_X509_get_pathlen_t)(ossl_X509 *x);
typedef ossl_EVP_PKEY * (*ossl_d2i_PUBKEY_t)(ossl_EVP_PKEY **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_PUBKEY_t)(const ossl_EVP_PKEY *a, unsigned char **out);
typedef ossl_EVP_PKEY * (*ossl_d2i_PUBKEY_ex_t)(ossl_EVP_PKEY **a, const unsigned char **pp, long length, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef ossl_RSA * (*ossl_d2i_RSA_PUBKEY_t)(ossl_RSA **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_RSA_PUBKEY_t)(const ossl_RSA *a, unsigned char **out);
typedef ossl_DSA * (*ossl_d2i_DSA_PUBKEY_t)(ossl_DSA **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_DSA_PUBKEY_t)(const ossl_DSA *a, unsigned char **out);
typedef ossl_EC_KEY * (*ossl_d2i_EC_PUBKEY_t)(ossl_EC_KEY **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_EC_PUBKEY_t)(const ossl_EC_KEY *a, unsigned char **out);
typedef ossl_X509_SIG * (*ossl_X509_SIG_new_t)();
typedef void (*ossl_X509_SIG_free_t)(ossl_X509_SIG *a);
typedef ossl_X509_SIG * (*ossl_d2i_X509_SIG_t)(ossl_X509_SIG **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_X509_SIG_t)(const ossl_X509_SIG *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_X509_SIG_it_t)();
typedef void (*ossl_X509_SIG_get0_t)(const ossl_X509_SIG *sig, const ossl_X509_ALGOR **palg, const ossl_ASN1_OCTET_STRING **pdigest);
typedef void (*ossl_X509_SIG_getm_t)(ossl_X509_SIG *sig, ossl_X509_ALGOR **palg, ossl_ASN1_OCTET_STRING **pdigest);
typedef ossl_X509_REQ_INFO * (*ossl_X509_REQ_INFO_new_t)();
typedef void (*ossl_X509_REQ_INFO_free_t)(ossl_X509_REQ_INFO *a);
typedef ossl_X509_REQ_INFO * (*ossl_d2i_X509_REQ_INFO_t)(ossl_X509_REQ_INFO **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_X509_REQ_INFO_t)(const ossl_X509_REQ_INFO *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_X509_REQ_INFO_it_t)();
typedef ossl_X509_REQ * (*ossl_X509_REQ_new_t)();
typedef void (*ossl_X509_REQ_free_t)(ossl_X509_REQ *a);
typedef ossl_X509_REQ * (*ossl_d2i_X509_REQ_t)(ossl_X509_REQ **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_X509_REQ_t)(const ossl_X509_REQ *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_X509_REQ_it_t)();
typedef ossl_X509_REQ * (*ossl_X509_REQ_new_ex_t)(ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef ossl_X509_ATTRIBUTE * (*ossl_X509_ATTRIBUTE_new_t)();
typedef void (*ossl_X509_ATTRIBUTE_free_t)(ossl_X509_ATTRIBUTE *a);
typedef ossl_X509_ATTRIBUTE * (*ossl_d2i_X509_ATTRIBUTE_t)(ossl_X509_ATTRIBUTE **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_X509_ATTRIBUTE_t)(const ossl_X509_ATTRIBUTE *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_X509_ATTRIBUTE_it_t)();
typedef ossl_X509_ATTRIBUTE * (*ossl_X509_ATTRIBUTE_create_t)(int nid, int atrtype, void *value);
typedef ossl_X509_EXTENSION * (*ossl_X509_EXTENSION_new_t)();
typedef void (*ossl_X509_EXTENSION_free_t)(ossl_X509_EXTENSION *a);
typedef ossl_X509_EXTENSION * (*ossl_d2i_X509_EXTENSION_t)(ossl_X509_EXTENSION **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_X509_EXTENSION_t)(const ossl_X509_EXTENSION *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_X509_EXTENSION_it_t)();
typedef ossl_X509_EXTENSIONS * (*ossl_d2i_X509_EXTENSIONS_t)(ossl_X509_EXTENSIONS **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_X509_EXTENSIONS_t)(const ossl_X509_EXTENSIONS *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_X509_EXTENSIONS_it_t)();
typedef ossl_X509_NAME_ENTRY * (*ossl_X509_NAME_ENTRY_new_t)();
typedef void (*ossl_X509_NAME_ENTRY_free_t)(ossl_X509_NAME_ENTRY *a);
typedef ossl_X509_NAME_ENTRY * (*ossl_d2i_X509_NAME_ENTRY_t)(ossl_X509_NAME_ENTRY **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_X509_NAME_ENTRY_t)(const ossl_X509_NAME_ENTRY *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_X509_NAME_ENTRY_it_t)();
typedef ossl_X509_NAME * (*ossl_X509_NAME_new_t)();
typedef void (*ossl_X509_NAME_free_t)(ossl_X509_NAME *a);
typedef ossl_X509_NAME * (*ossl_d2i_X509_NAME_t)(ossl_X509_NAME **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_X509_NAME_t)(const ossl_X509_NAME *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_X509_NAME_it_t)();
typedef int (*ossl_X509_NAME_set_t)(ossl_X509_NAME **xn, const ossl_X509_NAME *name);
typedef ossl_X509_CINF * (*ossl_X509_CINF_new_t)();
typedef void (*ossl_X509_CINF_free_t)(ossl_X509_CINF *a);
typedef ossl_X509_CINF * (*ossl_d2i_X509_CINF_t)(ossl_X509_CINF **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_X509_CINF_t)(const ossl_X509_CINF *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_X509_CINF_it_t)();
typedef ossl_X509 * (*ossl_X509_new_t)();
typedef void (*ossl_X509_free_t)(ossl_X509 *a);
typedef ossl_X509 * (*ossl_d2i_X509_t)(ossl_X509 **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_X509_t)(const ossl_X509 *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_X509_it_t)();
typedef ossl_X509 * (*ossl_X509_new_ex_t)(ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef ossl_X509_CERT_AUX * (*ossl_X509_CERT_AUX_new_t)();
typedef void (*ossl_X509_CERT_AUX_free_t)(ossl_X509_CERT_AUX *a);
typedef ossl_X509_CERT_AUX * (*ossl_d2i_X509_CERT_AUX_t)(ossl_X509_CERT_AUX **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_X509_CERT_AUX_t)(const ossl_X509_CERT_AUX *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_X509_CERT_AUX_it_t)();
typedef int (*ossl_X509_set_ex_data_t)(ossl_X509 *r, int idx, void *arg);
typedef void * (*ossl_X509_get_ex_data_t)(const ossl_X509 *r, int idx);
typedef ossl_X509 * (*ossl_d2i_X509_AUX_t)(ossl_X509 **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_X509_AUX_t)(const ossl_X509 *a, unsigned char **out);
typedef int (*ossl_i2d_re_X509_tbs_t)(ossl_X509 *x, unsigned char **pp);
typedef int (*ossl_X509_SIG_INFO_get_t)(const ossl_X509_SIG_INFO *siginf, int *mdnid, int *pknid, int *secbits, uint32_t *flags);
typedef void (*ossl_X509_SIG_INFO_set_t)(ossl_X509_SIG_INFO *siginf, int mdnid, int pknid, int secbits, uint32_t flags);
typedef int (*ossl_X509_get_signature_info_t)(ossl_X509 *x, int *mdnid, int *pknid, int *secbits, uint32_t *flags);
typedef void (*ossl_X509_get0_signature_t)(const ossl_ASN1_BIT_STRING **psig, const ossl_X509_ALGOR **palg, const ossl_X509 *x);
typedef int (*ossl_X509_get_signature_nid_t)(const ossl_X509 *x);
typedef void (*ossl_X509_set0_distinguishing_id_t)(ossl_X509 *x, ossl_ASN1_OCTET_STRING *d_id);
typedef ossl_ASN1_OCTET_STRING * (*ossl_X509_get0_distinguishing_id_t)(ossl_X509 *x);
typedef void (*ossl_X509_REQ_set0_distinguishing_id_t)(ossl_X509_REQ *x, ossl_ASN1_OCTET_STRING *d_id);
typedef ossl_ASN1_OCTET_STRING * (*ossl_X509_REQ_get0_distinguishing_id_t)(ossl_X509_REQ *x);
typedef int (*ossl_X509_alias_set1_t)(ossl_X509 *x, const unsigned char *name, int len);
typedef int (*ossl_X509_keyid_set1_t)(ossl_X509 *x, const unsigned char *id, int len);
typedef unsigned char * (*ossl_X509_alias_get0_t)(ossl_X509 *x, int *len);
typedef unsigned char * (*ossl_X509_keyid_get0_t)(ossl_X509 *x, int *len);
typedef ossl_X509_REVOKED * (*ossl_X509_REVOKED_new_t)();
typedef void (*ossl_X509_REVOKED_free_t)(ossl_X509_REVOKED *a);
typedef ossl_X509_REVOKED * (*ossl_d2i_X509_REVOKED_t)(ossl_X509_REVOKED **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_X509_REVOKED_t)(const ossl_X509_REVOKED *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_X509_REVOKED_it_t)();
typedef ossl_X509_CRL_INFO * (*ossl_X509_CRL_INFO_new_t)();
typedef void (*ossl_X509_CRL_INFO_free_t)(ossl_X509_CRL_INFO *a);
typedef ossl_X509_CRL_INFO * (*ossl_d2i_X509_CRL_INFO_t)(ossl_X509_CRL_INFO **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_X509_CRL_INFO_t)(const ossl_X509_CRL_INFO *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_X509_CRL_INFO_it_t)();
typedef ossl_X509_CRL * (*ossl_X509_CRL_new_t)();
typedef void (*ossl_X509_CRL_free_t)(ossl_X509_CRL *a);
typedef ossl_X509_CRL * (*ossl_d2i_X509_CRL_t)(ossl_X509_CRL **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_X509_CRL_t)(const ossl_X509_CRL *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_X509_CRL_it_t)();
typedef ossl_X509_CRL * (*ossl_X509_CRL_new_ex_t)(ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_X509_CRL_add0_revoked_t)(ossl_X509_CRL *crl, ossl_X509_REVOKED *rev);
typedef int (*ossl_X509_CRL_get0_by_serial_t)(ossl_X509_CRL *crl, ossl_X509_REVOKED **ret, const ossl_ASN1_INTEGER *serial);
typedef int (*ossl_X509_CRL_get0_by_cert_t)(ossl_X509_CRL *crl, ossl_X509_REVOKED **ret, ossl_X509 *x);
typedef ossl_X509_PKEY * (*ossl_X509_PKEY_new_t)();
typedef void (*ossl_X509_PKEY_free_t)(ossl_X509_PKEY *a);
typedef ossl_NETSCAPE_SPKI * (*ossl_NETSCAPE_SPKI_new_t)();
typedef void (*ossl_NETSCAPE_SPKI_free_t)(ossl_NETSCAPE_SPKI *a);
typedef ossl_NETSCAPE_SPKI * (*ossl_d2i_NETSCAPE_SPKI_t)(ossl_NETSCAPE_SPKI **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_NETSCAPE_SPKI_t)(const ossl_NETSCAPE_SPKI *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_NETSCAPE_SPKI_it_t)();
typedef ossl_NETSCAPE_SPKAC * (*ossl_NETSCAPE_SPKAC_new_t)();
typedef void (*ossl_NETSCAPE_SPKAC_free_t)(ossl_NETSCAPE_SPKAC *a);
typedef ossl_NETSCAPE_SPKAC * (*ossl_d2i_NETSCAPE_SPKAC_t)(ossl_NETSCAPE_SPKAC **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_NETSCAPE_SPKAC_t)(const ossl_NETSCAPE_SPKAC *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_NETSCAPE_SPKAC_it_t)();
typedef ossl_NETSCAPE_CERT_SEQUENCE * (*ossl_NETSCAPE_CERT_SEQUENCE_new_t)();
typedef void (*ossl_NETSCAPE_CERT_SEQUENCE_free_t)(ossl_NETSCAPE_CERT_SEQUENCE *a);
typedef ossl_NETSCAPE_CERT_SEQUENCE * (*ossl_d2i_NETSCAPE_CERT_SEQUENCE_t)(ossl_NETSCAPE_CERT_SEQUENCE **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_NETSCAPE_CERT_SEQUENCE_t)(const ossl_NETSCAPE_CERT_SEQUENCE *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_NETSCAPE_CERT_SEQUENCE_it_t)();
typedef ossl_X509_INFO * (*ossl_X509_INFO_new_t)();
typedef void (*ossl_X509_INFO_free_t)(ossl_X509_INFO *a);
typedef char * (*ossl_X509_NAME_oneline_t)(const ossl_X509_NAME *a, char *buf, int size);
typedef int (*ossl_ASN1_verify_t)(ossl_i2d_of_void *i2d, ossl_X509_ALGOR *algor1, ossl_ASN1_BIT_STRING *signature, char *data, ossl_EVP_PKEY *pkey);
typedef int (*ossl_ASN1_digest_t)(ossl_i2d_of_void *i2d, const ossl_EVP_MD *type, char *data, unsigned char *md, unsigned int *len);
typedef int (*ossl_ASN1_sign_t)(ossl_i2d_of_void *i2d, ossl_X509_ALGOR *algor1, ossl_X509_ALGOR *algor2, ossl_ASN1_BIT_STRING *signature, char *data, ossl_EVP_PKEY *pkey, const ossl_EVP_MD *type);
typedef int (*ossl_ASN1_item_digest_t)(const ossl_ASN1_ITEM *it, const ossl_EVP_MD *type, void *data, unsigned char *md, unsigned int *len);
typedef int (*ossl_ASN1_item_verify_t)(const ossl_ASN1_ITEM *it, const ossl_X509_ALGOR *alg, const ossl_ASN1_BIT_STRING *signature, const void *data, ossl_EVP_PKEY *pkey);
typedef int (*ossl_ASN1_item_verify_ctx_t)(const ossl_ASN1_ITEM *it, const ossl_X509_ALGOR *alg, const ossl_ASN1_BIT_STRING *signature, const void *data, ossl_EVP_MD_CTX *ctx);
typedef int (*ossl_ASN1_item_sign_t)(const ossl_ASN1_ITEM *it, ossl_X509_ALGOR *algor1, ossl_X509_ALGOR *algor2, ossl_ASN1_BIT_STRING *signature, const void *data, ossl_EVP_PKEY *pkey, const ossl_EVP_MD *md);
typedef int (*ossl_ASN1_item_sign_ctx_t)(const ossl_ASN1_ITEM *it, ossl_X509_ALGOR *algor1, ossl_X509_ALGOR *algor2, ossl_ASN1_BIT_STRING *signature, const void *data, ossl_EVP_MD_CTX *ctx);
typedef long (*ossl_X509_get_version_t)(const ossl_X509 *x);
typedef int (*ossl_X509_set_version_t)(ossl_X509 *x, long version);
typedef int (*ossl_X509_set_serialNumber_t)(ossl_X509 *x, ossl_ASN1_INTEGER *serial);
typedef ossl_ASN1_INTEGER * (*ossl_X509_get_serialNumber_t)(ossl_X509 *x);
typedef const ossl_ASN1_INTEGER * (*ossl_X509_get0_serialNumber_t)(const ossl_X509 *x);
typedef int (*ossl_X509_set_issuer_name_t)(ossl_X509 *x, const ossl_X509_NAME *name);
typedef ossl_X509_NAME * (*ossl_X509_get_issuer_name_t)(const ossl_X509 *a);
typedef int (*ossl_X509_set_subject_name_t)(ossl_X509 *x, const ossl_X509_NAME *name);
typedef ossl_X509_NAME * (*ossl_X509_get_subject_name_t)(const ossl_X509 *a);
typedef const ossl_ASN1_TIME * (*ossl_X509_get0_notBefore_t)(const ossl_X509 *x);
typedef ossl_ASN1_TIME * (*ossl_X509_getm_notBefore_t)(const ossl_X509 *x);
typedef int (*ossl_X509_set1_notBefore_t)(ossl_X509 *x, const ossl_ASN1_TIME *tm);
typedef const ossl_ASN1_TIME * (*ossl_X509_get0_notAfter_t)(const ossl_X509 *x);
typedef ossl_ASN1_TIME * (*ossl_X509_getm_notAfter_t)(const ossl_X509 *x);
typedef int (*ossl_X509_set1_notAfter_t)(ossl_X509 *x, const ossl_ASN1_TIME *tm);
typedef int (*ossl_X509_set_pubkey_t)(ossl_X509 *x, ossl_EVP_PKEY *pkey);
typedef int (*ossl_X509_up_ref_t)(ossl_X509 *x);
typedef int (*ossl_X509_get_signature_type_t)(const ossl_X509 *x);
typedef ossl_X509_PUBKEY * (*ossl_X509_get_X509_PUBKEY_t)(const ossl_X509 *x);
typedef const ossl_STACK_OF(ossl_X509_EXTENSION) * (*ossl_X509_get0_extensions_t)(const ossl_X509 *x);
typedef void (*ossl_X509_get0_uids_t)(const ossl_X509 *x, const ossl_ASN1_BIT_STRING **piuid, const ossl_ASN1_BIT_STRING **psuid);
typedef const ossl_X509_ALGOR * (*ossl_X509_get0_tbs_sigalg_t)(const ossl_X509 *x);
typedef ossl_EVP_PKEY * (*ossl_X509_get0_pubkey_t)(const ossl_X509 *x);
typedef ossl_EVP_PKEY * (*ossl_X509_get_pubkey_t)(ossl_X509 *x);
typedef ossl_ASN1_BIT_STRING * (*ossl_X509_get0_pubkey_bitstr_t)(const ossl_X509 *x);
typedef long (*ossl_X509_REQ_get_version_t)(const ossl_X509_REQ *req);
typedef int (*ossl_X509_REQ_set_version_t)(ossl_X509_REQ *x, long version);
typedef ossl_X509_NAME * (*ossl_X509_REQ_get_subject_name_t)(const ossl_X509_REQ *req);
typedef int (*ossl_X509_REQ_set_subject_name_t)(ossl_X509_REQ *req, const ossl_X509_NAME *name);
typedef void (*ossl_X509_REQ_get0_signature_t)(const ossl_X509_REQ *req, const ossl_ASN1_BIT_STRING **psig, const ossl_X509_ALGOR **palg);
typedef void (*ossl_X509_REQ_set0_signature_t)(ossl_X509_REQ *req, ossl_ASN1_BIT_STRING *psig);
typedef int (*ossl_X509_REQ_set1_signature_algo_t)(ossl_X509_REQ *req, ossl_X509_ALGOR *palg);
typedef int (*ossl_X509_REQ_get_signature_nid_t)(const ossl_X509_REQ *req);
typedef int (*ossl_i2d_re_X509_REQ_tbs_t)(ossl_X509_REQ *req, unsigned char **pp);
typedef int (*ossl_X509_REQ_set_pubkey_t)(ossl_X509_REQ *x, ossl_EVP_PKEY *pkey);
typedef ossl_EVP_PKEY * (*ossl_X509_REQ_get_pubkey_t)(ossl_X509_REQ *req);
typedef ossl_EVP_PKEY * (*ossl_X509_REQ_get0_pubkey_t)(ossl_X509_REQ *req);
typedef ossl_X509_PUBKEY * (*ossl_X509_REQ_get_X509_PUBKEY_t)(ossl_X509_REQ *req);
typedef int (*ossl_X509_REQ_extension_nid_t)(int nid);
typedef int * (*ossl_X509_REQ_get_extension_nids_t)();
typedef void (*ossl_X509_REQ_set_extension_nids_t)(int *nids);
typedef ossl_STACK_OF(ossl_X509_EXTENSION) * (*ossl_X509_REQ_get_extensions_t)(ossl_X509_REQ *req);
typedef int (*ossl_X509_REQ_add_extensions_nid_t)(ossl_X509_REQ *req, const ossl_STACK_OF(ossl_X509_EXTENSION) *exts, int nid);
typedef int (*ossl_X509_REQ_add_extensions_t)(ossl_X509_REQ *req, const ossl_STACK_OF(ossl_X509_EXTENSION) *ext);
typedef int (*ossl_X509_REQ_get_attr_count_t)(const ossl_X509_REQ *req);
typedef int (*ossl_X509_REQ_get_attr_by_NID_t)(const ossl_X509_REQ *req, int nid, int lastpos);
typedef int (*ossl_X509_REQ_get_attr_by_OBJ_t)(const ossl_X509_REQ *req, const ossl_ASN1_OBJECT *obj, int lastpos);
typedef ossl_X509_ATTRIBUTE * (*ossl_X509_REQ_get_attr_t)(const ossl_X509_REQ *req, int loc);
typedef ossl_X509_ATTRIBUTE * (*ossl_X509_REQ_delete_attr_t)(ossl_X509_REQ *req, int loc);
typedef int (*ossl_X509_REQ_add1_attr_t)(ossl_X509_REQ *req, ossl_X509_ATTRIBUTE *attr);
typedef int (*ossl_X509_REQ_add1_attr_by_OBJ_t)(ossl_X509_REQ *req, const ossl_ASN1_OBJECT *obj, int type, const unsigned char *bytes, int len);
typedef int (*ossl_X509_REQ_add1_attr_by_NID_t)(ossl_X509_REQ *req, int nid, int type, const unsigned char *bytes, int len);
typedef int (*ossl_X509_REQ_add1_attr_by_txt_t)(ossl_X509_REQ *req, const char *attrname, int type, const unsigned char *bytes, int len);
typedef int (*ossl_X509_CRL_set_version_t)(ossl_X509_CRL *x, long version);
typedef int (*ossl_X509_CRL_set_issuer_name_t)(ossl_X509_CRL *x, const ossl_X509_NAME *name);
typedef int (*ossl_X509_CRL_set1_lastUpdate_t)(ossl_X509_CRL *x, const ossl_ASN1_TIME *tm);
typedef int (*ossl_X509_CRL_set1_nextUpdate_t)(ossl_X509_CRL *x, const ossl_ASN1_TIME *tm);
typedef int (*ossl_X509_CRL_sort_t)(ossl_X509_CRL *crl);
typedef int (*ossl_X509_CRL_up_ref_t)(ossl_X509_CRL *crl);
typedef long (*ossl_X509_CRL_get_version_t)(const ossl_X509_CRL *crl);
typedef const ossl_ASN1_TIME * (*ossl_X509_CRL_get0_lastUpdate_t)(const ossl_X509_CRL *crl);
typedef const ossl_ASN1_TIME * (*ossl_X509_CRL_get0_nextUpdate_t)(const ossl_X509_CRL *crl);
typedef ossl_ASN1_TIME * (*ossl_X509_CRL_get_lastUpdate_t)(ossl_X509_CRL *crl);
typedef ossl_ASN1_TIME * (*ossl_X509_CRL_get_nextUpdate_t)(ossl_X509_CRL *crl);
typedef ossl_X509_NAME * (*ossl_X509_CRL_get_issuer_t)(const ossl_X509_CRL *crl);
typedef const ossl_STACK_OF(ossl_X509_EXTENSION) * (*ossl_X509_CRL_get0_extensions_t)(const ossl_X509_CRL *crl);
typedef ossl_STACK_OF(ossl_X509_REVOKED) * (*ossl_X509_CRL_get_REVOKED_t)(ossl_X509_CRL *crl);
typedef void (*ossl_X509_CRL_get0_signature_t)(const ossl_X509_CRL *crl, const ossl_ASN1_BIT_STRING **psig, const ossl_X509_ALGOR **palg);
typedef int (*ossl_X509_CRL_get_signature_nid_t)(const ossl_X509_CRL *crl);
typedef int (*ossl_i2d_re_X509_CRL_tbs_t)(ossl_X509_CRL *req, unsigned char **pp);
typedef const ossl_ASN1_INTEGER * (*ossl_X509_REVOKED_get0_serialNumber_t)(const ossl_X509_REVOKED *x);
typedef int (*ossl_X509_REVOKED_set_serialNumber_t)(ossl_X509_REVOKED *x, ossl_ASN1_INTEGER *serial);
typedef const ossl_ASN1_TIME * (*ossl_X509_REVOKED_get0_revocationDate_t)(const ossl_X509_REVOKED *x);
typedef int (*ossl_X509_REVOKED_set_revocationDate_t)(ossl_X509_REVOKED *r, ossl_ASN1_TIME *tm);
typedef const ossl_STACK_OF(ossl_X509_EXTENSION) * (*ossl_X509_REVOKED_get0_extensions_t)(const ossl_X509_REVOKED *r);
typedef ossl_X509_CRL * (*ossl_X509_CRL_diff_t)(ossl_X509_CRL *base, ossl_X509_CRL *newer, ossl_EVP_PKEY *skey, const ossl_EVP_MD *md, unsigned int flags);
typedef int (*ossl_X509_REQ_check_private_key_t)(ossl_X509_REQ *x509, ossl_EVP_PKEY *pkey);
typedef int (*ossl_X509_check_private_key_t)(const ossl_X509 *x509, const ossl_EVP_PKEY *pkey);
typedef int (*ossl_X509_chain_check_suiteb_t)(int *perror_depth, ossl_X509 *x, ossl_STACK_OF(ossl_X509) *chain, unsigned long flags);
typedef int (*ossl_X509_CRL_check_suiteb_t)(ossl_X509_CRL *crl, ossl_EVP_PKEY *pk, unsigned long flags);
typedef ossl_STACK_OF(ossl_X509) * (*ossl_X509_chain_up_ref_t)(ossl_STACK_OF(ossl_X509) *chain);
typedef int (*ossl_X509_issuer_and_serial_cmp_t)(const ossl_X509 *a, const ossl_X509 *b);
typedef unsigned long (*ossl_X509_issuer_and_serial_hash_t)(ossl_X509 *a);
typedef int (*ossl_X509_issuer_name_cmp_t)(const ossl_X509 *a, const ossl_X509 *b);
typedef unsigned long (*ossl_X509_issuer_name_hash_t)(ossl_X509 *a);
typedef int (*ossl_X509_subject_name_cmp_t)(const ossl_X509 *a, const ossl_X509 *b);
typedef unsigned long (*ossl_X509_subject_name_hash_t)(ossl_X509 *x);
typedef unsigned long (*ossl_X509_issuer_name_hash_old_t)(ossl_X509 *a);
typedef unsigned long (*ossl_X509_subject_name_hash_old_t)(ossl_X509 *x);
typedef int (*ossl_X509_add_cert_t)(ossl_STACK_OF(ossl_X509) *sk, ossl_X509 *cert, int flags);
typedef int (*ossl_X509_add_certs_t)(ossl_STACK_OF(ossl_X509) *sk, ossl_STACK_OF(ossl_X509) *certs, int flags);
typedef int (*ossl_X509_cmp_t)(const ossl_X509 *a, const ossl_X509 *b);
typedef int (*ossl_X509_NAME_cmp_t)(const ossl_X509_NAME *a, const ossl_X509_NAME *b);
typedef int (*ossl_X509_certificate_type_t)(const ossl_X509 *x, const ossl_EVP_PKEY *pubkey);
typedef unsigned long (*ossl_X509_NAME_hash_ex_t)(const ossl_X509_NAME *x, ossl_OSSL_LIB_CTX *libctx, const char *propq, int *ok);
typedef unsigned long (*ossl_X509_NAME_hash_old_t)(const ossl_X509_NAME *x);
typedef int (*ossl_X509_CRL_cmp_t)(const ossl_X509_CRL *a, const ossl_X509_CRL *b);
typedef int (*ossl_X509_CRL_match_t)(const ossl_X509_CRL *a, const ossl_X509_CRL *b);
typedef int (*ossl_X509_aux_print_t)(ossl_BIO *out, ossl_X509 *x, int indent);
typedef int (*ossl_X509_print_ex_fp_t)(FILE *bp, ossl_X509 *x, unsigned long nmflag, unsigned long cflag);
typedef int (*ossl_X509_print_fp_t)(FILE *bp, ossl_X509 *x);
typedef int (*ossl_X509_CRL_print_fp_t)(FILE *bp, ossl_X509_CRL *x);
typedef int (*ossl_X509_REQ_print_fp_t)(FILE *bp, ossl_X509_REQ *req);
typedef int (*ossl_X509_NAME_print_ex_fp_t)(FILE *fp, const ossl_X509_NAME *nm, int indent, unsigned long flags);
typedef int (*ossl_X509_NAME_print_t)(ossl_BIO *bp, const ossl_X509_NAME *name, int obase);
typedef int (*ossl_X509_NAME_print_ex_t)(ossl_BIO *out, const ossl_X509_NAME *nm, int indent, unsigned long flags);
typedef int (*ossl_X509_print_ex_t)(ossl_BIO *bp, ossl_X509 *x, unsigned long nmflag, unsigned long cflag);
typedef int (*ossl_X509_print_t)(ossl_BIO *bp, ossl_X509 *x);
typedef int (*ossl_X509_ocspid_print_t)(ossl_BIO *bp, ossl_X509 *x);
typedef int (*ossl_X509_CRL_print_ex_t)(ossl_BIO *out, ossl_X509_CRL *x, unsigned long nmflag);
typedef int (*ossl_X509_CRL_print_t)(ossl_BIO *bp, ossl_X509_CRL *x);
typedef int (*ossl_X509_REQ_print_ex_t)(ossl_BIO *bp, ossl_X509_REQ *x, unsigned long nmflag, unsigned long cflag);
typedef int (*ossl_X509_REQ_print_t)(ossl_BIO *bp, ossl_X509_REQ *req);
typedef int (*ossl_X509_NAME_entry_count_t)(const ossl_X509_NAME *name);
typedef int (*ossl_X509_NAME_get_text_by_NID_t)(const ossl_X509_NAME *name, int nid, char *buf, int len);
typedef int (*ossl_X509_NAME_get_text_by_OBJ_t)(const ossl_X509_NAME *name, const ossl_ASN1_OBJECT *obj, char *buf, int len);
typedef int (*ossl_X509_NAME_get_index_by_NID_t)(const ossl_X509_NAME *name, int nid, int lastpos);
typedef int (*ossl_X509_NAME_get_index_by_OBJ_t)(const ossl_X509_NAME *name, const ossl_ASN1_OBJECT *obj, int lastpos);
typedef ossl_X509_NAME_ENTRY * (*ossl_X509_NAME_get_entry_t)(const ossl_X509_NAME *name, int loc);
typedef ossl_X509_NAME_ENTRY * (*ossl_X509_NAME_delete_entry_t)(ossl_X509_NAME *name, int loc);
typedef int (*ossl_X509_NAME_add_entry_t)(ossl_X509_NAME *name, const ossl_X509_NAME_ENTRY *ne, int loc, int set);
typedef int (*ossl_X509_NAME_add_entry_by_OBJ_t)(ossl_X509_NAME *name, const ossl_ASN1_OBJECT *obj, int type, const unsigned char *bytes, int len, int loc, int set);
typedef int (*ossl_X509_NAME_add_entry_by_NID_t)(ossl_X509_NAME *name, int nid, int type, const unsigned char *bytes, int len, int loc, int set);
typedef ossl_X509_NAME_ENTRY * (*ossl_X509_NAME_ENTRY_create_by_txt_t)(ossl_X509_NAME_ENTRY **ne, const char *field, int type, const unsigned char *bytes, int len);
typedef ossl_X509_NAME_ENTRY * (*ossl_X509_NAME_ENTRY_create_by_NID_t)(ossl_X509_NAME_ENTRY **ne, int nid, int type, const unsigned char *bytes, int len);
typedef int (*ossl_X509_NAME_add_entry_by_txt_t)(ossl_X509_NAME *name, const char *field, int type, const unsigned char *bytes, int len, int loc, int set);
typedef ossl_X509_NAME_ENTRY * (*ossl_X509_NAME_ENTRY_create_by_OBJ_t)(ossl_X509_NAME_ENTRY **ne, const ossl_ASN1_OBJECT *obj, int type, const unsigned char *bytes, int len);
typedef int (*ossl_X509_NAME_ENTRY_set_object_t)(ossl_X509_NAME_ENTRY *ne, const ossl_ASN1_OBJECT *obj);
typedef int (*ossl_X509_NAME_ENTRY_set_data_t)(ossl_X509_NAME_ENTRY *ne, int type, const unsigned char *bytes, int len);
typedef ossl_ASN1_OBJECT * (*ossl_X509_NAME_ENTRY_get_object_t)(const ossl_X509_NAME_ENTRY *ne);
typedef ossl_ASN1_STRING * (*ossl_X509_NAME_ENTRY_get_data_t)(const ossl_X509_NAME_ENTRY *ne);
typedef int (*ossl_X509_NAME_ENTRY_set_t)(const ossl_X509_NAME_ENTRY *ne);
typedef int (*ossl_X509_NAME_get0_der_t)(const ossl_X509_NAME *nm, const unsigned char **pder, size_t *pderlen);
typedef int (*ossl_X509v3_get_ext_count_t)(const ossl_STACK_OF(ossl_X509_EXTENSION) *x);
typedef int (*ossl_X509v3_get_ext_by_NID_t)(const ossl_STACK_OF(ossl_X509_EXTENSION) *x, int nid, int lastpos);
typedef int (*ossl_X509v3_get_ext_by_OBJ_t)(const ossl_STACK_OF(ossl_X509_EXTENSION) *x, const ossl_ASN1_OBJECT *obj, int lastpos);
typedef int (*ossl_X509v3_get_ext_by_critical_t)(const ossl_STACK_OF(ossl_X509_EXTENSION) *x, int crit, int lastpos);
typedef ossl_X509_EXTENSION * (*ossl_X509v3_get_ext_t)(const ossl_STACK_OF(ossl_X509_EXTENSION) *x, int loc);
typedef ossl_X509_EXTENSION * (*ossl_X509v3_delete_ext_t)(ossl_STACK_OF(ossl_X509_EXTENSION) *x, int loc);
typedef ossl_STACK_OF(ossl_X509_EXTENSION) * (*ossl_X509v3_add_ext_t)(ossl_STACK_OF(ossl_X509_EXTENSION) **x, ossl_X509_EXTENSION *ex, int loc);
typedef int (*ossl_X509_get_ext_count_t)(const ossl_X509 *x);
typedef int (*ossl_X509_get_ext_by_NID_t)(const ossl_X509 *x, int nid, int lastpos);
typedef int (*ossl_X509_get_ext_by_OBJ_t)(const ossl_X509 *x, const ossl_ASN1_OBJECT *obj, int lastpos);
typedef int (*ossl_X509_get_ext_by_critical_t)(const ossl_X509 *x, int crit, int lastpos);
typedef ossl_X509_EXTENSION * (*ossl_X509_get_ext_t)(const ossl_X509 *x, int loc);
typedef ossl_X509_EXTENSION * (*ossl_X509_delete_ext_t)(ossl_X509 *x, int loc);
typedef int (*ossl_X509_add_ext_t)(ossl_X509 *x, ossl_X509_EXTENSION *ex, int loc);
typedef void * (*ossl_X509_get_ext_d2i_t)(const ossl_X509 *x, int nid, int *crit, int *idx);
typedef int (*ossl_X509_add1_ext_i2d_t)(ossl_X509 *x, int nid, void *value, int crit, unsigned long flags);
typedef int (*ossl_X509_CRL_get_ext_count_t)(const ossl_X509_CRL *x);
typedef int (*ossl_X509_CRL_get_ext_by_NID_t)(const ossl_X509_CRL *x, int nid, int lastpos);
typedef int (*ossl_X509_CRL_get_ext_by_OBJ_t)(const ossl_X509_CRL *x, const ossl_ASN1_OBJECT *obj, int lastpos);
typedef int (*ossl_X509_CRL_get_ext_by_critical_t)(const ossl_X509_CRL *x, int crit, int lastpos);
typedef ossl_X509_EXTENSION * (*ossl_X509_CRL_get_ext_t)(const ossl_X509_CRL *x, int loc);
typedef ossl_X509_EXTENSION * (*ossl_X509_CRL_delete_ext_t)(ossl_X509_CRL *x, int loc);
typedef int (*ossl_X509_CRL_add_ext_t)(ossl_X509_CRL *x, ossl_X509_EXTENSION *ex, int loc);
typedef void * (*ossl_X509_CRL_get_ext_d2i_t)(const ossl_X509_CRL *x, int nid, int *crit, int *idx);
typedef int (*ossl_X509_CRL_add1_ext_i2d_t)(ossl_X509_CRL *x, int nid, void *value, int crit, unsigned long flags);
typedef int (*ossl_X509_REVOKED_get_ext_count_t)(const ossl_X509_REVOKED *x);
typedef int (*ossl_X509_REVOKED_get_ext_by_NID_t)(const ossl_X509_REVOKED *x, int nid, int lastpos);
typedef int (*ossl_X509_REVOKED_get_ext_by_OBJ_t)(const ossl_X509_REVOKED *x, const ossl_ASN1_OBJECT *obj, int lastpos);
typedef int (*ossl_X509_REVOKED_get_ext_by_critical_t)(const ossl_X509_REVOKED *x, int crit, int lastpos);
typedef ossl_X509_EXTENSION * (*ossl_X509_REVOKED_get_ext_t)(const ossl_X509_REVOKED *x, int loc);
typedef ossl_X509_EXTENSION * (*ossl_X509_REVOKED_delete_ext_t)(ossl_X509_REVOKED *x, int loc);
typedef int (*ossl_X509_REVOKED_add_ext_t)(ossl_X509_REVOKED *x, ossl_X509_EXTENSION *ex, int loc);
typedef void * (*ossl_X509_REVOKED_get_ext_d2i_t)(const ossl_X509_REVOKED *x, int nid, int *crit, int *idx);
typedef int (*ossl_X509_REVOKED_add1_ext_i2d_t)(ossl_X509_REVOKED *x, int nid, void *value, int crit, unsigned long flags);
typedef ossl_X509_EXTENSION * (*ossl_X509_EXTENSION_create_by_NID_t)(ossl_X509_EXTENSION **ex, int nid, int crit, ossl_ASN1_OCTET_STRING *data);
typedef ossl_X509_EXTENSION * (*ossl_X509_EXTENSION_create_by_OBJ_t)(ossl_X509_EXTENSION **ex, const ossl_ASN1_OBJECT *obj, int crit, ossl_ASN1_OCTET_STRING *data);
typedef int (*ossl_X509_EXTENSION_set_object_t)(ossl_X509_EXTENSION *ex, const ossl_ASN1_OBJECT *obj);
typedef int (*ossl_X509_EXTENSION_set_critical_t)(ossl_X509_EXTENSION *ex, int crit);
typedef int (*ossl_X509_EXTENSION_set_data_t)(ossl_X509_EXTENSION *ex, ossl_ASN1_OCTET_STRING *data);
typedef ossl_ASN1_OBJECT * (*ossl_X509_EXTENSION_get_object_t)(ossl_X509_EXTENSION *ex);
typedef ossl_ASN1_OCTET_STRING * (*ossl_X509_EXTENSION_get_data_t)(ossl_X509_EXTENSION *ne);
typedef int (*ossl_X509_EXTENSION_get_critical_t)(const ossl_X509_EXTENSION *ex);
typedef int (*ossl_X509at_get_attr_count_t)(const ossl_STACK_OF(ossl_X509_ATTRIBUTE) *x);
typedef int (*ossl_X509at_get_attr_by_NID_t)(const ossl_STACK_OF(ossl_X509_ATTRIBUTE) *x, int nid, int lastpos);
typedef int (*ossl_X509at_get_attr_by_OBJ_t)(const ossl_STACK_OF(ossl_X509_ATTRIBUTE) *sk, const ossl_ASN1_OBJECT *obj, int lastpos);
typedef ossl_X509_ATTRIBUTE * (*ossl_X509at_get_attr_t)(const ossl_STACK_OF(ossl_X509_ATTRIBUTE) *x, int loc);
typedef ossl_X509_ATTRIBUTE * (*ossl_X509at_delete_attr_t)(ossl_STACK_OF(ossl_X509_ATTRIBUTE) *x, int loc);
typedef ossl_STACK_OF(ossl_X509_ATTRIBUTE) * (*ossl_X509at_add1_attr_t)(ossl_STACK_OF(ossl_X509_ATTRIBUTE) **x, ossl_X509_ATTRIBUTE *attr);
typedef ossl_STACK_OF(ossl_X509_ATTRIBUTE) * (*ossl_X509at_add1_attr_by_OBJ_t)(ossl_STACK_OF(ossl_X509_ATTRIBUTE) **x, const ossl_ASN1_OBJECT *obj, int type, const unsigned char *bytes, int len);
typedef ossl_STACK_OF(ossl_X509_ATTRIBUTE) * (*ossl_X509at_add1_attr_by_NID_t)(ossl_STACK_OF(ossl_X509_ATTRIBUTE) **x, int nid, int type, const unsigned char *bytes, int len);
typedef ossl_STACK_OF(ossl_X509_ATTRIBUTE) * (*ossl_X509at_add1_attr_by_txt_t)(ossl_STACK_OF(ossl_X509_ATTRIBUTE) **x, const char *attrname, int type, const unsigned char *bytes, int len);
typedef void * (*ossl_X509at_get0_data_by_OBJ_t)(const ossl_STACK_OF(ossl_X509_ATTRIBUTE) *x, const ossl_ASN1_OBJECT *obj, int lastpos, int type);
typedef ossl_X509_ATTRIBUTE * (*ossl_X509_ATTRIBUTE_create_by_NID_t)(ossl_X509_ATTRIBUTE **attr, int nid, int atrtype, const void *data, int len);
typedef ossl_X509_ATTRIBUTE * (*ossl_X509_ATTRIBUTE_create_by_OBJ_t)(ossl_X509_ATTRIBUTE **attr, const ossl_ASN1_OBJECT *obj, int atrtype, const void *data, int len);
typedef ossl_X509_ATTRIBUTE * (*ossl_X509_ATTRIBUTE_create_by_txt_t)(ossl_X509_ATTRIBUTE **attr, const char *atrname, int type, const unsigned char *bytes, int len);
typedef int (*ossl_X509_ATTRIBUTE_set1_object_t)(ossl_X509_ATTRIBUTE *attr, const ossl_ASN1_OBJECT *obj);
typedef int (*ossl_X509_ATTRIBUTE_set1_data_t)(ossl_X509_ATTRIBUTE *attr, int attrtype, const void *data, int len);
typedef void * (*ossl_X509_ATTRIBUTE_get0_data_t)(ossl_X509_ATTRIBUTE *attr, int idx, int atrtype, void *data);
typedef int (*ossl_X509_ATTRIBUTE_count_t)(const ossl_X509_ATTRIBUTE *attr);
typedef ossl_ASN1_OBJECT * (*ossl_X509_ATTRIBUTE_get0_object_t)(ossl_X509_ATTRIBUTE *attr);
typedef ossl_ASN1_TYPE * (*ossl_X509_ATTRIBUTE_get0_type_t)(ossl_X509_ATTRIBUTE *attr, int idx);
typedef int (*ossl_EVP_PKEY_get_attr_count_t)(const ossl_EVP_PKEY *key);
typedef int (*ossl_EVP_PKEY_get_attr_by_NID_t)(const ossl_EVP_PKEY *key, int nid, int lastpos);
typedef int (*ossl_EVP_PKEY_get_attr_by_OBJ_t)(const ossl_EVP_PKEY *key, const ossl_ASN1_OBJECT *obj, int lastpos);
typedef ossl_X509_ATTRIBUTE * (*ossl_EVP_PKEY_get_attr_t)(const ossl_EVP_PKEY *key, int loc);
typedef ossl_X509_ATTRIBUTE * (*ossl_EVP_PKEY_delete_attr_t)(ossl_EVP_PKEY *key, int loc);
typedef int (*ossl_EVP_PKEY_add1_attr_t)(ossl_EVP_PKEY *key, ossl_X509_ATTRIBUTE *attr);
typedef int (*ossl_EVP_PKEY_add1_attr_by_OBJ_t)(ossl_EVP_PKEY *key, const ossl_ASN1_OBJECT *obj, int type, const unsigned char *bytes, int len);
typedef int (*ossl_EVP_PKEY_add1_attr_by_NID_t)(ossl_EVP_PKEY *key, int nid, int type, const unsigned char *bytes, int len);
typedef int (*ossl_EVP_PKEY_add1_attr_by_txt_t)(ossl_EVP_PKEY *key, const char *attrname, int type, const unsigned char *bytes, int len);
typedef ossl_X509 * (*ossl_X509_find_by_issuer_and_serial_t)(ossl_STACK_OF(ossl_X509) *sk, const ossl_X509_NAME *name, const ossl_ASN1_INTEGER *serial);
typedef ossl_X509 * (*ossl_X509_find_by_subject_t)(ossl_STACK_OF(ossl_X509) *sk, const ossl_X509_NAME *name);
typedef ossl_PBEPARAM * (*ossl_PBEPARAM_new_t)();
typedef void (*ossl_PBEPARAM_free_t)(ossl_PBEPARAM *a);
typedef ossl_PBEPARAM * (*ossl_d2i_PBEPARAM_t)(ossl_PBEPARAM **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_PBEPARAM_t)(const ossl_PBEPARAM *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_PBEPARAM_it_t)();
typedef ossl_PBE2PARAM * (*ossl_PBE2PARAM_new_t)();
typedef void (*ossl_PBE2PARAM_free_t)(ossl_PBE2PARAM *a);
typedef ossl_PBE2PARAM * (*ossl_d2i_PBE2PARAM_t)(ossl_PBE2PARAM **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_PBE2PARAM_t)(const ossl_PBE2PARAM *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_PBE2PARAM_it_t)();
typedef ossl_PBKDF2PARAM * (*ossl_PBKDF2PARAM_new_t)();
typedef void (*ossl_PBKDF2PARAM_free_t)(ossl_PBKDF2PARAM *a);
typedef ossl_PBKDF2PARAM * (*ossl_d2i_PBKDF2PARAM_t)(ossl_PBKDF2PARAM **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_PBKDF2PARAM_t)(const ossl_PBKDF2PARAM *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_PBKDF2PARAM_it_t)();
typedef ossl_SCRYPT_PARAMS * (*ossl_SCRYPT_PARAMS_new_t)();
typedef void (*ossl_SCRYPT_PARAMS_free_t)(ossl_SCRYPT_PARAMS *a);
typedef ossl_SCRYPT_PARAMS * (*ossl_d2i_SCRYPT_PARAMS_t)(ossl_SCRYPT_PARAMS **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_SCRYPT_PARAMS_t)(const ossl_SCRYPT_PARAMS *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_SCRYPT_PARAMS_it_t)();
typedef int (*ossl_PKCS5_pbe_set0_algor_t)(ossl_X509_ALGOR *algor, int alg, int iter, const unsigned char *salt, int saltlen);
typedef int (*ossl_PKCS5_pbe_set0_algor_ex_t)(ossl_X509_ALGOR *algor, int alg, int iter, const unsigned char *salt, int saltlen, ossl_OSSL_LIB_CTX *libctx);
typedef ossl_X509_ALGOR * (*ossl_PKCS5_pbe_set_t)(int alg, int iter, const unsigned char *salt, int saltlen);
typedef ossl_X509_ALGOR * (*ossl_PKCS5_pbe_set_ex_t)(int alg, int iter, const unsigned char *salt, int saltlen, ossl_OSSL_LIB_CTX *libctx);
typedef ossl_X509_ALGOR * (*ossl_PKCS5_pbe2_set_t)(const ossl_EVP_CIPHER *cipher, int iter, unsigned char *salt, int saltlen);
typedef ossl_X509_ALGOR * (*ossl_PKCS5_pbe2_set_iv_t)(const ossl_EVP_CIPHER *cipher, int iter, unsigned char *salt, int saltlen, unsigned char *aiv, int prf_nid);
typedef ossl_X509_ALGOR * (*ossl_PKCS5_pbe2_set_iv_ex_t)(const ossl_EVP_CIPHER *cipher, int iter, unsigned char *salt, int saltlen, unsigned char *aiv, int prf_nid, ossl_OSSL_LIB_CTX *libctx);
typedef ossl_X509_ALGOR * (*ossl_PKCS5_pbe2_set_scrypt_t)(const ossl_EVP_CIPHER *cipher, const unsigned char *salt, int saltlen, unsigned char *aiv, uint64_t N, uint64_t r, uint64_t p);
typedef ossl_X509_ALGOR * (*ossl_PKCS5_pbkdf2_set_t)(int iter, unsigned char *salt, int saltlen, int prf_nid, int keylen);
typedef ossl_X509_ALGOR * (*ossl_PKCS5_pbkdf2_set_ex_t)(int iter, unsigned char *salt, int saltlen, int prf_nid, int keylen, ossl_OSSL_LIB_CTX *libctx);
typedef ossl_PKCS8_PRIV_KEY_INFO * (*ossl_PKCS8_PRIV_KEY_INFO_new_t)();
typedef void (*ossl_PKCS8_PRIV_KEY_INFO_free_t)(ossl_PKCS8_PRIV_KEY_INFO *a);
typedef ossl_PKCS8_PRIV_KEY_INFO * (*ossl_d2i_PKCS8_PRIV_KEY_INFO_t)(ossl_PKCS8_PRIV_KEY_INFO **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_PKCS8_PRIV_KEY_INFO_t)(const ossl_PKCS8_PRIV_KEY_INFO *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_PKCS8_PRIV_KEY_INFO_it_t)();
typedef ossl_EVP_PKEY * (*ossl_EVP_PKCS82PKEY_t)(const ossl_PKCS8_PRIV_KEY_INFO *p8);
typedef ossl_EVP_PKEY * (*ossl_EVP_PKCS82PKEY_ex_t)(const ossl_PKCS8_PRIV_KEY_INFO *p8, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef ossl_PKCS8_PRIV_KEY_INFO * (*ossl_EVP_PKEY2PKCS8_t)(const ossl_EVP_PKEY *pkey);
typedef int (*ossl_PKCS8_pkey_set0_t)(ossl_PKCS8_PRIV_KEY_INFO *priv, ossl_ASN1_OBJECT *aobj, int version, int ptype, void *pval, unsigned char *penc, int penclen);
typedef int (*ossl_PKCS8_pkey_get0_t)(const ossl_ASN1_OBJECT **ppkalg, const unsigned char **pk, int *ppklen, const ossl_X509_ALGOR **pa, const ossl_PKCS8_PRIV_KEY_INFO *p8);
typedef const ossl_STACK_OF(ossl_X509_ATTRIBUTE) * (*ossl_PKCS8_pkey_get0_attrs_t)(const ossl_PKCS8_PRIV_KEY_INFO *p8);
typedef int (*ossl_PKCS8_pkey_add1_attr_t)(ossl_PKCS8_PRIV_KEY_INFO *p8, ossl_X509_ATTRIBUTE *attr);
typedef int (*ossl_PKCS8_pkey_add1_attr_by_NID_t)(ossl_PKCS8_PRIV_KEY_INFO *p8, int nid, int type, const unsigned char *bytes, int len);
typedef int (*ossl_PKCS8_pkey_add1_attr_by_OBJ_t)(ossl_PKCS8_PRIV_KEY_INFO *p8, const ossl_ASN1_OBJECT *obj, int type, const unsigned char *bytes, int len);
typedef int (*ossl_X509_PUBKEY_set0_param_t)(ossl_X509_PUBKEY *pub, ossl_ASN1_OBJECT *aobj, int ptype, void *pval, unsigned char *penc, int penclen);
typedef int (*ossl_X509_PUBKEY_get0_param_t)(ossl_ASN1_OBJECT **ppkalg, const unsigned char **pk, int *ppklen, ossl_X509_ALGOR **pa, const ossl_X509_PUBKEY *pub);
typedef int (*ossl_X509_PUBKEY_eq_t)(const ossl_X509_PUBKEY *a, const ossl_X509_PUBKEY *b);
typedef ossl_PROXY_POLICY * (*ossl_PROXY_POLICY_new_t)();
typedef void (*ossl_PROXY_POLICY_free_t)(ossl_PROXY_POLICY *a);
typedef ossl_PROXY_POLICY * (*ossl_d2i_PROXY_POLICY_t)(ossl_PROXY_POLICY **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_PROXY_POLICY_t)(const ossl_PROXY_POLICY *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_PROXY_POLICY_it_t)();
typedef ossl_PROXY_CERT_INFO_EXTENSION * (*ossl_PROXY_CERT_INFO_EXTENSION_new_t)();
typedef void (*ossl_PROXY_CERT_INFO_EXTENSION_free_t)(ossl_PROXY_CERT_INFO_EXTENSION *a);
typedef ossl_PROXY_CERT_INFO_EXTENSION * (*ossl_d2i_PROXY_CERT_INFO_EXTENSION_t)(ossl_PROXY_CERT_INFO_EXTENSION **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_PROXY_CERT_INFO_EXTENSION_t)(const ossl_PROXY_CERT_INFO_EXTENSION *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_PROXY_CERT_INFO_EXTENSION_it_t)();
typedef ossl_BASIC_CONSTRAINTS * (*ossl_BASIC_CONSTRAINTS_new_t)();
typedef void (*ossl_BASIC_CONSTRAINTS_free_t)(ossl_BASIC_CONSTRAINTS *a);
typedef ossl_BASIC_CONSTRAINTS * (*ossl_d2i_BASIC_CONSTRAINTS_t)(ossl_BASIC_CONSTRAINTS **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_BASIC_CONSTRAINTS_t)(const ossl_BASIC_CONSTRAINTS *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_BASIC_CONSTRAINTS_it_t)();
typedef ossl_SXNET * (*ossl_SXNET_new_t)();
typedef void (*ossl_SXNET_free_t)(ossl_SXNET *a);
typedef ossl_SXNET * (*ossl_d2i_SXNET_t)(ossl_SXNET **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_SXNET_t)(const ossl_SXNET *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_SXNET_it_t)();
typedef ossl_SXNETID * (*ossl_SXNETID_new_t)();
typedef void (*ossl_SXNETID_free_t)(ossl_SXNETID *a);
typedef ossl_SXNETID * (*ossl_d2i_SXNETID_t)(ossl_SXNETID **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_SXNETID_t)(const ossl_SXNETID *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_SXNETID_it_t)();
typedef ossl_ISSUER_SIGN_TOOL * (*ossl_ISSUER_SIGN_TOOL_new_t)();
typedef void (*ossl_ISSUER_SIGN_TOOL_free_t)(ossl_ISSUER_SIGN_TOOL *a);
typedef ossl_ISSUER_SIGN_TOOL * (*ossl_d2i_ISSUER_SIGN_TOOL_t)(ossl_ISSUER_SIGN_TOOL **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ISSUER_SIGN_TOOL_t)(const ossl_ISSUER_SIGN_TOOL *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_ISSUER_SIGN_TOOL_it_t)();
typedef int (*ossl_SXNET_add_id_asc_t)(ossl_SXNET **psx, const char *zone, const char *user, int userlen);
typedef int (*ossl_SXNET_add_id_ulong_t)(ossl_SXNET **psx, unsigned long lzone, const char *user, int userlen);
typedef int (*ossl_SXNET_add_id_INTEGER_t)(ossl_SXNET **psx, ossl_ASN1_INTEGER *izone, const char *user, int userlen);
typedef ossl_ASN1_OCTET_STRING * (*ossl_SXNET_get_id_asc_t)(ossl_SXNET *sx, const char *zone);
typedef ossl_ASN1_OCTET_STRING * (*ossl_SXNET_get_id_ulong_t)(ossl_SXNET *sx, unsigned long lzone);
typedef ossl_ASN1_OCTET_STRING * (*ossl_SXNET_get_id_INTEGER_t)(ossl_SXNET *sx, ossl_ASN1_INTEGER *zone);
typedef ossl_AUTHORITY_KEYID * (*ossl_AUTHORITY_KEYID_new_t)();
typedef void (*ossl_AUTHORITY_KEYID_free_t)(ossl_AUTHORITY_KEYID *a);
typedef ossl_AUTHORITY_KEYID * (*ossl_d2i_AUTHORITY_KEYID_t)(ossl_AUTHORITY_KEYID **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_AUTHORITY_KEYID_t)(const ossl_AUTHORITY_KEYID *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_AUTHORITY_KEYID_it_t)();
typedef ossl_PKEY_USAGE_PERIOD * (*ossl_PKEY_USAGE_PERIOD_new_t)();
typedef void (*ossl_PKEY_USAGE_PERIOD_free_t)(ossl_PKEY_USAGE_PERIOD *a);
typedef ossl_PKEY_USAGE_PERIOD * (*ossl_d2i_PKEY_USAGE_PERIOD_t)(ossl_PKEY_USAGE_PERIOD **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_PKEY_USAGE_PERIOD_t)(const ossl_PKEY_USAGE_PERIOD *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_PKEY_USAGE_PERIOD_it_t)();
typedef ossl_GENERAL_NAME * (*ossl_GENERAL_NAME_new_t)();
typedef void (*ossl_GENERAL_NAME_free_t)(ossl_GENERAL_NAME *a);
typedef ossl_GENERAL_NAME * (*ossl_d2i_GENERAL_NAME_t)(ossl_GENERAL_NAME **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_GENERAL_NAME_t)(const ossl_GENERAL_NAME *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_GENERAL_NAME_it_t)();
typedef ossl_GENERAL_NAME * (*ossl_GENERAL_NAME_dup_t)(const ossl_GENERAL_NAME *a);
typedef int (*ossl_GENERAL_NAME_cmp_t)(ossl_GENERAL_NAME *a, ossl_GENERAL_NAME *b);
typedef ossl_ASN1_BIT_STRING * (*ossl_v2i_ASN1_BIT_STRING_t)(ossl_X509V3_EXT_METHOD *method, ossl_X509V3_CTX *ctx, ossl_STACK_OF(ossl_CONF_VALUE) *nval);
typedef ossl_STACK_OF(ossl_CONF_VALUE) * (*ossl_i2v_ASN1_BIT_STRING_t)(ossl_X509V3_EXT_METHOD *method, ossl_ASN1_BIT_STRING *bits, ossl_STACK_OF(ossl_CONF_VALUE) *extlist);
typedef char * (*ossl_i2s_ASN1_IA5STRING_t)(ossl_X509V3_EXT_METHOD *method, ossl_ASN1_IA5STRING *ia5);
typedef ossl_ASN1_IA5STRING * (*ossl_s2i_ASN1_IA5STRING_t)(ossl_X509V3_EXT_METHOD *method, ossl_X509V3_CTX *ctx, const char *str);
typedef char * (*ossl_i2s_ASN1_UTF8STRING_t)(ossl_X509V3_EXT_METHOD *method, ossl_ASN1_UTF8STRING *utf8);
typedef ossl_ASN1_UTF8STRING * (*ossl_s2i_ASN1_UTF8STRING_t)(ossl_X509V3_EXT_METHOD *method, ossl_X509V3_CTX *ctx, const char *str);
typedef ossl_STACK_OF(ossl_CONF_VALUE) * (*ossl_i2v_GENERAL_NAME_t)(ossl_X509V3_EXT_METHOD *method, ossl_GENERAL_NAME *gen, ossl_STACK_OF(ossl_CONF_VALUE) *ret);
typedef int (*ossl_GENERAL_NAME_print_t)(ossl_BIO *out, ossl_GENERAL_NAME *gen);
typedef ossl_GENERAL_NAMES * (*ossl_GENERAL_NAMES_new_t)();
typedef void (*ossl_GENERAL_NAMES_free_t)(ossl_GENERAL_NAMES *a);
typedef ossl_GENERAL_NAMES * (*ossl_d2i_GENERAL_NAMES_t)(ossl_GENERAL_NAMES **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_GENERAL_NAMES_t)(const ossl_GENERAL_NAMES *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_GENERAL_NAMES_it_t)();
typedef ossl_STACK_OF(ossl_CONF_VALUE) * (*ossl_i2v_GENERAL_NAMES_t)(ossl_X509V3_EXT_METHOD *method, ossl_GENERAL_NAMES *gen, ossl_STACK_OF(ossl_CONF_VALUE) *extlist);
typedef ossl_GENERAL_NAMES * (*ossl_v2i_GENERAL_NAMES_t)(const ossl_X509V3_EXT_METHOD *method, ossl_X509V3_CTX *ctx, ossl_STACK_OF(ossl_CONF_VALUE) *nval);
typedef ossl_OTHERNAME * (*ossl_OTHERNAME_new_t)();
typedef void (*ossl_OTHERNAME_free_t)(ossl_OTHERNAME *a);
typedef ossl_OTHERNAME * (*ossl_d2i_OTHERNAME_t)(ossl_OTHERNAME **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_OTHERNAME_t)(const ossl_OTHERNAME *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_OTHERNAME_it_t)();
typedef ossl_EDIPARTYNAME * (*ossl_EDIPARTYNAME_new_t)();
typedef void (*ossl_EDIPARTYNAME_free_t)(ossl_EDIPARTYNAME *a);
typedef ossl_EDIPARTYNAME * (*ossl_d2i_EDIPARTYNAME_t)(ossl_EDIPARTYNAME **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_EDIPARTYNAME_t)(const ossl_EDIPARTYNAME *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_EDIPARTYNAME_it_t)();
typedef int (*ossl_OTHERNAME_cmp_t)(ossl_OTHERNAME *a, ossl_OTHERNAME *b);
typedef void (*ossl_GENERAL_NAME_set0_value_t)(ossl_GENERAL_NAME *a, int type, void *value);
typedef void * (*ossl_GENERAL_NAME_get0_value_t)(const ossl_GENERAL_NAME *a, int *ptype);
typedef int (*ossl_GENERAL_NAME_set0_othername_t)(ossl_GENERAL_NAME *gen, ossl_ASN1_OBJECT *oid, ossl_ASN1_TYPE *value);
typedef int (*ossl_GENERAL_NAME_get0_otherName_t)(const ossl_GENERAL_NAME *gen, ossl_ASN1_OBJECT **poid, ossl_ASN1_TYPE **pvalue);
typedef char * (*ossl_i2s_ASN1_OCTET_STRING_t)(ossl_X509V3_EXT_METHOD *method, const ossl_ASN1_OCTET_STRING *ia5);
typedef ossl_ASN1_OCTET_STRING * (*ossl_s2i_ASN1_OCTET_STRING_t)(ossl_X509V3_EXT_METHOD *method, ossl_X509V3_CTX *ctx, const char *str);
typedef ossl_EXTENDED_KEY_USAGE * (*ossl_EXTENDED_KEY_USAGE_new_t)();
typedef void (*ossl_EXTENDED_KEY_USAGE_free_t)(ossl_EXTENDED_KEY_USAGE *a);
typedef ossl_EXTENDED_KEY_USAGE * (*ossl_d2i_EXTENDED_KEY_USAGE_t)(ossl_EXTENDED_KEY_USAGE **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_EXTENDED_KEY_USAGE_t)(const ossl_EXTENDED_KEY_USAGE *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_EXTENDED_KEY_USAGE_it_t)();
typedef int (*ossl_i2a_ACCESS_DESCRIPTION_t)(ossl_BIO *bp, const ossl_ACCESS_DESCRIPTION *a);
typedef ossl_TLS_FEATURE * (*ossl_TLS_FEATURE_new_t)();
typedef void (*ossl_TLS_FEATURE_free_t)(ossl_TLS_FEATURE *a);
typedef ossl_CERTIFICATEPOLICIES * (*ossl_CERTIFICATEPOLICIES_new_t)();
typedef void (*ossl_CERTIFICATEPOLICIES_free_t)(ossl_CERTIFICATEPOLICIES *a);
typedef ossl_CERTIFICATEPOLICIES * (*ossl_d2i_CERTIFICATEPOLICIES_t)(ossl_CERTIFICATEPOLICIES **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_CERTIFICATEPOLICIES_t)(const ossl_CERTIFICATEPOLICIES *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_CERTIFICATEPOLICIES_it_t)();
typedef ossl_POLICYINFO * (*ossl_POLICYINFO_new_t)();
typedef void (*ossl_POLICYINFO_free_t)(ossl_POLICYINFO *a);
typedef ossl_POLICYINFO * (*ossl_d2i_POLICYINFO_t)(ossl_POLICYINFO **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_POLICYINFO_t)(const ossl_POLICYINFO *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_POLICYINFO_it_t)();
typedef ossl_POLICYQUALINFO * (*ossl_POLICYQUALINFO_new_t)();
typedef void (*ossl_POLICYQUALINFO_free_t)(ossl_POLICYQUALINFO *a);
typedef ossl_POLICYQUALINFO * (*ossl_d2i_POLICYQUALINFO_t)(ossl_POLICYQUALINFO **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_POLICYQUALINFO_t)(const ossl_POLICYQUALINFO *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_POLICYQUALINFO_it_t)();
typedef ossl_USERNOTICE * (*ossl_USERNOTICE_new_t)();
typedef void (*ossl_USERNOTICE_free_t)(ossl_USERNOTICE *a);
typedef ossl_USERNOTICE * (*ossl_d2i_USERNOTICE_t)(ossl_USERNOTICE **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_USERNOTICE_t)(const ossl_USERNOTICE *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_USERNOTICE_it_t)();
typedef ossl_NOTICEREF * (*ossl_NOTICEREF_new_t)();
typedef void (*ossl_NOTICEREF_free_t)(ossl_NOTICEREF *a);
typedef ossl_NOTICEREF * (*ossl_d2i_NOTICEREF_t)(ossl_NOTICEREF **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_NOTICEREF_t)(const ossl_NOTICEREF *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_NOTICEREF_it_t)();
typedef ossl_CRL_DIST_POINTS * (*ossl_CRL_DIST_POINTS_new_t)();
typedef void (*ossl_CRL_DIST_POINTS_free_t)(ossl_CRL_DIST_POINTS *a);
typedef ossl_CRL_DIST_POINTS * (*ossl_d2i_CRL_DIST_POINTS_t)(ossl_CRL_DIST_POINTS **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_CRL_DIST_POINTS_t)(const ossl_CRL_DIST_POINTS *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_CRL_DIST_POINTS_it_t)();
typedef ossl_DIST_POINT * (*ossl_DIST_POINT_new_t)();
typedef void (*ossl_DIST_POINT_free_t)(ossl_DIST_POINT *a);
typedef ossl_DIST_POINT * (*ossl_d2i_DIST_POINT_t)(ossl_DIST_POINT **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_DIST_POINT_t)(const ossl_DIST_POINT *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_DIST_POINT_it_t)();
typedef ossl_DIST_POINT_NAME * (*ossl_DIST_POINT_NAME_new_t)();
typedef void (*ossl_DIST_POINT_NAME_free_t)(ossl_DIST_POINT_NAME *a);
typedef ossl_DIST_POINT_NAME * (*ossl_d2i_DIST_POINT_NAME_t)(ossl_DIST_POINT_NAME **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_DIST_POINT_NAME_t)(const ossl_DIST_POINT_NAME *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_DIST_POINT_NAME_it_t)();
typedef ossl_ISSUING_DIST_POINT * (*ossl_ISSUING_DIST_POINT_new_t)();
typedef void (*ossl_ISSUING_DIST_POINT_free_t)(ossl_ISSUING_DIST_POINT *a);
typedef ossl_ISSUING_DIST_POINT * (*ossl_d2i_ISSUING_DIST_POINT_t)(ossl_ISSUING_DIST_POINT **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ISSUING_DIST_POINT_t)(const ossl_ISSUING_DIST_POINT *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_ISSUING_DIST_POINT_it_t)();
typedef int (*ossl_DIST_POINT_set_dpname_t)(ossl_DIST_POINT_NAME *dpn, const ossl_X509_NAME *iname);
typedef int (*ossl_NAME_CONSTRAINTS_check_t)(ossl_X509 *x, ossl_NAME_CONSTRAINTS *nc);
typedef int (*ossl_NAME_CONSTRAINTS_check_CN_t)(ossl_X509 *x, ossl_NAME_CONSTRAINTS *nc);
typedef ossl_ACCESS_DESCRIPTION * (*ossl_ACCESS_DESCRIPTION_new_t)();
typedef void (*ossl_ACCESS_DESCRIPTION_free_t)(ossl_ACCESS_DESCRIPTION *a);
typedef ossl_ACCESS_DESCRIPTION * (*ossl_d2i_ACCESS_DESCRIPTION_t)(ossl_ACCESS_DESCRIPTION **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ACCESS_DESCRIPTION_t)(const ossl_ACCESS_DESCRIPTION *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_ACCESS_DESCRIPTION_it_t)();
typedef ossl_AUTHORITY_INFO_ACCESS * (*ossl_AUTHORITY_INFO_ACCESS_new_t)();
typedef void (*ossl_AUTHORITY_INFO_ACCESS_free_t)(ossl_AUTHORITY_INFO_ACCESS *a);
typedef ossl_AUTHORITY_INFO_ACCESS * (*ossl_d2i_AUTHORITY_INFO_ACCESS_t)(ossl_AUTHORITY_INFO_ACCESS **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_AUTHORITY_INFO_ACCESS_t)(const ossl_AUTHORITY_INFO_ACCESS *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_AUTHORITY_INFO_ACCESS_it_t)();
typedef const ossl_ASN1_ITEM * (*ossl_POLICY_MAPPING_it_t)();
typedef ossl_POLICY_MAPPING * (*ossl_POLICY_MAPPING_new_t)();
typedef void (*ossl_POLICY_MAPPING_free_t)(ossl_POLICY_MAPPING *a);
typedef const ossl_ASN1_ITEM * (*ossl_POLICY_MAPPINGS_it_t)();
typedef const ossl_ASN1_ITEM * (*ossl_GENERAL_SUBTREE_it_t)();
typedef ossl_GENERAL_SUBTREE * (*ossl_GENERAL_SUBTREE_new_t)();
typedef void (*ossl_GENERAL_SUBTREE_free_t)(ossl_GENERAL_SUBTREE *a);
typedef const ossl_ASN1_ITEM * (*ossl_NAME_CONSTRAINTS_it_t)();
typedef ossl_NAME_CONSTRAINTS * (*ossl_NAME_CONSTRAINTS_new_t)();
typedef void (*ossl_NAME_CONSTRAINTS_free_t)(ossl_NAME_CONSTRAINTS *a);
typedef ossl_POLICY_CONSTRAINTS * (*ossl_POLICY_CONSTRAINTS_new_t)();
typedef void (*ossl_POLICY_CONSTRAINTS_free_t)(ossl_POLICY_CONSTRAINTS *a);
typedef const ossl_ASN1_ITEM * (*ossl_POLICY_CONSTRAINTS_it_t)();
typedef ossl_GENERAL_NAME * (*ossl_a2i_GENERAL_NAME_t)(ossl_GENERAL_NAME *out, const ossl_X509V3_EXT_METHOD *method, ossl_X509V3_CTX *ctx, int gen_type, const char *value, int is_nc);
typedef ossl_GENERAL_NAME * (*ossl_v2i_GENERAL_NAME_t)(const ossl_X509V3_EXT_METHOD *method, ossl_X509V3_CTX *ctx, ossl_CONF_VALUE *cnf);
typedef ossl_GENERAL_NAME * (*ossl_v2i_GENERAL_NAME_ex_t)(ossl_GENERAL_NAME *out, const ossl_X509V3_EXT_METHOD *method, ossl_X509V3_CTX *ctx, ossl_CONF_VALUE *cnf, int is_nc);
typedef void (*ossl_X509V3_conf_free_t)(ossl_CONF_VALUE *val);
typedef ossl_X509_EXTENSION * (*ossl_X509V3_EXT_nconf_nid_t)(ossl_CONF *conf, ossl_X509V3_CTX *ctx, int ext_nid, const char *value);
typedef ossl_X509_EXTENSION * (*ossl_X509V3_EXT_nconf_t)(ossl_CONF *conf, ossl_X509V3_CTX *ctx, const char *name, const char *value);
typedef int (*ossl_X509V3_EXT_add_nconf_sk_t)(ossl_CONF *conf, ossl_X509V3_CTX *ctx, const char *section, ossl_STACK_OF(ossl_X509_EXTENSION) **sk);
typedef int (*ossl_X509V3_EXT_add_nconf_t)(ossl_CONF *conf, ossl_X509V3_CTX *ctx, const char *section, ossl_X509 *cert);
typedef int (*ossl_X509V3_EXT_REQ_add_nconf_t)(ossl_CONF *conf, ossl_X509V3_CTX *ctx, const char *section, ossl_X509_REQ *req);
typedef int (*ossl_X509V3_EXT_CRL_add_nconf_t)(ossl_CONF *conf, ossl_X509V3_CTX *ctx, const char *section, ossl_X509_CRL *crl);
typedef ossl_X509_EXTENSION * (*ossl_X509V3_EXT_conf_nid_t)(ossl_LHASH_OF(ossl_CONF_VALUE) *conf, ossl_X509V3_CTX *ctx, int ext_nid, const char *value);
typedef ossl_X509_EXTENSION * (*ossl_X509V3_EXT_conf_t)(ossl_LHASH_OF(ossl_CONF_VALUE) *conf, ossl_X509V3_CTX *ctx, const char *name, const char *value);
typedef int (*ossl_X509V3_EXT_add_conf_t)(ossl_LHASH_OF(ossl_CONF_VALUE) *conf, ossl_X509V3_CTX *ctx, const char *section, ossl_X509 *cert);
typedef int (*ossl_X509V3_EXT_REQ_add_conf_t)(ossl_LHASH_OF(ossl_CONF_VALUE) *conf, ossl_X509V3_CTX *ctx, const char *section, ossl_X509_REQ *req);
typedef int (*ossl_X509V3_EXT_CRL_add_conf_t)(ossl_LHASH_OF(ossl_CONF_VALUE) *conf, ossl_X509V3_CTX *ctx, const char *section, ossl_X509_CRL *crl);
typedef int (*ossl_X509V3_add_value_bool_nf_t)(const char *name, int asn1_bool, ossl_STACK_OF(ossl_CONF_VALUE) **extlist);
typedef int (*ossl_X509V3_get_value_bool_t)(const ossl_CONF_VALUE *value, int *asn1_bool);
typedef int (*ossl_X509V3_get_value_int_t)(const ossl_CONF_VALUE *value, ossl_ASN1_INTEGER **aint);
typedef void (*ossl_X509V3_set_nconf_t)(ossl_X509V3_CTX *ctx, ossl_CONF *conf);
typedef void (*ossl_X509V3_set_conf_lhash_t)(ossl_X509V3_CTX *ctx, ossl_LHASH_OF(ossl_CONF_VALUE) *lhash);
typedef char * (*ossl_X509V3_get_string_t)(ossl_X509V3_CTX *ctx, const char *name, const char *section);
typedef ossl_STACK_OF(ossl_CONF_VALUE) * (*ossl_X509V3_get_section_t)(ossl_X509V3_CTX *ctx, const char *section);
typedef void (*ossl_X509V3_string_free_t)(ossl_X509V3_CTX *ctx, char *str);
typedef void (*ossl_X509V3_section_free_t)(ossl_X509V3_CTX *ctx, ossl_STACK_OF(ossl_CONF_VALUE) *section);
typedef void (*ossl_X509V3_set_ctx_t)(ossl_X509V3_CTX *ctx, ossl_X509 *issuer, ossl_X509 *subject, ossl_X509_REQ *req, ossl_X509_CRL *crl, int flags);
typedef int (*ossl_X509V3_set_issuer_pkey_t)(ossl_X509V3_CTX *ctx, ossl_EVP_PKEY *pkey);
typedef int (*ossl_X509V3_add_value_t)(const char *name, const char *value, ossl_STACK_OF(ossl_CONF_VALUE) **extlist);
typedef int (*ossl_X509V3_add_value_uchar_t)(const char *name, const unsigned char *value, ossl_STACK_OF(ossl_CONF_VALUE) **extlist);
typedef int (*ossl_X509V3_add_value_bool_t)(const char *name, int asn1_bool, ossl_STACK_OF(ossl_CONF_VALUE) **extlist);
typedef int (*ossl_X509V3_add_value_int_t)(const char *name, const ossl_ASN1_INTEGER *aint, ossl_STACK_OF(ossl_CONF_VALUE) **extlist);
typedef char * (*ossl_i2s_ASN1_INTEGER_t)(ossl_X509V3_EXT_METHOD *meth, const ossl_ASN1_INTEGER *aint);
typedef ossl_ASN1_INTEGER * (*ossl_s2i_ASN1_INTEGER_t)(ossl_X509V3_EXT_METHOD *meth, const char *value);
typedef char * (*ossl_i2s_ASN1_ENUMERATED_t)(ossl_X509V3_EXT_METHOD *meth, const ossl_ASN1_ENUMERATED *aint);
typedef char * (*ossl_i2s_ASN1_ENUMERATED_TABLE_t)(ossl_X509V3_EXT_METHOD *meth, const ossl_ASN1_ENUMERATED *aint);
typedef int (*ossl_X509V3_EXT_add_t)(ossl_X509V3_EXT_METHOD *ext);
typedef int (*ossl_X509V3_EXT_add_list_t)(ossl_X509V3_EXT_METHOD *extlist);
typedef int (*ossl_X509V3_EXT_add_alias_t)(int nid_to, int nid_from);
typedef void (*ossl_X509V3_EXT_cleanup_t)();
typedef const ossl_X509V3_EXT_METHOD * (*ossl_X509V3_EXT_get_t)(ossl_X509_EXTENSION *ext);
typedef const ossl_X509V3_EXT_METHOD * (*ossl_X509V3_EXT_get_nid_t)(int nid);
typedef int (*ossl_X509V3_add_standard_extensions_t)();
typedef ossl_STACK_OF(ossl_CONF_VALUE) * (*ossl_X509V3_parse_list_t)(const char *line);
typedef void * (*ossl_X509V3_EXT_d2i_t)(ossl_X509_EXTENSION *ext);
typedef void * (*ossl_X509V3_get_d2i_t)(const ossl_STACK_OF(ossl_X509_EXTENSION) *x, int nid, int *crit, int *idx);
typedef ossl_X509_EXTENSION * (*ossl_X509V3_EXT_i2d_t)(int ext_nid, int crit, void *ext_struc);
typedef int (*ossl_X509V3_add1_i2d_t)(ossl_STACK_OF(ossl_X509_EXTENSION) **x, int nid, void *value, int crit, unsigned long flags);
typedef void (*ossl_X509V3_EXT_val_prn_t)(ossl_BIO *out, ossl_STACK_OF(ossl_CONF_VALUE) *val, int indent, int ml);
typedef int (*ossl_X509V3_EXT_print_t)(ossl_BIO *out, ossl_X509_EXTENSION *ext, unsigned long flag, int indent);
typedef int (*ossl_X509V3_EXT_print_fp_t)(FILE *out, ossl_X509_EXTENSION *ext, int flag, int indent);
typedef int (*ossl_X509V3_extensions_print_t)(ossl_BIO *out, const char *title, const ossl_STACK_OF(ossl_X509_EXTENSION) *exts, unsigned long flag, int indent);
typedef int (*ossl_X509_check_ca_t)(ossl_X509 *x);
typedef int (*ossl_X509_check_purpose_t)(ossl_X509 *x, int id, int ca);
typedef int (*ossl_X509_supported_extension_t)(ossl_X509_EXTENSION *ex);
typedef int (*ossl_X509_PURPOSE_set_t)(int *p, int purpose);
typedef int (*ossl_X509_check_issued_t)(ossl_X509 *issuer, ossl_X509 *subject);
typedef int (*ossl_X509_check_akid_t)(const ossl_X509 *issuer, const ossl_AUTHORITY_KEYID *akid);
typedef void (*ossl_X509_set_proxy_flag_t)(ossl_X509 *x);
typedef void (*ossl_X509_set_proxy_pathlen_t)(ossl_X509 *x, long l);
typedef long (*ossl_X509_get_proxy_pathlen_t)(ossl_X509 *x);
typedef uint32_t (*ossl_X509_get_extension_flags_t)(ossl_X509 *x);
typedef uint32_t (*ossl_X509_get_key_usage_t)(ossl_X509 *x);
typedef uint32_t (*ossl_X509_get_extended_key_usage_t)(ossl_X509 *x);
typedef const ossl_ASN1_OCTET_STRING * (*ossl_X509_get0_subject_key_id_t)(ossl_X509 *x);
typedef const ossl_ASN1_OCTET_STRING * (*ossl_X509_get0_authority_key_id_t)(ossl_X509 *x);
typedef const ossl_GENERAL_NAMES * (*ossl_X509_get0_authority_issuer_t)(ossl_X509 *x);
typedef const ossl_ASN1_INTEGER * (*ossl_X509_get0_authority_serial_t)(ossl_X509 *x);
typedef int (*ossl_X509_PURPOSE_get_count_t)();
typedef ossl_X509_PURPOSE * (*ossl_X509_PURPOSE_get0_t)(int idx);
typedef int (*ossl_X509_PURPOSE_get_by_sname_t)(const char *sname);
typedef int (*ossl_X509_PURPOSE_get_by_id_t)(int id);
typedef int (*ossl_X509_PURPOSE_add_t)(int id, int trust, int flags, int (*ck)(const ossl_X509_PURPOSE *, const ossl_X509 *, int), const char *name, const char *sname, void *arg);
typedef char * (*ossl_X509_PURPOSE_get0_name_t)(const ossl_X509_PURPOSE *xp);
typedef char * (*ossl_X509_PURPOSE_get0_sname_t)(const ossl_X509_PURPOSE *xp);
typedef int (*ossl_X509_PURPOSE_get_trust_t)(const ossl_X509_PURPOSE *xp);
typedef void (*ossl_X509_PURPOSE_cleanup_t)();
typedef int (*ossl_X509_PURPOSE_get_id_t)(const ossl_X509_PURPOSE *_p0);
typedef ossl_STACK_OF(ossl_OPENSSL_STRING) * (*ossl_X509_get1_email_t)(ossl_X509 *x);
typedef ossl_STACK_OF(ossl_OPENSSL_STRING) * (*ossl_X509_REQ_get1_email_t)(ossl_X509_REQ *x);
typedef void (*ossl_X509_email_free_t)(ossl_STACK_OF(ossl_OPENSSL_STRING) *sk);
typedef ossl_STACK_OF(ossl_OPENSSL_STRING) * (*ossl_X509_get1_ocsp_t)(ossl_X509 *x);
typedef int (*ossl_X509_check_host_t)(ossl_X509 *x, const char *chk, size_t chklen, unsigned int flags, char **peername);
typedef int (*ossl_X509_check_email_t)(ossl_X509 *x, const char *chk, size_t chklen, unsigned int flags);
typedef int (*ossl_X509_check_ip_t)(ossl_X509 *x, const unsigned char *chk, size_t chklen, unsigned int flags);
typedef int (*ossl_X509_check_ip_asc_t)(ossl_X509 *x, const char *ipasc, unsigned int flags);
typedef ossl_ASN1_OCTET_STRING * (*ossl_a2i_IPADDRESS_t)(const char *ipasc);
typedef ossl_ASN1_OCTET_STRING * (*ossl_a2i_IPADDRESS_NC_t)(const char *ipasc);
typedef int (*ossl_X509V3_NAME_from_section_t)(ossl_X509_NAME *nm, ossl_STACK_OF(ossl_CONF_VALUE) *dn_sk, unsigned long chtype);
typedef void (*ossl_X509_POLICY_NODE_print_t)(ossl_BIO *out, ossl_X509_POLICY_NODE *node, int indent);
typedef ossl_ASRange * (*ossl_ASRange_new_t)();
typedef void (*ossl_ASRange_free_t)(ossl_ASRange *a);
typedef ossl_ASRange * (*ossl_d2i_ASRange_t)(ossl_ASRange **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ASRange_t)(const ossl_ASRange *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_ASRange_it_t)();
typedef ossl_ASIdOrRange * (*ossl_ASIdOrRange_new_t)();
typedef void (*ossl_ASIdOrRange_free_t)(ossl_ASIdOrRange *a);
typedef ossl_ASIdOrRange * (*ossl_d2i_ASIdOrRange_t)(ossl_ASIdOrRange **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ASIdOrRange_t)(const ossl_ASIdOrRange *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_ASIdOrRange_it_t)();
typedef ossl_ASIdentifierChoice * (*ossl_ASIdentifierChoice_new_t)();
typedef void (*ossl_ASIdentifierChoice_free_t)(ossl_ASIdentifierChoice *a);
typedef ossl_ASIdentifierChoice * (*ossl_d2i_ASIdentifierChoice_t)(ossl_ASIdentifierChoice **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ASIdentifierChoice_t)(const ossl_ASIdentifierChoice *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_ASIdentifierChoice_it_t)();
typedef ossl_ASIdentifiers * (*ossl_ASIdentifiers_new_t)();
typedef void (*ossl_ASIdentifiers_free_t)(ossl_ASIdentifiers *a);
typedef ossl_ASIdentifiers * (*ossl_d2i_ASIdentifiers_t)(ossl_ASIdentifiers **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ASIdentifiers_t)(const ossl_ASIdentifiers *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_ASIdentifiers_it_t)();
typedef ossl_IPAddressRange * (*ossl_IPAddressRange_new_t)();
typedef void (*ossl_IPAddressRange_free_t)(ossl_IPAddressRange *a);
typedef ossl_IPAddressRange * (*ossl_d2i_IPAddressRange_t)(ossl_IPAddressRange **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_IPAddressRange_t)(const ossl_IPAddressRange *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_IPAddressRange_it_t)();
typedef ossl_IPAddressOrRange * (*ossl_IPAddressOrRange_new_t)();
typedef void (*ossl_IPAddressOrRange_free_t)(ossl_IPAddressOrRange *a);
typedef ossl_IPAddressOrRange * (*ossl_d2i_IPAddressOrRange_t)(ossl_IPAddressOrRange **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_IPAddressOrRange_t)(const ossl_IPAddressOrRange *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_IPAddressOrRange_it_t)();
typedef ossl_IPAddressChoice * (*ossl_IPAddressChoice_new_t)();
typedef void (*ossl_IPAddressChoice_free_t)(ossl_IPAddressChoice *a);
typedef ossl_IPAddressChoice * (*ossl_d2i_IPAddressChoice_t)(ossl_IPAddressChoice **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_IPAddressChoice_t)(const ossl_IPAddressChoice *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_IPAddressChoice_it_t)();
typedef ossl_IPAddressFamily * (*ossl_IPAddressFamily_new_t)();
typedef void (*ossl_IPAddressFamily_free_t)(ossl_IPAddressFamily *a);
typedef ossl_IPAddressFamily * (*ossl_d2i_IPAddressFamily_t)(ossl_IPAddressFamily **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_IPAddressFamily_t)(const ossl_IPAddressFamily *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_IPAddressFamily_it_t)();
typedef int (*ossl_X509v3_asid_add_inherit_t)(ossl_ASIdentifiers *asid, int which);
typedef int (*ossl_X509v3_asid_add_id_or_range_t)(ossl_ASIdentifiers *asid, int which, ossl_ASN1_INTEGER *min, ossl_ASN1_INTEGER *max);
typedef int (*ossl_X509v3_addr_add_inherit_t)(ossl_IPAddrBlocks *addr, const unsigned int afi, const unsigned int *safi);
typedef int (*ossl_X509v3_addr_add_prefix_t)(ossl_IPAddrBlocks *addr, const unsigned int afi, const unsigned int *safi, unsigned char *a, const int prefixlen);
typedef int (*ossl_X509v3_addr_add_range_t)(ossl_IPAddrBlocks *addr, const unsigned int afi, const unsigned int *safi, unsigned char *min, unsigned char *max);
typedef unsigned int (*ossl_X509v3_addr_get_afi_t)(const ossl_IPAddressFamily *f);
typedef int (*ossl_X509v3_addr_get_range_t)(ossl_IPAddressOrRange *aor, const unsigned int afi, unsigned char *min, unsigned char *max, const int length);
typedef int (*ossl_X509v3_asid_is_canonical_t)(ossl_ASIdentifiers *asid);
typedef int (*ossl_X509v3_addr_is_canonical_t)(ossl_IPAddrBlocks *addr);
typedef int (*ossl_X509v3_asid_canonize_t)(ossl_ASIdentifiers *asid);
typedef int (*ossl_X509v3_addr_canonize_t)(ossl_IPAddrBlocks *addr);
typedef int (*ossl_X509v3_asid_inherits_t)(ossl_ASIdentifiers *asid);
typedef int (*ossl_X509v3_addr_inherits_t)(ossl_IPAddrBlocks *addr);
typedef int (*ossl_X509v3_asid_subset_t)(ossl_ASIdentifiers *a, ossl_ASIdentifiers *b);
typedef int (*ossl_X509v3_addr_subset_t)(ossl_IPAddrBlocks *a, ossl_IPAddrBlocks *b);
typedef int (*ossl_X509v3_asid_validate_path_t)(ossl_X509_STORE_CTX *_p0);
typedef int (*ossl_X509v3_addr_validate_path_t)(ossl_X509_STORE_CTX *_p0);
typedef int (*ossl_X509v3_asid_validate_resource_set_t)(ossl_STACK_OF(ossl_X509) *chain, ossl_ASIdentifiers *ext, int allow_inheritance);
typedef int (*ossl_X509v3_addr_validate_resource_set_t)(ossl_STACK_OF(ossl_X509) *chain, ossl_IPAddrBlocks *ext, int allow_inheritance);
typedef ossl_NAMING_AUTHORITY * (*ossl_NAMING_AUTHORITY_new_t)();
typedef void (*ossl_NAMING_AUTHORITY_free_t)(ossl_NAMING_AUTHORITY *a);
typedef ossl_NAMING_AUTHORITY * (*ossl_d2i_NAMING_AUTHORITY_t)(ossl_NAMING_AUTHORITY **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_NAMING_AUTHORITY_t)(const ossl_NAMING_AUTHORITY *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_NAMING_AUTHORITY_it_t)();
typedef ossl_PROFESSION_INFO * (*ossl_PROFESSION_INFO_new_t)();
typedef void (*ossl_PROFESSION_INFO_free_t)(ossl_PROFESSION_INFO *a);
typedef ossl_PROFESSION_INFO * (*ossl_d2i_PROFESSION_INFO_t)(ossl_PROFESSION_INFO **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_PROFESSION_INFO_t)(const ossl_PROFESSION_INFO *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_PROFESSION_INFO_it_t)();
typedef ossl_ADMISSIONS * (*ossl_ADMISSIONS_new_t)();
typedef void (*ossl_ADMISSIONS_free_t)(ossl_ADMISSIONS *a);
typedef ossl_ADMISSIONS * (*ossl_d2i_ADMISSIONS_t)(ossl_ADMISSIONS **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ADMISSIONS_t)(const ossl_ADMISSIONS *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_ADMISSIONS_it_t)();
typedef ossl_ADMISSION_SYNTAX * (*ossl_ADMISSION_SYNTAX_new_t)();
typedef void (*ossl_ADMISSION_SYNTAX_free_t)(ossl_ADMISSION_SYNTAX *a);
typedef ossl_ADMISSION_SYNTAX * (*ossl_d2i_ADMISSION_SYNTAX_t)(ossl_ADMISSION_SYNTAX **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ADMISSION_SYNTAX_t)(const ossl_ADMISSION_SYNTAX *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_ADMISSION_SYNTAX_it_t)();
typedef const ossl_ASN1_OBJECT * (*ossl_NAMING_AUTHORITY_get0_authorityId_t)(const ossl_NAMING_AUTHORITY *n);
typedef const ossl_ASN1_IA5STRING * (*ossl_NAMING_AUTHORITY_get0_authorityURL_t)(const ossl_NAMING_AUTHORITY *n);
typedef const ossl_ASN1_STRING * (*ossl_NAMING_AUTHORITY_get0_authorityText_t)(const ossl_NAMING_AUTHORITY *n);
typedef void (*ossl_NAMING_AUTHORITY_set0_authorityId_t)(ossl_NAMING_AUTHORITY *n, ossl_ASN1_OBJECT *namingAuthorityId);
typedef void (*ossl_NAMING_AUTHORITY_set0_authorityURL_t)(ossl_NAMING_AUTHORITY *n, ossl_ASN1_IA5STRING *namingAuthorityUrl);
typedef void (*ossl_NAMING_AUTHORITY_set0_authorityText_t)(ossl_NAMING_AUTHORITY *n, ossl_ASN1_STRING *namingAuthorityText);
typedef const ossl_GENERAL_NAME * (*ossl_ADMISSION_SYNTAX_get0_admissionAuthority_t)(const ossl_ADMISSION_SYNTAX *as);
typedef void (*ossl_ADMISSION_SYNTAX_set0_admissionAuthority_t)(ossl_ADMISSION_SYNTAX *as, ossl_GENERAL_NAME *aa);
typedef const ossl_STACK_OF(ossl_ADMISSIONS) * (*ossl_ADMISSION_SYNTAX_get0_contentsOfAdmissions_t)(const ossl_ADMISSION_SYNTAX *as);
typedef void (*ossl_ADMISSION_SYNTAX_set0_contentsOfAdmissions_t)(ossl_ADMISSION_SYNTAX *as, ossl_STACK_OF(ossl_ADMISSIONS) *a);
typedef const ossl_GENERAL_NAME * (*ossl_ADMISSIONS_get0_admissionAuthority_t)(const ossl_ADMISSIONS *a);
typedef void (*ossl_ADMISSIONS_set0_admissionAuthority_t)(ossl_ADMISSIONS *a, ossl_GENERAL_NAME *aa);
typedef const ossl_NAMING_AUTHORITY * (*ossl_ADMISSIONS_get0_namingAuthority_t)(const ossl_ADMISSIONS *a);
typedef void (*ossl_ADMISSIONS_set0_namingAuthority_t)(ossl_ADMISSIONS *a, ossl_NAMING_AUTHORITY *na);
typedef const ossl_PROFESSION_INFOS * (*ossl_ADMISSIONS_get0_professionInfos_t)(const ossl_ADMISSIONS *a);
typedef void (*ossl_ADMISSIONS_set0_professionInfos_t)(ossl_ADMISSIONS *a, ossl_PROFESSION_INFOS *pi);
typedef const ossl_ASN1_OCTET_STRING * (*ossl_PROFESSION_INFO_get0_addProfessionInfo_t)(const ossl_PROFESSION_INFO *pi);
typedef void (*ossl_PROFESSION_INFO_set0_addProfessionInfo_t)(ossl_PROFESSION_INFO *pi, ossl_ASN1_OCTET_STRING *aos);
typedef const ossl_NAMING_AUTHORITY * (*ossl_PROFESSION_INFO_get0_namingAuthority_t)(const ossl_PROFESSION_INFO *pi);
typedef void (*ossl_PROFESSION_INFO_set0_namingAuthority_t)(ossl_PROFESSION_INFO *pi, ossl_NAMING_AUTHORITY *na);
typedef const ossl_STACK_OF(ossl_ASN1_STRING) * (*ossl_PROFESSION_INFO_get0_professionItems_t)(const ossl_PROFESSION_INFO *pi);
typedef void (*ossl_PROFESSION_INFO_set0_professionItems_t)(ossl_PROFESSION_INFO *pi, ossl_STACK_OF(ossl_ASN1_STRING) *as);
typedef const ossl_STACK_OF(ossl_ASN1_OBJECT) * (*ossl_PROFESSION_INFO_get0_professionOIDs_t)(const ossl_PROFESSION_INFO *pi);
typedef void (*ossl_PROFESSION_INFO_set0_professionOIDs_t)(ossl_PROFESSION_INFO *pi, ossl_STACK_OF(ossl_ASN1_OBJECT) *po);
typedef const ossl_ASN1_PRINTABLESTRING * (*ossl_PROFESSION_INFO_get0_registrationNumber_t)(const ossl_PROFESSION_INFO *pi);
typedef void (*ossl_PROFESSION_INFO_set0_registrationNumber_t)(ossl_PROFESSION_INFO *pi, ossl_ASN1_PRINTABLESTRING *rn);
typedef ossl_OSSL_CRMF_ENCRYPTEDVALUE * (*ossl_OSSL_CRMF_ENCRYPTEDVALUE_new_t)();
typedef void (*ossl_OSSL_CRMF_ENCRYPTEDVALUE_free_t)(ossl_OSSL_CRMF_ENCRYPTEDVALUE *a);
typedef ossl_OSSL_CRMF_ENCRYPTEDVALUE * (*ossl_d2i_OSSL_CRMF_ENCRYPTEDVALUE_t)(ossl_OSSL_CRMF_ENCRYPTEDVALUE **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_OSSL_CRMF_ENCRYPTEDVALUE_t)(const ossl_OSSL_CRMF_ENCRYPTEDVALUE *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_OSSL_CRMF_ENCRYPTEDVALUE_it_t)();
typedef ossl_OSSL_CRMF_MSG * (*ossl_OSSL_CRMF_MSG_new_t)();
typedef void (*ossl_OSSL_CRMF_MSG_free_t)(ossl_OSSL_CRMF_MSG *a);
typedef ossl_OSSL_CRMF_MSG * (*ossl_d2i_OSSL_CRMF_MSG_t)(ossl_OSSL_CRMF_MSG **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_OSSL_CRMF_MSG_t)(const ossl_OSSL_CRMF_MSG *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_OSSL_CRMF_MSG_it_t)();
typedef ossl_OSSL_CRMF_MSG * (*ossl_OSSL_CRMF_MSG_dup_t)(const ossl_OSSL_CRMF_MSG *a);
typedef ossl_OSSL_CRMF_PBMPARAMETER * (*ossl_OSSL_CRMF_PBMPARAMETER_new_t)();
typedef void (*ossl_OSSL_CRMF_PBMPARAMETER_free_t)(ossl_OSSL_CRMF_PBMPARAMETER *a);
typedef ossl_OSSL_CRMF_PBMPARAMETER * (*ossl_d2i_OSSL_CRMF_PBMPARAMETER_t)(ossl_OSSL_CRMF_PBMPARAMETER **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_OSSL_CRMF_PBMPARAMETER_t)(const ossl_OSSL_CRMF_PBMPARAMETER *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_OSSL_CRMF_PBMPARAMETER_it_t)();
typedef ossl_OSSL_CRMF_CERTID * (*ossl_OSSL_CRMF_CERTID_new_t)();
typedef void (*ossl_OSSL_CRMF_CERTID_free_t)(ossl_OSSL_CRMF_CERTID *a);
typedef ossl_OSSL_CRMF_CERTID * (*ossl_d2i_OSSL_CRMF_CERTID_t)(ossl_OSSL_CRMF_CERTID **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_OSSL_CRMF_CERTID_t)(const ossl_OSSL_CRMF_CERTID *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_OSSL_CRMF_CERTID_it_t)();
typedef ossl_OSSL_CRMF_CERTID * (*ossl_OSSL_CRMF_CERTID_dup_t)(const ossl_OSSL_CRMF_CERTID *a);
typedef ossl_OSSL_CRMF_PKIPUBLICATIONINFO * (*ossl_OSSL_CRMF_PKIPUBLICATIONINFO_new_t)();
typedef void (*ossl_OSSL_CRMF_PKIPUBLICATIONINFO_free_t)(ossl_OSSL_CRMF_PKIPUBLICATIONINFO *a);
typedef ossl_OSSL_CRMF_PKIPUBLICATIONINFO * (*ossl_d2i_OSSL_CRMF_PKIPUBLICATIONINFO_t)(ossl_OSSL_CRMF_PKIPUBLICATIONINFO **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_OSSL_CRMF_PKIPUBLICATIONINFO_t)(const ossl_OSSL_CRMF_PKIPUBLICATIONINFO *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_OSSL_CRMF_PKIPUBLICATIONINFO_it_t)();
typedef ossl_OSSL_CRMF_SINGLEPUBINFO * (*ossl_OSSL_CRMF_SINGLEPUBINFO_new_t)();
typedef void (*ossl_OSSL_CRMF_SINGLEPUBINFO_free_t)(ossl_OSSL_CRMF_SINGLEPUBINFO *a);
typedef ossl_OSSL_CRMF_SINGLEPUBINFO * (*ossl_d2i_OSSL_CRMF_SINGLEPUBINFO_t)(ossl_OSSL_CRMF_SINGLEPUBINFO **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_OSSL_CRMF_SINGLEPUBINFO_t)(const ossl_OSSL_CRMF_SINGLEPUBINFO *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_OSSL_CRMF_SINGLEPUBINFO_it_t)();
typedef ossl_OSSL_CRMF_CERTTEMPLATE * (*ossl_OSSL_CRMF_CERTTEMPLATE_new_t)();
typedef void (*ossl_OSSL_CRMF_CERTTEMPLATE_free_t)(ossl_OSSL_CRMF_CERTTEMPLATE *a);
typedef ossl_OSSL_CRMF_CERTTEMPLATE * (*ossl_d2i_OSSL_CRMF_CERTTEMPLATE_t)(ossl_OSSL_CRMF_CERTTEMPLATE **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_OSSL_CRMF_CERTTEMPLATE_t)(const ossl_OSSL_CRMF_CERTTEMPLATE *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_OSSL_CRMF_CERTTEMPLATE_it_t)();
typedef ossl_OSSL_CRMF_MSGS * (*ossl_OSSL_CRMF_MSGS_new_t)();
typedef void (*ossl_OSSL_CRMF_MSGS_free_t)(ossl_OSSL_CRMF_MSGS *a);
typedef ossl_OSSL_CRMF_MSGS * (*ossl_d2i_OSSL_CRMF_MSGS_t)(ossl_OSSL_CRMF_MSGS **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_OSSL_CRMF_MSGS_t)(const ossl_OSSL_CRMF_MSGS *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_OSSL_CRMF_MSGS_it_t)();
typedef ossl_OSSL_CRMF_PBMPARAMETER * (*ossl_OSSL_CRMF_pbmp_new_t)(ossl_OSSL_LIB_CTX *libctx, size_t slen, int owfnid, size_t itercnt, int macnid);
typedef int (*ossl_OSSL_CRMF_pbm_new_t)(ossl_OSSL_LIB_CTX *libctx, const char *propq, const ossl_OSSL_CRMF_PBMPARAMETER *pbmp, const unsigned char *msg, size_t msglen, const unsigned char *sec, size_t seclen, unsigned char **mac, size_t *maclen);
typedef int (*ossl_OSSL_CRMF_MSG_set1_regCtrl_regToken_t)(ossl_OSSL_CRMF_MSG *msg, const ossl_ASN1_UTF8STRING *tok);
typedef ossl_ASN1_UTF8STRING * (*ossl_OSSL_CRMF_MSG_get0_regCtrl_regToken_t)(const ossl_OSSL_CRMF_MSG *msg);
typedef int (*ossl_OSSL_CRMF_MSG_set1_regCtrl_authenticator_t)(ossl_OSSL_CRMF_MSG *msg, const ossl_ASN1_UTF8STRING *auth);
typedef ossl_ASN1_UTF8STRING * (*ossl_OSSL_CRMF_MSG_get0_regCtrl_authenticator_t)(const ossl_OSSL_CRMF_MSG *msg);
typedef int (*ossl_OSSL_CRMF_MSG_PKIPublicationInfo_push0_SinglePubInfo_t)(ossl_OSSL_CRMF_PKIPUBLICATIONINFO *pi, ossl_OSSL_CRMF_SINGLEPUBINFO *spi);
typedef int (*ossl_OSSL_CRMF_MSG_set0_SinglePubInfo_t)(ossl_OSSL_CRMF_SINGLEPUBINFO *spi, int method, ossl_GENERAL_NAME *nm);
typedef int (*ossl_OSSL_CRMF_MSG_set_PKIPublicationInfo_action_t)(ossl_OSSL_CRMF_PKIPUBLICATIONINFO *pi, int action);
typedef int (*ossl_OSSL_CRMF_MSG_set1_regCtrl_pkiPublicationInfo_t)(ossl_OSSL_CRMF_MSG *msg, const ossl_OSSL_CRMF_PKIPUBLICATIONINFO *pi);
typedef ossl_OSSL_CRMF_PKIPUBLICATIONINFO * (*ossl_OSSL_CRMF_MSG_get0_regCtrl_pkiPublicationInfo_t)(const ossl_OSSL_CRMF_MSG *msg);
typedef int (*ossl_OSSL_CRMF_MSG_set1_regCtrl_protocolEncrKey_t)(ossl_OSSL_CRMF_MSG *msg, const ossl_X509_PUBKEY *pubkey);
typedef ossl_X509_PUBKEY * (*ossl_OSSL_CRMF_MSG_get0_regCtrl_protocolEncrKey_t)(const ossl_OSSL_CRMF_MSG *msg);
typedef int (*ossl_OSSL_CRMF_MSG_set1_regCtrl_oldCertID_t)(ossl_OSSL_CRMF_MSG *msg, const ossl_OSSL_CRMF_CERTID *cid);
typedef ossl_OSSL_CRMF_CERTID * (*ossl_OSSL_CRMF_MSG_get0_regCtrl_oldCertID_t)(const ossl_OSSL_CRMF_MSG *msg);
typedef ossl_OSSL_CRMF_CERTID * (*ossl_OSSL_CRMF_CERTID_gen_t)(const ossl_X509_NAME *issuer, const ossl_ASN1_INTEGER *serial);
typedef int (*ossl_OSSL_CRMF_MSG_set1_regInfo_utf8Pairs_t)(ossl_OSSL_CRMF_MSG *msg, const ossl_ASN1_UTF8STRING *utf8pairs);
typedef ossl_ASN1_UTF8STRING * (*ossl_OSSL_CRMF_MSG_get0_regInfo_utf8Pairs_t)(const ossl_OSSL_CRMF_MSG *msg);
typedef int (*ossl_OSSL_CRMF_MSG_set1_regInfo_certReq_t)(ossl_OSSL_CRMF_MSG *msg, const ossl_OSSL_CRMF_CERTREQUEST *cr);
typedef ossl_OSSL_CRMF_CERTREQUEST * (*ossl_OSSL_CRMF_MSG_get0_regInfo_certReq_t)(const ossl_OSSL_CRMF_MSG *msg);
typedef int (*ossl_OSSL_CRMF_MSG_set0_validity_t)(ossl_OSSL_CRMF_MSG *crm, ossl_ASN1_TIME *notBefore, ossl_ASN1_TIME *notAfter);
typedef int (*ossl_OSSL_CRMF_MSG_set_certReqId_t)(ossl_OSSL_CRMF_MSG *crm, int rid);
typedef int (*ossl_OSSL_CRMF_MSG_get_certReqId_t)(const ossl_OSSL_CRMF_MSG *crm);
typedef int (*ossl_OSSL_CRMF_MSG_set0_extensions_t)(ossl_OSSL_CRMF_MSG *crm, ossl_X509_EXTENSIONS *exts);
typedef int (*ossl_OSSL_CRMF_MSG_push0_extension_t)(ossl_OSSL_CRMF_MSG *crm, ossl_X509_EXTENSION *ext);
typedef int (*ossl_OSSL_CRMF_MSG_create_popo_t)(int meth, ossl_OSSL_CRMF_MSG *crm, ossl_EVP_PKEY *pkey, const ossl_EVP_MD *digest, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_OSSL_CRMF_MSGS_verify_popo_t)(const ossl_OSSL_CRMF_MSGS *reqs, int rid, int acceptRAVerified, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef ossl_OSSL_CRMF_CERTTEMPLATE * (*ossl_OSSL_CRMF_MSG_get0_tmpl_t)(const ossl_OSSL_CRMF_MSG *crm);
typedef const ossl_ASN1_INTEGER * (*ossl_OSSL_CRMF_CERTTEMPLATE_get0_serialNumber_t)(const ossl_OSSL_CRMF_CERTTEMPLATE *tmpl);
typedef const ossl_X509_NAME * (*ossl_OSSL_CRMF_CERTTEMPLATE_get0_subject_t)(const ossl_OSSL_CRMF_CERTTEMPLATE *tmpl);
typedef const ossl_X509_NAME * (*ossl_OSSL_CRMF_CERTTEMPLATE_get0_issuer_t)(const ossl_OSSL_CRMF_CERTTEMPLATE *tmpl);
typedef ossl_X509_EXTENSIONS * (*ossl_OSSL_CRMF_CERTTEMPLATE_get0_extensions_t)(const ossl_OSSL_CRMF_CERTTEMPLATE *tmpl);
typedef const ossl_X509_NAME * (*ossl_OSSL_CRMF_CERTID_get0_issuer_t)(const ossl_OSSL_CRMF_CERTID *cid);
typedef const ossl_ASN1_INTEGER * (*ossl_OSSL_CRMF_CERTID_get0_serialNumber_t)(const ossl_OSSL_CRMF_CERTID *cid);
typedef int (*ossl_OSSL_CRMF_CERTTEMPLATE_fill_t)(ossl_OSSL_CRMF_CERTTEMPLATE *tmpl, ossl_EVP_PKEY *pubkey, const ossl_X509_NAME *subject, const ossl_X509_NAME *issuer, const ossl_ASN1_INTEGER *serial);
typedef ossl_X509 * (*ossl_OSSL_CRMF_ENCRYPTEDVALUE_get1_encCert_t)(const ossl_OSSL_CRMF_ENCRYPTEDVALUE *ecert, ossl_OSSL_LIB_CTX *libctx, const char *propq, ossl_EVP_PKEY *pkey);
typedef int (*ossl_OSSL_trace_get_category_num_t)(const char *name);
typedef const char * (*ossl_OSSL_trace_get_category_name_t)(int num);
typedef int (*ossl_OSSL_trace_set_channel_t)(int category, ossl_BIO *channel);
typedef int (*ossl_OSSL_trace_set_prefix_t)(int category, const char *prefix);
typedef int (*ossl_OSSL_trace_set_suffix_t)(int category, const char *suffix);
typedef int (*ossl_OSSL_trace_set_callback_t)(int category, ossl_OSSL_trace_cb callback, void *data);
typedef int (*ossl_OSSL_trace_enabled_t)(int category);
typedef ossl_BIO * (*ossl_OSSL_trace_begin_t)(int category);
typedef void (*ossl_OSSL_trace_end_t)(int category, ossl_BIO *channel);
typedef int (*ossl_OSSL_CMP_log_open_t)();
typedef void (*ossl_OSSL_CMP_log_close_t)();
typedef int (*ossl_OSSL_CMP_print_to_bio_t)(ossl_BIO *bio, const char *component, const char *file, int line, ossl_OSSL_CMP_severity level, const char *msg);
typedef void (*ossl_OSSL_CMP_print_errors_cb_t)(ossl_OSSL_CMP_log_cb_t log_fn);
typedef const ossl_ASN1_ITEM * (*ossl_OSSL_CMP_PKISTATUS_it_t)();
typedef ossl_OSSL_CMP_PKIHEADER * (*ossl_OSSL_CMP_PKIHEADER_new_t)();
typedef void (*ossl_OSSL_CMP_PKIHEADER_free_t)(ossl_OSSL_CMP_PKIHEADER *a);
typedef ossl_OSSL_CMP_PKIHEADER * (*ossl_d2i_OSSL_CMP_PKIHEADER_t)(ossl_OSSL_CMP_PKIHEADER **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_OSSL_CMP_PKIHEADER_t)(const ossl_OSSL_CMP_PKIHEADER *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_OSSL_CMP_PKIHEADER_it_t)();
typedef ossl_OSSL_CMP_MSG * (*ossl_OSSL_CMP_MSG_dup_t)(const ossl_OSSL_CMP_MSG *a);
typedef ossl_OSSL_CMP_MSG * (*ossl_d2i_OSSL_CMP_MSG_t)(ossl_OSSL_CMP_MSG **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_OSSL_CMP_MSG_t)(const ossl_OSSL_CMP_MSG *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_OSSL_CMP_MSG_it_t)();
typedef ossl_OSSL_CMP_ITAV * (*ossl_OSSL_CMP_ITAV_dup_t)(const ossl_OSSL_CMP_ITAV *a);
typedef ossl_OSSL_CMP_PKISI * (*ossl_OSSL_CMP_PKISI_new_t)();
typedef void (*ossl_OSSL_CMP_PKISI_free_t)(ossl_OSSL_CMP_PKISI *a);
typedef ossl_OSSL_CMP_PKISI * (*ossl_d2i_OSSL_CMP_PKISI_t)(ossl_OSSL_CMP_PKISI **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_OSSL_CMP_PKISI_t)(const ossl_OSSL_CMP_PKISI *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_OSSL_CMP_PKISI_it_t)();
typedef ossl_OSSL_CMP_PKISI * (*ossl_OSSL_CMP_PKISI_dup_t)(const ossl_OSSL_CMP_PKISI *a);
typedef ossl_OSSL_CMP_ITAV * (*ossl_OSSL_CMP_ITAV_create_t)(ossl_ASN1_OBJECT *type, ossl_ASN1_TYPE *value);
typedef void (*ossl_OSSL_CMP_ITAV_set0_t)(ossl_OSSL_CMP_ITAV *itav, ossl_ASN1_OBJECT *type, ossl_ASN1_TYPE *value);
typedef ossl_ASN1_OBJECT * (*ossl_OSSL_CMP_ITAV_get0_type_t)(const ossl_OSSL_CMP_ITAV *itav);
typedef ossl_ASN1_TYPE * (*ossl_OSSL_CMP_ITAV_get0_value_t)(const ossl_OSSL_CMP_ITAV *itav);
typedef int (*ossl_OSSL_CMP_ITAV_push0_stack_item_t)(ossl_STACK_OF(ossl_OSSL_CMP_ITAV) **itav_sk_p, ossl_OSSL_CMP_ITAV *itav);
typedef void (*ossl_OSSL_CMP_ITAV_free_t)(ossl_OSSL_CMP_ITAV *itav);
typedef void (*ossl_OSSL_CMP_MSG_free_t)(ossl_OSSL_CMP_MSG *msg);
typedef ossl_OSSL_CMP_CTX * (*ossl_OSSL_CMP_CTX_new_t)(ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef void (*ossl_OSSL_CMP_CTX_free_t)(ossl_OSSL_CMP_CTX *ctx);
typedef int (*ossl_OSSL_CMP_CTX_reinit_t)(ossl_OSSL_CMP_CTX *ctx);
typedef int (*ossl_OSSL_CMP_CTX_set_option_t)(ossl_OSSL_CMP_CTX *ctx, int opt, int val);
typedef int (*ossl_OSSL_CMP_CTX_get_option_t)(const ossl_OSSL_CMP_CTX *ctx, int opt);
typedef int (*ossl_OSSL_CMP_CTX_set_log_cb_t)(ossl_OSSL_CMP_CTX *ctx, ossl_OSSL_CMP_log_cb_t cb);
typedef void (*ossl_OSSL_CMP_CTX_print_errors_t)(const ossl_OSSL_CMP_CTX *ctx);
typedef int (*ossl_OSSL_CMP_CTX_set1_serverPath_t)(ossl_OSSL_CMP_CTX *ctx, const char *path);
typedef int (*ossl_OSSL_CMP_CTX_set1_server_t)(ossl_OSSL_CMP_CTX *ctx, const char *address);
typedef int (*ossl_OSSL_CMP_CTX_set_serverPort_t)(ossl_OSSL_CMP_CTX *ctx, int port);
typedef int (*ossl_OSSL_CMP_CTX_set1_proxy_t)(ossl_OSSL_CMP_CTX *ctx, const char *name);
typedef int (*ossl_OSSL_CMP_CTX_set1_no_proxy_t)(ossl_OSSL_CMP_CTX *ctx, const char *names);
typedef int (*ossl_OSSL_CMP_CTX_set_http_cb_t)(ossl_OSSL_CMP_CTX *ctx, ossl_OSSL_HTTP_bio_cb_t cb);
typedef int (*ossl_OSSL_CMP_CTX_set_http_cb_arg_t)(ossl_OSSL_CMP_CTX *ctx, void *arg);
typedef void * (*ossl_OSSL_CMP_CTX_get_http_cb_arg_t)(const ossl_OSSL_CMP_CTX *ctx);
typedef int (*ossl_OSSL_CMP_CTX_set_transfer_cb_t)(ossl_OSSL_CMP_CTX *ctx, ossl_OSSL_CMP_transfer_cb_t cb);
typedef int (*ossl_OSSL_CMP_CTX_set_transfer_cb_arg_t)(ossl_OSSL_CMP_CTX *ctx, void *arg);
typedef void * (*ossl_OSSL_CMP_CTX_get_transfer_cb_arg_t)(const ossl_OSSL_CMP_CTX *ctx);
typedef int (*ossl_OSSL_CMP_CTX_set1_srvCert_t)(ossl_OSSL_CMP_CTX *ctx, ossl_X509 *cert);
typedef int (*ossl_OSSL_CMP_CTX_set1_expected_sender_t)(ossl_OSSL_CMP_CTX *ctx, const ossl_X509_NAME *name);
typedef int (*ossl_OSSL_CMP_CTX_set0_trustedStore_t)(ossl_OSSL_CMP_CTX *ctx, ossl_X509_STORE *store);
typedef ossl_X509_STORE * (*ossl_OSSL_CMP_CTX_get0_trustedStore_t)(const ossl_OSSL_CMP_CTX *ctx);
typedef int (*ossl_OSSL_CMP_CTX_set1_untrusted_t)(ossl_OSSL_CMP_CTX *ctx, ossl_STACK_OF(ossl_X509) *certs);
typedef ossl_STACK_OF(ossl_X509) * (*ossl_OSSL_CMP_CTX_get0_untrusted_t)(const ossl_OSSL_CMP_CTX *ctx);
typedef int (*ossl_OSSL_CMP_CTX_set1_cert_t)(ossl_OSSL_CMP_CTX *ctx, ossl_X509 *cert);
typedef int (*ossl_OSSL_CMP_CTX_build_cert_chain_t)(ossl_OSSL_CMP_CTX *ctx, ossl_X509_STORE *own_trusted, ossl_STACK_OF(ossl_X509) *candidates);
typedef int (*ossl_OSSL_CMP_CTX_set1_pkey_t)(ossl_OSSL_CMP_CTX *ctx, ossl_EVP_PKEY *pkey);
typedef int (*ossl_OSSL_CMP_CTX_set1_referenceValue_t)(ossl_OSSL_CMP_CTX *ctx, const unsigned char *ref, int len);
typedef int (*ossl_OSSL_CMP_CTX_set1_secretValue_t)(ossl_OSSL_CMP_CTX *ctx, const unsigned char *sec, int len);
typedef int (*ossl_OSSL_CMP_CTX_set1_recipient_t)(ossl_OSSL_CMP_CTX *ctx, const ossl_X509_NAME *name);
typedef int (*ossl_OSSL_CMP_CTX_push0_geninfo_ITAV_t)(ossl_OSSL_CMP_CTX *ctx, ossl_OSSL_CMP_ITAV *itav);
typedef int (*ossl_OSSL_CMP_CTX_reset_geninfo_ITAVs_t)(ossl_OSSL_CMP_CTX *ctx);
typedef int (*ossl_OSSL_CMP_CTX_set1_extraCertsOut_t)(ossl_OSSL_CMP_CTX *ctx, ossl_STACK_OF(ossl_X509) *extraCertsOut);
typedef int (*ossl_OSSL_CMP_CTX_set0_newPkey_t)(ossl_OSSL_CMP_CTX *ctx, int priv, ossl_EVP_PKEY *pkey);
typedef ossl_EVP_PKEY * (*ossl_OSSL_CMP_CTX_get0_newPkey_t)(const ossl_OSSL_CMP_CTX *ctx, int priv);
typedef int (*ossl_OSSL_CMP_CTX_set1_issuer_t)(ossl_OSSL_CMP_CTX *ctx, const ossl_X509_NAME *name);
typedef int (*ossl_OSSL_CMP_CTX_set1_subjectName_t)(ossl_OSSL_CMP_CTX *ctx, const ossl_X509_NAME *name);
typedef int (*ossl_OSSL_CMP_CTX_push1_subjectAltName_t)(ossl_OSSL_CMP_CTX *ctx, const ossl_GENERAL_NAME *name);
typedef int (*ossl_OSSL_CMP_CTX_set0_reqExtensions_t)(ossl_OSSL_CMP_CTX *ctx, ossl_X509_EXTENSIONS *exts);
typedef int (*ossl_OSSL_CMP_CTX_reqExtensions_have_SAN_t)(ossl_OSSL_CMP_CTX *ctx);
typedef int (*ossl_OSSL_CMP_CTX_push0_policy_t)(ossl_OSSL_CMP_CTX *ctx, ossl_POLICYINFO *pinfo);
typedef int (*ossl_OSSL_CMP_CTX_set1_oldCert_t)(ossl_OSSL_CMP_CTX *ctx, ossl_X509 *cert);
typedef int (*ossl_OSSL_CMP_CTX_set1_p10CSR_t)(ossl_OSSL_CMP_CTX *ctx, const ossl_X509_REQ *csr);
typedef int (*ossl_OSSL_CMP_CTX_push0_genm_ITAV_t)(ossl_OSSL_CMP_CTX *ctx, ossl_OSSL_CMP_ITAV *itav);
typedef int (*ossl_OSSL_CMP_certConf_cb_t)(ossl_OSSL_CMP_CTX *ctx, ossl_X509 *cert, int fail_info, const char **text);
typedef int (*ossl_OSSL_CMP_CTX_set_certConf_cb_t)(ossl_OSSL_CMP_CTX *ctx, ossl_OSSL_CMP_certConf_cb_t cb);
typedef int (*ossl_OSSL_CMP_CTX_set_certConf_cb_arg_t)(ossl_OSSL_CMP_CTX *ctx, void *arg);
typedef void * (*ossl_OSSL_CMP_CTX_get_certConf_cb_arg_t)(const ossl_OSSL_CMP_CTX *ctx);
typedef int (*ossl_OSSL_CMP_CTX_get_status_t)(const ossl_OSSL_CMP_CTX *ctx);
typedef ossl_OSSL_CMP_PKIFREETEXT * (*ossl_OSSL_CMP_CTX_get0_statusString_t)(const ossl_OSSL_CMP_CTX *ctx);
typedef int (*ossl_OSSL_CMP_CTX_get_failInfoCode_t)(const ossl_OSSL_CMP_CTX *ctx);
typedef ossl_X509 * (*ossl_OSSL_CMP_CTX_get0_newCert_t)(const ossl_OSSL_CMP_CTX *ctx);
typedef ossl_STACK_OF(ossl_X509) * (*ossl_OSSL_CMP_CTX_get1_newChain_t)(const ossl_OSSL_CMP_CTX *ctx);
typedef ossl_STACK_OF(ossl_X509) * (*ossl_OSSL_CMP_CTX_get1_caPubs_t)(const ossl_OSSL_CMP_CTX *ctx);
typedef ossl_STACK_OF(ossl_X509) * (*ossl_OSSL_CMP_CTX_get1_extraCertsIn_t)(const ossl_OSSL_CMP_CTX *ctx);
typedef int (*ossl_OSSL_CMP_CTX_set1_transactionID_t)(ossl_OSSL_CMP_CTX *ctx, const ossl_ASN1_OCTET_STRING *id);
typedef int (*ossl_OSSL_CMP_CTX_set1_senderNonce_t)(ossl_OSSL_CMP_CTX *ctx, const ossl_ASN1_OCTET_STRING *nonce);
typedef char * (*ossl_OSSL_CMP_CTX_snprint_PKIStatus_t)(const ossl_OSSL_CMP_CTX *ctx, char *buf, size_t bufsize);
typedef char * (*ossl_OSSL_CMP_snprint_PKIStatusInfo_t)(const ossl_OSSL_CMP_PKISI *statusInfo, char *buf, size_t bufsize);
typedef ossl_OSSL_CMP_PKISI * (*ossl_OSSL_CMP_STATUSINFO_new_t)(int status, int fail_info, const char *text);
typedef ossl_ASN1_OCTET_STRING * (*ossl_OSSL_CMP_HDR_get0_transactionID_t)(const ossl_OSSL_CMP_PKIHEADER *hdr);
typedef ossl_ASN1_OCTET_STRING * (*ossl_OSSL_CMP_HDR_get0_recipNonce_t)(const ossl_OSSL_CMP_PKIHEADER *hdr);
typedef ossl_OSSL_CMP_PKIHEADER * (*ossl_OSSL_CMP_MSG_get0_header_t)(const ossl_OSSL_CMP_MSG *msg);
typedef int (*ossl_OSSL_CMP_MSG_get_bodytype_t)(const ossl_OSSL_CMP_MSG *msg);
typedef int (*ossl_OSSL_CMP_MSG_update_transactionID_t)(ossl_OSSL_CMP_CTX *ctx, ossl_OSSL_CMP_MSG *msg);
typedef int (*ossl_OSSL_CMP_MSG_update_recipNonce_t)(ossl_OSSL_CMP_CTX *ctx, ossl_OSSL_CMP_MSG *msg);
typedef ossl_OSSL_CRMF_MSG * (*ossl_OSSL_CMP_CTX_setup_CRM_t)(ossl_OSSL_CMP_CTX *ctx, int for_KUR, int rid);
typedef ossl_OSSL_CMP_MSG * (*ossl_OSSL_CMP_MSG_read_t)(const char *file, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_OSSL_CMP_MSG_write_t)(const char *file, const ossl_OSSL_CMP_MSG *msg);
typedef ossl_OSSL_CMP_MSG * (*ossl_d2i_OSSL_CMP_MSG_bio_t)(ossl_BIO *bio, ossl_OSSL_CMP_MSG **msg);
typedef int (*ossl_i2d_OSSL_CMP_MSG_bio_t)(ossl_BIO *bio, const ossl_OSSL_CMP_MSG *msg);
typedef int (*ossl_OSSL_CMP_validate_msg_t)(ossl_OSSL_CMP_CTX *ctx, const ossl_OSSL_CMP_MSG *msg);
typedef int (*ossl_OSSL_CMP_validate_cert_path_t)(const ossl_OSSL_CMP_CTX *ctx, ossl_X509_STORE *trusted_store, ossl_X509 *cert);
typedef ossl_OSSL_CMP_MSG * (*ossl_OSSL_CMP_MSG_http_perform_t)(ossl_OSSL_CMP_CTX *ctx, const ossl_OSSL_CMP_MSG *req);
typedef ossl_OSSL_CMP_MSG * (*ossl_OSSL_CMP_SRV_process_request_t)(ossl_OSSL_CMP_SRV_CTX *srv_ctx, const ossl_OSSL_CMP_MSG *req);
typedef ossl_OSSL_CMP_MSG * (*ossl_OSSL_CMP_CTX_server_perform_t)(ossl_OSSL_CMP_CTX *client_ctx, const ossl_OSSL_CMP_MSG *req);
typedef ossl_OSSL_CMP_SRV_CTX * (*ossl_OSSL_CMP_SRV_CTX_new_t)(ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef void (*ossl_OSSL_CMP_SRV_CTX_free_t)(ossl_OSSL_CMP_SRV_CTX *srv_ctx);
typedef int (*ossl_OSSL_CMP_SRV_CTX_init_t)(ossl_OSSL_CMP_SRV_CTX *srv_ctx, void *custom_ctx, ossl_OSSL_CMP_SRV_cert_request_cb_t process_cert_request, ossl_OSSL_CMP_SRV_rr_cb_t process_rr, ossl_OSSL_CMP_SRV_genm_cb_t process_genm, ossl_OSSL_CMP_SRV_error_cb_t process_error, ossl_OSSL_CMP_SRV_certConf_cb_t process_certConf, ossl_OSSL_CMP_SRV_pollReq_cb_t process_pollReq);
typedef ossl_OSSL_CMP_CTX * (*ossl_OSSL_CMP_SRV_CTX_get0_cmp_ctx_t)(const ossl_OSSL_CMP_SRV_CTX *srv_ctx);
typedef void * (*ossl_OSSL_CMP_SRV_CTX_get0_custom_ctx_t)(const ossl_OSSL_CMP_SRV_CTX *srv_ctx);
typedef int (*ossl_OSSL_CMP_SRV_CTX_set_send_unprotected_errors_t)(ossl_OSSL_CMP_SRV_CTX *srv_ctx, int val);
typedef int (*ossl_OSSL_CMP_SRV_CTX_set_accept_unprotected_t)(ossl_OSSL_CMP_SRV_CTX *srv_ctx, int val);
typedef int (*ossl_OSSL_CMP_SRV_CTX_set_accept_raverified_t)(ossl_OSSL_CMP_SRV_CTX *srv_ctx, int val);
typedef int (*ossl_OSSL_CMP_SRV_CTX_set_grant_implicit_confirm_t)(ossl_OSSL_CMP_SRV_CTX *srv_ctx, int val);
typedef ossl_X509 * (*ossl_OSSL_CMP_exec_certreq_t)(ossl_OSSL_CMP_CTX *ctx, int req_type, const ossl_OSSL_CRMF_MSG *crm);
typedef int (*ossl_OSSL_CMP_try_certreq_t)(ossl_OSSL_CMP_CTX *ctx, int req_type, const ossl_OSSL_CRMF_MSG *crm, int *checkAfter);
typedef int (*ossl_OSSL_CMP_exec_RR_ses_t)(ossl_OSSL_CMP_CTX *ctx);
typedef ossl_STACK_OF(ossl_OSSL_CMP_ITAV) * (*ossl_OSSL_CMP_exec_GENM_ses_t)(ossl_OSSL_CMP_CTX *ctx);
typedef ossl_CMS_ContentInfo * (*ossl_CMS_ContentInfo_new_t)();
typedef void (*ossl_CMS_ContentInfo_free_t)(ossl_CMS_ContentInfo *a);
typedef ossl_CMS_ContentInfo * (*ossl_d2i_CMS_ContentInfo_t)(ossl_CMS_ContentInfo **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_CMS_ContentInfo_t)(const ossl_CMS_ContentInfo *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_CMS_ContentInfo_it_t)();
typedef ossl_CMS_ReceiptRequest * (*ossl_CMS_ReceiptRequest_new_t)();
typedef void (*ossl_CMS_ReceiptRequest_free_t)(ossl_CMS_ReceiptRequest *a);
typedef ossl_CMS_ReceiptRequest * (*ossl_d2i_CMS_ReceiptRequest_t)(ossl_CMS_ReceiptRequest **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_CMS_ReceiptRequest_t)(const ossl_CMS_ReceiptRequest *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_CMS_ReceiptRequest_it_t)();
typedef int (*ossl_CMS_ContentInfo_print_ctx_t)(ossl_BIO *out, const ossl_CMS_ContentInfo *x, int indent, const ossl_ASN1_PCTX *pctx);
typedef ossl_CMS_ContentInfo * (*ossl_CMS_ContentInfo_new_ex_t)(ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef const ossl_ASN1_OBJECT * (*ossl_CMS_get0_type_t)(const ossl_CMS_ContentInfo *cms);
typedef ossl_BIO * (*ossl_CMS_dataInit_t)(ossl_CMS_ContentInfo *cms, ossl_BIO *icont);
typedef int (*ossl_CMS_dataFinal_t)(ossl_CMS_ContentInfo *cms, ossl_BIO *bio);
typedef ossl_ASN1_OCTET_STRING ** (*ossl_CMS_get0_content_t)(ossl_CMS_ContentInfo *cms);
typedef int (*ossl_CMS_is_detached_t)(ossl_CMS_ContentInfo *cms);
typedef int (*ossl_CMS_set_detached_t)(ossl_CMS_ContentInfo *cms, int detached);
typedef int (*ossl_CMS_stream_t)(unsigned char ***boundary, ossl_CMS_ContentInfo *cms);
typedef ossl_CMS_ContentInfo * (*ossl_d2i_CMS_bio_t)(ossl_BIO *bp, ossl_CMS_ContentInfo **cms);
typedef int (*ossl_i2d_CMS_bio_t)(ossl_BIO *bp, ossl_CMS_ContentInfo *cms);
typedef ossl_BIO * (*ossl_BIO_new_CMS_t)(ossl_BIO *out, ossl_CMS_ContentInfo *cms);
typedef int (*ossl_i2d_CMS_bio_stream_t)(ossl_BIO *out, ossl_CMS_ContentInfo *cms, ossl_BIO *in, int flags);
typedef int (*ossl_PEM_write_bio_CMS_stream_t)(ossl_BIO *out, ossl_CMS_ContentInfo *cms, ossl_BIO *in, int flags);
typedef ossl_CMS_ContentInfo * (*ossl_SMIME_read_CMS_t)(ossl_BIO *bio, ossl_BIO **bcont);
typedef ossl_CMS_ContentInfo * (*ossl_SMIME_read_CMS_ex_t)(ossl_BIO *bio, int flags, ossl_BIO **bcont, ossl_CMS_ContentInfo **ci);
typedef int (*ossl_SMIME_write_CMS_t)(ossl_BIO *bio, ossl_CMS_ContentInfo *cms, ossl_BIO *data, int flags);
typedef int (*ossl_CMS_final_t)(ossl_CMS_ContentInfo *cms, ossl_BIO *data, ossl_BIO *dcont, unsigned int flags);
typedef ossl_CMS_ContentInfo * (*ossl_CMS_sign_t)(ossl_X509 *signcert, ossl_EVP_PKEY *pkey, ossl_STACK_OF(ossl_X509) *certs, ossl_BIO *data, unsigned int flags);
typedef ossl_CMS_ContentInfo * (*ossl_CMS_sign_ex_t)(ossl_X509 *signcert, ossl_EVP_PKEY *pkey, ossl_STACK_OF(ossl_X509) *certs, ossl_BIO *data, unsigned int flags, ossl_OSSL_LIB_CTX *ctx, const char *propq);
typedef ossl_CMS_ContentInfo * (*ossl_CMS_sign_receipt_t)(ossl_CMS_SignerInfo *si, ossl_X509 *signcert, ossl_EVP_PKEY *pkey, ossl_STACK_OF(ossl_X509) *certs, unsigned int flags);
typedef int (*ossl_CMS_data_t)(ossl_CMS_ContentInfo *cms, ossl_BIO *out, unsigned int flags);
typedef ossl_CMS_ContentInfo * (*ossl_CMS_data_create_t)(ossl_BIO *in, unsigned int flags);
typedef ossl_CMS_ContentInfo * (*ossl_CMS_data_create_ex_t)(ossl_BIO *in, unsigned int flags, ossl_OSSL_LIB_CTX *ctx, const char *propq);
typedef int (*ossl_CMS_digest_verify_t)(ossl_CMS_ContentInfo *cms, ossl_BIO *dcont, ossl_BIO *out, unsigned int flags);
typedef ossl_CMS_ContentInfo * (*ossl_CMS_digest_create_t)(ossl_BIO *in, const ossl_EVP_MD *md, unsigned int flags);
typedef ossl_CMS_ContentInfo * (*ossl_CMS_digest_create_ex_t)(ossl_BIO *in, const ossl_EVP_MD *md, unsigned int flags, ossl_OSSL_LIB_CTX *ctx, const char *propq);
typedef int (*ossl_CMS_EncryptedData_decrypt_t)(ossl_CMS_ContentInfo *cms, const unsigned char *key, size_t keylen, ossl_BIO *dcont, ossl_BIO *out, unsigned int flags);
typedef ossl_CMS_ContentInfo * (*ossl_CMS_EncryptedData_encrypt_t)(ossl_BIO *in, const ossl_EVP_CIPHER *cipher, const unsigned char *key, size_t keylen, unsigned int flags);
typedef ossl_CMS_ContentInfo * (*ossl_CMS_EncryptedData_encrypt_ex_t)(ossl_BIO *in, const ossl_EVP_CIPHER *cipher, const unsigned char *key, size_t keylen, unsigned int flags, ossl_OSSL_LIB_CTX *ctx, const char *propq);
typedef int (*ossl_CMS_EncryptedData_set1_key_t)(ossl_CMS_ContentInfo *cms, const ossl_EVP_CIPHER *ciph, const unsigned char *key, size_t keylen);
typedef int (*ossl_CMS_verify_t)(ossl_CMS_ContentInfo *cms, ossl_STACK_OF(ossl_X509) *certs, ossl_X509_STORE *store, ossl_BIO *dcont, ossl_BIO *out, unsigned int flags);
typedef int (*ossl_CMS_verify_receipt_t)(ossl_CMS_ContentInfo *rcms, ossl_CMS_ContentInfo *ocms, ossl_STACK_OF(ossl_X509) *certs, ossl_X509_STORE *store, unsigned int flags);
typedef ossl_STACK_OF(ossl_X509) * (*ossl_CMS_get0_signers_t)(ossl_CMS_ContentInfo *cms);
typedef ossl_CMS_ContentInfo * (*ossl_CMS_encrypt_t)(ossl_STACK_OF(ossl_X509) *certs, ossl_BIO *in, const ossl_EVP_CIPHER *cipher, unsigned int flags);
typedef ossl_CMS_ContentInfo * (*ossl_CMS_encrypt_ex_t)(ossl_STACK_OF(ossl_X509) *certs, ossl_BIO *in, const ossl_EVP_CIPHER *cipher, unsigned int flags, ossl_OSSL_LIB_CTX *ctx, const char *propq);
typedef int (*ossl_CMS_decrypt_t)(ossl_CMS_ContentInfo *cms, ossl_EVP_PKEY *pkey, ossl_X509 *cert, ossl_BIO *dcont, ossl_BIO *out, unsigned int flags);
typedef int (*ossl_CMS_decrypt_set1_pkey_t)(ossl_CMS_ContentInfo *cms, ossl_EVP_PKEY *pk, ossl_X509 *cert);
typedef int (*ossl_CMS_decrypt_set1_pkey_and_peer_t)(ossl_CMS_ContentInfo *cms, ossl_EVP_PKEY *pk, ossl_X509 *cert, ossl_X509 *peer);
typedef int (*ossl_CMS_decrypt_set1_key_t)(ossl_CMS_ContentInfo *cms, unsigned char *key, size_t keylen, const unsigned char *id, size_t idlen);
typedef int (*ossl_CMS_decrypt_set1_password_t)(ossl_CMS_ContentInfo *cms, unsigned char *pass, ssize_t passlen);
typedef ossl_STACK_OF(ossl_CMS_RecipientInfo) * (*ossl_CMS_get0_RecipientInfos_t)(ossl_CMS_ContentInfo *cms);
typedef int (*ossl_CMS_RecipientInfo_type_t)(ossl_CMS_RecipientInfo *ri);
typedef ossl_EVP_PKEY_CTX * (*ossl_CMS_RecipientInfo_get0_pkey_ctx_t)(ossl_CMS_RecipientInfo *ri);
typedef ossl_CMS_ContentInfo * (*ossl_CMS_AuthEnvelopedData_create_t)(const ossl_EVP_CIPHER *cipher);
typedef ossl_CMS_ContentInfo * (*ossl_CMS_AuthEnvelopedData_create_ex_t)(const ossl_EVP_CIPHER *cipher, ossl_OSSL_LIB_CTX *ctx, const char *propq);
typedef ossl_CMS_ContentInfo * (*ossl_CMS_EnvelopedData_create_t)(const ossl_EVP_CIPHER *cipher);
typedef ossl_CMS_ContentInfo * (*ossl_CMS_EnvelopedData_create_ex_t)(const ossl_EVP_CIPHER *cipher, ossl_OSSL_LIB_CTX *ctx, const char *propq);
typedef ossl_CMS_RecipientInfo * (*ossl_CMS_add1_recipient_cert_t)(ossl_CMS_ContentInfo *cms, ossl_X509 *recip, unsigned int flags);
typedef ossl_CMS_RecipientInfo * (*ossl_CMS_add1_recipient_t)(ossl_CMS_ContentInfo *cms, ossl_X509 *recip, ossl_EVP_PKEY *originatorPrivKey, ossl_X509 *originator, unsigned int flags);
typedef int (*ossl_CMS_RecipientInfo_set0_pkey_t)(ossl_CMS_RecipientInfo *ri, ossl_EVP_PKEY *pkey);
typedef int (*ossl_CMS_RecipientInfo_ktri_cert_cmp_t)(ossl_CMS_RecipientInfo *ri, ossl_X509 *cert);
typedef int (*ossl_CMS_RecipientInfo_ktri_get0_algs_t)(ossl_CMS_RecipientInfo *ri, ossl_EVP_PKEY **pk, ossl_X509 **recip, ossl_X509_ALGOR **palg);
typedef int (*ossl_CMS_RecipientInfo_ktri_get0_signer_id_t)(ossl_CMS_RecipientInfo *ri, ossl_ASN1_OCTET_STRING **keyid, ossl_X509_NAME **issuer, ossl_ASN1_INTEGER **sno);
typedef ossl_CMS_RecipientInfo * (*ossl_CMS_add0_recipient_key_t)(ossl_CMS_ContentInfo *cms, int nid, unsigned char *key, size_t keylen, unsigned char *id, size_t idlen, ossl_ASN1_GENERALIZEDTIME *date, ossl_ASN1_OBJECT *otherTypeId, ossl_ASN1_TYPE *otherType);
typedef int (*ossl_CMS_RecipientInfo_kekri_get0_id_t)(ossl_CMS_RecipientInfo *ri, ossl_X509_ALGOR **palg, ossl_ASN1_OCTET_STRING **pid, ossl_ASN1_GENERALIZEDTIME **pdate, ossl_ASN1_OBJECT **potherid, ossl_ASN1_TYPE **pothertype);
typedef int (*ossl_CMS_RecipientInfo_set0_key_t)(ossl_CMS_RecipientInfo *ri, unsigned char *key, size_t keylen);
typedef int (*ossl_CMS_RecipientInfo_kekri_id_cmp_t)(ossl_CMS_RecipientInfo *ri, const unsigned char *id, size_t idlen);
typedef int (*ossl_CMS_RecipientInfo_set0_password_t)(ossl_CMS_RecipientInfo *ri, unsigned char *pass, ssize_t passlen);
typedef ossl_CMS_RecipientInfo * (*ossl_CMS_add0_recipient_password_t)(ossl_CMS_ContentInfo *cms, int iter, int wrap_nid, int pbe_nid, unsigned char *pass, ssize_t passlen, const ossl_EVP_CIPHER *kekciph);
typedef int (*ossl_CMS_RecipientInfo_decrypt_t)(ossl_CMS_ContentInfo *cms, ossl_CMS_RecipientInfo *ri);
typedef int (*ossl_CMS_RecipientInfo_encrypt_t)(const ossl_CMS_ContentInfo *cms, ossl_CMS_RecipientInfo *ri);
typedef int (*ossl_CMS_uncompress_t)(ossl_CMS_ContentInfo *cms, ossl_BIO *dcont, ossl_BIO *out, unsigned int flags);
typedef ossl_CMS_ContentInfo * (*ossl_CMS_compress_t)(ossl_BIO *in, int comp_nid, unsigned int flags);
typedef int (*ossl_CMS_set1_eContentType_t)(ossl_CMS_ContentInfo *cms, const ossl_ASN1_OBJECT *oid);
typedef const ossl_ASN1_OBJECT * (*ossl_CMS_get0_eContentType_t)(ossl_CMS_ContentInfo *cms);
typedef ossl_CMS_CertificateChoices * (*ossl_CMS_add0_CertificateChoices_t)(ossl_CMS_ContentInfo *cms);
typedef int (*ossl_CMS_add0_cert_t)(ossl_CMS_ContentInfo *cms, ossl_X509 *cert);
typedef int (*ossl_CMS_add1_cert_t)(ossl_CMS_ContentInfo *cms, ossl_X509 *cert);
typedef ossl_STACK_OF(ossl_X509) * (*ossl_CMS_get1_certs_t)(ossl_CMS_ContentInfo *cms);
typedef ossl_CMS_RevocationInfoChoice * (*ossl_CMS_add0_RevocationInfoChoice_t)(ossl_CMS_ContentInfo *cms);
typedef int (*ossl_CMS_add0_crl_t)(ossl_CMS_ContentInfo *cms, ossl_X509_CRL *crl);
typedef int (*ossl_CMS_add1_crl_t)(ossl_CMS_ContentInfo *cms, ossl_X509_CRL *crl);
typedef ossl_STACK_OF(ossl_X509_CRL) * (*ossl_CMS_get1_crls_t)(ossl_CMS_ContentInfo *cms);
typedef int (*ossl_CMS_SignedData_init_t)(ossl_CMS_ContentInfo *cms);
typedef ossl_CMS_SignerInfo * (*ossl_CMS_add1_signer_t)(ossl_CMS_ContentInfo *cms, ossl_X509 *signer, ossl_EVP_PKEY *pk, const ossl_EVP_MD *md, unsigned int flags);
typedef ossl_EVP_PKEY_CTX * (*ossl_CMS_SignerInfo_get0_pkey_ctx_t)(ossl_CMS_SignerInfo *si);
typedef ossl_EVP_MD_CTX * (*ossl_CMS_SignerInfo_get0_md_ctx_t)(ossl_CMS_SignerInfo *si);
typedef ossl_STACK_OF(ossl_CMS_SignerInfo) * (*ossl_CMS_get0_SignerInfos_t)(ossl_CMS_ContentInfo *cms);
typedef void (*ossl_CMS_SignerInfo_set1_signer_cert_t)(ossl_CMS_SignerInfo *si, ossl_X509 *signer);
typedef int (*ossl_CMS_SignerInfo_get0_signer_id_t)(ossl_CMS_SignerInfo *si, ossl_ASN1_OCTET_STRING **keyid, ossl_X509_NAME **issuer, ossl_ASN1_INTEGER **sno);
typedef int (*ossl_CMS_SignerInfo_cert_cmp_t)(ossl_CMS_SignerInfo *si, ossl_X509 *cert);
typedef int (*ossl_CMS_set1_signers_certs_t)(ossl_CMS_ContentInfo *cms, ossl_STACK_OF(ossl_X509) *certs, unsigned int flags);
typedef void (*ossl_CMS_SignerInfo_get0_algs_t)(ossl_CMS_SignerInfo *si, ossl_EVP_PKEY **pk, ossl_X509 **signer, ossl_X509_ALGOR **pdig, ossl_X509_ALGOR **psig);
typedef ossl_ASN1_OCTET_STRING * (*ossl_CMS_SignerInfo_get0_signature_t)(ossl_CMS_SignerInfo *si);
typedef int (*ossl_CMS_SignerInfo_sign_t)(ossl_CMS_SignerInfo *si);
typedef int (*ossl_CMS_SignerInfo_verify_t)(ossl_CMS_SignerInfo *si);
typedef int (*ossl_CMS_SignerInfo_verify_content_t)(ossl_CMS_SignerInfo *si, ossl_BIO *chain);
typedef int (*ossl_CMS_add_smimecap_t)(ossl_CMS_SignerInfo *si, ossl_STACK_OF(ossl_X509_ALGOR) *algs);
typedef int (*ossl_CMS_add_simple_smimecap_t)(ossl_STACK_OF(ossl_X509_ALGOR) **algs, int algnid, int keysize);
typedef int (*ossl_CMS_add_standard_smimecap_t)(ossl_STACK_OF(ossl_X509_ALGOR) **smcap);
typedef int (*ossl_CMS_signed_get_attr_count_t)(const ossl_CMS_SignerInfo *si);
typedef int (*ossl_CMS_signed_get_attr_by_NID_t)(const ossl_CMS_SignerInfo *si, int nid, int lastpos);
typedef int (*ossl_CMS_signed_get_attr_by_OBJ_t)(const ossl_CMS_SignerInfo *si, const ossl_ASN1_OBJECT *obj, int lastpos);
typedef ossl_X509_ATTRIBUTE * (*ossl_CMS_signed_get_attr_t)(const ossl_CMS_SignerInfo *si, int loc);
typedef ossl_X509_ATTRIBUTE * (*ossl_CMS_signed_delete_attr_t)(ossl_CMS_SignerInfo *si, int loc);
typedef int (*ossl_CMS_signed_add1_attr_t)(ossl_CMS_SignerInfo *si, ossl_X509_ATTRIBUTE *attr);
typedef int (*ossl_CMS_signed_add1_attr_by_OBJ_t)(ossl_CMS_SignerInfo *si, const ossl_ASN1_OBJECT *obj, int type, const void *bytes, int len);
typedef int (*ossl_CMS_signed_add1_attr_by_NID_t)(ossl_CMS_SignerInfo *si, int nid, int type, const void *bytes, int len);
typedef int (*ossl_CMS_signed_add1_attr_by_txt_t)(ossl_CMS_SignerInfo *si, const char *attrname, int type, const void *bytes, int len);
typedef void * (*ossl_CMS_signed_get0_data_by_OBJ_t)(const ossl_CMS_SignerInfo *si, const ossl_ASN1_OBJECT *oid, int lastpos, int type);
typedef int (*ossl_CMS_unsigned_get_attr_count_t)(const ossl_CMS_SignerInfo *si);
typedef int (*ossl_CMS_unsigned_get_attr_by_NID_t)(const ossl_CMS_SignerInfo *si, int nid, int lastpos);
typedef int (*ossl_CMS_unsigned_get_attr_by_OBJ_t)(const ossl_CMS_SignerInfo *si, const ossl_ASN1_OBJECT *obj, int lastpos);
typedef ossl_X509_ATTRIBUTE * (*ossl_CMS_unsigned_get_attr_t)(const ossl_CMS_SignerInfo *si, int loc);
typedef ossl_X509_ATTRIBUTE * (*ossl_CMS_unsigned_delete_attr_t)(ossl_CMS_SignerInfo *si, int loc);
typedef int (*ossl_CMS_unsigned_add1_attr_t)(ossl_CMS_SignerInfo *si, ossl_X509_ATTRIBUTE *attr);
typedef int (*ossl_CMS_unsigned_add1_attr_by_OBJ_t)(ossl_CMS_SignerInfo *si, const ossl_ASN1_OBJECT *obj, int type, const void *bytes, int len);
typedef int (*ossl_CMS_unsigned_add1_attr_by_NID_t)(ossl_CMS_SignerInfo *si, int nid, int type, const void *bytes, int len);
typedef int (*ossl_CMS_unsigned_add1_attr_by_txt_t)(ossl_CMS_SignerInfo *si, const char *attrname, int type, const void *bytes, int len);
typedef void * (*ossl_CMS_unsigned_get0_data_by_OBJ_t)(ossl_CMS_SignerInfo *si, ossl_ASN1_OBJECT *oid, int lastpos, int type);
typedef int (*ossl_CMS_get1_ReceiptRequest_t)(ossl_CMS_SignerInfo *si, ossl_CMS_ReceiptRequest **prr);
typedef ossl_CMS_ReceiptRequest * (*ossl_CMS_ReceiptRequest_create0_t)(unsigned char *id, int idlen, int allorfirst, ossl_STACK_OF(ossl_GENERAL_NAMES) *receiptList, ossl_STACK_OF(ossl_GENERAL_NAMES) *receiptsTo);
typedef ossl_CMS_ReceiptRequest * (*ossl_CMS_ReceiptRequest_create0_ex_t)(unsigned char *id, int idlen, int allorfirst, ossl_STACK_OF(ossl_GENERAL_NAMES) *receiptList, ossl_STACK_OF(ossl_GENERAL_NAMES) *receiptsTo, ossl_OSSL_LIB_CTX *ctx);
typedef int (*ossl_CMS_add1_ReceiptRequest_t)(ossl_CMS_SignerInfo *si, ossl_CMS_ReceiptRequest *rr);
typedef void (*ossl_CMS_ReceiptRequest_get0_values_t)(ossl_CMS_ReceiptRequest *rr, ossl_ASN1_STRING **pcid, int *pallorfirst, ossl_STACK_OF(ossl_GENERAL_NAMES) **plist, ossl_STACK_OF(ossl_GENERAL_NAMES) **prto);
typedef int (*ossl_CMS_RecipientInfo_kari_get0_alg_t)(ossl_CMS_RecipientInfo *ri, ossl_X509_ALGOR **palg, ossl_ASN1_OCTET_STRING **pukm);
typedef ossl_STACK_OF(ossl_CMS_RecipientEncryptedKey) * (*ossl_CMS_RecipientInfo_kari_get0_reks_t)(ossl_CMS_RecipientInfo *ri);
typedef int (*ossl_CMS_RecipientInfo_kari_get0_orig_id_t)(ossl_CMS_RecipientInfo *ri, ossl_X509_ALGOR **pubalg, ossl_ASN1_BIT_STRING **pubkey, ossl_ASN1_OCTET_STRING **keyid, ossl_X509_NAME **issuer, ossl_ASN1_INTEGER **sno);
typedef int (*ossl_CMS_RecipientInfo_kari_orig_id_cmp_t)(ossl_CMS_RecipientInfo *ri, ossl_X509 *cert);
typedef int (*ossl_CMS_RecipientEncryptedKey_get0_id_t)(ossl_CMS_RecipientEncryptedKey *rek, ossl_ASN1_OCTET_STRING **keyid, ossl_ASN1_GENERALIZEDTIME **tm, ossl_CMS_OtherKeyAttribute **other, ossl_X509_NAME **issuer, ossl_ASN1_INTEGER **sno);
typedef int (*ossl_CMS_RecipientEncryptedKey_cert_cmp_t)(ossl_CMS_RecipientEncryptedKey *rek, ossl_X509 *cert);
typedef int (*ossl_CMS_RecipientInfo_kari_set0_pkey_t)(ossl_CMS_RecipientInfo *ri, ossl_EVP_PKEY *pk);
typedef int (*ossl_CMS_RecipientInfo_kari_set0_pkey_and_peer_t)(ossl_CMS_RecipientInfo *ri, ossl_EVP_PKEY *pk, ossl_X509 *peer);
typedef ossl_EVP_CIPHER_CTX * (*ossl_CMS_RecipientInfo_kari_get0_ctx_t)(ossl_CMS_RecipientInfo *ri);
typedef int (*ossl_CMS_RecipientInfo_kari_decrypt_t)(ossl_CMS_ContentInfo *cms, ossl_CMS_RecipientInfo *ri, ossl_CMS_RecipientEncryptedKey *rek);
typedef int (*ossl_CMS_SharedInfo_encode_t)(unsigned char **pder, ossl_X509_ALGOR *kekalg, ossl_ASN1_OCTET_STRING *ukm, int keylen);
typedef ossl_COMP_CTX * (*ossl_COMP_CTX_new_t)(ossl_COMP_METHOD *meth);
typedef const ossl_COMP_METHOD * (*ossl_COMP_CTX_get_method_t)(const ossl_COMP_CTX *ctx);
typedef int (*ossl_COMP_CTX_get_type_t)(const ossl_COMP_CTX *comp);
typedef int (*ossl_COMP_get_type_t)(const ossl_COMP_METHOD *meth);
typedef const char * (*ossl_COMP_get_name_t)(const ossl_COMP_METHOD *meth);
typedef void (*ossl_COMP_CTX_free_t)(ossl_COMP_CTX *ctx);
typedef int (*ossl_COMP_compress_block_t)(ossl_COMP_CTX *ctx, unsigned char *out, int olen, unsigned char *in, int ilen);
typedef int (*ossl_COMP_expand_block_t)(ossl_COMP_CTX *ctx, unsigned char *out, int olen, unsigned char *in, int ilen);
typedef ossl_COMP_METHOD * (*ossl_COMP_zlib_t)();
typedef ossl_CONF_VALUE * (*ossl__CONF_new_section_t)(ossl_CONF *conf, const char *section);
typedef ossl_CONF_VALUE * (*ossl__CONF_get_section_t)(const ossl_CONF *conf, const char *section);
typedef ossl_STACK_OF(ossl_CONF_VALUE) * (*ossl__CONF_get_section_values_t)(const ossl_CONF *conf, const char *section);
typedef int (*ossl__CONF_add_string_t)(ossl_CONF *conf, ossl_CONF_VALUE *section, ossl_CONF_VALUE *value);
typedef char * (*ossl__CONF_get_string_t)(const ossl_CONF *conf, const char *section, const char *name);
typedef long (*ossl__CONF_get_number_t)(const ossl_CONF *conf, const char *section, const char *name);
typedef int (*ossl__CONF_new_data_t)(ossl_CONF *conf);
typedef void (*ossl__CONF_free_data_t)(ossl_CONF *conf);
typedef ossl_CT_POLICY_EVAL_CTX * (*ossl_CT_POLICY_EVAL_CTX_new_ex_t)(ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef ossl_CT_POLICY_EVAL_CTX * (*ossl_CT_POLICY_EVAL_CTX_new_t)();
typedef void (*ossl_CT_POLICY_EVAL_CTX_free_t)(ossl_CT_POLICY_EVAL_CTX *ctx);
typedef ossl_X509 * (*ossl_CT_POLICY_EVAL_CTX_get0_cert_t)(const ossl_CT_POLICY_EVAL_CTX *ctx);
typedef int (*ossl_CT_POLICY_EVAL_CTX_set1_cert_t)(ossl_CT_POLICY_EVAL_CTX *ctx, ossl_X509 *cert);
typedef ossl_X509 * (*ossl_CT_POLICY_EVAL_CTX_get0_issuer_t)(const ossl_CT_POLICY_EVAL_CTX *ctx);
typedef int (*ossl_CT_POLICY_EVAL_CTX_set1_issuer_t)(ossl_CT_POLICY_EVAL_CTX *ctx, ossl_X509 *issuer);
typedef const ossl_CTLOG_STORE * (*ossl_CT_POLICY_EVAL_CTX_get0_log_store_t)(const ossl_CT_POLICY_EVAL_CTX *ctx);
typedef void (*ossl_CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE_t)(ossl_CT_POLICY_EVAL_CTX *ctx, ossl_CTLOG_STORE *log_store);
typedef uint64_t (*ossl_CT_POLICY_EVAL_CTX_get_time_t)(const ossl_CT_POLICY_EVAL_CTX *ctx);
typedef void (*ossl_CT_POLICY_EVAL_CTX_set_time_t)(ossl_CT_POLICY_EVAL_CTX *ctx, uint64_t time_in_ms);
typedef ossl_SCT * (*ossl_SCT_new_t)();
typedef ossl_SCT * (*ossl_SCT_new_from_base64_t)(unsigned char version, const char *logid_base64, ossl_ct_log_entry_type_t entry_type, uint64_t timestamp, const char *extensions_base64, const char *signature_base64);
typedef void (*ossl_SCT_free_t)(ossl_SCT *sct);
typedef void (*ossl_SCT_LIST_free_t)(ossl_STACK_OF(ossl_SCT) *a);
typedef ossl_sct_version_t (*ossl_SCT_get_version_t)(const ossl_SCT *sct);
typedef int (*ossl_SCT_set_version_t)(ossl_SCT *sct, ossl_sct_version_t version);
typedef ossl_ct_log_entry_type_t (*ossl_SCT_get_log_entry_type_t)(const ossl_SCT *sct);
typedef int (*ossl_SCT_set_log_entry_type_t)(ossl_SCT *sct, ossl_ct_log_entry_type_t entry_type);
typedef size_t (*ossl_SCT_get0_log_id_t)(const ossl_SCT *sct, unsigned char **log_id);
typedef int (*ossl_SCT_set0_log_id_t)(ossl_SCT *sct, unsigned char *log_id, size_t log_id_len);
typedef int (*ossl_SCT_set1_log_id_t)(ossl_SCT *sct, const unsigned char *log_id, size_t log_id_len);
typedef uint64_t (*ossl_SCT_get_timestamp_t)(const ossl_SCT *sct);
typedef void (*ossl_SCT_set_timestamp_t)(ossl_SCT *sct, uint64_t timestamp);
typedef int (*ossl_SCT_get_signature_nid_t)(const ossl_SCT *sct);
typedef int (*ossl_SCT_set_signature_nid_t)(ossl_SCT *sct, int nid);
typedef size_t (*ossl_SCT_get0_extensions_t)(const ossl_SCT *sct, unsigned char **ext);
typedef void (*ossl_SCT_set0_extensions_t)(ossl_SCT *sct, unsigned char *ext, size_t ext_len);
typedef int (*ossl_SCT_set1_extensions_t)(ossl_SCT *sct, const unsigned char *ext, size_t ext_len);
typedef size_t (*ossl_SCT_get0_signature_t)(const ossl_SCT *sct, unsigned char **sig);
typedef void (*ossl_SCT_set0_signature_t)(ossl_SCT *sct, unsigned char *sig, size_t sig_len);
typedef int (*ossl_SCT_set1_signature_t)(ossl_SCT *sct, const unsigned char *sig, size_t sig_len);
typedef ossl_sct_source_t (*ossl_SCT_get_source_t)(const ossl_SCT *sct);
typedef int (*ossl_SCT_set_source_t)(ossl_SCT *sct, ossl_sct_source_t source);
typedef const char * (*ossl_SCT_validation_status_string_t)(const ossl_SCT *sct);
typedef void (*ossl_SCT_print_t)(const ossl_SCT *sct, ossl_BIO *out, int indent, const ossl_CTLOG_STORE *logs);
typedef void (*ossl_SCT_LIST_print_t)(const ossl_STACK_OF(ossl_SCT) *sct_list, ossl_BIO *out, int indent, const char *separator, const ossl_CTLOG_STORE *logs);
typedef ossl_sct_validation_status_t (*ossl_SCT_get_validation_status_t)(const ossl_SCT *sct);
typedef int (*ossl_SCT_validate_t)(ossl_SCT *sct, const ossl_CT_POLICY_EVAL_CTX *ctx);
typedef int (*ossl_SCT_LIST_validate_t)(const ossl_STACK_OF(ossl_SCT) *scts, ossl_CT_POLICY_EVAL_CTX *ctx);
typedef int (*ossl_i2o_SCT_LIST_t)(const ossl_STACK_OF(ossl_SCT) *a, unsigned char **pp);
typedef ossl_STACK_OF(ossl_SCT) * (*ossl_o2i_SCT_LIST_t)(ossl_STACK_OF(ossl_SCT) **a, const unsigned char **pp, size_t len);
typedef int (*ossl_i2d_SCT_LIST_t)(const ossl_STACK_OF(ossl_SCT) *a, unsigned char **pp);
typedef ossl_STACK_OF(ossl_SCT) * (*ossl_d2i_SCT_LIST_t)(ossl_STACK_OF(ossl_SCT) **a, const unsigned char **pp, long len);
typedef int (*ossl_i2o_SCT_t)(const ossl_SCT *sct, unsigned char **out);
typedef ossl_SCT * (*ossl_o2i_SCT_t)(ossl_SCT **psct, const unsigned char **in, size_t len);
typedef ossl_CTLOG * (*ossl_CTLOG_new_ex_t)(ossl_EVP_PKEY *public_key, const char *name, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef ossl_CTLOG * (*ossl_CTLOG_new_t)(ossl_EVP_PKEY *public_key, const char *name);
typedef int (*ossl_CTLOG_new_from_base64_ex_t)(ossl_CTLOG **ct_log, const char *pkey_base64, const char *name, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_CTLOG_new_from_base64_t)(ossl_CTLOG **ct_log, const char *pkey_base64, const char *name);
typedef void (*ossl_CTLOG_free_t)(ossl_CTLOG *log);
typedef const char * (*ossl_CTLOG_get0_name_t)(const ossl_CTLOG *log);
typedef void (*ossl_CTLOG_get0_log_id_t)(const ossl_CTLOG *log, const uint8_t **log_id, size_t *log_id_len);
typedef ossl_EVP_PKEY * (*ossl_CTLOG_get0_public_key_t)(const ossl_CTLOG *log);
typedef ossl_CTLOG_STORE * (*ossl_CTLOG_STORE_new_ex_t)(ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef ossl_CTLOG_STORE * (*ossl_CTLOG_STORE_new_t)();
typedef void (*ossl_CTLOG_STORE_free_t)(ossl_CTLOG_STORE *store);
typedef const ossl_CTLOG * (*ossl_CTLOG_STORE_get0_log_by_id_t)(const ossl_CTLOG_STORE *store, const uint8_t *log_id, size_t log_id_len);
typedef int (*ossl_CTLOG_STORE_load_file_t)(ossl_CTLOG_STORE *store, const char *file);
typedef int (*ossl_CTLOG_STORE_load_default_file_t)(ossl_CTLOG_STORE *store);
typedef ossl_OSSL_DECODER * (*ossl_OSSL_DECODER_fetch_t)(ossl_OSSL_LIB_CTX *libctx, const char *name, const char *properties);
typedef int (*ossl_OSSL_DECODER_up_ref_t)(ossl_OSSL_DECODER *encoder);
typedef void (*ossl_OSSL_DECODER_free_t)(ossl_OSSL_DECODER *encoder);
typedef const ossl_OSSL_PROVIDER * (*ossl_OSSL_DECODER_get0_provider_t)(const ossl_OSSL_DECODER *encoder);
typedef const char * (*ossl_OSSL_DECODER_get0_properties_t)(const ossl_OSSL_DECODER *encoder);
typedef const char * (*ossl_OSSL_DECODER_get0_name_t)(const ossl_OSSL_DECODER *decoder);
typedef const char * (*ossl_OSSL_DECODER_get0_description_t)(const ossl_OSSL_DECODER *decoder);
typedef int (*ossl_OSSL_DECODER_is_a_t)(const ossl_OSSL_DECODER *encoder, const char *name);
typedef void (*ossl_OSSL_DECODER_do_all_provided_t)(ossl_OSSL_LIB_CTX *libctx, void (*fn)(ossl_OSSL_DECODER *, void *), void *arg);
typedef int (*ossl_OSSL_DECODER_names_do_all_t)(const ossl_OSSL_DECODER *encoder, void (*fn)(const char *, void *), void *data);
typedef const ossl_OSSL_PARAM * (*ossl_OSSL_DECODER_gettable_params_t)(ossl_OSSL_DECODER *decoder);
typedef int (*ossl_OSSL_DECODER_get_params_t)(ossl_OSSL_DECODER *decoder, ossl_OSSL_PARAM params[]);
typedef const ossl_OSSL_PARAM * (*ossl_OSSL_DECODER_settable_ctx_params_t)(ossl_OSSL_DECODER *encoder);
typedef ossl_OSSL_DECODER_CTX * (*ossl_OSSL_DECODER_CTX_new_t)();
typedef int (*ossl_OSSL_DECODER_CTX_set_params_t)(ossl_OSSL_DECODER_CTX *ctx, const ossl_OSSL_PARAM params[]);
typedef void (*ossl_OSSL_DECODER_CTX_free_t)(ossl_OSSL_DECODER_CTX *ctx);
typedef int (*ossl_OSSL_DECODER_CTX_set_passphrase_t)(ossl_OSSL_DECODER_CTX *ctx, const unsigned char *kstr, size_t klen);
typedef int (*ossl_OSSL_DECODER_CTX_set_pem_password_cb_t)(ossl_OSSL_DECODER_CTX *ctx, ossl_pem_password_cb *cb, void *cbarg);
typedef int (*ossl_OSSL_DECODER_CTX_set_passphrase_cb_t)(ossl_OSSL_DECODER_CTX *ctx, ossl_OSSL_PASSPHRASE_CALLBACK *cb, void *cbarg);
typedef int (*ossl_OSSL_DECODER_CTX_set_passphrase_ui_t)(ossl_OSSL_DECODER_CTX *ctx, const ossl_UI_METHOD *ui_method, void *ui_data);
typedef int (*ossl_OSSL_DECODER_CTX_set_selection_t)(ossl_OSSL_DECODER_CTX *ctx, int selection);
typedef int (*ossl_OSSL_DECODER_CTX_set_input_type_t)(ossl_OSSL_DECODER_CTX *ctx, const char *input_type);
typedef int (*ossl_OSSL_DECODER_CTX_set_input_structure_t)(ossl_OSSL_DECODER_CTX *ctx, const char *input_structure);
typedef int (*ossl_OSSL_DECODER_CTX_add_decoder_t)(ossl_OSSL_DECODER_CTX *ctx, ossl_OSSL_DECODER *decoder);
typedef int (*ossl_OSSL_DECODER_CTX_add_extra_t)(ossl_OSSL_DECODER_CTX *ctx, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_OSSL_DECODER_CTX_get_num_decoders_t)(ossl_OSSL_DECODER_CTX *ctx);
typedef ossl_OSSL_DECODER * (*ossl_OSSL_DECODER_INSTANCE_get_decoder_t)(ossl_OSSL_DECODER_INSTANCE *decoder_inst);
typedef void * (*ossl_OSSL_DECODER_INSTANCE_get_decoder_ctx_t)(ossl_OSSL_DECODER_INSTANCE *decoder_inst);
typedef const char * (*ossl_OSSL_DECODER_INSTANCE_get_input_type_t)(ossl_OSSL_DECODER_INSTANCE *decoder_inst);
typedef const char * (*ossl_OSSL_DECODER_INSTANCE_get_input_structure_t)(ossl_OSSL_DECODER_INSTANCE *decoder_inst, int *was_set);
typedef int (*ossl_OSSL_DECODER_CTX_set_construct_t)(ossl_OSSL_DECODER_CTX *ctx, ossl_OSSL_DECODER_CONSTRUCT *construct);
typedef int (*ossl_OSSL_DECODER_CTX_set_construct_data_t)(ossl_OSSL_DECODER_CTX *ctx, void *construct_data);
typedef int (*ossl_OSSL_DECODER_CTX_set_cleanup_t)(ossl_OSSL_DECODER_CTX *ctx, ossl_OSSL_DECODER_CLEANUP *cleanup);
typedef ossl_OSSL_DECODER_CONSTRUCT *OSSL_DECODER_CTX_get_construct_ret_t;
typedef OSSL_DECODER_CTX_get_construct_ret_t (*ossl_OSSL_DECODER_CTX_get_construct_t)(ossl_OSSL_DECODER_CTX *ctx);
typedef void * (*ossl_OSSL_DECODER_CTX_get_construct_data_t)(ossl_OSSL_DECODER_CTX *ctx);
typedef ossl_OSSL_DECODER_CLEANUP *OSSL_DECODER_CTX_get_cleanup_ret_t;
typedef OSSL_DECODER_CTX_get_cleanup_ret_t (*ossl_OSSL_DECODER_CTX_get_cleanup_t)(ossl_OSSL_DECODER_CTX *ctx);
typedef int (*ossl_OSSL_DECODER_export_t)(ossl_OSSL_DECODER_INSTANCE *decoder_inst, void *reference, size_t reference_sz, ossl_OSSL_CALLBACK *export_cb, void *export_cbarg);
typedef int (*ossl_OSSL_DECODER_from_bio_t)(ossl_OSSL_DECODER_CTX *ctx, ossl_BIO *in);
typedef int (*ossl_OSSL_DECODER_from_fp_t)(ossl_OSSL_DECODER_CTX *ctx, FILE *in);
typedef int (*ossl_OSSL_DECODER_from_data_t)(ossl_OSSL_DECODER_CTX *ctx, const unsigned char **pdata, size_t *pdata_len);
typedef ossl_OSSL_DECODER_CTX * (*ossl_OSSL_DECODER_CTX_new_for_pkey_t)(ossl_EVP_PKEY **pkey, const char *input_type, const char *input_struct, const char *keytype, int selection, ossl_OSSL_LIB_CTX *libctx, const char *propquery);
typedef const char * (*ossl_DES_options_t)();
typedef void (*ossl_DES_ecb3_encrypt_t)(ossl_const_DES_cblock *input, ossl_DES_cblock *output, ossl_DES_key_schedule *ks1, ossl_DES_key_schedule *ks2, ossl_DES_key_schedule *ks3, int enc);
typedef ossl_DES_LONG (*ossl_DES_cbc_cksum_t)(const unsigned char *input, ossl_DES_cblock *output, long length, ossl_DES_key_schedule *schedule, ossl_const_DES_cblock *ivec);
typedef void (*ossl_DES_cbc_encrypt_t)(const unsigned char *input, unsigned char *output, long length, ossl_DES_key_schedule *schedule, ossl_DES_cblock *ivec, int enc);
typedef void (*ossl_DES_ncbc_encrypt_t)(const unsigned char *input, unsigned char *output, long length, ossl_DES_key_schedule *schedule, ossl_DES_cblock *ivec, int enc);
typedef void (*ossl_DES_xcbc_encrypt_t)(const unsigned char *input, unsigned char *output, long length, ossl_DES_key_schedule *schedule, ossl_DES_cblock *ivec, ossl_const_DES_cblock *inw, ossl_const_DES_cblock *outw, int enc);
typedef void (*ossl_DES_cfb_encrypt_t)(const unsigned char *in, unsigned char *out, int numbits, long length, ossl_DES_key_schedule *schedule, ossl_DES_cblock *ivec, int enc);
typedef void (*ossl_DES_ecb_encrypt_t)(ossl_const_DES_cblock *input, ossl_DES_cblock *output, ossl_DES_key_schedule *ks, int enc);
typedef void (*ossl_DES_encrypt1_t)(ossl_DES_LONG *data, ossl_DES_key_schedule *ks, int enc);
typedef void (*ossl_DES_encrypt2_t)(ossl_DES_LONG *data, ossl_DES_key_schedule *ks, int enc);
typedef void (*ossl_DES_encrypt3_t)(ossl_DES_LONG *data, ossl_DES_key_schedule *ks1, ossl_DES_key_schedule *ks2, ossl_DES_key_schedule *ks3);
typedef void (*ossl_DES_decrypt3_t)(ossl_DES_LONG *data, ossl_DES_key_schedule *ks1, ossl_DES_key_schedule *ks2, ossl_DES_key_schedule *ks3);
typedef void (*ossl_DES_ede3_cbc_encrypt_t)(const unsigned char *input, unsigned char *output, long length, ossl_DES_key_schedule *ks1, ossl_DES_key_schedule *ks2, ossl_DES_key_schedule *ks3, ossl_DES_cblock *ivec, int enc);
typedef void (*ossl_DES_ede3_cfb64_encrypt_t)(const unsigned char *in, unsigned char *out, long length, ossl_DES_key_schedule *ks1, ossl_DES_key_schedule *ks2, ossl_DES_key_schedule *ks3, ossl_DES_cblock *ivec, int *num, int enc);
typedef void (*ossl_DES_ede3_cfb_encrypt_t)(const unsigned char *in, unsigned char *out, int numbits, long length, ossl_DES_key_schedule *ks1, ossl_DES_key_schedule *ks2, ossl_DES_key_schedule *ks3, ossl_DES_cblock *ivec, int enc);
typedef void (*ossl_DES_ede3_ofb64_encrypt_t)(const unsigned char *in, unsigned char *out, long length, ossl_DES_key_schedule *ks1, ossl_DES_key_schedule *ks2, ossl_DES_key_schedule *ks3, ossl_DES_cblock *ivec, int *num);
typedef char * (*ossl_DES_fcrypt_t)(const char *buf, const char *salt, char *ret);
typedef char * (*ossl_DES_crypt_t)(const char *buf, const char *salt);
typedef void (*ossl_DES_ofb_encrypt_t)(const unsigned char *in, unsigned char *out, int numbits, long length, ossl_DES_key_schedule *schedule, ossl_DES_cblock *ivec);
typedef void (*ossl_DES_pcbc_encrypt_t)(const unsigned char *input, unsigned char *output, long length, ossl_DES_key_schedule *schedule, ossl_DES_cblock *ivec, int enc);
typedef ossl_DES_LONG (*ossl_DES_quad_cksum_t)(const unsigned char *input, ossl_DES_cblock output[], long length, int out_count, ossl_DES_cblock *seed);
typedef int (*ossl_DES_random_key_t)(ossl_DES_cblock *ret);
typedef void (*ossl_DES_set_odd_parity_t)(ossl_DES_cblock *key);
typedef int (*ossl_DES_check_key_parity_t)(ossl_const_DES_cblock *key);
typedef int (*ossl_DES_is_weak_key_t)(ossl_const_DES_cblock *key);
typedef int (*ossl_DES_set_key_t)(ossl_const_DES_cblock *key, ossl_DES_key_schedule *schedule);
typedef int (*ossl_DES_key_sched_t)(ossl_const_DES_cblock *key, ossl_DES_key_schedule *schedule);
typedef int (*ossl_DES_set_key_checked_t)(ossl_const_DES_cblock *key, ossl_DES_key_schedule *schedule);
typedef void (*ossl_DES_set_key_unchecked_t)(ossl_const_DES_cblock *key, ossl_DES_key_schedule *schedule);
typedef void (*ossl_DES_string_to_key_t)(const char *str, ossl_DES_cblock *key);
typedef void (*ossl_DES_string_to_2keys_t)(const char *str, ossl_DES_cblock *key1, ossl_DES_cblock *key2);
typedef void (*ossl_DES_cfb64_encrypt_t)(const unsigned char *in, unsigned char *out, long length, ossl_DES_key_schedule *schedule, ossl_DES_cblock *ivec, int *num, int enc);
typedef void (*ossl_DES_ofb64_encrypt_t)(const unsigned char *in, unsigned char *out, long length, ossl_DES_key_schedule *schedule, ossl_DES_cblock *ivec, int *num);
typedef void * (*ossl__openssl_ebcdic2ascii_t)(void *dest, const void *srce, size_t count);
typedef void * (*ossl__openssl_ascii2ebcdic_t)(void *dest, const void *srce, size_t count);
typedef ossl_OSSL_ENCODER * (*ossl_OSSL_ENCODER_fetch_t)(ossl_OSSL_LIB_CTX *libctx, const char *name, const char *properties);
typedef int (*ossl_OSSL_ENCODER_up_ref_t)(ossl_OSSL_ENCODER *encoder);
typedef void (*ossl_OSSL_ENCODER_free_t)(ossl_OSSL_ENCODER *encoder);
typedef const ossl_OSSL_PROVIDER * (*ossl_OSSL_ENCODER_get0_provider_t)(const ossl_OSSL_ENCODER *encoder);
typedef const char * (*ossl_OSSL_ENCODER_get0_properties_t)(const ossl_OSSL_ENCODER *encoder);
typedef const char * (*ossl_OSSL_ENCODER_get0_name_t)(const ossl_OSSL_ENCODER *kdf);
typedef const char * (*ossl_OSSL_ENCODER_get0_description_t)(const ossl_OSSL_ENCODER *kdf);
typedef int (*ossl_OSSL_ENCODER_is_a_t)(const ossl_OSSL_ENCODER *encoder, const char *name);
typedef void (*ossl_OSSL_ENCODER_do_all_provided_t)(ossl_OSSL_LIB_CTX *libctx, void (*fn)(ossl_OSSL_ENCODER *, void *), void *arg);
typedef int (*ossl_OSSL_ENCODER_names_do_all_t)(const ossl_OSSL_ENCODER *encoder, void (*fn)(const char *, void *), void *data);
typedef const ossl_OSSL_PARAM * (*ossl_OSSL_ENCODER_gettable_params_t)(ossl_OSSL_ENCODER *encoder);
typedef int (*ossl_OSSL_ENCODER_get_params_t)(ossl_OSSL_ENCODER *encoder, ossl_OSSL_PARAM params[]);
typedef const ossl_OSSL_PARAM * (*ossl_OSSL_ENCODER_settable_ctx_params_t)(ossl_OSSL_ENCODER *encoder);
typedef ossl_OSSL_ENCODER_CTX * (*ossl_OSSL_ENCODER_CTX_new_t)();
typedef int (*ossl_OSSL_ENCODER_CTX_set_params_t)(ossl_OSSL_ENCODER_CTX *ctx, const ossl_OSSL_PARAM params[]);
typedef void (*ossl_OSSL_ENCODER_CTX_free_t)(ossl_OSSL_ENCODER_CTX *ctx);
typedef int (*ossl_OSSL_ENCODER_CTX_set_passphrase_t)(ossl_OSSL_ENCODER_CTX *ctx, const unsigned char *kstr, size_t klen);
typedef int (*ossl_OSSL_ENCODER_CTX_set_pem_password_cb_t)(ossl_OSSL_ENCODER_CTX *ctx, ossl_pem_password_cb *cb, void *cbarg);
typedef int (*ossl_OSSL_ENCODER_CTX_set_passphrase_cb_t)(ossl_OSSL_ENCODER_CTX *ctx, ossl_OSSL_PASSPHRASE_CALLBACK *cb, void *cbarg);
typedef int (*ossl_OSSL_ENCODER_CTX_set_passphrase_ui_t)(ossl_OSSL_ENCODER_CTX *ctx, const ossl_UI_METHOD *ui_method, void *ui_data);
typedef int (*ossl_OSSL_ENCODER_CTX_set_cipher_t)(ossl_OSSL_ENCODER_CTX *ctx, const char *cipher_name, const char *propquery);
typedef int (*ossl_OSSL_ENCODER_CTX_set_selection_t)(ossl_OSSL_ENCODER_CTX *ctx, int selection);
typedef int (*ossl_OSSL_ENCODER_CTX_set_output_type_t)(ossl_OSSL_ENCODER_CTX *ctx, const char *output_type);
typedef int (*ossl_OSSL_ENCODER_CTX_set_output_structure_t)(ossl_OSSL_ENCODER_CTX *ctx, const char *output_structure);
typedef int (*ossl_OSSL_ENCODER_CTX_add_encoder_t)(ossl_OSSL_ENCODER_CTX *ctx, ossl_OSSL_ENCODER *encoder);
typedef int (*ossl_OSSL_ENCODER_CTX_add_extra_t)(ossl_OSSL_ENCODER_CTX *ctx, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_OSSL_ENCODER_CTX_get_num_encoders_t)(ossl_OSSL_ENCODER_CTX *ctx);
typedef ossl_OSSL_ENCODER * (*ossl_OSSL_ENCODER_INSTANCE_get_encoder_t)(ossl_OSSL_ENCODER_INSTANCE *encoder_inst);
typedef void * (*ossl_OSSL_ENCODER_INSTANCE_get_encoder_ctx_t)(ossl_OSSL_ENCODER_INSTANCE *encoder_inst);
typedef const char * (*ossl_OSSL_ENCODER_INSTANCE_get_output_type_t)(ossl_OSSL_ENCODER_INSTANCE *encoder_inst);
typedef const char * (*ossl_OSSL_ENCODER_INSTANCE_get_output_structure_t)(ossl_OSSL_ENCODER_INSTANCE *encoder_inst);
typedef int (*ossl_OSSL_ENCODER_CTX_set_construct_t)(ossl_OSSL_ENCODER_CTX *ctx, ossl_OSSL_ENCODER_CONSTRUCT *construct);
typedef int (*ossl_OSSL_ENCODER_CTX_set_construct_data_t)(ossl_OSSL_ENCODER_CTX *ctx, void *construct_data);
typedef int (*ossl_OSSL_ENCODER_CTX_set_cleanup_t)(ossl_OSSL_ENCODER_CTX *ctx, ossl_OSSL_ENCODER_CLEANUP *cleanup);
typedef int (*ossl_OSSL_ENCODER_to_bio_t)(ossl_OSSL_ENCODER_CTX *ctx, ossl_BIO *out);
typedef int (*ossl_OSSL_ENCODER_to_fp_t)(ossl_OSSL_ENCODER_CTX *ctx, FILE *fp);
typedef int (*ossl_OSSL_ENCODER_to_data_t)(ossl_OSSL_ENCODER_CTX *ctx, unsigned char **pdata, size_t *pdata_len);
typedef ossl_OSSL_ENCODER_CTX * (*ossl_OSSL_ENCODER_CTX_new_for_pkey_t)(const ossl_EVP_PKEY *pkey, int selection, const char *output_type, const char *output_struct, const char *propquery);
typedef int (*ossl_RAND_set_rand_method_t)(const ossl_RAND_METHOD *meth);
typedef const ossl_RAND_METHOD * (*ossl_RAND_get_rand_method_t)();
typedef int (*ossl_RAND_set_rand_engine_t)(ossl_ENGINE *engine);
typedef ossl_RAND_METHOD * (*ossl_RAND_OpenSSL_t)();
typedef int (*ossl_RAND_bytes_t)(unsigned char *buf, int num);
typedef int (*ossl_RAND_priv_bytes_t)(unsigned char *buf, int num);
typedef int (*ossl_RAND_priv_bytes_ex_t)(ossl_OSSL_LIB_CTX *ctx, unsigned char *buf, size_t num, unsigned int strength);
typedef int (*ossl_RAND_bytes_ex_t)(ossl_OSSL_LIB_CTX *ctx, unsigned char *buf, size_t num, unsigned int strength);
typedef int (*ossl_RAND_pseudo_bytes_t)(unsigned char *buf, int num);
typedef ossl_EVP_RAND_CTX * (*ossl_RAND_get0_primary_t)(ossl_OSSL_LIB_CTX *ctx);
typedef ossl_EVP_RAND_CTX * (*ossl_RAND_get0_public_t)(ossl_OSSL_LIB_CTX *ctx);
typedef ossl_EVP_RAND_CTX * (*ossl_RAND_get0_private_t)(ossl_OSSL_LIB_CTX *ctx);
typedef int (*ossl_RAND_set_DRBG_type_t)(ossl_OSSL_LIB_CTX *ctx, const char *drbg, const char *propq, const char *cipher, const char *digest);
typedef int (*ossl_RAND_set_seed_source_type_t)(ossl_OSSL_LIB_CTX *ctx, const char *seed, const char *propq);
typedef void (*ossl_RAND_seed_t)(const void *buf, int num);
typedef void (*ossl_RAND_keep_random_devices_open_t)(int keep);
typedef void (*ossl_RAND_add_t)(const void *buf, int num, double randomness);
typedef int (*ossl_RAND_load_file_t)(const char *file, long max_bytes);
typedef int (*ossl_RAND_write_file_t)(const char *file);
typedef const char * (*ossl_RAND_file_name_t)(char *file, size_t num);
typedef int (*ossl_RAND_status_t)();
typedef int (*ossl_RAND_poll_t)();
typedef int (*ossl_PEM_get_EVP_CIPHER_INFO_t)(char *header, ossl_EVP_CIPHER_INFO *cipher);
typedef int (*ossl_PEM_do_header_t)(ossl_EVP_CIPHER_INFO *cipher, unsigned char *data, long *len, ossl_pem_password_cb *callback, void *u);
typedef int (*ossl_PEM_read_bio_t)(ossl_BIO *bp, char **name, char **header, unsigned char **data, long *len);
typedef int (*ossl_PEM_read_bio_ex_t)(ossl_BIO *bp, char **name, char **header, unsigned char **data, long *len, unsigned int flags);
typedef int (*ossl_PEM_bytes_read_bio_secmem_t)(unsigned char **pdata, long *plen, char **pnm, const char *name, ossl_BIO *bp, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_PEM_write_bio_t)(ossl_BIO *bp, const char *name, const char *hdr, const unsigned char *data, long len);
typedef int (*ossl_PEM_bytes_read_bio_t)(unsigned char **pdata, long *plen, char **pnm, const char *name, ossl_BIO *bp, ossl_pem_password_cb *cb, void *u);
typedef void * (*ossl_PEM_ASN1_read_bio_t)(ossl_d2i_of_void *d2i, const char *name, ossl_BIO *bp, void **x, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_PEM_ASN1_write_bio_t)(ossl_i2d_of_void *i2d, const char *name, ossl_BIO *bp, const void *x, const ossl_EVP_CIPHER *enc, const unsigned char *kstr, int klen, ossl_pem_password_cb *cb, void *u);
typedef ossl_STACK_OF(ossl_X509_INFO) * (*ossl_PEM_X509_INFO_read_bio_t)(ossl_BIO *bp, ossl_STACK_OF(ossl_X509_INFO) *sk, ossl_pem_password_cb *cb, void *u);
typedef ossl_STACK_OF(ossl_X509_INFO) * (*ossl_PEM_X509_INFO_read_bio_ex_t)(ossl_BIO *bp, ossl_STACK_OF(ossl_X509_INFO) *sk, ossl_pem_password_cb *cb, void *u, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_PEM_X509_INFO_write_bio_t)(ossl_BIO *bp, const ossl_X509_INFO *xi, ossl_EVP_CIPHER *enc, const unsigned char *kstr, int klen, ossl_pem_password_cb *cd, void *u);
typedef int (*ossl_PEM_read_t)(FILE *fp, char **name, char **header, unsigned char **data, long *len);
typedef int (*ossl_PEM_write_t)(FILE *fp, const char *name, const char *hdr, const unsigned char *data, long len);
typedef void * (*ossl_PEM_ASN1_read_t)(ossl_d2i_of_void *d2i, const char *name, FILE *fp, void **x, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_PEM_ASN1_write_t)(ossl_i2d_of_void *i2d, const char *name, FILE *fp, const void *x, const ossl_EVP_CIPHER *enc, const unsigned char *kstr, int klen, ossl_pem_password_cb *callback, void *u);
typedef ossl_STACK_OF(ossl_X509_INFO) * (*ossl_PEM_X509_INFO_read_t)(FILE *fp, ossl_STACK_OF(ossl_X509_INFO) *sk, ossl_pem_password_cb *cb, void *u);
typedef ossl_STACK_OF(ossl_X509_INFO) * (*ossl_PEM_X509_INFO_read_ex_t)(FILE *fp, ossl_STACK_OF(ossl_X509_INFO) *sk, ossl_pem_password_cb *cb, void *u, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_PEM_SignInit_t)(ossl_EVP_MD_CTX *ctx, ossl_EVP_MD *type);
typedef int (*ossl_PEM_SignUpdate_t)(ossl_EVP_MD_CTX *ctx, const unsigned char *d, unsigned int cnt);
typedef int (*ossl_PEM_SignFinal_t)(ossl_EVP_MD_CTX *ctx, unsigned char *sigret, unsigned int *siglen, ossl_EVP_PKEY *pkey);
typedef int (*ossl_PEM_def_callback_t)(char *buf, int num, int rwflag, void *userdata);
typedef void (*ossl_PEM_proc_type_t)(char *buf, int type);
typedef void (*ossl_PEM_dek_info_t)(char *buf, const char *type, int len, const char *str);
typedef ossl_X509 * (*ossl_PEM_read_bio_X509_t)(ossl_BIO *out, ossl_X509 **x, ossl_pem_password_cb *cb, void *u);
typedef ossl_X509 * (*ossl_PEM_read_X509_t)(FILE *out, ossl_X509 **x, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_PEM_write_bio_X509_t)(ossl_BIO *out, const ossl_X509 *x);
typedef int (*ossl_PEM_write_X509_t)(FILE *out, const ossl_X509 *x);
typedef ossl_X509 * (*ossl_PEM_read_bio_X509_AUX_t)(ossl_BIO *out, ossl_X509 **x, ossl_pem_password_cb *cb, void *u);
typedef ossl_X509 * (*ossl_PEM_read_X509_AUX_t)(FILE *out, ossl_X509 **x, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_PEM_write_bio_X509_AUX_t)(ossl_BIO *out, const ossl_X509 *x);
typedef int (*ossl_PEM_write_X509_AUX_t)(FILE *out, const ossl_X509 *x);
typedef ossl_X509_REQ * (*ossl_PEM_read_bio_X509_REQ_t)(ossl_BIO *out, ossl_X509_REQ **x, ossl_pem_password_cb *cb, void *u);
typedef ossl_X509_REQ * (*ossl_PEM_read_X509_REQ_t)(FILE *out, ossl_X509_REQ **x, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_PEM_write_bio_X509_REQ_t)(ossl_BIO *out, const ossl_X509_REQ *x);
typedef int (*ossl_PEM_write_X509_REQ_t)(FILE *out, const ossl_X509_REQ *x);
typedef int (*ossl_PEM_write_bio_X509_REQ_NEW_t)(ossl_BIO *out, const ossl_X509_REQ *x);
typedef int (*ossl_PEM_write_X509_REQ_NEW_t)(FILE *out, const ossl_X509_REQ *x);
typedef ossl_X509_CRL * (*ossl_PEM_read_bio_X509_CRL_t)(ossl_BIO *out, ossl_X509_CRL **x, ossl_pem_password_cb *cb, void *u);
typedef ossl_X509_CRL * (*ossl_PEM_read_X509_CRL_t)(FILE *out, ossl_X509_CRL **x, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_PEM_write_bio_X509_CRL_t)(ossl_BIO *out, const ossl_X509_CRL *x);
typedef int (*ossl_PEM_write_X509_CRL_t)(FILE *out, const ossl_X509_CRL *x);
typedef ossl_X509_PUBKEY * (*ossl_PEM_read_bio_X509_PUBKEY_t)(ossl_BIO *out, ossl_X509_PUBKEY **x, ossl_pem_password_cb *cb, void *u);
typedef ossl_X509_PUBKEY * (*ossl_PEM_read_X509_PUBKEY_t)(FILE *out, ossl_X509_PUBKEY **x, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_PEM_write_bio_X509_PUBKEY_t)(ossl_BIO *out, const ossl_X509_PUBKEY *x);
typedef int (*ossl_PEM_write_X509_PUBKEY_t)(FILE *out, const ossl_X509_PUBKEY *x);
typedef ossl_PKCS7 * (*ossl_PEM_read_bio_PKCS7_t)(ossl_BIO *out, ossl_PKCS7 **x, ossl_pem_password_cb *cb, void *u);
typedef ossl_PKCS7 * (*ossl_PEM_read_PKCS7_t)(FILE *out, ossl_PKCS7 **x, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_PEM_write_bio_PKCS7_t)(ossl_BIO *out, const ossl_PKCS7 *x);
typedef int (*ossl_PEM_write_PKCS7_t)(FILE *out, const ossl_PKCS7 *x);
typedef ossl_NETSCAPE_CERT_SEQUENCE * (*ossl_PEM_read_bio_NETSCAPE_CERT_SEQUENCE_t)(ossl_BIO *out, ossl_NETSCAPE_CERT_SEQUENCE **x, ossl_pem_password_cb *cb, void *u);
typedef ossl_NETSCAPE_CERT_SEQUENCE * (*ossl_PEM_read_NETSCAPE_CERT_SEQUENCE_t)(FILE *out, ossl_NETSCAPE_CERT_SEQUENCE **x, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_PEM_write_bio_NETSCAPE_CERT_SEQUENCE_t)(ossl_BIO *out, const ossl_NETSCAPE_CERT_SEQUENCE *x);
typedef int (*ossl_PEM_write_NETSCAPE_CERT_SEQUENCE_t)(FILE *out, const ossl_NETSCAPE_CERT_SEQUENCE *x);
typedef ossl_X509_SIG * (*ossl_PEM_read_bio_PKCS8_t)(ossl_BIO *out, ossl_X509_SIG **x, ossl_pem_password_cb *cb, void *u);
typedef ossl_X509_SIG * (*ossl_PEM_read_PKCS8_t)(FILE *out, ossl_X509_SIG **x, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_PEM_write_bio_PKCS8_t)(ossl_BIO *out, const ossl_X509_SIG *x);
typedef int (*ossl_PEM_write_PKCS8_t)(FILE *out, const ossl_X509_SIG *x);
typedef ossl_PKCS8_PRIV_KEY_INFO * (*ossl_PEM_read_bio_PKCS8_PRIV_KEY_INFO_t)(ossl_BIO *out, ossl_PKCS8_PRIV_KEY_INFO **x, ossl_pem_password_cb *cb, void *u);
typedef ossl_PKCS8_PRIV_KEY_INFO * (*ossl_PEM_read_PKCS8_PRIV_KEY_INFO_t)(FILE *out, ossl_PKCS8_PRIV_KEY_INFO **x, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_PEM_write_bio_PKCS8_PRIV_KEY_INFO_t)(ossl_BIO *out, const ossl_PKCS8_PRIV_KEY_INFO *x);
typedef int (*ossl_PEM_write_PKCS8_PRIV_KEY_INFO_t)(FILE *out, const ossl_PKCS8_PRIV_KEY_INFO *x);
typedef ossl_RSA * (*ossl_PEM_read_bio_RSAPrivateKey_t)(ossl_BIO *out, ossl_RSA **x, ossl_pem_password_cb *cb, void *u);
typedef ossl_RSA * (*ossl_PEM_read_RSAPrivateKey_t)(FILE *out, ossl_RSA **x, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_PEM_write_bio_RSAPrivateKey_t)(ossl_BIO *out, const ossl_RSA *x, const ossl_EVP_CIPHER *enc, const unsigned char *kstr, int klen, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_PEM_write_RSAPrivateKey_t)(FILE *out, const ossl_RSA *x, const ossl_EVP_CIPHER *enc, const unsigned char *kstr, int klen, ossl_pem_password_cb *cb, void *u);
typedef ossl_RSA * (*ossl_PEM_read_bio_RSAPublicKey_t)(ossl_BIO *out, ossl_RSA **x, ossl_pem_password_cb *cb, void *u);
typedef ossl_RSA * (*ossl_PEM_read_RSAPublicKey_t)(FILE *out, ossl_RSA **x, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_PEM_write_bio_RSAPublicKey_t)(ossl_BIO *out, const ossl_RSA *x);
typedef int (*ossl_PEM_write_RSAPublicKey_t)(FILE *out, const ossl_RSA *x);
typedef ossl_RSA * (*ossl_PEM_read_bio_RSA_PUBKEY_t)(ossl_BIO *out, ossl_RSA **x, ossl_pem_password_cb *cb, void *u);
typedef ossl_RSA * (*ossl_PEM_read_RSA_PUBKEY_t)(FILE *out, ossl_RSA **x, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_PEM_write_bio_RSA_PUBKEY_t)(ossl_BIO *out, const ossl_RSA *x);
typedef int (*ossl_PEM_write_RSA_PUBKEY_t)(FILE *out, const ossl_RSA *x);
typedef ossl_DSA * (*ossl_PEM_read_bio_DSAPrivateKey_t)(ossl_BIO *out, ossl_DSA **x, ossl_pem_password_cb *cb, void *u);
typedef ossl_DSA * (*ossl_PEM_read_DSAPrivateKey_t)(FILE *out, ossl_DSA **x, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_PEM_write_bio_DSAPrivateKey_t)(ossl_BIO *out, const ossl_DSA *x, const ossl_EVP_CIPHER *enc, const unsigned char *kstr, int klen, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_PEM_write_DSAPrivateKey_t)(FILE *out, const ossl_DSA *x, const ossl_EVP_CIPHER *enc, const unsigned char *kstr, int klen, ossl_pem_password_cb *cb, void *u);
typedef ossl_DSA * (*ossl_PEM_read_bio_DSA_PUBKEY_t)(ossl_BIO *out, ossl_DSA **x, ossl_pem_password_cb *cb, void *u);
typedef ossl_DSA * (*ossl_PEM_read_DSA_PUBKEY_t)(FILE *out, ossl_DSA **x, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_PEM_write_bio_DSA_PUBKEY_t)(ossl_BIO *out, const ossl_DSA *x);
typedef int (*ossl_PEM_write_DSA_PUBKEY_t)(FILE *out, const ossl_DSA *x);
typedef ossl_DSA * (*ossl_PEM_read_bio_DSAparams_t)(ossl_BIO *out, ossl_DSA **x, ossl_pem_password_cb *cb, void *u);
typedef ossl_DSA * (*ossl_PEM_read_DSAparams_t)(FILE *out, ossl_DSA **x, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_PEM_write_bio_DSAparams_t)(ossl_BIO *out, const ossl_DSA *x);
typedef int (*ossl_PEM_write_DSAparams_t)(FILE *out, const ossl_DSA *x);
typedef ossl_EC_GROUP * (*ossl_PEM_read_bio_ECPKParameters_t)(ossl_BIO *out, ossl_EC_GROUP **x, ossl_pem_password_cb *cb, void *u);
typedef ossl_EC_GROUP * (*ossl_PEM_read_ECPKParameters_t)(FILE *out, ossl_EC_GROUP **x, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_PEM_write_bio_ECPKParameters_t)(ossl_BIO *out, const ossl_EC_GROUP *x);
typedef int (*ossl_PEM_write_ECPKParameters_t)(FILE *out, const ossl_EC_GROUP *x);
typedef ossl_EC_KEY * (*ossl_PEM_read_bio_ECPrivateKey_t)(ossl_BIO *out, ossl_EC_KEY **x, ossl_pem_password_cb *cb, void *u);
typedef ossl_EC_KEY * (*ossl_PEM_read_ECPrivateKey_t)(FILE *out, ossl_EC_KEY **x, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_PEM_write_bio_ECPrivateKey_t)(ossl_BIO *out, const ossl_EC_KEY *x, const ossl_EVP_CIPHER *enc, const unsigned char *kstr, int klen, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_PEM_write_ECPrivateKey_t)(FILE *out, const ossl_EC_KEY *x, const ossl_EVP_CIPHER *enc, const unsigned char *kstr, int klen, ossl_pem_password_cb *cb, void *u);
typedef ossl_EC_KEY * (*ossl_PEM_read_bio_EC_PUBKEY_t)(ossl_BIO *out, ossl_EC_KEY **x, ossl_pem_password_cb *cb, void *u);
typedef ossl_EC_KEY * (*ossl_PEM_read_EC_PUBKEY_t)(FILE *out, ossl_EC_KEY **x, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_PEM_write_bio_EC_PUBKEY_t)(ossl_BIO *out, const ossl_EC_KEY *x);
typedef int (*ossl_PEM_write_EC_PUBKEY_t)(FILE *out, const ossl_EC_KEY *x);
typedef ossl_DH * (*ossl_PEM_read_bio_DHparams_t)(ossl_BIO *out, ossl_DH **x, ossl_pem_password_cb *cb, void *u);
typedef ossl_DH * (*ossl_PEM_read_DHparams_t)(FILE *out, ossl_DH **x, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_PEM_write_bio_DHparams_t)(ossl_BIO *out, const ossl_DH *x);
typedef int (*ossl_PEM_write_DHparams_t)(FILE *out, const ossl_DH *x);
typedef int (*ossl_PEM_write_bio_DHxparams_t)(ossl_BIO *out, const ossl_DH *x);
typedef int (*ossl_PEM_write_DHxparams_t)(FILE *out, const ossl_DH *x);
typedef ossl_EVP_PKEY * (*ossl_PEM_read_bio_PrivateKey_t)(ossl_BIO *out, ossl_EVP_PKEY **x, ossl_pem_password_cb *cb, void *u);
typedef ossl_EVP_PKEY * (*ossl_PEM_read_bio_PrivateKey_ex_t)(ossl_BIO *out, ossl_EVP_PKEY **x, ossl_pem_password_cb *cb, void *u, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef ossl_EVP_PKEY * (*ossl_PEM_read_PrivateKey_t)(FILE *out, ossl_EVP_PKEY **x, ossl_pem_password_cb *cb, void *u);
typedef ossl_EVP_PKEY * (*ossl_PEM_read_PrivateKey_ex_t)(FILE *out, ossl_EVP_PKEY **x, ossl_pem_password_cb *cb, void *u, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_PEM_write_bio_PrivateKey_t)(ossl_BIO *out, const ossl_EVP_PKEY *x, const ossl_EVP_CIPHER *enc, const unsigned char *kstr, int klen, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_PEM_write_bio_PrivateKey_ex_t)(ossl_BIO *out, const ossl_EVP_PKEY *x, const ossl_EVP_CIPHER *enc, const unsigned char *kstr, int klen, ossl_pem_password_cb *cb, void *u, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_PEM_write_PrivateKey_t)(FILE *out, const ossl_EVP_PKEY *x, const ossl_EVP_CIPHER *enc, const unsigned char *kstr, int klen, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_PEM_write_PrivateKey_ex_t)(FILE *out, const ossl_EVP_PKEY *x, const ossl_EVP_CIPHER *enc, const unsigned char *kstr, int klen, ossl_pem_password_cb *cb, void *u, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef ossl_EVP_PKEY * (*ossl_PEM_read_bio_PUBKEY_t)(ossl_BIO *out, ossl_EVP_PKEY **x, ossl_pem_password_cb *cb, void *u);
typedef ossl_EVP_PKEY * (*ossl_PEM_read_bio_PUBKEY_ex_t)(ossl_BIO *out, ossl_EVP_PKEY **x, ossl_pem_password_cb *cb, void *u, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef ossl_EVP_PKEY * (*ossl_PEM_read_PUBKEY_t)(FILE *out, ossl_EVP_PKEY **x, ossl_pem_password_cb *cb, void *u);
typedef ossl_EVP_PKEY * (*ossl_PEM_read_PUBKEY_ex_t)(FILE *out, ossl_EVP_PKEY **x, ossl_pem_password_cb *cb, void *u, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_PEM_write_bio_PUBKEY_t)(ossl_BIO *out, const ossl_EVP_PKEY *x);
typedef int (*ossl_PEM_write_bio_PUBKEY_ex_t)(ossl_BIO *out, const ossl_EVP_PKEY *x, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_PEM_write_PUBKEY_t)(FILE *out, const ossl_EVP_PKEY *x);
typedef int (*ossl_PEM_write_PUBKEY_ex_t)(FILE *out, const ossl_EVP_PKEY *x, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_PEM_write_bio_PrivateKey_traditional_t)(ossl_BIO *bp, const ossl_EVP_PKEY *x, const ossl_EVP_CIPHER *enc, const unsigned char *kstr, int klen, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_PEM_write_bio_PKCS8PrivateKey_nid_t)(ossl_BIO *bp, const ossl_EVP_PKEY *x, int nid, const char *kstr, int klen, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_PEM_write_bio_PKCS8PrivateKey_t)(ossl_BIO *_p0, const ossl_EVP_PKEY *_p1, const ossl_EVP_CIPHER *_p2, const char *kstr, int klen, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_i2d_PKCS8PrivateKey_bio_t)(ossl_BIO *bp, const ossl_EVP_PKEY *x, const ossl_EVP_CIPHER *enc, const char *kstr, int klen, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_i2d_PKCS8PrivateKey_nid_bio_t)(ossl_BIO *bp, const ossl_EVP_PKEY *x, int nid, const char *kstr, int klen, ossl_pem_password_cb *cb, void *u);
typedef ossl_EVP_PKEY * (*ossl_d2i_PKCS8PrivateKey_bio_t)(ossl_BIO *bp, ossl_EVP_PKEY **x, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_i2d_PKCS8PrivateKey_fp_t)(FILE *fp, const ossl_EVP_PKEY *x, const ossl_EVP_CIPHER *enc, const char *kstr, int klen, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_i2d_PKCS8PrivateKey_nid_fp_t)(FILE *fp, const ossl_EVP_PKEY *x, int nid, const char *kstr, int klen, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_PEM_write_PKCS8PrivateKey_nid_t)(FILE *fp, const ossl_EVP_PKEY *x, int nid, const char *kstr, int klen, ossl_pem_password_cb *cb, void *u);
typedef ossl_EVP_PKEY * (*ossl_d2i_PKCS8PrivateKey_fp_t)(FILE *fp, ossl_EVP_PKEY **x, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_PEM_write_PKCS8PrivateKey_t)(FILE *fp, const ossl_EVP_PKEY *x, const ossl_EVP_CIPHER *enc, const char *kstr, int klen, ossl_pem_password_cb *cd, void *u);
typedef ossl_EVP_PKEY * (*ossl_PEM_read_bio_Parameters_ex_t)(ossl_BIO *bp, ossl_EVP_PKEY **x, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef ossl_EVP_PKEY * (*ossl_PEM_read_bio_Parameters_t)(ossl_BIO *bp, ossl_EVP_PKEY **x);
typedef int (*ossl_PEM_write_bio_Parameters_t)(ossl_BIO *bp, const ossl_EVP_PKEY *x);
typedef ossl_EVP_PKEY * (*ossl_b2i_PrivateKey_t)(const unsigned char **in, long length);
typedef ossl_EVP_PKEY * (*ossl_b2i_PublicKey_t)(const unsigned char **in, long length);
typedef ossl_EVP_PKEY * (*ossl_b2i_PrivateKey_bio_t)(ossl_BIO *in);
typedef ossl_EVP_PKEY * (*ossl_b2i_PublicKey_bio_t)(ossl_BIO *in);
typedef int (*ossl_i2b_PrivateKey_bio_t)(ossl_BIO *out, const ossl_EVP_PKEY *pk);
typedef int (*ossl_i2b_PublicKey_bio_t)(ossl_BIO *out, const ossl_EVP_PKEY *pk);
typedef ossl_EVP_PKEY * (*ossl_b2i_PVK_bio_t)(ossl_BIO *in, ossl_pem_password_cb *cb, void *u);
typedef ossl_EVP_PKEY * (*ossl_b2i_PVK_bio_ex_t)(ossl_BIO *in, ossl_pem_password_cb *cb, void *u, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_i2b_PVK_bio_t)(ossl_BIO *out, const ossl_EVP_PKEY *pk, int enclevel, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_i2b_PVK_bio_ex_t)(ossl_BIO *out, const ossl_EVP_PKEY *pk, int enclevel, ossl_pem_password_cb *cb, void *u, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef ossl_UI * (*ossl_UI_new_t)();
typedef ossl_UI * (*ossl_UI_new_method_t)(const ossl_UI_METHOD *method);
typedef void (*ossl_UI_free_t)(ossl_UI *ui);
typedef int (*ossl_UI_add_input_string_t)(ossl_UI *ui, const char *prompt, int flags, char *result_buf, int minsize, int maxsize);
typedef int (*ossl_UI_dup_input_string_t)(ossl_UI *ui, const char *prompt, int flags, char *result_buf, int minsize, int maxsize);
typedef int (*ossl_UI_add_verify_string_t)(ossl_UI *ui, const char *prompt, int flags, char *result_buf, int minsize, int maxsize, const char *test_buf);
typedef int (*ossl_UI_dup_verify_string_t)(ossl_UI *ui, const char *prompt, int flags, char *result_buf, int minsize, int maxsize, const char *test_buf);
typedef int (*ossl_UI_add_input_boolean_t)(ossl_UI *ui, const char *prompt, const char *action_desc, const char *ok_chars, const char *cancel_chars, int flags, char *result_buf);
typedef int (*ossl_UI_dup_input_boolean_t)(ossl_UI *ui, const char *prompt, const char *action_desc, const char *ok_chars, const char *cancel_chars, int flags, char *result_buf);
typedef int (*ossl_UI_add_info_string_t)(ossl_UI *ui, const char *text);
typedef int (*ossl_UI_dup_info_string_t)(ossl_UI *ui, const char *text);
typedef int (*ossl_UI_add_error_string_t)(ossl_UI *ui, const char *text);
typedef int (*ossl_UI_dup_error_string_t)(ossl_UI *ui, const char *text);
typedef char * (*ossl_UI_construct_prompt_t)(ossl_UI *ui_method, const char *phrase_desc, const char *object_name);
typedef void * (*ossl_UI_add_user_data_t)(ossl_UI *ui, void *user_data);
typedef int (*ossl_UI_dup_user_data_t)(ossl_UI *ui, void *user_data);
typedef void * (*ossl_UI_get0_user_data_t)(ossl_UI *ui);
typedef const char * (*ossl_UI_get0_result_t)(ossl_UI *ui, int i);
typedef int (*ossl_UI_get_result_length_t)(ossl_UI *ui, int i);
typedef int (*ossl_UI_process_t)(ossl_UI *ui);
typedef int (*ossl_UI_ctrl_t)(ossl_UI *ui, int cmd, long i, void *p, void (*f)(void));
typedef int (*ossl_UI_set_ex_data_t)(ossl_UI *r, int idx, void *arg);
typedef void * (*ossl_UI_get_ex_data_t)(const ossl_UI *r, int idx);
typedef void (*ossl_UI_set_default_method_t)(const ossl_UI_METHOD *meth);
typedef const ossl_UI_METHOD * (*ossl_UI_get_default_method_t)();
typedef const ossl_UI_METHOD * (*ossl_UI_get_method_t)(ossl_UI *ui);
typedef const ossl_UI_METHOD * (*ossl_UI_set_method_t)(ossl_UI *ui, const ossl_UI_METHOD *meth);
typedef ossl_UI_METHOD * (*ossl_UI_OpenSSL_t)();
typedef const ossl_UI_METHOD * (*ossl_UI_null_t)();
typedef ossl_UI_METHOD * (*ossl_UI_create_method_t)(const char *name);
typedef void (*ossl_UI_destroy_method_t)(ossl_UI_METHOD *ui_method);
typedef int (*ossl_UI_method_set_opener_t)(ossl_UI_METHOD *method, int (*opener)(ossl_UI *));
typedef int (*ossl_UI_method_set_writer_t)(ossl_UI_METHOD *method, int (*writer)(ossl_UI *, ossl_UI_STRING *));
typedef int (*ossl_UI_method_set_flusher_t)(ossl_UI_METHOD *method, int (*flusher)(ossl_UI *));
typedef int (*ossl_UI_method_set_reader_t)(ossl_UI_METHOD *method, int (*reader)(ossl_UI *, ossl_UI_STRING *));
typedef int (*ossl_UI_method_set_closer_t)(ossl_UI_METHOD *method, int (*closer)(ossl_UI *));
typedef int (*ossl_UI_method_set_data_duplicator_t)(ossl_UI_METHOD *method, void *(*duplicator)(ossl_UI *, void *), void (*destructor)(ossl_UI *, void *));
typedef int (*ossl_UI_method_set_prompt_constructor_t)(ossl_UI_METHOD *method, char *(*prompt_constructor)(ossl_UI *, const char *, const char *));
typedef int (*ossl_UI_method_set_ex_data_t)(ossl_UI_METHOD *method, int idx, void *data);
typedef int (*UI_method_get_opener_ret_t)(ossl_UI *);
typedef UI_method_get_opener_ret_t (*ossl_UI_method_get_opener_t)(const ossl_UI_METHOD *method);
typedef int (*UI_method_get_writer_ret_t)(ossl_UI *, ossl_UI_STRING *);
typedef UI_method_get_writer_ret_t (*ossl_UI_method_get_writer_t)(const ossl_UI_METHOD *method);
typedef int (*UI_method_get_flusher_ret_t)(ossl_UI *);
typedef UI_method_get_flusher_ret_t (*ossl_UI_method_get_flusher_t)(const ossl_UI_METHOD *method);
typedef int (*UI_method_get_reader_ret_t)(ossl_UI *, ossl_UI_STRING *);
typedef UI_method_get_reader_ret_t (*ossl_UI_method_get_reader_t)(const ossl_UI_METHOD *method);
typedef int (*UI_method_get_closer_ret_t)(ossl_UI *);
typedef UI_method_get_closer_ret_t (*ossl_UI_method_get_closer_t)(const ossl_UI_METHOD *method);
typedef char *(*UI_method_get_prompt_constructor_ret_t)(ossl_UI *, const char *, const char *);
typedef UI_method_get_prompt_constructor_ret_t (*ossl_UI_method_get_prompt_constructor_t)(const ossl_UI_METHOD *method);
typedef void *(*UI_method_get_data_duplicator_ret_t)(ossl_UI *, void *);
typedef UI_method_get_data_duplicator_ret_t (*ossl_UI_method_get_data_duplicator_t)(const ossl_UI_METHOD *method);
typedef void (*UI_method_get_data_destructor_ret_t)(ossl_UI *, void *);
typedef UI_method_get_data_destructor_ret_t (*ossl_UI_method_get_data_destructor_t)(const ossl_UI_METHOD *method);
typedef const void * (*ossl_UI_method_get_ex_data_t)(const ossl_UI_METHOD *method, int idx);
typedef enum ossl_UI_string_types (*ossl_UI_get_string_type_t)(ossl_UI_STRING *uis);
typedef int (*ossl_UI_get_input_flags_t)(ossl_UI_STRING *uis);
typedef const char * (*ossl_UI_get0_output_string_t)(ossl_UI_STRING *uis);
typedef const char * (*ossl_UI_get0_action_string_t)(ossl_UI_STRING *uis);
typedef const char * (*ossl_UI_get0_result_string_t)(ossl_UI_STRING *uis);
typedef int (*ossl_UI_get_result_string_length_t)(ossl_UI_STRING *uis);
typedef const char * (*ossl_UI_get0_test_string_t)(ossl_UI_STRING *uis);
typedef int (*ossl_UI_get_result_minsize_t)(ossl_UI_STRING *uis);
typedef int (*ossl_UI_get_result_maxsize_t)(ossl_UI_STRING *uis);
typedef int (*ossl_UI_set_result_t)(ossl_UI *ui, ossl_UI_STRING *uis, const char *result);
typedef int (*ossl_UI_set_result_ex_t)(ossl_UI *ui, ossl_UI_STRING *uis, const char *result, int len);
typedef int (*ossl_UI_UTIL_read_pw_string_t)(char *buf, int length, const char *prompt, int verify);
typedef int (*ossl_UI_UTIL_read_pw_t)(char *buf, char *buff, int size, const char *prompt, int verify);
typedef ossl_UI_METHOD * (*ossl_UI_UTIL_wrap_read_pem_callback_t)(ossl_pem_password_cb *cb, int rwflag);
typedef void (*ossl_ERR_new_t)();
typedef void (*ossl_ERR_set_debug_t)(const char *file, int line, const char *func);
typedef void (*ossl_ERR_set_error_t)(int lib, int reason, const char *fmt, ...);
typedef void (*ossl_ERR_vset_error_t)(int lib, int reason, const char *fmt, va_list args);
typedef void (*ossl_ERR_set_error_data_t)(char *data, int flags);
typedef unsigned long (*ossl_ERR_get_error_t)();
typedef unsigned long (*ossl_ERR_get_error_all_t)(const char **file, int *line, const char **func, const char **data, int *flags);
typedef unsigned long (*ossl_ERR_get_error_line_t)(const char **file, int *line);
typedef unsigned long (*ossl_ERR_get_error_line_data_t)(const char **file, int *line, const char **data, int *flags);
typedef unsigned long (*ossl_ERR_peek_error_t)();
typedef unsigned long (*ossl_ERR_peek_error_line_t)(const char **file, int *line);
typedef unsigned long (*ossl_ERR_peek_error_func_t)(const char **func);
typedef unsigned long (*ossl_ERR_peek_error_data_t)(const char **data, int *flags);
typedef unsigned long (*ossl_ERR_peek_error_all_t)(const char **file, int *line, const char **func, const char **data, int *flags);
typedef unsigned long (*ossl_ERR_peek_error_line_data_t)(const char **file, int *line, const char **data, int *flags);
typedef unsigned long (*ossl_ERR_peek_last_error_t)();
typedef unsigned long (*ossl_ERR_peek_last_error_line_t)(const char **file, int *line);
typedef unsigned long (*ossl_ERR_peek_last_error_func_t)(const char **func);
typedef unsigned long (*ossl_ERR_peek_last_error_data_t)(const char **data, int *flags);
typedef unsigned long (*ossl_ERR_peek_last_error_all_t)(const char **file, int *line, const char **func, const char **data, int *flags);
typedef unsigned long (*ossl_ERR_peek_last_error_line_data_t)(const char **file, int *line, const char **data, int *flags);
typedef void (*ossl_ERR_clear_error_t)();
typedef char * (*ossl_ERR_error_string_t)(unsigned long e, char *buf);
typedef void (*ossl_ERR_error_string_n_t)(unsigned long e, char *buf, size_t len);
typedef const char * (*ossl_ERR_lib_error_string_t)(unsigned long e);
typedef const char * (*ossl_ERR_func_error_string_t)(unsigned long e);
typedef const char * (*ossl_ERR_reason_error_string_t)(unsigned long e);
typedef void (*ossl_ERR_print_errors_cb_t)(int (*cb)(const char *, size_t, void *), void *u);
typedef void (*ossl_ERR_print_errors_fp_t)(FILE *fp);
typedef void (*ossl_ERR_print_errors_t)(ossl_BIO *bp);
typedef void (*ossl_ERR_add_error_data_t)(int num, ...);
typedef void (*ossl_ERR_add_error_vdata_t)(int num, va_list args);
typedef void (*ossl_ERR_add_error_txt_t)(const char *sepr, const char *txt);
typedef void (*ossl_ERR_add_error_mem_bio_t)(const char *sep, ossl_BIO *bio);
typedef int (*ossl_ERR_load_strings_t)(int lib, ossl_ERR_STRING_DATA *str);
typedef int (*ossl_ERR_load_strings_const_t)(const ossl_ERR_STRING_DATA *str);
typedef int (*ossl_ERR_unload_strings_t)(int lib, ossl_ERR_STRING_DATA *str);
typedef void (*ossl_ERR_remove_thread_state_t)(void *_p0);
typedef void (*ossl_ERR_remove_state_t)(unsigned long pid);
typedef ossl_ERR_STATE * (*ossl_ERR_get_state_t)();
typedef int (*ossl_ERR_get_next_error_library_t)();
typedef int (*ossl_ERR_set_mark_t)();
typedef int (*ossl_ERR_pop_to_mark_t)();
typedef int (*ossl_ERR_clear_last_mark_t)();
typedef ossl_ENGINE * (*ossl_ENGINE_get_first_t)();
typedef ossl_ENGINE * (*ossl_ENGINE_get_last_t)();
typedef ossl_ENGINE * (*ossl_ENGINE_get_next_t)(ossl_ENGINE *e);
typedef ossl_ENGINE * (*ossl_ENGINE_get_prev_t)(ossl_ENGINE *e);
typedef int (*ossl_ENGINE_add_t)(ossl_ENGINE *e);
typedef int (*ossl_ENGINE_remove_t)(ossl_ENGINE *e);
typedef ossl_ENGINE * (*ossl_ENGINE_by_id_t)(const char *id);
typedef void (*ossl_ENGINE_load_builtin_engines_t)();
typedef unsigned int (*ossl_ENGINE_get_table_flags_t)();
typedef void (*ossl_ENGINE_set_table_flags_t)(unsigned int flags);
typedef int (*ossl_ENGINE_register_RSA_t)(ossl_ENGINE *e);
typedef void (*ossl_ENGINE_unregister_RSA_t)(ossl_ENGINE *e);
typedef void (*ossl_ENGINE_register_all_RSA_t)();
typedef int (*ossl_ENGINE_register_DSA_t)(ossl_ENGINE *e);
typedef void (*ossl_ENGINE_unregister_DSA_t)(ossl_ENGINE *e);
typedef void (*ossl_ENGINE_register_all_DSA_t)();
typedef int (*ossl_ENGINE_register_EC_t)(ossl_ENGINE *e);
typedef void (*ossl_ENGINE_unregister_EC_t)(ossl_ENGINE *e);
typedef void (*ossl_ENGINE_register_all_EC_t)();
typedef int (*ossl_ENGINE_register_DH_t)(ossl_ENGINE *e);
typedef void (*ossl_ENGINE_unregister_DH_t)(ossl_ENGINE *e);
typedef void (*ossl_ENGINE_register_all_DH_t)();
typedef int (*ossl_ENGINE_register_RAND_t)(ossl_ENGINE *e);
typedef void (*ossl_ENGINE_unregister_RAND_t)(ossl_ENGINE *e);
typedef void (*ossl_ENGINE_register_all_RAND_t)();
typedef int (*ossl_ENGINE_register_ciphers_t)(ossl_ENGINE *e);
typedef void (*ossl_ENGINE_unregister_ciphers_t)(ossl_ENGINE *e);
typedef void (*ossl_ENGINE_register_all_ciphers_t)();
typedef int (*ossl_ENGINE_register_digests_t)(ossl_ENGINE *e);
typedef void (*ossl_ENGINE_unregister_digests_t)(ossl_ENGINE *e);
typedef void (*ossl_ENGINE_register_all_digests_t)();
typedef int (*ossl_ENGINE_register_pkey_meths_t)(ossl_ENGINE *e);
typedef void (*ossl_ENGINE_unregister_pkey_meths_t)(ossl_ENGINE *e);
typedef void (*ossl_ENGINE_register_all_pkey_meths_t)();
typedef int (*ossl_ENGINE_register_pkey_asn1_meths_t)(ossl_ENGINE *e);
typedef void (*ossl_ENGINE_unregister_pkey_asn1_meths_t)(ossl_ENGINE *e);
typedef void (*ossl_ENGINE_register_all_pkey_asn1_meths_t)();
typedef int (*ossl_ENGINE_register_complete_t)(ossl_ENGINE *e);
typedef int (*ossl_ENGINE_register_all_complete_t)();
typedef int (*ossl_ENGINE_ctrl_t)(ossl_ENGINE *e, int cmd, long i, void *p, void (*f)(void));
typedef int (*ossl_ENGINE_cmd_is_executable_t)(ossl_ENGINE *e, int cmd);
typedef int (*ossl_ENGINE_ctrl_cmd_t)(ossl_ENGINE *e, const char *cmd_name, long i, void *p, void (*f)(void), int cmd_optional);
typedef int (*ossl_ENGINE_ctrl_cmd_string_t)(ossl_ENGINE *e, const char *cmd_name, const char *arg, int cmd_optional);
typedef ossl_ENGINE * (*ossl_ENGINE_new_t)();
typedef int (*ossl_ENGINE_free_t)(ossl_ENGINE *e);
typedef int (*ossl_ENGINE_up_ref_t)(ossl_ENGINE *e);
typedef int (*ossl_ENGINE_set_id_t)(ossl_ENGINE *e, const char *id);
typedef int (*ossl_ENGINE_set_name_t)(ossl_ENGINE *e, const char *name);
typedef int (*ossl_ENGINE_set_RSA_t)(ossl_ENGINE *e, const ossl_RSA_METHOD *rsa_meth);
typedef int (*ossl_ENGINE_set_DSA_t)(ossl_ENGINE *e, const ossl_DSA_METHOD *dsa_meth);
typedef int (*ossl_ENGINE_set_EC_t)(ossl_ENGINE *e, const ossl_EC_KEY_METHOD *ecdsa_meth);
typedef int (*ossl_ENGINE_set_DH_t)(ossl_ENGINE *e, const ossl_DH_METHOD *dh_meth);
typedef int (*ossl_ENGINE_set_RAND_t)(ossl_ENGINE *e, const ossl_RAND_METHOD *rand_meth);
typedef int (*ossl_ENGINE_set_destroy_function_t)(ossl_ENGINE *e, ossl_ENGINE_GEN_INT_FUNC_PTR destroy_f);
typedef int (*ossl_ENGINE_set_init_function_t)(ossl_ENGINE *e, ossl_ENGINE_GEN_INT_FUNC_PTR init_f);
typedef int (*ossl_ENGINE_set_finish_function_t)(ossl_ENGINE *e, ossl_ENGINE_GEN_INT_FUNC_PTR finish_f);
typedef int (*ossl_ENGINE_set_ctrl_function_t)(ossl_ENGINE *e, ossl_ENGINE_CTRL_FUNC_PTR ctrl_f);
typedef int (*ossl_ENGINE_set_load_privkey_function_t)(ossl_ENGINE *e, ossl_ENGINE_LOAD_KEY_PTR loadpriv_f);
typedef int (*ossl_ENGINE_set_load_pubkey_function_t)(ossl_ENGINE *e, ossl_ENGINE_LOAD_KEY_PTR loadpub_f);
typedef int (*ossl_ENGINE_set_load_ssl_client_cert_function_t)(ossl_ENGINE *e, ossl_ENGINE_SSL_CLIENT_CERT_PTR loadssl_f);
typedef int (*ossl_ENGINE_set_ciphers_t)(ossl_ENGINE *e, ossl_ENGINE_CIPHERS_PTR f);
typedef int (*ossl_ENGINE_set_digests_t)(ossl_ENGINE *e, ossl_ENGINE_DIGESTS_PTR f);
typedef int (*ossl_ENGINE_set_pkey_meths_t)(ossl_ENGINE *e, ossl_ENGINE_PKEY_METHS_PTR f);
typedef int (*ossl_ENGINE_set_pkey_asn1_meths_t)(ossl_ENGINE *e, ossl_ENGINE_PKEY_ASN1_METHS_PTR f);
typedef int (*ossl_ENGINE_set_flags_t)(ossl_ENGINE *e, int flags);
typedef int (*ossl_ENGINE_set_cmd_defns_t)(ossl_ENGINE *e, const ossl_ENGINE_CMD_DEFN *defns);
typedef int (*ossl_ENGINE_set_ex_data_t)(ossl_ENGINE *e, int idx, void *arg);
typedef void * (*ossl_ENGINE_get_ex_data_t)(const ossl_ENGINE *e, int idx);
typedef const char * (*ossl_ENGINE_get_id_t)(const ossl_ENGINE *e);
typedef const char * (*ossl_ENGINE_get_name_t)(const ossl_ENGINE *e);
typedef const ossl_RSA_METHOD * (*ossl_ENGINE_get_RSA_t)(const ossl_ENGINE *e);
typedef const ossl_DSA_METHOD * (*ossl_ENGINE_get_DSA_t)(const ossl_ENGINE *e);
typedef const ossl_EC_KEY_METHOD * (*ossl_ENGINE_get_EC_t)(const ossl_ENGINE *e);
typedef const ossl_DH_METHOD * (*ossl_ENGINE_get_DH_t)(const ossl_ENGINE *e);
typedef const ossl_RAND_METHOD * (*ossl_ENGINE_get_RAND_t)(const ossl_ENGINE *e);
typedef ossl_ENGINE_GEN_INT_FUNC_PTR (*ossl_ENGINE_get_destroy_function_t)(const ossl_ENGINE *e);
typedef ossl_ENGINE_GEN_INT_FUNC_PTR (*ossl_ENGINE_get_init_function_t)(const ossl_ENGINE *e);
typedef ossl_ENGINE_GEN_INT_FUNC_PTR (*ossl_ENGINE_get_finish_function_t)(const ossl_ENGINE *e);
typedef ossl_ENGINE_CTRL_FUNC_PTR (*ossl_ENGINE_get_ctrl_function_t)(const ossl_ENGINE *e);
typedef ossl_ENGINE_LOAD_KEY_PTR (*ossl_ENGINE_get_load_privkey_function_t)(const ossl_ENGINE *e);
typedef ossl_ENGINE_LOAD_KEY_PTR (*ossl_ENGINE_get_load_pubkey_function_t)(const ossl_ENGINE *e);
typedef ossl_ENGINE_SSL_CLIENT_CERT_PTR (*ossl_ENGINE_get_ssl_client_cert_function_t)(const ossl_ENGINE *e);
typedef ossl_ENGINE_CIPHERS_PTR (*ossl_ENGINE_get_ciphers_t)(const ossl_ENGINE *e);
typedef ossl_ENGINE_DIGESTS_PTR (*ossl_ENGINE_get_digests_t)(const ossl_ENGINE *e);
typedef ossl_ENGINE_PKEY_METHS_PTR (*ossl_ENGINE_get_pkey_meths_t)(const ossl_ENGINE *e);
typedef ossl_ENGINE_PKEY_ASN1_METHS_PTR (*ossl_ENGINE_get_pkey_asn1_meths_t)(const ossl_ENGINE *e);
typedef const ossl_EVP_CIPHER * (*ossl_ENGINE_get_cipher_t)(ossl_ENGINE *e, int nid);
typedef const ossl_EVP_MD * (*ossl_ENGINE_get_digest_t)(ossl_ENGINE *e, int nid);
typedef const ossl_EVP_PKEY_METHOD * (*ossl_ENGINE_get_pkey_meth_t)(ossl_ENGINE *e, int nid);
typedef const ossl_EVP_PKEY_ASN1_METHOD * (*ossl_ENGINE_get_pkey_asn1_meth_t)(ossl_ENGINE *e, int nid);
typedef const ossl_EVP_PKEY_ASN1_METHOD * (*ossl_ENGINE_get_pkey_asn1_meth_str_t)(ossl_ENGINE *e, const char *str, int len);
typedef const ossl_EVP_PKEY_ASN1_METHOD * (*ossl_ENGINE_pkey_asn1_find_str_t)(ossl_ENGINE **pe, const char *str, int len);
typedef const ossl_ENGINE_CMD_DEFN * (*ossl_ENGINE_get_cmd_defns_t)(const ossl_ENGINE *e);
typedef int (*ossl_ENGINE_get_flags_t)(const ossl_ENGINE *e);
typedef int (*ossl_ENGINE_init_t)(ossl_ENGINE *e);
typedef int (*ossl_ENGINE_finish_t)(ossl_ENGINE *e);
typedef ossl_EVP_PKEY * (*ossl_ENGINE_load_private_key_t)(ossl_ENGINE *e, const char *key_id, ossl_UI_METHOD *ui_method, void *callback_data);
typedef ossl_EVP_PKEY * (*ossl_ENGINE_load_public_key_t)(ossl_ENGINE *e, const char *key_id, ossl_UI_METHOD *ui_method, void *callback_data);
typedef int (*ossl_ENGINE_load_ssl_client_cert_t)(ossl_ENGINE *e, ossl_SSL *s, ossl_STACK_OF(ossl_X509_NAME) *ca_dn, ossl_X509 **pcert, ossl_EVP_PKEY **ppkey, ossl_STACK_OF(ossl_X509) **pother, ossl_UI_METHOD *ui_method, void *callback_data);
typedef ossl_ENGINE * (*ossl_ENGINE_get_default_RSA_t)();
typedef ossl_ENGINE * (*ossl_ENGINE_get_default_DSA_t)();
typedef ossl_ENGINE * (*ossl_ENGINE_get_default_EC_t)();
typedef ossl_ENGINE * (*ossl_ENGINE_get_default_DH_t)();
typedef ossl_ENGINE * (*ossl_ENGINE_get_default_RAND_t)();
typedef ossl_ENGINE * (*ossl_ENGINE_get_cipher_engine_t)(int nid);
typedef ossl_ENGINE * (*ossl_ENGINE_get_digest_engine_t)(int nid);
typedef ossl_ENGINE * (*ossl_ENGINE_get_pkey_meth_engine_t)(int nid);
typedef ossl_ENGINE * (*ossl_ENGINE_get_pkey_asn1_meth_engine_t)(int nid);
typedef int (*ossl_ENGINE_set_default_RSA_t)(ossl_ENGINE *e);
typedef int (*ossl_ENGINE_set_default_string_t)(ossl_ENGINE *e, const char *def_list);
typedef int (*ossl_ENGINE_set_default_DSA_t)(ossl_ENGINE *e);
typedef int (*ossl_ENGINE_set_default_EC_t)(ossl_ENGINE *e);
typedef int (*ossl_ENGINE_set_default_DH_t)(ossl_ENGINE *e);
typedef int (*ossl_ENGINE_set_default_RAND_t)(ossl_ENGINE *e);
typedef int (*ossl_ENGINE_set_default_ciphers_t)(ossl_ENGINE *e);
typedef int (*ossl_ENGINE_set_default_digests_t)(ossl_ENGINE *e);
typedef int (*ossl_ENGINE_set_default_pkey_meths_t)(ossl_ENGINE *e);
typedef int (*ossl_ENGINE_set_default_pkey_asn1_meths_t)(ossl_ENGINE *e);
typedef int (*ossl_ENGINE_set_default_t)(ossl_ENGINE *e, unsigned int flags);
typedef void (*ossl_ENGINE_add_conf_module_t)();
typedef void * (*ossl_ENGINE_get_static_state_t)();
typedef ossl_ESS_ISSUER_SERIAL * (*ossl_ESS_ISSUER_SERIAL_new_t)();
typedef void (*ossl_ESS_ISSUER_SERIAL_free_t)(ossl_ESS_ISSUER_SERIAL *a);
typedef ossl_ESS_ISSUER_SERIAL * (*ossl_d2i_ESS_ISSUER_SERIAL_t)(ossl_ESS_ISSUER_SERIAL **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ESS_ISSUER_SERIAL_t)(const ossl_ESS_ISSUER_SERIAL *a, unsigned char **out);
typedef ossl_ESS_ISSUER_SERIAL * (*ossl_ESS_ISSUER_SERIAL_dup_t)(const ossl_ESS_ISSUER_SERIAL *a);
typedef ossl_ESS_CERT_ID * (*ossl_ESS_CERT_ID_new_t)();
typedef void (*ossl_ESS_CERT_ID_free_t)(ossl_ESS_CERT_ID *a);
typedef ossl_ESS_CERT_ID * (*ossl_d2i_ESS_CERT_ID_t)(ossl_ESS_CERT_ID **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ESS_CERT_ID_t)(const ossl_ESS_CERT_ID *a, unsigned char **out);
typedef ossl_ESS_CERT_ID * (*ossl_ESS_CERT_ID_dup_t)(const ossl_ESS_CERT_ID *a);
typedef ossl_ESS_SIGNING_CERT * (*ossl_ESS_SIGNING_CERT_new_t)();
typedef void (*ossl_ESS_SIGNING_CERT_free_t)(ossl_ESS_SIGNING_CERT *a);
typedef ossl_ESS_SIGNING_CERT * (*ossl_d2i_ESS_SIGNING_CERT_t)(ossl_ESS_SIGNING_CERT **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ESS_SIGNING_CERT_t)(const ossl_ESS_SIGNING_CERT *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_ESS_SIGNING_CERT_it_t)();
typedef ossl_ESS_SIGNING_CERT * (*ossl_ESS_SIGNING_CERT_dup_t)(const ossl_ESS_SIGNING_CERT *a);
typedef ossl_ESS_CERT_ID_V2 * (*ossl_ESS_CERT_ID_V2_new_t)();
typedef void (*ossl_ESS_CERT_ID_V2_free_t)(ossl_ESS_CERT_ID_V2 *a);
typedef ossl_ESS_CERT_ID_V2 * (*ossl_d2i_ESS_CERT_ID_V2_t)(ossl_ESS_CERT_ID_V2 **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ESS_CERT_ID_V2_t)(const ossl_ESS_CERT_ID_V2 *a, unsigned char **out);
typedef ossl_ESS_CERT_ID_V2 * (*ossl_ESS_CERT_ID_V2_dup_t)(const ossl_ESS_CERT_ID_V2 *a);
typedef ossl_ESS_SIGNING_CERT_V2 * (*ossl_ESS_SIGNING_CERT_V2_new_t)();
typedef void (*ossl_ESS_SIGNING_CERT_V2_free_t)(ossl_ESS_SIGNING_CERT_V2 *a);
typedef ossl_ESS_SIGNING_CERT_V2 * (*ossl_d2i_ESS_SIGNING_CERT_V2_t)(ossl_ESS_SIGNING_CERT_V2 **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_ESS_SIGNING_CERT_V2_t)(const ossl_ESS_SIGNING_CERT_V2 *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_ESS_SIGNING_CERT_V2_it_t)();
typedef ossl_ESS_SIGNING_CERT_V2 * (*ossl_ESS_SIGNING_CERT_V2_dup_t)(const ossl_ESS_SIGNING_CERT_V2 *a);
typedef ossl_ESS_SIGNING_CERT * (*ossl_OSSL_ESS_signing_cert_new_init_t)(const ossl_X509 *signcert, const ossl_STACK_OF(ossl_X509) *certs, int set_issuer_serial);
typedef ossl_ESS_SIGNING_CERT_V2 * (*ossl_OSSL_ESS_signing_cert_v2_new_init_t)(const ossl_EVP_MD *hash_alg, const ossl_X509 *signcert, const ossl_STACK_OF(ossl_X509) *certs, int set_issuer_serial);
typedef int (*ossl_OSSL_ESS_check_signing_certs_t)(const ossl_ESS_SIGNING_CERT *ss, const ossl_ESS_SIGNING_CERT_V2 *ssv2, const ossl_STACK_OF(ossl_X509) *chain, int require_signing_cert);
typedef size_t (*ossl_HMAC_size_t)(const ossl_HMAC_CTX *e);
typedef ossl_HMAC_CTX * (*ossl_HMAC_CTX_new_t)();
typedef int (*ossl_HMAC_CTX_reset_t)(ossl_HMAC_CTX *ctx);
typedef void (*ossl_HMAC_CTX_free_t)(ossl_HMAC_CTX *ctx);
typedef int (*ossl_HMAC_Init_t)(ossl_HMAC_CTX *ctx, const void *key, int len, const ossl_EVP_MD *md);
typedef int (*ossl_HMAC_Init_ex_t)(ossl_HMAC_CTX *ctx, const void *key, int len, const ossl_EVP_MD *md, ossl_ENGINE *impl);
typedef int (*ossl_HMAC_Update_t)(ossl_HMAC_CTX *ctx, const unsigned char *data, size_t len);
typedef int (*ossl_HMAC_Final_t)(ossl_HMAC_CTX *ctx, unsigned char *md, unsigned int *len);
typedef int (*ossl_HMAC_CTX_copy_t)(ossl_HMAC_CTX *dctx, ossl_HMAC_CTX *sctx);
typedef void (*ossl_HMAC_CTX_set_flags_t)(ossl_HMAC_CTX *ctx, unsigned long flags);
typedef const ossl_EVP_MD * (*ossl_HMAC_CTX_get_md_t)(const ossl_HMAC_CTX *ctx);
typedef unsigned char * (*ossl_HMAC_t)(const ossl_EVP_MD *evp_md, const void *key, int key_len, const unsigned char *data, size_t data_len, unsigned char *md, unsigned int *md_len);
typedef const char * (*ossl_IDEA_options_t)();
typedef void (*ossl_IDEA_ecb_encrypt_t)(const unsigned char *in, unsigned char *out, ossl_IDEA_KEY_SCHEDULE *ks);
typedef void (*ossl_IDEA_set_encrypt_key_t)(const unsigned char *key, ossl_IDEA_KEY_SCHEDULE *ks);
typedef void (*ossl_IDEA_set_decrypt_key_t)(ossl_IDEA_KEY_SCHEDULE *ek, ossl_IDEA_KEY_SCHEDULE *dk);
typedef void (*ossl_IDEA_cbc_encrypt_t)(const unsigned char *in, unsigned char *out, long length, ossl_IDEA_KEY_SCHEDULE *ks, unsigned char *iv, int enc);
typedef void (*ossl_IDEA_cfb64_encrypt_t)(const unsigned char *in, unsigned char *out, long length, ossl_IDEA_KEY_SCHEDULE *ks, unsigned char *iv, int *num, int enc);
typedef void (*ossl_IDEA_ofb64_encrypt_t)(const unsigned char *in, unsigned char *out, long length, ossl_IDEA_KEY_SCHEDULE *ks, unsigned char *iv, int *num);
typedef void (*ossl_IDEA_encrypt_t)(unsigned long *in, ossl_IDEA_KEY_SCHEDULE *ks);
typedef int (*ossl_EVP_KDF_up_ref_t)(ossl_EVP_KDF *kdf);
typedef void (*ossl_EVP_KDF_free_t)(ossl_EVP_KDF *kdf);
typedef ossl_EVP_KDF * (*ossl_EVP_KDF_fetch_t)(ossl_OSSL_LIB_CTX *libctx, const char *algorithm, const char *properties);
typedef ossl_EVP_KDF_CTX * (*ossl_EVP_KDF_CTX_new_t)(ossl_EVP_KDF *kdf);
typedef void (*ossl_EVP_KDF_CTX_free_t)(ossl_EVP_KDF_CTX *ctx);
typedef ossl_EVP_KDF_CTX * (*ossl_EVP_KDF_CTX_dup_t)(const ossl_EVP_KDF_CTX *src);
typedef const char * (*ossl_EVP_KDF_get0_description_t)(const ossl_EVP_KDF *kdf);
typedef int (*ossl_EVP_KDF_is_a_t)(const ossl_EVP_KDF *kdf, const char *name);
typedef const char * (*ossl_EVP_KDF_get0_name_t)(const ossl_EVP_KDF *kdf);
typedef const ossl_OSSL_PROVIDER * (*ossl_EVP_KDF_get0_provider_t)(const ossl_EVP_KDF *kdf);
typedef const ossl_EVP_KDF * (*ossl_EVP_KDF_CTX_kdf_t)(ossl_EVP_KDF_CTX *ctx);
typedef void (*ossl_EVP_KDF_CTX_reset_t)(ossl_EVP_KDF_CTX *ctx);
typedef size_t (*ossl_EVP_KDF_CTX_get_kdf_size_t)(ossl_EVP_KDF_CTX *ctx);
typedef int (*ossl_EVP_KDF_derive_t)(ossl_EVP_KDF_CTX *ctx, unsigned char *key, size_t keylen, const ossl_OSSL_PARAM params[]);
typedef int (*ossl_EVP_KDF_get_params_t)(ossl_EVP_KDF *kdf, ossl_OSSL_PARAM params[]);
typedef int (*ossl_EVP_KDF_CTX_get_params_t)(ossl_EVP_KDF_CTX *ctx, ossl_OSSL_PARAM params[]);
typedef int (*ossl_EVP_KDF_CTX_set_params_t)(ossl_EVP_KDF_CTX *ctx, const ossl_OSSL_PARAM params[]);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_KDF_gettable_params_t)(const ossl_EVP_KDF *kdf);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_KDF_gettable_ctx_params_t)(const ossl_EVP_KDF *kdf);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_KDF_settable_ctx_params_t)(const ossl_EVP_KDF *kdf);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_KDF_CTX_gettable_params_t)(ossl_EVP_KDF_CTX *ctx);
typedef const ossl_OSSL_PARAM * (*ossl_EVP_KDF_CTX_settable_params_t)(ossl_EVP_KDF_CTX *ctx);
typedef void (*ossl_EVP_KDF_do_all_provided_t)(ossl_OSSL_LIB_CTX *libctx, void (*fn)(ossl_EVP_KDF *, void *), void *arg);
typedef int (*ossl_EVP_KDF_names_do_all_t)(const ossl_EVP_KDF *kdf, void (*fn)(const char *, void *), void *data);
typedef int (*ossl_EVP_PKEY_CTX_set_tls1_prf_md_t)(ossl_EVP_PKEY_CTX *ctx, const ossl_EVP_MD *md);
typedef int (*ossl_EVP_PKEY_CTX_set1_tls1_prf_secret_t)(ossl_EVP_PKEY_CTX *pctx, const unsigned char *sec, int seclen);
typedef int (*ossl_EVP_PKEY_CTX_add1_tls1_prf_seed_t)(ossl_EVP_PKEY_CTX *pctx, const unsigned char *seed, int seedlen);
typedef int (*ossl_EVP_PKEY_CTX_set_hkdf_md_t)(ossl_EVP_PKEY_CTX *ctx, const ossl_EVP_MD *md);
typedef int (*ossl_EVP_PKEY_CTX_set1_hkdf_salt_t)(ossl_EVP_PKEY_CTX *ctx, const unsigned char *salt, int saltlen);
typedef int (*ossl_EVP_PKEY_CTX_set1_hkdf_key_t)(ossl_EVP_PKEY_CTX *ctx, const unsigned char *key, int keylen);
typedef int (*ossl_EVP_PKEY_CTX_add1_hkdf_info_t)(ossl_EVP_PKEY_CTX *ctx, const unsigned char *info, int infolen);
typedef int (*ossl_EVP_PKEY_CTX_set_hkdf_mode_t)(ossl_EVP_PKEY_CTX *ctx, int mode);
typedef int (*ossl_EVP_PKEY_CTX_set1_pbe_pass_t)(ossl_EVP_PKEY_CTX *ctx, const char *pass, int passlen);
typedef int (*ossl_EVP_PKEY_CTX_set1_scrypt_salt_t)(ossl_EVP_PKEY_CTX *ctx, const unsigned char *salt, int saltlen);
typedef int (*ossl_EVP_PKEY_CTX_set_scrypt_N_t)(ossl_EVP_PKEY_CTX *ctx, uint64_t n);
typedef int (*ossl_EVP_PKEY_CTX_set_scrypt_r_t)(ossl_EVP_PKEY_CTX *ctx, uint64_t r);
typedef int (*ossl_EVP_PKEY_CTX_set_scrypt_p_t)(ossl_EVP_PKEY_CTX *ctx, uint64_t p);
typedef int (*ossl_EVP_PKEY_CTX_set_scrypt_maxmem_bytes_t)(ossl_EVP_PKEY_CTX *ctx, uint64_t maxmem_bytes);
typedef int (*ossl_MD4_Init_t)(ossl_MD4_CTX *c);
typedef int (*ossl_MD4_Update_t)(ossl_MD4_CTX *c, const void *data, size_t len);
typedef int (*ossl_MD4_Final_t)(unsigned char *md, ossl_MD4_CTX *c);
typedef unsigned char * (*ossl_MD4_t)(const unsigned char *d, size_t n, unsigned char *md);
typedef void (*ossl_MD4_Transform_t)(ossl_MD4_CTX *c, const unsigned char *b);
typedef int (*ossl_MD5_Init_t)(ossl_MD5_CTX *c);
typedef int (*ossl_MD5_Update_t)(ossl_MD5_CTX *c, const void *data, size_t len);
typedef int (*ossl_MD5_Final_t)(unsigned char *md, ossl_MD5_CTX *c);
typedef unsigned char * (*ossl_MD5_t)(const unsigned char *d, size_t n, unsigned char *md);
typedef void (*ossl_MD5_Transform_t)(ossl_MD5_CTX *c, const unsigned char *b);
typedef int (*ossl_MDC2_Init_t)(ossl_MDC2_CTX *c);
typedef int (*ossl_MDC2_Update_t)(ossl_MDC2_CTX *c, const unsigned char *data, size_t len);
typedef int (*ossl_MDC2_Final_t)(unsigned char *md, ossl_MDC2_CTX *c);
typedef unsigned char * (*ossl_MDC2_t)(const unsigned char *d, size_t n, unsigned char *md);
typedef void (*ossl_CRYPTO_cbc128_encrypt_t)(const unsigned char *in, unsigned char *out, size_t len, const void *key, unsigned char ivec[16], ossl_block128_f block);
typedef void (*ossl_CRYPTO_cbc128_decrypt_t)(const unsigned char *in, unsigned char *out, size_t len, const void *key, unsigned char ivec[16], ossl_block128_f block);
typedef void (*ossl_CRYPTO_ctr128_encrypt_t)(const unsigned char *in, unsigned char *out, size_t len, const void *key, unsigned char ivec[16], unsigned char ecount_buf[16], unsigned int *num, ossl_block128_f block);
typedef void (*ossl_CRYPTO_ctr128_encrypt_ctr32_t)(const unsigned char *in, unsigned char *out, size_t len, const void *key, unsigned char ivec[16], unsigned char ecount_buf[16], unsigned int *num, ossl_ctr128_f ctr);
typedef void (*ossl_CRYPTO_ofb128_encrypt_t)(const unsigned char *in, unsigned char *out, size_t len, const void *key, unsigned char ivec[16], int *num, ossl_block128_f block);
typedef void (*ossl_CRYPTO_cfb128_encrypt_t)(const unsigned char *in, unsigned char *out, size_t len, const void *key, unsigned char ivec[16], int *num, int enc, ossl_block128_f block);
typedef void (*ossl_CRYPTO_cfb128_8_encrypt_t)(const unsigned char *in, unsigned char *out, size_t length, const void *key, unsigned char ivec[16], int *num, int enc, ossl_block128_f block);
typedef void (*ossl_CRYPTO_cfb128_1_encrypt_t)(const unsigned char *in, unsigned char *out, size_t bits, const void *key, unsigned char ivec[16], int *num, int enc, ossl_block128_f block);
typedef size_t (*ossl_CRYPTO_cts128_encrypt_block_t)(const unsigned char *in, unsigned char *out, size_t len, const void *key, unsigned char ivec[16], ossl_block128_f block);
typedef size_t (*ossl_CRYPTO_cts128_encrypt_t)(const unsigned char *in, unsigned char *out, size_t len, const void *key, unsigned char ivec[16], ossl_cbc128_f cbc);
typedef size_t (*ossl_CRYPTO_cts128_decrypt_block_t)(const unsigned char *in, unsigned char *out, size_t len, const void *key, unsigned char ivec[16], ossl_block128_f block);
typedef size_t (*ossl_CRYPTO_cts128_decrypt_t)(const unsigned char *in, unsigned char *out, size_t len, const void *key, unsigned char ivec[16], ossl_cbc128_f cbc);
typedef size_t (*ossl_CRYPTO_nistcts128_encrypt_block_t)(const unsigned char *in, unsigned char *out, size_t len, const void *key, unsigned char ivec[16], ossl_block128_f block);
typedef size_t (*ossl_CRYPTO_nistcts128_encrypt_t)(const unsigned char *in, unsigned char *out, size_t len, const void *key, unsigned char ivec[16], ossl_cbc128_f cbc);
typedef size_t (*ossl_CRYPTO_nistcts128_decrypt_block_t)(const unsigned char *in, unsigned char *out, size_t len, const void *key, unsigned char ivec[16], ossl_block128_f block);
typedef size_t (*ossl_CRYPTO_nistcts128_decrypt_t)(const unsigned char *in, unsigned char *out, size_t len, const void *key, unsigned char ivec[16], ossl_cbc128_f cbc);
typedef ossl_GCM128_CONTEXT * (*ossl_CRYPTO_gcm128_new_t)(void *key, ossl_block128_f block);
typedef void (*ossl_CRYPTO_gcm128_init_t)(ossl_GCM128_CONTEXT *ctx, void *key, ossl_block128_f block);
typedef void (*ossl_CRYPTO_gcm128_setiv_t)(ossl_GCM128_CONTEXT *ctx, const unsigned char *iv, size_t len);
typedef int (*ossl_CRYPTO_gcm128_aad_t)(ossl_GCM128_CONTEXT *ctx, const unsigned char *aad, size_t len);
typedef int (*ossl_CRYPTO_gcm128_encrypt_t)(ossl_GCM128_CONTEXT *ctx, const unsigned char *in, unsigned char *out, size_t len);
typedef int (*ossl_CRYPTO_gcm128_decrypt_t)(ossl_GCM128_CONTEXT *ctx, const unsigned char *in, unsigned char *out, size_t len);
typedef int (*ossl_CRYPTO_gcm128_encrypt_ctr32_t)(ossl_GCM128_CONTEXT *ctx, const unsigned char *in, unsigned char *out, size_t len, ossl_ctr128_f stream);
typedef int (*ossl_CRYPTO_gcm128_decrypt_ctr32_t)(ossl_GCM128_CONTEXT *ctx, const unsigned char *in, unsigned char *out, size_t len, ossl_ctr128_f stream);
typedef int (*ossl_CRYPTO_gcm128_finish_t)(ossl_GCM128_CONTEXT *ctx, const unsigned char *tag, size_t len);
typedef void (*ossl_CRYPTO_gcm128_tag_t)(ossl_GCM128_CONTEXT *ctx, unsigned char *tag, size_t len);
typedef void (*ossl_CRYPTO_gcm128_release_t)(ossl_GCM128_CONTEXT *ctx);
typedef void (*ossl_CRYPTO_ccm128_init_t)(ossl_CCM128_CONTEXT *ctx, unsigned int M, unsigned int L, void *key, ossl_block128_f block);
typedef int (*ossl_CRYPTO_ccm128_setiv_t)(ossl_CCM128_CONTEXT *ctx, const unsigned char *nonce, size_t nlen, size_t mlen);
typedef void (*ossl_CRYPTO_ccm128_aad_t)(ossl_CCM128_CONTEXT *ctx, const unsigned char *aad, size_t alen);
typedef int (*ossl_CRYPTO_ccm128_encrypt_t)(ossl_CCM128_CONTEXT *ctx, const unsigned char *inp, unsigned char *out, size_t len);
typedef int (*ossl_CRYPTO_ccm128_decrypt_t)(ossl_CCM128_CONTEXT *ctx, const unsigned char *inp, unsigned char *out, size_t len);
typedef int (*ossl_CRYPTO_ccm128_encrypt_ccm64_t)(ossl_CCM128_CONTEXT *ctx, const unsigned char *inp, unsigned char *out, size_t len, ossl_ccm128_f stream);
typedef int (*ossl_CRYPTO_ccm128_decrypt_ccm64_t)(ossl_CCM128_CONTEXT *ctx, const unsigned char *inp, unsigned char *out, size_t len, ossl_ccm128_f stream);
typedef size_t (*ossl_CRYPTO_ccm128_tag_t)(ossl_CCM128_CONTEXT *ctx, unsigned char *tag, size_t len);
typedef int (*ossl_CRYPTO_xts128_encrypt_t)(const ossl_XTS128_CONTEXT *ctx, const unsigned char iv[16], const unsigned char *inp, unsigned char *out, size_t len, int enc);
typedef size_t (*ossl_CRYPTO_128_wrap_t)(void *key, const unsigned char *iv, unsigned char *out, const unsigned char *in, size_t inlen, ossl_block128_f block);
typedef size_t (*ossl_CRYPTO_128_unwrap_t)(void *key, const unsigned char *iv, unsigned char *out, const unsigned char *in, size_t inlen, ossl_block128_f block);
typedef size_t (*ossl_CRYPTO_128_wrap_pad_t)(void *key, const unsigned char *icv, unsigned char *out, const unsigned char *in, size_t inlen, ossl_block128_f block);
typedef size_t (*ossl_CRYPTO_128_unwrap_pad_t)(void *key, const unsigned char *icv, unsigned char *out, const unsigned char *in, size_t inlen, ossl_block128_f block);
typedef ossl_OCB128_CONTEXT * (*ossl_CRYPTO_ocb128_new_t)(void *keyenc, void *keydec, ossl_block128_f encrypt, ossl_block128_f decrypt, ossl_ocb128_f stream);
typedef int (*ossl_CRYPTO_ocb128_init_t)(ossl_OCB128_CONTEXT *ctx, void *keyenc, void *keydec, ossl_block128_f encrypt, ossl_block128_f decrypt, ossl_ocb128_f stream);
typedef int (*ossl_CRYPTO_ocb128_copy_ctx_t)(ossl_OCB128_CONTEXT *dest, ossl_OCB128_CONTEXT *src, void *keyenc, void *keydec);
typedef int (*ossl_CRYPTO_ocb128_setiv_t)(ossl_OCB128_CONTEXT *ctx, const unsigned char *iv, size_t len, size_t taglen);
typedef int (*ossl_CRYPTO_ocb128_aad_t)(ossl_OCB128_CONTEXT *ctx, const unsigned char *aad, size_t len);
typedef int (*ossl_CRYPTO_ocb128_encrypt_t)(ossl_OCB128_CONTEXT *ctx, const unsigned char *in, unsigned char *out, size_t len);
typedef int (*ossl_CRYPTO_ocb128_decrypt_t)(ossl_OCB128_CONTEXT *ctx, const unsigned char *in, unsigned char *out, size_t len);
typedef int (*ossl_CRYPTO_ocb128_finish_t)(ossl_OCB128_CONTEXT *ctx, const unsigned char *tag, size_t len);
typedef int (*ossl_CRYPTO_ocb128_tag_t)(ossl_OCB128_CONTEXT *ctx, unsigned char *tag, size_t len);
typedef void (*ossl_CRYPTO_ocb128_cleanup_t)(ossl_OCB128_CONTEXT *ctx);
typedef ossl_OCSP_CERTID * (*ossl_OCSP_CERTID_dup_t)(const ossl_OCSP_CERTID *a);
typedef ossl_OSSL_HTTP_REQ_CTX * (*ossl_OCSP_sendreq_new_t)(ossl_BIO *io, const char *path, const ossl_OCSP_REQUEST *req, int buf_size);
typedef ossl_OCSP_RESPONSE * (*ossl_OCSP_sendreq_bio_t)(ossl_BIO *b, const char *path, ossl_OCSP_REQUEST *req);
typedef ossl_OCSP_CERTID * (*ossl_OCSP_cert_to_id_t)(const ossl_EVP_MD *dgst, const ossl_X509 *subject, const ossl_X509 *issuer);
typedef ossl_OCSP_CERTID * (*ossl_OCSP_cert_id_new_t)(const ossl_EVP_MD *dgst, const ossl_X509_NAME *issuerName, const ossl_ASN1_BIT_STRING *issuerKey, const ossl_ASN1_INTEGER *serialNumber);
typedef ossl_OCSP_ONEREQ * (*ossl_OCSP_request_add0_id_t)(ossl_OCSP_REQUEST *req, ossl_OCSP_CERTID *cid);
typedef int (*ossl_OCSP_request_add1_nonce_t)(ossl_OCSP_REQUEST *req, unsigned char *val, int len);
typedef int (*ossl_OCSP_basic_add1_nonce_t)(ossl_OCSP_BASICRESP *resp, unsigned char *val, int len);
typedef int (*ossl_OCSP_check_nonce_t)(ossl_OCSP_REQUEST *req, ossl_OCSP_BASICRESP *bs);
typedef int (*ossl_OCSP_copy_nonce_t)(ossl_OCSP_BASICRESP *resp, ossl_OCSP_REQUEST *req);
typedef int (*ossl_OCSP_request_set1_name_t)(ossl_OCSP_REQUEST *req, const ossl_X509_NAME *nm);
typedef int (*ossl_OCSP_request_add1_cert_t)(ossl_OCSP_REQUEST *req, ossl_X509 *cert);
typedef int (*ossl_OCSP_request_sign_t)(ossl_OCSP_REQUEST *req, ossl_X509 *signer, ossl_EVP_PKEY *key, const ossl_EVP_MD *dgst, ossl_STACK_OF(ossl_X509) *certs, unsigned long flags);
typedef int (*ossl_OCSP_response_status_t)(ossl_OCSP_RESPONSE *resp);
typedef ossl_OCSP_BASICRESP * (*ossl_OCSP_response_get1_basic_t)(ossl_OCSP_RESPONSE *resp);
typedef const ossl_ASN1_OCTET_STRING * (*ossl_OCSP_resp_get0_signature_t)(const ossl_OCSP_BASICRESP *bs);
typedef const ossl_X509_ALGOR * (*ossl_OCSP_resp_get0_tbs_sigalg_t)(const ossl_OCSP_BASICRESP *bs);
typedef const ossl_OCSP_RESPDATA * (*ossl_OCSP_resp_get0_respdata_t)(const ossl_OCSP_BASICRESP *bs);
typedef int (*ossl_OCSP_resp_get0_signer_t)(ossl_OCSP_BASICRESP *bs, ossl_X509 **signer, ossl_STACK_OF(ossl_X509) *extra_certs);
typedef int (*ossl_OCSP_resp_count_t)(ossl_OCSP_BASICRESP *bs);
typedef ossl_OCSP_SINGLERESP * (*ossl_OCSP_resp_get0_t)(ossl_OCSP_BASICRESP *bs, int idx);
typedef const ossl_ASN1_GENERALIZEDTIME * (*ossl_OCSP_resp_get0_produced_at_t)(const ossl_OCSP_BASICRESP *bs);
typedef const ossl_STACK_OF(ossl_X509) * (*ossl_OCSP_resp_get0_certs_t)(const ossl_OCSP_BASICRESP *bs);
typedef int (*ossl_OCSP_resp_get0_id_t)(const ossl_OCSP_BASICRESP *bs, const ossl_ASN1_OCTET_STRING **pid, const ossl_X509_NAME **pname);
typedef int (*ossl_OCSP_resp_get1_id_t)(const ossl_OCSP_BASICRESP *bs, ossl_ASN1_OCTET_STRING **pid, ossl_X509_NAME **pname);
typedef int (*ossl_OCSP_resp_find_t)(ossl_OCSP_BASICRESP *bs, ossl_OCSP_CERTID *id, int last);
typedef int (*ossl_OCSP_single_get0_status_t)(ossl_OCSP_SINGLERESP *single, int *reason, ossl_ASN1_GENERALIZEDTIME **revtime, ossl_ASN1_GENERALIZEDTIME **thisupd, ossl_ASN1_GENERALIZEDTIME **nextupd);
typedef int (*ossl_OCSP_resp_find_status_t)(ossl_OCSP_BASICRESP *bs, ossl_OCSP_CERTID *id, int *status, int *reason, ossl_ASN1_GENERALIZEDTIME **revtime, ossl_ASN1_GENERALIZEDTIME **thisupd, ossl_ASN1_GENERALIZEDTIME **nextupd);
typedef int (*ossl_OCSP_check_validity_t)(ossl_ASN1_GENERALIZEDTIME *thisupd, ossl_ASN1_GENERALIZEDTIME *nextupd, long sec, long maxsec);
typedef int (*ossl_OCSP_request_verify_t)(ossl_OCSP_REQUEST *req, ossl_STACK_OF(ossl_X509) *certs, ossl_X509_STORE *store, unsigned long flags);
typedef int (*ossl_OCSP_id_issuer_cmp_t)(const ossl_OCSP_CERTID *a, const ossl_OCSP_CERTID *b);
typedef int (*ossl_OCSP_id_cmp_t)(const ossl_OCSP_CERTID *a, const ossl_OCSP_CERTID *b);
typedef int (*ossl_OCSP_request_onereq_count_t)(ossl_OCSP_REQUEST *req);
typedef ossl_OCSP_ONEREQ * (*ossl_OCSP_request_onereq_get0_t)(ossl_OCSP_REQUEST *req, int i);
typedef ossl_OCSP_CERTID * (*ossl_OCSP_onereq_get0_id_t)(ossl_OCSP_ONEREQ *one);
typedef int (*ossl_OCSP_id_get0_info_t)(ossl_ASN1_OCTET_STRING **piNameHash, ossl_ASN1_OBJECT **pmd, ossl_ASN1_OCTET_STRING **pikeyHash, ossl_ASN1_INTEGER **pserial, ossl_OCSP_CERTID *cid);
typedef int (*ossl_OCSP_request_is_signed_t)(ossl_OCSP_REQUEST *req);
typedef ossl_OCSP_RESPONSE * (*ossl_OCSP_response_create_t)(int status, ossl_OCSP_BASICRESP *bs);
typedef ossl_OCSP_SINGLERESP * (*ossl_OCSP_basic_add1_status_t)(ossl_OCSP_BASICRESP *rsp, ossl_OCSP_CERTID *cid, int status, int reason, ossl_ASN1_TIME *revtime, ossl_ASN1_TIME *thisupd, ossl_ASN1_TIME *nextupd);
typedef int (*ossl_OCSP_basic_add1_cert_t)(ossl_OCSP_BASICRESP *resp, ossl_X509 *cert);
typedef int (*ossl_OCSP_basic_sign_t)(ossl_OCSP_BASICRESP *brsp, ossl_X509 *signer, ossl_EVP_PKEY *key, const ossl_EVP_MD *dgst, ossl_STACK_OF(ossl_X509) *certs, unsigned long flags);
typedef int (*ossl_OCSP_basic_sign_ctx_t)(ossl_OCSP_BASICRESP *brsp, ossl_X509 *signer, ossl_EVP_MD_CTX *ctx, ossl_STACK_OF(ossl_X509) *certs, unsigned long flags);
typedef int (*ossl_OCSP_RESPID_set_by_name_t)(ossl_OCSP_RESPID *respid, ossl_X509 *cert);
typedef int (*ossl_OCSP_RESPID_set_by_key_ex_t)(ossl_OCSP_RESPID *respid, ossl_X509 *cert, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_OCSP_RESPID_set_by_key_t)(ossl_OCSP_RESPID *respid, ossl_X509 *cert);
typedef int (*ossl_OCSP_RESPID_match_ex_t)(ossl_OCSP_RESPID *respid, ossl_X509 *cert, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_OCSP_RESPID_match_t)(ossl_OCSP_RESPID *respid, ossl_X509 *cert);
typedef ossl_X509_EXTENSION * (*ossl_OCSP_crlID_new_t)(const char *url, long *n, char *tim);
typedef ossl_X509_EXTENSION * (*ossl_OCSP_accept_responses_new_t)(char **oids);
typedef ossl_X509_EXTENSION * (*ossl_OCSP_archive_cutoff_new_t)(char *tim);
typedef ossl_X509_EXTENSION * (*ossl_OCSP_url_svcloc_new_t)(const ossl_X509_NAME *issuer, const char **urls);
typedef int (*ossl_OCSP_REQUEST_get_ext_count_t)(ossl_OCSP_REQUEST *x);
typedef int (*ossl_OCSP_REQUEST_get_ext_by_NID_t)(ossl_OCSP_REQUEST *x, int nid, int lastpos);
typedef int (*ossl_OCSP_REQUEST_get_ext_by_OBJ_t)(ossl_OCSP_REQUEST *x, const ossl_ASN1_OBJECT *obj, int lastpos);
typedef int (*ossl_OCSP_REQUEST_get_ext_by_critical_t)(ossl_OCSP_REQUEST *x, int crit, int lastpos);
typedef ossl_X509_EXTENSION * (*ossl_OCSP_REQUEST_get_ext_t)(ossl_OCSP_REQUEST *x, int loc);
typedef ossl_X509_EXTENSION * (*ossl_OCSP_REQUEST_delete_ext_t)(ossl_OCSP_REQUEST *x, int loc);
typedef void * (*ossl_OCSP_REQUEST_get1_ext_d2i_t)(ossl_OCSP_REQUEST *x, int nid, int *crit, int *idx);
typedef int (*ossl_OCSP_REQUEST_add1_ext_i2d_t)(ossl_OCSP_REQUEST *x, int nid, void *value, int crit, unsigned long flags);
typedef int (*ossl_OCSP_REQUEST_add_ext_t)(ossl_OCSP_REQUEST *x, ossl_X509_EXTENSION *ex, int loc);
typedef int (*ossl_OCSP_ONEREQ_get_ext_count_t)(ossl_OCSP_ONEREQ *x);
typedef int (*ossl_OCSP_ONEREQ_get_ext_by_NID_t)(ossl_OCSP_ONEREQ *x, int nid, int lastpos);
typedef int (*ossl_OCSP_ONEREQ_get_ext_by_OBJ_t)(ossl_OCSP_ONEREQ *x, const ossl_ASN1_OBJECT *obj, int lastpos);
typedef int (*ossl_OCSP_ONEREQ_get_ext_by_critical_t)(ossl_OCSP_ONEREQ *x, int crit, int lastpos);
typedef ossl_X509_EXTENSION * (*ossl_OCSP_ONEREQ_get_ext_t)(ossl_OCSP_ONEREQ *x, int loc);
typedef ossl_X509_EXTENSION * (*ossl_OCSP_ONEREQ_delete_ext_t)(ossl_OCSP_ONEREQ *x, int loc);
typedef void * (*ossl_OCSP_ONEREQ_get1_ext_d2i_t)(ossl_OCSP_ONEREQ *x, int nid, int *crit, int *idx);
typedef int (*ossl_OCSP_ONEREQ_add1_ext_i2d_t)(ossl_OCSP_ONEREQ *x, int nid, void *value, int crit, unsigned long flags);
typedef int (*ossl_OCSP_ONEREQ_add_ext_t)(ossl_OCSP_ONEREQ *x, ossl_X509_EXTENSION *ex, int loc);
typedef int (*ossl_OCSP_BASICRESP_get_ext_count_t)(ossl_OCSP_BASICRESP *x);
typedef int (*ossl_OCSP_BASICRESP_get_ext_by_NID_t)(ossl_OCSP_BASICRESP *x, int nid, int lastpos);
typedef int (*ossl_OCSP_BASICRESP_get_ext_by_OBJ_t)(ossl_OCSP_BASICRESP *x, const ossl_ASN1_OBJECT *obj, int lastpos);
typedef int (*ossl_OCSP_BASICRESP_get_ext_by_critical_t)(ossl_OCSP_BASICRESP *x, int crit, int lastpos);
typedef ossl_X509_EXTENSION * (*ossl_OCSP_BASICRESP_get_ext_t)(ossl_OCSP_BASICRESP *x, int loc);
typedef ossl_X509_EXTENSION * (*ossl_OCSP_BASICRESP_delete_ext_t)(ossl_OCSP_BASICRESP *x, int loc);
typedef void * (*ossl_OCSP_BASICRESP_get1_ext_d2i_t)(ossl_OCSP_BASICRESP *x, int nid, int *crit, int *idx);
typedef int (*ossl_OCSP_BASICRESP_add1_ext_i2d_t)(ossl_OCSP_BASICRESP *x, int nid, void *value, int crit, unsigned long flags);
typedef int (*ossl_OCSP_BASICRESP_add_ext_t)(ossl_OCSP_BASICRESP *x, ossl_X509_EXTENSION *ex, int loc);
typedef int (*ossl_OCSP_SINGLERESP_get_ext_count_t)(ossl_OCSP_SINGLERESP *x);
typedef int (*ossl_OCSP_SINGLERESP_get_ext_by_NID_t)(ossl_OCSP_SINGLERESP *x, int nid, int lastpos);
typedef int (*ossl_OCSP_SINGLERESP_get_ext_by_OBJ_t)(ossl_OCSP_SINGLERESP *x, const ossl_ASN1_OBJECT *obj, int lastpos);
typedef int (*ossl_OCSP_SINGLERESP_get_ext_by_critical_t)(ossl_OCSP_SINGLERESP *x, int crit, int lastpos);
typedef ossl_X509_EXTENSION * (*ossl_OCSP_SINGLERESP_get_ext_t)(ossl_OCSP_SINGLERESP *x, int loc);
typedef ossl_X509_EXTENSION * (*ossl_OCSP_SINGLERESP_delete_ext_t)(ossl_OCSP_SINGLERESP *x, int loc);
typedef void * (*ossl_OCSP_SINGLERESP_get1_ext_d2i_t)(ossl_OCSP_SINGLERESP *x, int nid, int *crit, int *idx);
typedef int (*ossl_OCSP_SINGLERESP_add1_ext_i2d_t)(ossl_OCSP_SINGLERESP *x, int nid, void *value, int crit, unsigned long flags);
typedef int (*ossl_OCSP_SINGLERESP_add_ext_t)(ossl_OCSP_SINGLERESP *x, ossl_X509_EXTENSION *ex, int loc);
typedef const ossl_OCSP_CERTID * (*ossl_OCSP_SINGLERESP_get0_id_t)(const ossl_OCSP_SINGLERESP *x);
typedef ossl_OCSP_SINGLERESP * (*ossl_OCSP_SINGLERESP_new_t)();
typedef void (*ossl_OCSP_SINGLERESP_free_t)(ossl_OCSP_SINGLERESP *a);
typedef ossl_OCSP_SINGLERESP * (*ossl_d2i_OCSP_SINGLERESP_t)(ossl_OCSP_SINGLERESP **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_OCSP_SINGLERESP_t)(const ossl_OCSP_SINGLERESP *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_OCSP_SINGLERESP_it_t)();
typedef ossl_OCSP_CERTSTATUS * (*ossl_OCSP_CERTSTATUS_new_t)();
typedef void (*ossl_OCSP_CERTSTATUS_free_t)(ossl_OCSP_CERTSTATUS *a);
typedef ossl_OCSP_CERTSTATUS * (*ossl_d2i_OCSP_CERTSTATUS_t)(ossl_OCSP_CERTSTATUS **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_OCSP_CERTSTATUS_t)(const ossl_OCSP_CERTSTATUS *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_OCSP_CERTSTATUS_it_t)();
typedef ossl_OCSP_REVOKEDINFO * (*ossl_OCSP_REVOKEDINFO_new_t)();
typedef void (*ossl_OCSP_REVOKEDINFO_free_t)(ossl_OCSP_REVOKEDINFO *a);
typedef ossl_OCSP_REVOKEDINFO * (*ossl_d2i_OCSP_REVOKEDINFO_t)(ossl_OCSP_REVOKEDINFO **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_OCSP_REVOKEDINFO_t)(const ossl_OCSP_REVOKEDINFO *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_OCSP_REVOKEDINFO_it_t)();
typedef ossl_OCSP_BASICRESP * (*ossl_OCSP_BASICRESP_new_t)();
typedef void (*ossl_OCSP_BASICRESP_free_t)(ossl_OCSP_BASICRESP *a);
typedef ossl_OCSP_BASICRESP * (*ossl_d2i_OCSP_BASICRESP_t)(ossl_OCSP_BASICRESP **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_OCSP_BASICRESP_t)(const ossl_OCSP_BASICRESP *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_OCSP_BASICRESP_it_t)();
typedef ossl_OCSP_RESPDATA * (*ossl_OCSP_RESPDATA_new_t)();
typedef void (*ossl_OCSP_RESPDATA_free_t)(ossl_OCSP_RESPDATA *a);
typedef ossl_OCSP_RESPDATA * (*ossl_d2i_OCSP_RESPDATA_t)(ossl_OCSP_RESPDATA **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_OCSP_RESPDATA_t)(const ossl_OCSP_RESPDATA *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_OCSP_RESPDATA_it_t)();
typedef ossl_OCSP_RESPID * (*ossl_OCSP_RESPID_new_t)();
typedef void (*ossl_OCSP_RESPID_free_t)(ossl_OCSP_RESPID *a);
typedef ossl_OCSP_RESPID * (*ossl_d2i_OCSP_RESPID_t)(ossl_OCSP_RESPID **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_OCSP_RESPID_t)(const ossl_OCSP_RESPID *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_OCSP_RESPID_it_t)();
typedef ossl_OCSP_RESPONSE * (*ossl_OCSP_RESPONSE_new_t)();
typedef void (*ossl_OCSP_RESPONSE_free_t)(ossl_OCSP_RESPONSE *a);
typedef ossl_OCSP_RESPONSE * (*ossl_d2i_OCSP_RESPONSE_t)(ossl_OCSP_RESPONSE **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_OCSP_RESPONSE_t)(const ossl_OCSP_RESPONSE *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_OCSP_RESPONSE_it_t)();
typedef ossl_OCSP_RESPBYTES * (*ossl_OCSP_RESPBYTES_new_t)();
typedef void (*ossl_OCSP_RESPBYTES_free_t)(ossl_OCSP_RESPBYTES *a);
typedef ossl_OCSP_RESPBYTES * (*ossl_d2i_OCSP_RESPBYTES_t)(ossl_OCSP_RESPBYTES **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_OCSP_RESPBYTES_t)(const ossl_OCSP_RESPBYTES *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_OCSP_RESPBYTES_it_t)();
typedef ossl_OCSP_ONEREQ * (*ossl_OCSP_ONEREQ_new_t)();
typedef void (*ossl_OCSP_ONEREQ_free_t)(ossl_OCSP_ONEREQ *a);
typedef ossl_OCSP_ONEREQ * (*ossl_d2i_OCSP_ONEREQ_t)(ossl_OCSP_ONEREQ **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_OCSP_ONEREQ_t)(const ossl_OCSP_ONEREQ *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_OCSP_ONEREQ_it_t)();
typedef ossl_OCSP_CERTID * (*ossl_OCSP_CERTID_new_t)();
typedef void (*ossl_OCSP_CERTID_free_t)(ossl_OCSP_CERTID *a);
typedef ossl_OCSP_CERTID * (*ossl_d2i_OCSP_CERTID_t)(ossl_OCSP_CERTID **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_OCSP_CERTID_t)(const ossl_OCSP_CERTID *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_OCSP_CERTID_it_t)();
typedef ossl_OCSP_REQUEST * (*ossl_OCSP_REQUEST_new_t)();
typedef void (*ossl_OCSP_REQUEST_free_t)(ossl_OCSP_REQUEST *a);
typedef ossl_OCSP_REQUEST * (*ossl_d2i_OCSP_REQUEST_t)(ossl_OCSP_REQUEST **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_OCSP_REQUEST_t)(const ossl_OCSP_REQUEST *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_OCSP_REQUEST_it_t)();
typedef ossl_OCSP_SIGNATURE * (*ossl_OCSP_SIGNATURE_new_t)();
typedef void (*ossl_OCSP_SIGNATURE_free_t)(ossl_OCSP_SIGNATURE *a);
typedef ossl_OCSP_SIGNATURE * (*ossl_d2i_OCSP_SIGNATURE_t)(ossl_OCSP_SIGNATURE **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_OCSP_SIGNATURE_t)(const ossl_OCSP_SIGNATURE *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_OCSP_SIGNATURE_it_t)();
typedef ossl_OCSP_REQINFO * (*ossl_OCSP_REQINFO_new_t)();
typedef void (*ossl_OCSP_REQINFO_free_t)(ossl_OCSP_REQINFO *a);
typedef ossl_OCSP_REQINFO * (*ossl_d2i_OCSP_REQINFO_t)(ossl_OCSP_REQINFO **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_OCSP_REQINFO_t)(const ossl_OCSP_REQINFO *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_OCSP_REQINFO_it_t)();
typedef ossl_OCSP_CRLID * (*ossl_OCSP_CRLID_new_t)();
typedef void (*ossl_OCSP_CRLID_free_t)(ossl_OCSP_CRLID *a);
typedef ossl_OCSP_CRLID * (*ossl_d2i_OCSP_CRLID_t)(ossl_OCSP_CRLID **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_OCSP_CRLID_t)(const ossl_OCSP_CRLID *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_OCSP_CRLID_it_t)();
typedef ossl_OCSP_SERVICELOC * (*ossl_OCSP_SERVICELOC_new_t)();
typedef void (*ossl_OCSP_SERVICELOC_free_t)(ossl_OCSP_SERVICELOC *a);
typedef ossl_OCSP_SERVICELOC * (*ossl_d2i_OCSP_SERVICELOC_t)(ossl_OCSP_SERVICELOC **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_OCSP_SERVICELOC_t)(const ossl_OCSP_SERVICELOC *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_OCSP_SERVICELOC_it_t)();
typedef const char * (*ossl_OCSP_response_status_str_t)(long s);
typedef const char * (*ossl_OCSP_cert_status_str_t)(long s);
typedef const char * (*ossl_OCSP_crl_reason_str_t)(long s);
typedef int (*ossl_OCSP_REQUEST_print_t)(ossl_BIO *bp, ossl_OCSP_REQUEST *a, unsigned long flags);
typedef int (*ossl_OCSP_RESPONSE_print_t)(ossl_BIO *bp, ossl_OCSP_RESPONSE *o, unsigned long flags);
typedef int (*ossl_OCSP_basic_verify_t)(ossl_OCSP_BASICRESP *bs, ossl_STACK_OF(ossl_X509) *certs, ossl_X509_STORE *st, unsigned long flags);
typedef ossl_OSSL_PARAM_BLD * (*ossl_OSSL_PARAM_BLD_new_t)();
typedef ossl_OSSL_PARAM * (*ossl_OSSL_PARAM_BLD_to_param_t)(ossl_OSSL_PARAM_BLD *bld);
typedef void (*ossl_OSSL_PARAM_BLD_free_t)(ossl_OSSL_PARAM_BLD *bld);
typedef int (*ossl_OSSL_PARAM_BLD_push_int_t)(ossl_OSSL_PARAM_BLD *bld, const char *key, int val);
typedef int (*ossl_OSSL_PARAM_BLD_push_uint_t)(ossl_OSSL_PARAM_BLD *bld, const char *key, unsigned int val);
typedef int (*ossl_OSSL_PARAM_BLD_push_long_t)(ossl_OSSL_PARAM_BLD *bld, const char *key, long val);
typedef int (*ossl_OSSL_PARAM_BLD_push_ulong_t)(ossl_OSSL_PARAM_BLD *bld, const char *key, unsigned long val);
typedef int (*ossl_OSSL_PARAM_BLD_push_int32_t)(ossl_OSSL_PARAM_BLD *bld, const char *key, int32_t val);
typedef int (*ossl_OSSL_PARAM_BLD_push_uint32_t)(ossl_OSSL_PARAM_BLD *bld, const char *key, uint32_t val);
typedef int (*ossl_OSSL_PARAM_BLD_push_int64_t)(ossl_OSSL_PARAM_BLD *bld, const char *key, int64_t val);
typedef int (*ossl_OSSL_PARAM_BLD_push_uint64_t)(ossl_OSSL_PARAM_BLD *bld, const char *key, uint64_t val);
typedef int (*ossl_OSSL_PARAM_BLD_push_size_t_t)(ossl_OSSL_PARAM_BLD *bld, const char *key, size_t val);
typedef int (*ossl_OSSL_PARAM_BLD_push_time_t_t)(ossl_OSSL_PARAM_BLD *bld, const char *key, time_t val);
typedef int (*ossl_OSSL_PARAM_BLD_push_double_t)(ossl_OSSL_PARAM_BLD *bld, const char *key, double val);
typedef int (*ossl_OSSL_PARAM_BLD_push_BN_t)(ossl_OSSL_PARAM_BLD *bld, const char *key, const ossl_BIGNUM *bn);
typedef int (*ossl_OSSL_PARAM_BLD_push_BN_pad_t)(ossl_OSSL_PARAM_BLD *bld, const char *key, const ossl_BIGNUM *bn, size_t sz);
typedef int (*ossl_OSSL_PARAM_BLD_push_utf8_string_t)(ossl_OSSL_PARAM_BLD *bld, const char *key, const char *buf, size_t bsize);
typedef int (*ossl_OSSL_PARAM_BLD_push_utf8_ptr_t)(ossl_OSSL_PARAM_BLD *bld, const char *key, char *buf, size_t bsize);
typedef int (*ossl_OSSL_PARAM_BLD_push_octet_string_t)(ossl_OSSL_PARAM_BLD *bld, const char *key, const void *buf, size_t bsize);
typedef int (*ossl_OSSL_PARAM_BLD_push_octet_ptr_t)(ossl_OSSL_PARAM_BLD *bld, const char *key, void *buf, size_t bsize);
typedef ossl_ASN1_TYPE * (*ossl_PKCS12_get_attr_t)(const ossl_PKCS12_SAFEBAG *bag, int attr_nid);
typedef ossl_ASN1_TYPE * (*ossl_PKCS8_get_attr_t)(ossl_PKCS8_PRIV_KEY_INFO *p8, int attr_nid);
typedef int (*ossl_PKCS12_mac_present_t)(const ossl_PKCS12 *p12);
typedef void (*ossl_PKCS12_get0_mac_t)(const ossl_ASN1_OCTET_STRING **pmac, const ossl_X509_ALGOR **pmacalg, const ossl_ASN1_OCTET_STRING **psalt, const ossl_ASN1_INTEGER **piter, const ossl_PKCS12 *p12);
typedef const ossl_ASN1_TYPE * (*ossl_PKCS12_SAFEBAG_get0_attr_t)(const ossl_PKCS12_SAFEBAG *bag, int attr_nid);
typedef const ossl_ASN1_OBJECT * (*ossl_PKCS12_SAFEBAG_get0_type_t)(const ossl_PKCS12_SAFEBAG *bag);
typedef int (*ossl_PKCS12_SAFEBAG_get_nid_t)(const ossl_PKCS12_SAFEBAG *bag);
typedef int (*ossl_PKCS12_SAFEBAG_get_bag_nid_t)(const ossl_PKCS12_SAFEBAG *bag);
typedef const ossl_ASN1_TYPE * (*ossl_PKCS12_SAFEBAG_get0_bag_obj_t)(const ossl_PKCS12_SAFEBAG *bag);
typedef const ossl_ASN1_OBJECT * (*ossl_PKCS12_SAFEBAG_get0_bag_type_t)(const ossl_PKCS12_SAFEBAG *bag);
typedef ossl_X509 * (*ossl_PKCS12_SAFEBAG_get1_cert_t)(const ossl_PKCS12_SAFEBAG *bag);
typedef ossl_X509_CRL * (*ossl_PKCS12_SAFEBAG_get1_crl_t)(const ossl_PKCS12_SAFEBAG *bag);
typedef const ossl_STACK_OF(ossl_PKCS12_SAFEBAG) * (*ossl_PKCS12_SAFEBAG_get0_safes_t)(const ossl_PKCS12_SAFEBAG *bag);
typedef const ossl_PKCS8_PRIV_KEY_INFO * (*ossl_PKCS12_SAFEBAG_get0_p8inf_t)(const ossl_PKCS12_SAFEBAG *bag);
typedef const ossl_X509_SIG * (*ossl_PKCS12_SAFEBAG_get0_pkcs8_t)(const ossl_PKCS12_SAFEBAG *bag);
typedef ossl_PKCS12_SAFEBAG * (*ossl_PKCS12_SAFEBAG_create_cert_t)(ossl_X509 *x509);
typedef ossl_PKCS12_SAFEBAG * (*ossl_PKCS12_SAFEBAG_create_crl_t)(ossl_X509_CRL *crl);
typedef ossl_PKCS12_SAFEBAG * (*ossl_PKCS12_SAFEBAG_create_secret_t)(int type, int vtype, const unsigned char *value, int len);
typedef ossl_PKCS12_SAFEBAG * (*ossl_PKCS12_SAFEBAG_create0_p8inf_t)(ossl_PKCS8_PRIV_KEY_INFO *p8);
typedef ossl_PKCS12_SAFEBAG * (*ossl_PKCS12_SAFEBAG_create0_pkcs8_t)(ossl_X509_SIG *p8);
typedef ossl_PKCS12_SAFEBAG * (*ossl_PKCS12_SAFEBAG_create_pkcs8_encrypt_t)(int pbe_nid, const char *pass, int passlen, unsigned char *salt, int saltlen, int iter, ossl_PKCS8_PRIV_KEY_INFO *p8inf);
typedef ossl_PKCS12_SAFEBAG * (*ossl_PKCS12_SAFEBAG_create_pkcs8_encrypt_ex_t)(int pbe_nid, const char *pass, int passlen, unsigned char *salt, int saltlen, int iter, ossl_PKCS8_PRIV_KEY_INFO *p8inf, ossl_OSSL_LIB_CTX *ctx, const char *propq);
typedef ossl_PKCS12_SAFEBAG * (*ossl_PKCS12_item_pack_safebag_t)(void *obj, const ossl_ASN1_ITEM *it, int nid1, int nid2);
typedef ossl_PKCS8_PRIV_KEY_INFO * (*ossl_PKCS8_decrypt_t)(const ossl_X509_SIG *p8, const char *pass, int passlen);
typedef ossl_PKCS8_PRIV_KEY_INFO * (*ossl_PKCS8_decrypt_ex_t)(const ossl_X509_SIG *p8, const char *pass, int passlen, ossl_OSSL_LIB_CTX *ctx, const char *propq);
typedef ossl_PKCS8_PRIV_KEY_INFO * (*ossl_PKCS12_decrypt_skey_t)(const ossl_PKCS12_SAFEBAG *bag, const char *pass, int passlen);
typedef ossl_PKCS8_PRIV_KEY_INFO * (*ossl_PKCS12_decrypt_skey_ex_t)(const ossl_PKCS12_SAFEBAG *bag, const char *pass, int passlen, ossl_OSSL_LIB_CTX *ctx, const char *propq);
typedef ossl_X509_SIG * (*ossl_PKCS8_encrypt_t)(int pbe_nid, const ossl_EVP_CIPHER *cipher, const char *pass, int passlen, unsigned char *salt, int saltlen, int iter, ossl_PKCS8_PRIV_KEY_INFO *p8);
typedef ossl_X509_SIG * (*ossl_PKCS8_encrypt_ex_t)(int pbe_nid, const ossl_EVP_CIPHER *cipher, const char *pass, int passlen, unsigned char *salt, int saltlen, int iter, ossl_PKCS8_PRIV_KEY_INFO *p8, ossl_OSSL_LIB_CTX *ctx, const char *propq);
typedef ossl_X509_SIG * (*ossl_PKCS8_set0_pbe_t)(const char *pass, int passlen, ossl_PKCS8_PRIV_KEY_INFO *p8inf, ossl_X509_ALGOR *pbe);
typedef ossl_X509_SIG * (*ossl_PKCS8_set0_pbe_ex_t)(const char *pass, int passlen, ossl_PKCS8_PRIV_KEY_INFO *p8inf, ossl_X509_ALGOR *pbe, ossl_OSSL_LIB_CTX *ctx, const char *propq);
typedef ossl_PKCS7 * (*ossl_PKCS12_pack_p7data_t)(ossl_STACK_OF(ossl_PKCS12_SAFEBAG) *sk);
typedef ossl_STACK_OF(ossl_PKCS12_SAFEBAG) * (*ossl_PKCS12_unpack_p7data_t)(ossl_PKCS7 *p7);
typedef ossl_PKCS7 * (*ossl_PKCS12_pack_p7encdata_t)(int pbe_nid, const char *pass, int passlen, unsigned char *salt, int saltlen, int iter, ossl_STACK_OF(ossl_PKCS12_SAFEBAG) *bags);
typedef ossl_PKCS7 * (*ossl_PKCS12_pack_p7encdata_ex_t)(int pbe_nid, const char *pass, int passlen, unsigned char *salt, int saltlen, int iter, ossl_STACK_OF(ossl_PKCS12_SAFEBAG) *bags, ossl_OSSL_LIB_CTX *ctx, const char *propq);
typedef ossl_STACK_OF(ossl_PKCS12_SAFEBAG) * (*ossl_PKCS12_unpack_p7encdata_t)(ossl_PKCS7 *p7, const char *pass, int passlen);
typedef int (*ossl_PKCS12_pack_authsafes_t)(ossl_PKCS12 *p12, ossl_STACK_OF(ossl_PKCS7) *safes);
typedef ossl_STACK_OF(ossl_PKCS7) * (*ossl_PKCS12_unpack_authsafes_t)(const ossl_PKCS12 *p12);
typedef int (*ossl_PKCS12_add_localkeyid_t)(ossl_PKCS12_SAFEBAG *bag, unsigned char *name, int namelen);
typedef int (*ossl_PKCS12_add_friendlyname_asc_t)(ossl_PKCS12_SAFEBAG *bag, const char *name, int namelen);
typedef int (*ossl_PKCS12_add_friendlyname_utf8_t)(ossl_PKCS12_SAFEBAG *bag, const char *name, int namelen);
typedef int (*ossl_PKCS12_add_CSPName_asc_t)(ossl_PKCS12_SAFEBAG *bag, const char *name, int namelen);
typedef int (*ossl_PKCS12_add_friendlyname_uni_t)(ossl_PKCS12_SAFEBAG *bag, const unsigned char *name, int namelen);
typedef int (*ossl_PKCS12_add1_attr_by_NID_t)(ossl_PKCS12_SAFEBAG *bag, int nid, int type, const unsigned char *bytes, int len);
typedef int (*ossl_PKCS12_add1_attr_by_txt_t)(ossl_PKCS12_SAFEBAG *bag, const char *attrname, int type, const unsigned char *bytes, int len);
typedef int (*ossl_PKCS8_add_keyusage_t)(ossl_PKCS8_PRIV_KEY_INFO *p8, int usage);
typedef ossl_ASN1_TYPE * (*ossl_PKCS12_get_attr_gen_t)(const ossl_STACK_OF(ossl_X509_ATTRIBUTE) *attrs, int attr_nid);
typedef char * (*ossl_PKCS12_get_friendlyname_t)(ossl_PKCS12_SAFEBAG *bag);
typedef const ossl_STACK_OF(ossl_X509_ATTRIBUTE) * (*ossl_PKCS12_SAFEBAG_get0_attrs_t)(const ossl_PKCS12_SAFEBAG *bag);
typedef unsigned char * (*ossl_PKCS12_pbe_crypt_t)(const ossl_X509_ALGOR *algor, const char *pass, int passlen, const unsigned char *in, int inlen, unsigned char **data, int *datalen, int en_de);
typedef unsigned char * (*ossl_PKCS12_pbe_crypt_ex_t)(const ossl_X509_ALGOR *algor, const char *pass, int passlen, const unsigned char *in, int inlen, unsigned char **data, int *datalen, int en_de, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef void * (*ossl_PKCS12_item_decrypt_d2i_t)(const ossl_X509_ALGOR *algor, const ossl_ASN1_ITEM *it, const char *pass, int passlen, const ossl_ASN1_OCTET_STRING *oct, int zbuf);
typedef void * (*ossl_PKCS12_item_decrypt_d2i_ex_t)(const ossl_X509_ALGOR *algor, const ossl_ASN1_ITEM *it, const char *pass, int passlen, const ossl_ASN1_OCTET_STRING *oct, int zbuf, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef ossl_ASN1_OCTET_STRING * (*ossl_PKCS12_item_i2d_encrypt_t)(ossl_X509_ALGOR *algor, const ossl_ASN1_ITEM *it, const char *pass, int passlen, void *obj, int zbuf);
typedef ossl_ASN1_OCTET_STRING * (*ossl_PKCS12_item_i2d_encrypt_ex_t)(ossl_X509_ALGOR *algor, const ossl_ASN1_ITEM *it, const char *pass, int passlen, void *obj, int zbuf, ossl_OSSL_LIB_CTX *ctx, const char *propq);
typedef ossl_PKCS12 * (*ossl_PKCS12_init_t)(int mode);
typedef ossl_PKCS12 * (*ossl_PKCS12_init_ex_t)(int mode, ossl_OSSL_LIB_CTX *ctx, const char *propq);
typedef int (*ossl_PKCS12_key_gen_asc_t)(const char *pass, int passlen, unsigned char *salt, int saltlen, int id, int iter, int n, unsigned char *out, const ossl_EVP_MD *md_type);
typedef int (*ossl_PKCS12_key_gen_asc_ex_t)(const char *pass, int passlen, unsigned char *salt, int saltlen, int id, int iter, int n, unsigned char *out, const ossl_EVP_MD *md_type, ossl_OSSL_LIB_CTX *ctx, const char *propq);
typedef int (*ossl_PKCS12_key_gen_uni_t)(unsigned char *pass, int passlen, unsigned char *salt, int saltlen, int id, int iter, int n, unsigned char *out, const ossl_EVP_MD *md_type);
typedef int (*ossl_PKCS12_key_gen_uni_ex_t)(unsigned char *pass, int passlen, unsigned char *salt, int saltlen, int id, int iter, int n, unsigned char *out, const ossl_EVP_MD *md_type, ossl_OSSL_LIB_CTX *ctx, const char *propq);
typedef int (*ossl_PKCS12_key_gen_utf8_t)(const char *pass, int passlen, unsigned char *salt, int saltlen, int id, int iter, int n, unsigned char *out, const ossl_EVP_MD *md_type);
typedef int (*ossl_PKCS12_key_gen_utf8_ex_t)(const char *pass, int passlen, unsigned char *salt, int saltlen, int id, int iter, int n, unsigned char *out, const ossl_EVP_MD *md_type, ossl_OSSL_LIB_CTX *ctx, const char *propq);
typedef int (*ossl_PKCS12_PBE_keyivgen_t)(ossl_EVP_CIPHER_CTX *ctx, const char *pass, int passlen, ossl_ASN1_TYPE *param, const ossl_EVP_CIPHER *cipher, const ossl_EVP_MD *md_type, int en_de);
typedef int (*ossl_PKCS12_PBE_keyivgen_ex_t)(ossl_EVP_CIPHER_CTX *ctx, const char *pass, int passlen, ossl_ASN1_TYPE *param, const ossl_EVP_CIPHER *cipher, const ossl_EVP_MD *md_type, int en_de, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_PKCS12_gen_mac_t)(ossl_PKCS12 *p12, const char *pass, int passlen, unsigned char *mac, unsigned int *maclen);
typedef int (*ossl_PKCS12_verify_mac_t)(ossl_PKCS12 *p12, const char *pass, int passlen);
typedef int (*ossl_PKCS12_set_mac_t)(ossl_PKCS12 *p12, const char *pass, int passlen, unsigned char *salt, int saltlen, int iter, const ossl_EVP_MD *md_type);
typedef int (*ossl_PKCS12_setup_mac_t)(ossl_PKCS12 *p12, int iter, unsigned char *salt, int saltlen, const ossl_EVP_MD *md_type);
typedef unsigned char * (*ossl_OPENSSL_asc2uni_t)(const char *asc, int asclen, unsigned char **uni, int *unilen);
typedef char * (*ossl_OPENSSL_uni2asc_t)(const unsigned char *uni, int unilen);
typedef unsigned char * (*ossl_OPENSSL_utf82uni_t)(const char *asc, int asclen, unsigned char **uni, int *unilen);
typedef char * (*ossl_OPENSSL_uni2utf8_t)(const unsigned char *uni, int unilen);
typedef ossl_PKCS12 * (*ossl_PKCS12_new_t)();
typedef void (*ossl_PKCS12_free_t)(ossl_PKCS12 *a);
typedef ossl_PKCS12 * (*ossl_d2i_PKCS12_t)(ossl_PKCS12 **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_PKCS12_t)(const ossl_PKCS12 *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_PKCS12_it_t)();
typedef ossl_PKCS12_MAC_DATA * (*ossl_PKCS12_MAC_DATA_new_t)();
typedef void (*ossl_PKCS12_MAC_DATA_free_t)(ossl_PKCS12_MAC_DATA *a);
typedef ossl_PKCS12_MAC_DATA * (*ossl_d2i_PKCS12_MAC_DATA_t)(ossl_PKCS12_MAC_DATA **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_PKCS12_MAC_DATA_t)(const ossl_PKCS12_MAC_DATA *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_PKCS12_MAC_DATA_it_t)();
typedef ossl_PKCS12_SAFEBAG * (*ossl_PKCS12_SAFEBAG_new_t)();
typedef void (*ossl_PKCS12_SAFEBAG_free_t)(ossl_PKCS12_SAFEBAG *a);
typedef ossl_PKCS12_SAFEBAG * (*ossl_d2i_PKCS12_SAFEBAG_t)(ossl_PKCS12_SAFEBAG **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_PKCS12_SAFEBAG_t)(const ossl_PKCS12_SAFEBAG *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_PKCS12_SAFEBAG_it_t)();
typedef ossl_PKCS12_BAGS * (*ossl_PKCS12_BAGS_new_t)();
typedef void (*ossl_PKCS12_BAGS_free_t)(ossl_PKCS12_BAGS *a);
typedef ossl_PKCS12_BAGS * (*ossl_d2i_PKCS12_BAGS_t)(ossl_PKCS12_BAGS **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_PKCS12_BAGS_t)(const ossl_PKCS12_BAGS *a, unsigned char **out);
typedef const ossl_ASN1_ITEM * (*ossl_PKCS12_BAGS_it_t)();
typedef const ossl_ASN1_ITEM * (*ossl_PKCS12_SAFEBAGS_it_t)();
typedef const ossl_ASN1_ITEM * (*ossl_PKCS12_AUTHSAFES_it_t)();
typedef void (*ossl_PKCS12_PBE_add_t)();
typedef int (*ossl_PKCS12_parse_t)(ossl_PKCS12 *p12, const char *pass, ossl_EVP_PKEY **pkey, ossl_X509 **cert, ossl_STACK_OF(ossl_X509) **ca);
typedef ossl_PKCS12 * (*ossl_PKCS12_create_t)(const char *pass, const char *name, ossl_EVP_PKEY *pkey, ossl_X509 *cert, ossl_STACK_OF(ossl_X509) *ca, int nid_key, int nid_cert, int iter, int mac_iter, int keytype);
typedef ossl_PKCS12 * (*ossl_PKCS12_create_ex_t)(const char *pass, const char *name, ossl_EVP_PKEY *pkey, ossl_X509 *cert, ossl_STACK_OF(ossl_X509) *ca, int nid_key, int nid_cert, int iter, int mac_iter, int keytype, ossl_OSSL_LIB_CTX *ctx, const char *propq);
typedef ossl_PKCS12_SAFEBAG * (*ossl_PKCS12_add_cert_t)(ossl_STACK_OF(ossl_PKCS12_SAFEBAG) **pbags, ossl_X509 *cert);
typedef ossl_PKCS12_SAFEBAG * (*ossl_PKCS12_add_key_t)(ossl_STACK_OF(ossl_PKCS12_SAFEBAG) **pbags, ossl_EVP_PKEY *key, int key_usage, int iter, int key_nid, const char *pass);
typedef ossl_PKCS12_SAFEBAG * (*ossl_PKCS12_add_key_ex_t)(ossl_STACK_OF(ossl_PKCS12_SAFEBAG) **pbags, ossl_EVP_PKEY *key, int key_usage, int iter, int key_nid, const char *pass, ossl_OSSL_LIB_CTX *ctx, const char *propq);
typedef ossl_PKCS12_SAFEBAG * (*ossl_PKCS12_add_secret_t)(ossl_STACK_OF(ossl_PKCS12_SAFEBAG) **pbags, int nid_type, const unsigned char *value, int len);
typedef int (*ossl_PKCS12_add_safe_t)(ossl_STACK_OF(ossl_PKCS7) **psafes, ossl_STACK_OF(ossl_PKCS12_SAFEBAG) *bags, int safe_nid, int iter, const char *pass);
typedef int (*ossl_PKCS12_add_safe_ex_t)(ossl_STACK_OF(ossl_PKCS7) **psafes, ossl_STACK_OF(ossl_PKCS12_SAFEBAG) *bags, int safe_nid, int iter, const char *pass, ossl_OSSL_LIB_CTX *ctx, const char *propq);
typedef ossl_PKCS12 * (*ossl_PKCS12_add_safes_t)(ossl_STACK_OF(ossl_PKCS7) *safes, int p7_nid);
typedef ossl_PKCS12 * (*ossl_PKCS12_add_safes_ex_t)(ossl_STACK_OF(ossl_PKCS7) *safes, int p7_nid, ossl_OSSL_LIB_CTX *ctx, const char *propq);
typedef int (*ossl_i2d_PKCS12_bio_t)(ossl_BIO *bp, const ossl_PKCS12 *p12);
typedef int (*ossl_i2d_PKCS12_fp_t)(FILE *fp, const ossl_PKCS12 *p12);
typedef ossl_PKCS12 * (*ossl_d2i_PKCS12_bio_t)(ossl_BIO *bp, ossl_PKCS12 **p12);
typedef ossl_PKCS12 * (*ossl_d2i_PKCS12_fp_t)(FILE *fp, ossl_PKCS12 **p12);
typedef int (*ossl_PKCS12_newpass_t)(ossl_PKCS12 *p12, const char *oldpass, const char *newpass);
typedef int (*ossl_OSSL_PROVIDER_set_default_search_path_t)(ossl_OSSL_LIB_CTX *_p0, const char *path);
typedef ossl_OSSL_PROVIDER * (*ossl_OSSL_PROVIDER_load_t)(ossl_OSSL_LIB_CTX *_p0, const char *name);
typedef ossl_OSSL_PROVIDER * (*ossl_OSSL_PROVIDER_try_load_t)(ossl_OSSL_LIB_CTX *_p0, const char *name, int retain_fallbacks);
typedef int (*ossl_OSSL_PROVIDER_unload_t)(ossl_OSSL_PROVIDER *prov);
typedef int (*ossl_OSSL_PROVIDER_available_t)(ossl_OSSL_LIB_CTX *_p0, const char *name);
typedef int (*ossl_OSSL_PROVIDER_do_all_t)(ossl_OSSL_LIB_CTX *ctx, int (*cb)(ossl_OSSL_PROVIDER *, void *), void *cbdata);
typedef const ossl_OSSL_PARAM * (*ossl_OSSL_PROVIDER_gettable_params_t)(const ossl_OSSL_PROVIDER *prov);
typedef int (*ossl_OSSL_PROVIDER_get_params_t)(const ossl_OSSL_PROVIDER *prov, ossl_OSSL_PARAM params[]);
typedef int (*ossl_OSSL_PROVIDER_self_test_t)(const ossl_OSSL_PROVIDER *prov);
typedef int (*ossl_OSSL_PROVIDER_get_capabilities_t)(const ossl_OSSL_PROVIDER *prov, const char *capability, ossl_OSSL_CALLBACK *cb, void *arg);
typedef const ossl_OSSL_ALGORITHM * (*ossl_OSSL_PROVIDER_query_operation_t)(const ossl_OSSL_PROVIDER *prov, int operation_id, int *no_cache);
typedef void (*ossl_OSSL_PROVIDER_unquery_operation_t)(const ossl_OSSL_PROVIDER *prov, int operation_id, const ossl_OSSL_ALGORITHM *algs);
typedef void * (*ossl_OSSL_PROVIDER_get0_provider_ctx_t)(const ossl_OSSL_PROVIDER *prov);
typedef const ossl_OSSL_DISPATCH * (*ossl_OSSL_PROVIDER_get0_dispatch_t)(const ossl_OSSL_PROVIDER *prov);
typedef int (*ossl_OSSL_PROVIDER_add_builtin_t)(ossl_OSSL_LIB_CTX *_p0, const char *name, ossl_OSSL_provider_init_fn *init_fn);
typedef const char * (*ossl_OSSL_PROVIDER_get0_name_t)(const ossl_OSSL_PROVIDER *prov);
typedef void (*ossl_RC2_set_key_t)(ossl_RC2_KEY *key, int len, const unsigned char *data, int bits);
typedef void (*ossl_RC2_ecb_encrypt_t)(const unsigned char *in, unsigned char *out, ossl_RC2_KEY *key, int enc);
typedef void (*ossl_RC2_encrypt_t)(unsigned long *data, ossl_RC2_KEY *key);
typedef void (*ossl_RC2_decrypt_t)(unsigned long *data, ossl_RC2_KEY *key);
typedef void (*ossl_RC2_cbc_encrypt_t)(const unsigned char *in, unsigned char *out, long length, ossl_RC2_KEY *ks, unsigned char *iv, int enc);
typedef void (*ossl_RC2_cfb64_encrypt_t)(const unsigned char *in, unsigned char *out, long length, ossl_RC2_KEY *schedule, unsigned char *ivec, int *num, int enc);
typedef void (*ossl_RC2_ofb64_encrypt_t)(const unsigned char *in, unsigned char *out, long length, ossl_RC2_KEY *schedule, unsigned char *ivec, int *num);
typedef const char * (*ossl_RC4_options_t)();
typedef void (*ossl_RC4_set_key_t)(ossl_RC4_KEY *key, int len, const unsigned char *data);
typedef void (*ossl_RC4_t)(ossl_RC4_KEY *key, size_t len, const unsigned char *indata, unsigned char *outdata);
typedef int (*ossl_RIPEMD160_Init_t)(ossl_RIPEMD160_CTX *c);
typedef int (*ossl_RIPEMD160_Update_t)(ossl_RIPEMD160_CTX *c, const void *data, size_t len);
typedef int (*ossl_RIPEMD160_Final_t)(unsigned char *md, ossl_RIPEMD160_CTX *c);
typedef unsigned char * (*ossl_RIPEMD160_t)(const unsigned char *d, size_t n, unsigned char *md);
typedef void (*ossl_RIPEMD160_Transform_t)(ossl_RIPEMD160_CTX *c, const unsigned char *b);
typedef void (*ossl_SEED_set_key_t)(const unsigned char rawkey[16], ossl_SEED_KEY_SCHEDULE *ks);
typedef void (*ossl_SEED_encrypt_t)(const unsigned char s[16], unsigned char d[16], const ossl_SEED_KEY_SCHEDULE *ks);
typedef void (*ossl_SEED_decrypt_t)(const unsigned char s[16], unsigned char d[16], const ossl_SEED_KEY_SCHEDULE *ks);
typedef void (*ossl_SEED_ecb_encrypt_t)(const unsigned char *in, unsigned char *out, const ossl_SEED_KEY_SCHEDULE *ks, int enc);
typedef void (*ossl_SEED_cbc_encrypt_t)(const unsigned char *in, unsigned char *out, size_t len, const ossl_SEED_KEY_SCHEDULE *ks, unsigned char ivec[16], int enc);
typedef void (*ossl_SEED_cfb128_encrypt_t)(const unsigned char *in, unsigned char *out, size_t len, const ossl_SEED_KEY_SCHEDULE *ks, unsigned char ivec[16], int *num, int enc);
typedef void (*ossl_SEED_ofb128_encrypt_t)(const unsigned char *in, unsigned char *out, size_t len, const ossl_SEED_KEY_SCHEDULE *ks, unsigned char ivec[16], int *num);
typedef void (*ossl_OSSL_SELF_TEST_set_callback_t)(ossl_OSSL_LIB_CTX *libctx, ossl_OSSL_CALLBACK *cb, void *cbarg);
typedef void (*ossl_OSSL_SELF_TEST_get_callback_t)(ossl_OSSL_LIB_CTX *libctx, ossl_OSSL_CALLBACK **cb, void **cbarg);
typedef ossl_OSSL_SELF_TEST * (*ossl_OSSL_SELF_TEST_new_t)(ossl_OSSL_CALLBACK *cb, void *cbarg);
typedef void (*ossl_OSSL_SELF_TEST_free_t)(ossl_OSSL_SELF_TEST *st);
typedef void (*ossl_OSSL_SELF_TEST_onbegin_t)(ossl_OSSL_SELF_TEST *st, const char *type, const char *desc);
typedef int (*ossl_OSSL_SELF_TEST_oncorrupt_byte_t)(ossl_OSSL_SELF_TEST *st, unsigned char *bytes);
typedef void (*ossl_OSSL_SELF_TEST_onend_t)(ossl_OSSL_SELF_TEST *st, int ret);
typedef ossl_SRP_user_pwd * (*ossl_SRP_user_pwd_new_t)();
typedef void (*ossl_SRP_user_pwd_free_t)(ossl_SRP_user_pwd *user_pwd);
typedef void (*ossl_SRP_user_pwd_set_gN_t)(ossl_SRP_user_pwd *user_pwd, const ossl_BIGNUM *g, const ossl_BIGNUM *N);
typedef int (*ossl_SRP_user_pwd_set1_ids_t)(ossl_SRP_user_pwd *user_pwd, const char *id, const char *info);
typedef int (*ossl_SRP_user_pwd_set0_sv_t)(ossl_SRP_user_pwd *user_pwd, ossl_BIGNUM *s, ossl_BIGNUM *v);
typedef ossl_SRP_VBASE * (*ossl_SRP_VBASE_new_t)(char *seed_key);
typedef void (*ossl_SRP_VBASE_free_t)(ossl_SRP_VBASE *vb);
typedef int (*ossl_SRP_VBASE_init_t)(ossl_SRP_VBASE *vb, char *verifier_file);
typedef int (*ossl_SRP_VBASE_add0_user_t)(ossl_SRP_VBASE *vb, ossl_SRP_user_pwd *user_pwd);
typedef ossl_SRP_user_pwd * (*ossl_SRP_VBASE_get1_by_user_t)(ossl_SRP_VBASE *vb, char *username);
typedef char * (*ossl_SRP_create_verifier_ex_t)(const char *user, const char *pass, char **salt, char **verifier, const char *N, const char *g, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef char * (*ossl_SRP_create_verifier_t)(const char *user, const char *pass, char **salt, char **verifier, const char *N, const char *g);
typedef int (*ossl_SRP_create_verifier_BN_ex_t)(const char *user, const char *pass, ossl_BIGNUM **salt, ossl_BIGNUM **verifier, const ossl_BIGNUM *N, const ossl_BIGNUM *g, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_SRP_create_verifier_BN_t)(const char *user, const char *pass, ossl_BIGNUM **salt, ossl_BIGNUM **verifier, const ossl_BIGNUM *N, const ossl_BIGNUM *g);
typedef char * (*ossl_SRP_check_known_gN_param_t)(const ossl_BIGNUM *g, const ossl_BIGNUM *N);
typedef ossl_SRP_gN * (*ossl_SRP_get_default_gN_t)(const char *id);
typedef ossl_BIGNUM * (*ossl_SRP_Calc_server_key_t)(const ossl_BIGNUM *A, const ossl_BIGNUM *v, const ossl_BIGNUM *u, const ossl_BIGNUM *b, const ossl_BIGNUM *N);
typedef ossl_BIGNUM * (*ossl_SRP_Calc_B_ex_t)(const ossl_BIGNUM *b, const ossl_BIGNUM *N, const ossl_BIGNUM *g, const ossl_BIGNUM *v, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef ossl_BIGNUM * (*ossl_SRP_Calc_B_t)(const ossl_BIGNUM *b, const ossl_BIGNUM *N, const ossl_BIGNUM *g, const ossl_BIGNUM *v);
typedef int (*ossl_SRP_Verify_A_mod_N_t)(const ossl_BIGNUM *A, const ossl_BIGNUM *N);
typedef ossl_BIGNUM * (*ossl_SRP_Calc_u_ex_t)(const ossl_BIGNUM *A, const ossl_BIGNUM *B, const ossl_BIGNUM *N, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef ossl_BIGNUM * (*ossl_SRP_Calc_u_t)(const ossl_BIGNUM *A, const ossl_BIGNUM *B, const ossl_BIGNUM *N);
typedef ossl_BIGNUM * (*ossl_SRP_Calc_x_ex_t)(const ossl_BIGNUM *s, const char *user, const char *pass, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef ossl_BIGNUM * (*ossl_SRP_Calc_x_t)(const ossl_BIGNUM *s, const char *user, const char *pass);
typedef ossl_BIGNUM * (*ossl_SRP_Calc_A_t)(const ossl_BIGNUM *a, const ossl_BIGNUM *N, const ossl_BIGNUM *g);
typedef ossl_BIGNUM * (*ossl_SRP_Calc_client_key_ex_t)(const ossl_BIGNUM *N, const ossl_BIGNUM *B, const ossl_BIGNUM *g, const ossl_BIGNUM *x, const ossl_BIGNUM *a, const ossl_BIGNUM *u, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef ossl_BIGNUM * (*ossl_SRP_Calc_client_key_t)(const ossl_BIGNUM *N, const ossl_BIGNUM *B, const ossl_BIGNUM *g, const ossl_BIGNUM *x, const ossl_BIGNUM *a, const ossl_BIGNUM *u);
typedef int (*ossl_SRP_Verify_B_mod_N_t)(const ossl_BIGNUM *B, const ossl_BIGNUM *N);
typedef ossl_SRP_user_pwd * (*ossl_SRP_VBASE_get_by_user_t)(ossl_SRP_VBASE *vb, char *username);
typedef int (*ossl_ERR_load_SSL_strings_t)();
typedef uint64_t (*ossl_SSL_CTX_get_options_t)(const ossl_SSL_CTX *ctx);
typedef uint64_t (*ossl_SSL_get_options_t)(const ossl_SSL *s);
typedef uint64_t (*ossl_SSL_CTX_clear_options_t)(ossl_SSL_CTX *ctx, uint64_t op);
typedef uint64_t (*ossl_SSL_clear_options_t)(ossl_SSL *s, uint64_t op);
typedef uint64_t (*ossl_SSL_CTX_set_options_t)(ossl_SSL_CTX *ctx, uint64_t op);
typedef uint64_t (*ossl_SSL_set_options_t)(ossl_SSL *s, uint64_t op);
typedef void (*ossl_SSL_CTX_set_msg_callback_t)(ossl_SSL_CTX *ctx, void (*cb)(int, int, int, const void *, size_t, ossl_SSL *, void *));
typedef void (*ossl_SSL_set_msg_callback_t)(ossl_SSL *ssl, void (*cb)(int, int, int, const void *, size_t, ossl_SSL *, void *));
typedef int (*ossl_SSL_SRP_CTX_init_t)(ossl_SSL *s);
typedef int (*ossl_SSL_CTX_SRP_CTX_init_t)(ossl_SSL_CTX *ctx);
typedef int (*ossl_SSL_SRP_CTX_free_t)(ossl_SSL *ctx);
typedef int (*ossl_SSL_CTX_SRP_CTX_free_t)(ossl_SSL_CTX *ctx);
typedef int (*ossl_SSL_srp_server_param_with_username_t)(ossl_SSL *s, int *ad);
typedef int (*ossl_SRP_Calc_A_param_t)(ossl_SSL *s);
typedef ossl_LHASH_OF(ossl_SSL_SESSION) * (*ossl_SSL_CTX_sessions_t)(ossl_SSL_CTX *ctx);
typedef void (*ossl_SSL_CTX_sess_set_new_cb_t)(ossl_SSL_CTX *ctx, int (*new_session_cb)(struct ossl_ssl_st *, ossl_SSL_SESSION *));
typedef int (*SSL_CTX_sess_get_new_cb_ret_t)(struct ossl_ssl_st *, ossl_SSL_SESSION *);
typedef SSL_CTX_sess_get_new_cb_ret_t (*ossl_SSL_CTX_sess_get_new_cb_t)(ossl_SSL_CTX *ctx);
typedef void (*ossl_SSL_CTX_sess_set_remove_cb_t)(ossl_SSL_CTX *ctx, void (*remove_session_cb)(struct ossl_ssl_ctx_st *, ossl_SSL_SESSION *));
typedef void (*SSL_CTX_sess_get_remove_cb_ret_t)(struct ossl_ssl_ctx_st *, ossl_SSL_SESSION *);
typedef SSL_CTX_sess_get_remove_cb_ret_t (*ossl_SSL_CTX_sess_get_remove_cb_t)(ossl_SSL_CTX *ctx);
typedef void (*ossl_SSL_CTX_sess_set_get_cb_t)(ossl_SSL_CTX *ctx, ossl_SSL_SESSION *(*get_session_cb)(struct ossl_ssl_st *, const unsigned char *, int, int *));
typedef ossl_SSL_SESSION *(*SSL_CTX_sess_get_get_cb_ret_t)(struct ossl_ssl_st *, const unsigned char *, int, int *);
typedef SSL_CTX_sess_get_get_cb_ret_t (*ossl_SSL_CTX_sess_get_get_cb_t)(ossl_SSL_CTX *ctx);
typedef void (*ossl_SSL_CTX_set_info_callback_t)(ossl_SSL_CTX *ctx, void (*cb)(const ossl_SSL *, int, int));
typedef void (*SSL_CTX_get_info_callback_ret_t)(const ossl_SSL *, int, int);
typedef SSL_CTX_get_info_callback_ret_t (*ossl_SSL_CTX_get_info_callback_t)(ossl_SSL_CTX *ctx);
typedef void (*ossl_SSL_CTX_set_client_cert_cb_t)(ossl_SSL_CTX *ctx, int (*client_cert_cb)(ossl_SSL *, ossl_X509 **, ossl_EVP_PKEY **));
typedef int (*SSL_CTX_get_client_cert_cb_ret_t)(ossl_SSL *, ossl_X509 **, ossl_EVP_PKEY **);
typedef SSL_CTX_get_client_cert_cb_ret_t (*ossl_SSL_CTX_get_client_cert_cb_t)(ossl_SSL_CTX *ctx);
typedef int (*ossl_SSL_CTX_set_client_cert_engine_t)(ossl_SSL_CTX *ctx, ossl_ENGINE *e);
typedef void (*ossl_SSL_CTX_set_cookie_generate_cb_t)(ossl_SSL_CTX *ctx, int (*app_gen_cookie_cb)(ossl_SSL *, unsigned char *, unsigned int *));
typedef void (*ossl_SSL_CTX_set_cookie_verify_cb_t)(ossl_SSL_CTX *ctx, int (*app_verify_cookie_cb)(ossl_SSL *, const unsigned char *, unsigned int));
typedef void (*ossl_SSL_CTX_set_stateless_cookie_generate_cb_t)(ossl_SSL_CTX *ctx, int (*gen_stateless_cookie_cb)(ossl_SSL *, unsigned char *, size_t *));
typedef void (*ossl_SSL_CTX_set_stateless_cookie_verify_cb_t)(ossl_SSL_CTX *ctx, int (*verify_stateless_cookie_cb)(ossl_SSL *, const unsigned char *, size_t));
typedef void (*ossl_SSL_CTX_set_next_protos_advertised_cb_t)(ossl_SSL_CTX *s, ossl_SSL_CTX_npn_advertised_cb_func cb, void *arg);
typedef void (*ossl_SSL_CTX_set_next_proto_select_cb_t)(ossl_SSL_CTX *s, ossl_SSL_CTX_npn_select_cb_func cb, void *arg);
typedef void (*ossl_SSL_get0_next_proto_negotiated_t)(const ossl_SSL *s, const unsigned char **data, unsigned int *len);
typedef int (*ossl_SSL_select_next_proto_t)(unsigned char **out, unsigned char *outlen, const unsigned char *in, unsigned int inlen, const unsigned char *client, unsigned int client_len);
typedef int (*ossl_SSL_CTX_set_alpn_protos_t)(ossl_SSL_CTX *ctx, const unsigned char *protos, unsigned int protos_len);
typedef int (*ossl_SSL_set_alpn_protos_t)(ossl_SSL *ssl, const unsigned char *protos, unsigned int protos_len);
typedef void (*ossl_SSL_CTX_set_alpn_select_cb_t)(ossl_SSL_CTX *ctx, ossl_SSL_CTX_alpn_select_cb_func cb, void *arg);
typedef void (*ossl_SSL_get0_alpn_selected_t)(const ossl_SSL *ssl, const unsigned char **data, unsigned int *len);
typedef void (*ossl_SSL_CTX_set_psk_client_callback_t)(ossl_SSL_CTX *ctx, ossl_SSL_psk_client_cb_func cb);
typedef void (*ossl_SSL_set_psk_client_callback_t)(ossl_SSL *ssl, ossl_SSL_psk_client_cb_func cb);
typedef void (*ossl_SSL_CTX_set_psk_server_callback_t)(ossl_SSL_CTX *ctx, ossl_SSL_psk_server_cb_func cb);
typedef void (*ossl_SSL_set_psk_server_callback_t)(ossl_SSL *ssl, ossl_SSL_psk_server_cb_func cb);
typedef int (*ossl_SSL_CTX_use_psk_identity_hint_t)(ossl_SSL_CTX *ctx, const char *identity_hint);
typedef int (*ossl_SSL_use_psk_identity_hint_t)(ossl_SSL *s, const char *identity_hint);
typedef const char * (*ossl_SSL_get_psk_identity_hint_t)(const ossl_SSL *s);
typedef const char * (*ossl_SSL_get_psk_identity_t)(const ossl_SSL *s);
typedef void (*ossl_SSL_set_psk_find_session_callback_t)(ossl_SSL *s, ossl_SSL_psk_find_session_cb_func cb);
typedef void (*ossl_SSL_CTX_set_psk_find_session_callback_t)(ossl_SSL_CTX *ctx, ossl_SSL_psk_find_session_cb_func cb);
typedef void (*ossl_SSL_set_psk_use_session_callback_t)(ossl_SSL *s, ossl_SSL_psk_use_session_cb_func cb);
typedef void (*ossl_SSL_CTX_set_psk_use_session_callback_t)(ossl_SSL_CTX *ctx, ossl_SSL_psk_use_session_cb_func cb);
typedef int (*ossl_SSL_CTX_has_client_custom_ext_t)(const ossl_SSL_CTX *ctx, unsigned int ext_type);
typedef int (*ossl_SSL_CTX_add_client_custom_ext_t)(ossl_SSL_CTX *ctx, unsigned int ext_type, ossl_custom_ext_add_cb add_cb, ossl_custom_ext_free_cb free_cb, void *add_arg, ossl_custom_ext_parse_cb parse_cb, void *parse_arg);
typedef int (*ossl_SSL_CTX_add_server_custom_ext_t)(ossl_SSL_CTX *ctx, unsigned int ext_type, ossl_custom_ext_add_cb add_cb, ossl_custom_ext_free_cb free_cb, void *add_arg, ossl_custom_ext_parse_cb parse_cb, void *parse_arg);
typedef int (*ossl_SSL_CTX_add_custom_ext_t)(ossl_SSL_CTX *ctx, unsigned int ext_type, unsigned int context, ossl_SSL_custom_ext_add_cb_ex add_cb, ossl_SSL_custom_ext_free_cb_ex free_cb, void *add_arg, ossl_SSL_custom_ext_parse_cb_ex parse_cb, void *parse_arg);
typedef int (*ossl_SSL_extension_supported_t)(unsigned int ext_type);
typedef void (*ossl_SSL_CTX_set_keylog_callback_t)(ossl_SSL_CTX *ctx, ossl_SSL_CTX_keylog_cb_func cb);
typedef ossl_SSL_CTX_keylog_cb_func (*ossl_SSL_CTX_get_keylog_callback_t)(const ossl_SSL_CTX *ctx);
typedef int (*ossl_SSL_CTX_set_max_early_data_t)(ossl_SSL_CTX *ctx, uint32_t max_early_data);
typedef uint32_t (*ossl_SSL_CTX_get_max_early_data_t)(const ossl_SSL_CTX *ctx);
typedef int (*ossl_SSL_set_max_early_data_t)(ossl_SSL *s, uint32_t max_early_data);
typedef uint32_t (*ossl_SSL_get_max_early_data_t)(const ossl_SSL *s);
typedef int (*ossl_SSL_CTX_set_recv_max_early_data_t)(ossl_SSL_CTX *ctx, uint32_t recv_max_early_data);
typedef uint32_t (*ossl_SSL_CTX_get_recv_max_early_data_t)(const ossl_SSL_CTX *ctx);
typedef int (*ossl_SSL_set_recv_max_early_data_t)(ossl_SSL *s, uint32_t recv_max_early_data);
typedef uint32_t (*ossl_SSL_get_recv_max_early_data_t)(const ossl_SSL *s);
typedef int (*ossl_SSL_CTX_set_tlsext_max_fragment_length_t)(ossl_SSL_CTX *ctx, uint8_t mode);
typedef int (*ossl_SSL_set_tlsext_max_fragment_length_t)(ossl_SSL *ssl, uint8_t mode);
typedef const char * (*ossl_SSL_get_servername_t)(const ossl_SSL *s, const int type);
typedef int (*ossl_SSL_get_servername_type_t)(const ossl_SSL *s);
typedef int (*ossl_SSL_export_keying_material_t)(ossl_SSL *s, unsigned char *out, size_t olen, const char *label, size_t llen, const unsigned char *context, size_t contextlen, int use_context);
typedef int (*ossl_SSL_export_keying_material_early_t)(ossl_SSL *s, unsigned char *out, size_t olen, const char *label, size_t llen, const unsigned char *context, size_t contextlen);
typedef int (*ossl_SSL_get_peer_signature_type_nid_t)(const ossl_SSL *s, int *pnid);
typedef int (*ossl_SSL_get_signature_type_nid_t)(const ossl_SSL *s, int *pnid);
typedef int (*ossl_SSL_get_sigalgs_t)(ossl_SSL *s, int idx, int *psign, int *phash, int *psignandhash, unsigned char *rsig, unsigned char *rhash);
typedef int (*ossl_SSL_get_shared_sigalgs_t)(ossl_SSL *s, int idx, int *psign, int *phash, int *psignandhash, unsigned char *rsig, unsigned char *rhash);
typedef int (*ossl_SSL_check_chain_t)(ossl_SSL *s, ossl_X509 *x, ossl_EVP_PKEY *pk, ossl_STACK_OF(ossl_X509) *chain);
typedef int (*ossl_SSL_CTX_set_tlsext_ticket_key_evp_cb_t)(ossl_SSL_CTX *ctx, int (*fp)(ossl_SSL *, unsigned char *, unsigned char *, ossl_EVP_CIPHER_CTX *, ossl_EVP_MAC_CTX *, int));
typedef void (*ossl_SSL_set_debug_t)(ossl_SSL *s, int debug);
typedef int (*ossl_SSL_in_init_t)(const ossl_SSL *s);
typedef int (*ossl_SSL_in_before_t)(const ossl_SSL *s);
typedef int (*ossl_SSL_is_init_finished_t)(const ossl_SSL *s);
typedef size_t (*ossl_SSL_get_finished_t)(const ossl_SSL *s, void *buf, size_t count);
typedef size_t (*ossl_SSL_get_peer_finished_t)(const ossl_SSL *s, void *buf, size_t count);
typedef ossl_SSL_SESSION * (*ossl_PEM_read_bio_SSL_SESSION_t)(ossl_BIO *out, ossl_SSL_SESSION **x, ossl_pem_password_cb *cb, void *u);
typedef ossl_SSL_SESSION * (*ossl_PEM_read_SSL_SESSION_t)(FILE *out, ossl_SSL_SESSION **x, ossl_pem_password_cb *cb, void *u);
typedef int (*ossl_PEM_write_bio_SSL_SESSION_t)(ossl_BIO *out, const ossl_SSL_SESSION *x);
typedef int (*ossl_PEM_write_SSL_SESSION_t)(FILE *out, const ossl_SSL_SESSION *x);
typedef const char * (*ossl_SSL_group_to_name_t)(ossl_SSL *s, int id);
typedef int (*ossl_SSL_set0_tmp_dh_pkey_t)(ossl_SSL *s, ossl_EVP_PKEY *dhpkey);
typedef int (*ossl_SSL_CTX_set0_tmp_dh_pkey_t)(ossl_SSL_CTX *ctx, ossl_EVP_PKEY *dhpkey);
typedef const ossl_BIO_METHOD * (*ossl_BIO_f_ssl_t)();
typedef ossl_BIO * (*ossl_BIO_new_ssl_t)(ossl_SSL_CTX *ctx, int client);
typedef ossl_BIO * (*ossl_BIO_new_ssl_connect_t)(ossl_SSL_CTX *ctx);
typedef ossl_BIO * (*ossl_BIO_new_buffer_ssl_connect_t)(ossl_SSL_CTX *ctx);
typedef int (*ossl_BIO_ssl_copy_session_id_t)(ossl_BIO *to, ossl_BIO *from);
typedef void (*ossl_BIO_ssl_shutdown_t)(ossl_BIO *ssl_bio);
typedef int (*ossl_SSL_CTX_set_cipher_list_t)(ossl_SSL_CTX *_p0, const char *str);
typedef ossl_SSL_CTX * (*ossl_SSL_CTX_new_t)(const ossl_SSL_METHOD *meth);
typedef ossl_SSL_CTX * (*ossl_SSL_CTX_new_ex_t)(ossl_OSSL_LIB_CTX *libctx, const char *propq, const ossl_SSL_METHOD *meth);
typedef int (*ossl_SSL_CTX_up_ref_t)(ossl_SSL_CTX *ctx);
typedef void (*ossl_SSL_CTX_free_t)(ossl_SSL_CTX *_p0);
typedef long (*ossl_SSL_CTX_set_timeout_t)(ossl_SSL_CTX *ctx, long t);
typedef long (*ossl_SSL_CTX_get_timeout_t)(const ossl_SSL_CTX *ctx);
typedef ossl_X509_STORE * (*ossl_SSL_CTX_get_cert_store_t)(const ossl_SSL_CTX *_p0);
typedef void (*ossl_SSL_CTX_set_cert_store_t)(ossl_SSL_CTX *_p0, ossl_X509_STORE *_p1);
typedef void (*ossl_SSL_CTX_set1_cert_store_t)(ossl_SSL_CTX *_p0, ossl_X509_STORE *_p1);
typedef int (*ossl_SSL_want_t)(const ossl_SSL *s);
typedef int (*ossl_SSL_clear_t)(ossl_SSL *s);
typedef void (*ossl_SSL_CTX_flush_sessions_t)(ossl_SSL_CTX *ctx, long tm);
typedef const ossl_SSL_CIPHER * (*ossl_SSL_get_current_cipher_t)(const ossl_SSL *s);
typedef const ossl_SSL_CIPHER * (*ossl_SSL_get_pending_cipher_t)(const ossl_SSL *s);
typedef int (*ossl_SSL_CIPHER_get_bits_t)(const ossl_SSL_CIPHER *c, int *alg_bits);
typedef const char * (*ossl_SSL_CIPHER_get_version_t)(const ossl_SSL_CIPHER *c);
typedef const char * (*ossl_SSL_CIPHER_get_name_t)(const ossl_SSL_CIPHER *c);
typedef const char * (*ossl_SSL_CIPHER_standard_name_t)(const ossl_SSL_CIPHER *c);
typedef const char * (*ossl_OPENSSL_cipher_name_t)(const char *rfc_name);
typedef uint32_t (*ossl_SSL_CIPHER_get_id_t)(const ossl_SSL_CIPHER *c);
typedef uint16_t (*ossl_SSL_CIPHER_get_protocol_id_t)(const ossl_SSL_CIPHER *c);
typedef int (*ossl_SSL_CIPHER_get_kx_nid_t)(const ossl_SSL_CIPHER *c);
typedef int (*ossl_SSL_CIPHER_get_auth_nid_t)(const ossl_SSL_CIPHER *c);
typedef const ossl_EVP_MD * (*ossl_SSL_CIPHER_get_handshake_digest_t)(const ossl_SSL_CIPHER *c);
typedef int (*ossl_SSL_CIPHER_is_aead_t)(const ossl_SSL_CIPHER *c);
typedef int (*ossl_SSL_get_fd_t)(const ossl_SSL *s);
typedef int (*ossl_SSL_get_rfd_t)(const ossl_SSL *s);
typedef int (*ossl_SSL_get_wfd_t)(const ossl_SSL *s);
typedef const char * (*ossl_SSL_get_cipher_list_t)(const ossl_SSL *s, int n);
typedef char * (*ossl_SSL_get_shared_ciphers_t)(const ossl_SSL *s, char *buf, int size);
typedef int (*ossl_SSL_get_read_ahead_t)(const ossl_SSL *s);
typedef int (*ossl_SSL_pending_t)(const ossl_SSL *s);
typedef int (*ossl_SSL_has_pending_t)(const ossl_SSL *s);
typedef int (*ossl_SSL_set_fd_t)(ossl_SSL *s, int fd);
typedef int (*ossl_SSL_set_rfd_t)(ossl_SSL *s, int fd);
typedef int (*ossl_SSL_set_wfd_t)(ossl_SSL *s, int fd);
typedef void (*ossl_SSL_set0_rbio_t)(ossl_SSL *s, ossl_BIO *rbio);
typedef void (*ossl_SSL_set0_wbio_t)(ossl_SSL *s, ossl_BIO *wbio);
typedef void (*ossl_SSL_set_bio_t)(ossl_SSL *s, ossl_BIO *rbio, ossl_BIO *wbio);
typedef ossl_BIO * (*ossl_SSL_get_rbio_t)(const ossl_SSL *s);
typedef ossl_BIO * (*ossl_SSL_get_wbio_t)(const ossl_SSL *s);
typedef int (*ossl_SSL_set_cipher_list_t)(ossl_SSL *s, const char *str);
typedef int (*ossl_SSL_CTX_set_ciphersuites_t)(ossl_SSL_CTX *ctx, const char *str);
typedef int (*ossl_SSL_set_ciphersuites_t)(ossl_SSL *s, const char *str);
typedef void (*ossl_SSL_set_read_ahead_t)(ossl_SSL *s, int yes);
typedef int (*ossl_SSL_get_verify_mode_t)(const ossl_SSL *s);
typedef int (*ossl_SSL_get_verify_depth_t)(const ossl_SSL *s);
typedef ossl_SSL_verify_cb (*ossl_SSL_get_verify_callback_t)(const ossl_SSL *s);
typedef void (*ossl_SSL_set_verify_t)(ossl_SSL *s, int mode, ossl_SSL_verify_cb callback);
typedef void (*ossl_SSL_set_verify_depth_t)(ossl_SSL *s, int depth);
typedef void (*ossl_SSL_set_cert_cb_t)(ossl_SSL *s, int (*cb)(ossl_SSL *, void *), void *arg);
typedef int (*ossl_SSL_use_RSAPrivateKey_t)(ossl_SSL *ssl, ossl_RSA *rsa);
typedef int (*ossl_SSL_use_RSAPrivateKey_ASN1_t)(ossl_SSL *ssl, const unsigned char *d, long len);
typedef int (*ossl_SSL_use_PrivateKey_t)(ossl_SSL *ssl, ossl_EVP_PKEY *pkey);
typedef int (*ossl_SSL_use_PrivateKey_ASN1_t)(int pk, ossl_SSL *ssl, const unsigned char *d, long len);
typedef int (*ossl_SSL_use_certificate_t)(ossl_SSL *ssl, ossl_X509 *x);
typedef int (*ossl_SSL_use_certificate_ASN1_t)(ossl_SSL *ssl, const unsigned char *d, int len);
typedef int (*ossl_SSL_use_cert_and_key_t)(ossl_SSL *ssl, ossl_X509 *x509, ossl_EVP_PKEY *privatekey, ossl_STACK_OF(ossl_X509) *chain, int override);
typedef int (*ossl_SSL_CTX_use_serverinfo_t)(ossl_SSL_CTX *ctx, const unsigned char *serverinfo, size_t serverinfo_length);
typedef int (*ossl_SSL_CTX_use_serverinfo_ex_t)(ossl_SSL_CTX *ctx, unsigned int version, const unsigned char *serverinfo, size_t serverinfo_length);
typedef int (*ossl_SSL_CTX_use_serverinfo_file_t)(ossl_SSL_CTX *ctx, const char *file);
typedef int (*ossl_SSL_use_RSAPrivateKey_file_t)(ossl_SSL *ssl, const char *file, int type);
typedef int (*ossl_SSL_use_PrivateKey_file_t)(ossl_SSL *ssl, const char *file, int type);
typedef int (*ossl_SSL_use_certificate_file_t)(ossl_SSL *ssl, const char *file, int type);
typedef int (*ossl_SSL_CTX_use_RSAPrivateKey_file_t)(ossl_SSL_CTX *ctx, const char *file, int type);
typedef int (*ossl_SSL_CTX_use_PrivateKey_file_t)(ossl_SSL_CTX *ctx, const char *file, int type);
typedef int (*ossl_SSL_CTX_use_certificate_file_t)(ossl_SSL_CTX *ctx, const char *file, int type);
typedef int (*ossl_SSL_CTX_use_certificate_chain_file_t)(ossl_SSL_CTX *ctx, const char *file);
typedef int (*ossl_SSL_use_certificate_chain_file_t)(ossl_SSL *ssl, const char *file);
typedef ossl_STACK_OF(ossl_X509_NAME) * (*ossl_SSL_load_client_CA_file_t)(const char *file);
typedef ossl_STACK_OF(ossl_X509_NAME) * (*ossl_SSL_load_client_CA_file_ex_t)(const char *file, ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef int (*ossl_SSL_add_file_cert_subjects_to_stack_t)(ossl_STACK_OF(ossl_X509_NAME) *stackCAs, const char *file);
typedef int (*ossl_SSL_add_dir_cert_subjects_to_stack_t)(ossl_STACK_OF(ossl_X509_NAME) *stackCAs, const char *dir);
typedef int (*ossl_SSL_add_store_cert_subjects_to_stack_t)(ossl_STACK_OF(ossl_X509_NAME) *stackCAs, const char *uri);
typedef const char * (*ossl_SSL_state_string_t)(const ossl_SSL *s);
typedef const char * (*ossl_SSL_rstate_string_t)(const ossl_SSL *s);
typedef const char * (*ossl_SSL_state_string_long_t)(const ossl_SSL *s);
typedef const char * (*ossl_SSL_rstate_string_long_t)(const ossl_SSL *s);
typedef long (*ossl_SSL_SESSION_get_time_t)(const ossl_SSL_SESSION *s);
typedef long (*ossl_SSL_SESSION_set_time_t)(ossl_SSL_SESSION *s, long t);
typedef long (*ossl_SSL_SESSION_get_timeout_t)(const ossl_SSL_SESSION *s);
typedef long (*ossl_SSL_SESSION_set_timeout_t)(ossl_SSL_SESSION *s, long t);
typedef int (*ossl_SSL_SESSION_get_protocol_version_t)(const ossl_SSL_SESSION *s);
typedef int (*ossl_SSL_SESSION_set_protocol_version_t)(ossl_SSL_SESSION *s, int version);
typedef const char * (*ossl_SSL_SESSION_get0_hostname_t)(const ossl_SSL_SESSION *s);
typedef int (*ossl_SSL_SESSION_set1_hostname_t)(ossl_SSL_SESSION *s, const char *hostname);
typedef void (*ossl_SSL_SESSION_get0_alpn_selected_t)(const ossl_SSL_SESSION *s, const unsigned char **alpn, size_t *len);
typedef int (*ossl_SSL_SESSION_set1_alpn_selected_t)(ossl_SSL_SESSION *s, const unsigned char *alpn, size_t len);
typedef const ossl_SSL_CIPHER * (*ossl_SSL_SESSION_get0_cipher_t)(const ossl_SSL_SESSION *s);
typedef int (*ossl_SSL_SESSION_set_cipher_t)(ossl_SSL_SESSION *s, const ossl_SSL_CIPHER *cipher);
typedef int (*ossl_SSL_SESSION_has_ticket_t)(const ossl_SSL_SESSION *s);
typedef unsigned long (*ossl_SSL_SESSION_get_ticket_lifetime_hint_t)(const ossl_SSL_SESSION *s);
typedef void (*ossl_SSL_SESSION_get0_ticket_t)(const ossl_SSL_SESSION *s, const unsigned char **tick, size_t *len);
typedef uint32_t (*ossl_SSL_SESSION_get_max_early_data_t)(const ossl_SSL_SESSION *s);
typedef int (*ossl_SSL_SESSION_set_max_early_data_t)(ossl_SSL_SESSION *s, uint32_t max_early_data);
typedef int (*ossl_SSL_copy_session_id_t)(ossl_SSL *to, const ossl_SSL *from);
typedef ossl_X509 * (*ossl_SSL_SESSION_get0_peer_t)(ossl_SSL_SESSION *s);
typedef int (*ossl_SSL_SESSION_set1_id_context_t)(ossl_SSL_SESSION *s, const unsigned char *sid_ctx, unsigned int sid_ctx_len);
typedef int (*ossl_SSL_SESSION_set1_id_t)(ossl_SSL_SESSION *s, const unsigned char *sid, unsigned int sid_len);
typedef int (*ossl_SSL_SESSION_is_resumable_t)(const ossl_SSL_SESSION *s);
typedef ossl_SSL_SESSION * (*ossl_SSL_SESSION_new_t)();
typedef ossl_SSL_SESSION * (*ossl_SSL_SESSION_dup_t)(const ossl_SSL_SESSION *src);
typedef const unsigned char * (*ossl_SSL_SESSION_get_id_t)(const ossl_SSL_SESSION *s, unsigned int *len);
typedef const unsigned char * (*ossl_SSL_SESSION_get0_id_context_t)(const ossl_SSL_SESSION *s, unsigned int *len);
typedef unsigned int (*ossl_SSL_SESSION_get_compress_id_t)(const ossl_SSL_SESSION *s);
typedef int (*ossl_SSL_SESSION_print_fp_t)(FILE *fp, const ossl_SSL_SESSION *ses);
typedef int (*ossl_SSL_SESSION_print_t)(ossl_BIO *fp, const ossl_SSL_SESSION *ses);
typedef int (*ossl_SSL_SESSION_print_keylog_t)(ossl_BIO *bp, const ossl_SSL_SESSION *x);
typedef int (*ossl_SSL_SESSION_up_ref_t)(ossl_SSL_SESSION *ses);
typedef void (*ossl_SSL_SESSION_free_t)(ossl_SSL_SESSION *ses);
typedef int (*ossl_i2d_SSL_SESSION_t)(const ossl_SSL_SESSION *in, unsigned char **pp);
typedef int (*ossl_SSL_set_session_t)(ossl_SSL *to, ossl_SSL_SESSION *session);
typedef int (*ossl_SSL_CTX_add_session_t)(ossl_SSL_CTX *ctx, ossl_SSL_SESSION *session);
typedef int (*ossl_SSL_CTX_remove_session_t)(ossl_SSL_CTX *ctx, ossl_SSL_SESSION *session);
typedef int (*ossl_SSL_CTX_set_generate_session_id_t)(ossl_SSL_CTX *ctx, ossl_GEN_SESSION_CB cb);
typedef int (*ossl_SSL_set_generate_session_id_t)(ossl_SSL *s, ossl_GEN_SESSION_CB cb);
typedef int (*ossl_SSL_has_matching_session_id_t)(const ossl_SSL *s, const unsigned char *id, unsigned int id_len);
typedef ossl_SSL_SESSION * (*ossl_d2i_SSL_SESSION_t)(ossl_SSL_SESSION **a, const unsigned char **pp, long length);
typedef ossl_X509 * (*ossl_SSL_get0_peer_certificate_t)(const ossl_SSL *s);
typedef ossl_X509 * (*ossl_SSL_get1_peer_certificate_t)(const ossl_SSL *s);
typedef ossl_STACK_OF(ossl_X509) * (*ossl_SSL_get_peer_cert_chain_t)(const ossl_SSL *s);
typedef int (*ossl_SSL_CTX_get_verify_mode_t)(const ossl_SSL_CTX *ctx);
typedef int (*ossl_SSL_CTX_get_verify_depth_t)(const ossl_SSL_CTX *ctx);
typedef ossl_SSL_verify_cb (*ossl_SSL_CTX_get_verify_callback_t)(const ossl_SSL_CTX *ctx);
typedef void (*ossl_SSL_CTX_set_verify_t)(ossl_SSL_CTX *ctx, int mode, ossl_SSL_verify_cb callback);
typedef void (*ossl_SSL_CTX_set_verify_depth_t)(ossl_SSL_CTX *ctx, int depth);
typedef void (*ossl_SSL_CTX_set_cert_verify_callback_t)(ossl_SSL_CTX *ctx, int (*cb)(ossl_X509_STORE_CTX *, void *), void *arg);
typedef void (*ossl_SSL_CTX_set_cert_cb_t)(ossl_SSL_CTX *c, int (*cb)(ossl_SSL *, void *), void *arg);
typedef int (*ossl_SSL_CTX_use_RSAPrivateKey_t)(ossl_SSL_CTX *ctx, ossl_RSA *rsa);
typedef int (*ossl_SSL_CTX_use_RSAPrivateKey_ASN1_t)(ossl_SSL_CTX *ctx, const unsigned char *d, long len);
typedef int (*ossl_SSL_CTX_use_PrivateKey_t)(ossl_SSL_CTX *ctx, ossl_EVP_PKEY *pkey);
typedef int (*ossl_SSL_CTX_use_PrivateKey_ASN1_t)(int pk, ossl_SSL_CTX *ctx, const unsigned char *d, long len);
typedef int (*ossl_SSL_CTX_use_certificate_t)(ossl_SSL_CTX *ctx, ossl_X509 *x);
typedef int (*ossl_SSL_CTX_use_certificate_ASN1_t)(ossl_SSL_CTX *ctx, int len, const unsigned char *d);
typedef int (*ossl_SSL_CTX_use_cert_and_key_t)(ossl_SSL_CTX *ctx, ossl_X509 *x509, ossl_EVP_PKEY *privatekey, ossl_STACK_OF(ossl_X509) *chain, int override);
typedef void (*ossl_SSL_CTX_set_default_passwd_cb_t)(ossl_SSL_CTX *ctx, ossl_pem_password_cb *cb);
typedef void (*ossl_SSL_CTX_set_default_passwd_cb_userdata_t)(ossl_SSL_CTX *ctx, void *u);
typedef ossl_pem_password_cb *SSL_CTX_get_default_passwd_cb_ret_t;
typedef SSL_CTX_get_default_passwd_cb_ret_t (*ossl_SSL_CTX_get_default_passwd_cb_t)(ossl_SSL_CTX *ctx);
typedef void * (*ossl_SSL_CTX_get_default_passwd_cb_userdata_t)(ossl_SSL_CTX *ctx);
typedef void (*ossl_SSL_set_default_passwd_cb_t)(ossl_SSL *s, ossl_pem_password_cb *cb);
typedef void (*ossl_SSL_set_default_passwd_cb_userdata_t)(ossl_SSL *s, void *u);
typedef ossl_pem_password_cb *SSL_get_default_passwd_cb_ret_t;
typedef SSL_get_default_passwd_cb_ret_t (*ossl_SSL_get_default_passwd_cb_t)(ossl_SSL *s);
typedef void * (*ossl_SSL_get_default_passwd_cb_userdata_t)(ossl_SSL *s);
typedef int (*ossl_SSL_CTX_check_private_key_t)(const ossl_SSL_CTX *ctx);
typedef int (*ossl_SSL_check_private_key_t)(const ossl_SSL *ctx);
typedef int (*ossl_SSL_CTX_set_session_id_context_t)(ossl_SSL_CTX *ctx, const unsigned char *sid_ctx, unsigned int sid_ctx_len);
typedef ossl_SSL * (*ossl_SSL_new_t)(ossl_SSL_CTX *ctx);
typedef int (*ossl_SSL_up_ref_t)(ossl_SSL *s);
typedef int (*ossl_SSL_is_dtls_t)(const ossl_SSL *s);
typedef int (*ossl_SSL_set_session_id_context_t)(ossl_SSL *ssl, const unsigned char *sid_ctx, unsigned int sid_ctx_len);
typedef int (*ossl_SSL_CTX_set_purpose_t)(ossl_SSL_CTX *ctx, int purpose);
typedef int (*ossl_SSL_set_purpose_t)(ossl_SSL *ssl, int purpose);
typedef int (*ossl_SSL_CTX_set_trust_t)(ossl_SSL_CTX *ctx, int trust);
typedef int (*ossl_SSL_set_trust_t)(ossl_SSL *ssl, int trust);
typedef int (*ossl_SSL_set1_host_t)(ossl_SSL *s, const char *hostname);
typedef int (*ossl_SSL_add1_host_t)(ossl_SSL *s, const char *hostname);
typedef const char * (*ossl_SSL_get0_peername_t)(ossl_SSL *s);
typedef void (*ossl_SSL_set_hostflags_t)(ossl_SSL *s, unsigned int flags);
typedef int (*ossl_SSL_CTX_dane_enable_t)(ossl_SSL_CTX *ctx);
typedef int (*ossl_SSL_CTX_dane_mtype_set_t)(ossl_SSL_CTX *ctx, const ossl_EVP_MD *md, uint8_t mtype, uint8_t ord);
typedef int (*ossl_SSL_dane_enable_t)(ossl_SSL *s, const char *basedomain);
typedef int (*ossl_SSL_dane_tlsa_add_t)(ossl_SSL *s, uint8_t usage, uint8_t selector, uint8_t mtype, const unsigned char *data, size_t dlen);
typedef int (*ossl_SSL_get0_dane_authority_t)(ossl_SSL *s, ossl_X509 **mcert, ossl_EVP_PKEY **mspki);
typedef int (*ossl_SSL_get0_dane_tlsa_t)(ossl_SSL *s, uint8_t *usage, uint8_t *selector, uint8_t *mtype, const unsigned char **data, size_t *dlen);
typedef ossl_SSL_DANE * (*ossl_SSL_get0_dane_t)(ossl_SSL *ssl);
typedef unsigned long (*ossl_SSL_CTX_dane_set_flags_t)(ossl_SSL_CTX *ctx, unsigned long flags);
typedef unsigned long (*ossl_SSL_CTX_dane_clear_flags_t)(ossl_SSL_CTX *ctx, unsigned long flags);
typedef unsigned long (*ossl_SSL_dane_set_flags_t)(ossl_SSL *ssl, unsigned long flags);
typedef unsigned long (*ossl_SSL_dane_clear_flags_t)(ossl_SSL *ssl, unsigned long flags);
typedef int (*ossl_SSL_CTX_set1_param_t)(ossl_SSL_CTX *ctx, ossl_X509_VERIFY_PARAM *vpm);
typedef int (*ossl_SSL_set1_param_t)(ossl_SSL *ssl, ossl_X509_VERIFY_PARAM *vpm);
typedef ossl_X509_VERIFY_PARAM * (*ossl_SSL_CTX_get0_param_t)(ossl_SSL_CTX *ctx);
typedef ossl_X509_VERIFY_PARAM * (*ossl_SSL_get0_param_t)(ossl_SSL *ssl);
typedef int (*ossl_SSL_CTX_set_srp_username_t)(ossl_SSL_CTX *ctx, char *name);
typedef int (*ossl_SSL_CTX_set_srp_password_t)(ossl_SSL_CTX *ctx, char *password);
typedef int (*ossl_SSL_CTX_set_srp_strength_t)(ossl_SSL_CTX *ctx, int strength);
typedef int (*ossl_SSL_CTX_set_srp_client_pwd_callback_t)(ossl_SSL_CTX *ctx, char *(*cb)(ossl_SSL *, void *));
typedef int (*ossl_SSL_CTX_set_srp_verify_param_callback_t)(ossl_SSL_CTX *ctx, int (*cb)(ossl_SSL *, void *));
typedef int (*ossl_SSL_CTX_set_srp_username_callback_t)(ossl_SSL_CTX *ctx, int (*cb)(ossl_SSL *, int *, void *));
typedef int (*ossl_SSL_CTX_set_srp_cb_arg_t)(ossl_SSL_CTX *ctx, void *arg);
typedef int (*ossl_SSL_set_srp_server_param_t)(ossl_SSL *s, const ossl_BIGNUM *N, const ossl_BIGNUM *g, ossl_BIGNUM *sa, ossl_BIGNUM *v, char *info);
typedef int (*ossl_SSL_set_srp_server_param_pw_t)(ossl_SSL *s, const char *user, const char *pass, const char *grp);
typedef ossl_BIGNUM * (*ossl_SSL_get_srp_g_t)(ossl_SSL *s);
typedef ossl_BIGNUM * (*ossl_SSL_get_srp_N_t)(ossl_SSL *s);
typedef char * (*ossl_SSL_get_srp_username_t)(ossl_SSL *s);
typedef char * (*ossl_SSL_get_srp_userinfo_t)(ossl_SSL *s);
typedef void (*ossl_SSL_CTX_set_client_hello_cb_t)(ossl_SSL_CTX *c, ossl_SSL_client_hello_cb_fn cb, void *arg);
typedef int (*ossl_SSL_client_hello_isv2_t)(ossl_SSL *s);
typedef unsigned int (*ossl_SSL_client_hello_get0_legacy_version_t)(ossl_SSL *s);
typedef size_t (*ossl_SSL_client_hello_get0_random_t)(ossl_SSL *s, const unsigned char **out);
typedef size_t (*ossl_SSL_client_hello_get0_session_id_t)(ossl_SSL *s, const unsigned char **out);
typedef size_t (*ossl_SSL_client_hello_get0_ciphers_t)(ossl_SSL *s, const unsigned char **out);
typedef size_t (*ossl_SSL_client_hello_get0_compression_methods_t)(ossl_SSL *s, const unsigned char **out);
typedef int (*ossl_SSL_client_hello_get1_extensions_present_t)(ossl_SSL *s, int **out, size_t *outlen);
typedef int (*ossl_SSL_client_hello_get0_ext_t)(ossl_SSL *s, unsigned int type, const unsigned char **out, size_t *outlen);
typedef void (*ossl_SSL_certs_clear_t)(ossl_SSL *s);
typedef void (*ossl_SSL_free_t)(ossl_SSL *ssl);
typedef int (*ossl_SSL_waiting_for_async_t)(ossl_SSL *s);
typedef int (*ossl_SSL_get_all_async_fds_t)(ossl_SSL *s, int *fds, size_t *numfds);
typedef int (*ossl_SSL_get_changed_async_fds_t)(ossl_SSL *s, int *addfd, size_t *numaddfds, int *delfd, size_t *numdelfds);
typedef int (*ossl_SSL_CTX_set_async_callback_t)(ossl_SSL_CTX *ctx, ossl_SSL_async_callback_fn callback);
typedef int (*ossl_SSL_CTX_set_async_callback_arg_t)(ossl_SSL_CTX *ctx, void *arg);
typedef int (*ossl_SSL_set_async_callback_t)(ossl_SSL *s, ossl_SSL_async_callback_fn callback);
typedef int (*ossl_SSL_set_async_callback_arg_t)(ossl_SSL *s, void *arg);
typedef int (*ossl_SSL_get_async_status_t)(ossl_SSL *s, int *status);
typedef int (*ossl_SSL_accept_t)(ossl_SSL *ssl);
typedef int (*ossl_SSL_stateless_t)(ossl_SSL *s);
typedef int (*ossl_SSL_connect_t)(ossl_SSL *ssl);
typedef int (*ossl_SSL_read_t)(ossl_SSL *ssl, void *buf, int num);
typedef int (*ossl_SSL_read_ex_t)(ossl_SSL *ssl, void *buf, size_t num, size_t *readbytes);
typedef int (*ossl_SSL_read_early_data_t)(ossl_SSL *s, void *buf, size_t num, size_t *readbytes);
typedef int (*ossl_SSL_peek_t)(ossl_SSL *ssl, void *buf, int num);
typedef int (*ossl_SSL_peek_ex_t)(ossl_SSL *ssl, void *buf, size_t num, size_t *readbytes);
typedef ssize_t (*ossl_SSL_sendfile_t)(ossl_SSL *s, int fd, off_t offset, size_t size, int flags);
typedef int (*ossl_SSL_write_t)(ossl_SSL *ssl, const void *buf, int num);
typedef int (*ossl_SSL_write_ex_t)(ossl_SSL *s, const void *buf, size_t num, size_t *written);
typedef int (*ossl_SSL_write_early_data_t)(ossl_SSL *s, const void *buf, size_t num, size_t *written);
typedef long (*ossl_SSL_ctrl_t)(ossl_SSL *ssl, int cmd, long larg, void *parg);
typedef long (*ossl_SSL_callback_ctrl_t)(ossl_SSL *_p0, int _p1, void (*_p2)(void));
typedef long (*ossl_SSL_CTX_ctrl_t)(ossl_SSL_CTX *ctx, int cmd, long larg, void *parg);
typedef long (*ossl_SSL_CTX_callback_ctrl_t)(ossl_SSL_CTX *_p0, int _p1, void (*_p2)(void));
typedef int (*ossl_SSL_get_early_data_status_t)(const ossl_SSL *s);
typedef int (*ossl_SSL_get_error_t)(const ossl_SSL *s, int ret_code);
typedef const char * (*ossl_SSL_get_version_t)(const ossl_SSL *s);
typedef int (*ossl_SSL_CTX_set_ssl_version_t)(ossl_SSL_CTX *ctx, const ossl_SSL_METHOD *meth);
typedef const ossl_SSL_METHOD * (*ossl_TLS_method_t)();
typedef const ossl_SSL_METHOD * (*ossl_TLS_server_method_t)();
typedef const ossl_SSL_METHOD * (*ossl_TLS_client_method_t)();
typedef const ossl_SSL_METHOD * (*ossl_TLSv1_method_t)();
typedef const ossl_SSL_METHOD * (*ossl_TLSv1_server_method_t)();
typedef const ossl_SSL_METHOD * (*ossl_TLSv1_client_method_t)();
typedef const ossl_SSL_METHOD * (*ossl_TLSv1_1_method_t)();
typedef const ossl_SSL_METHOD * (*ossl_TLSv1_1_server_method_t)();
typedef const ossl_SSL_METHOD * (*ossl_TLSv1_1_client_method_t)();
typedef const ossl_SSL_METHOD * (*ossl_TLSv1_2_method_t)();
typedef const ossl_SSL_METHOD * (*ossl_TLSv1_2_server_method_t)();
typedef const ossl_SSL_METHOD * (*ossl_TLSv1_2_client_method_t)();
typedef const ossl_SSL_METHOD * (*ossl_DTLSv1_method_t)();
typedef const ossl_SSL_METHOD * (*ossl_DTLSv1_server_method_t)();
typedef const ossl_SSL_METHOD * (*ossl_DTLSv1_client_method_t)();
typedef const ossl_SSL_METHOD * (*ossl_DTLSv1_2_method_t)();
typedef const ossl_SSL_METHOD * (*ossl_DTLSv1_2_server_method_t)();
typedef const ossl_SSL_METHOD * (*ossl_DTLSv1_2_client_method_t)();
typedef const ossl_SSL_METHOD * (*ossl_DTLS_method_t)();
typedef const ossl_SSL_METHOD * (*ossl_DTLS_server_method_t)();
typedef const ossl_SSL_METHOD * (*ossl_DTLS_client_method_t)();
typedef size_t (*ossl_DTLS_get_data_mtu_t)(const ossl_SSL *s);
typedef ossl_STACK_OF(ossl_SSL_CIPHER) * (*ossl_SSL_get_ciphers_t)(const ossl_SSL *s);
typedef ossl_STACK_OF(ossl_SSL_CIPHER) * (*ossl_SSL_CTX_get_ciphers_t)(const ossl_SSL_CTX *ctx);
typedef ossl_STACK_OF(ossl_SSL_CIPHER) * (*ossl_SSL_get_client_ciphers_t)(const ossl_SSL *s);
typedef ossl_STACK_OF(ossl_SSL_CIPHER) * (*ossl_SSL_get1_supported_ciphers_t)(ossl_SSL *s);
typedef int (*ossl_SSL_do_handshake_t)(ossl_SSL *s);
typedef int (*ossl_SSL_key_update_t)(ossl_SSL *s, int updatetype);
typedef int (*ossl_SSL_get_key_update_type_t)(const ossl_SSL *s);
typedef int (*ossl_SSL_renegotiate_t)(ossl_SSL *s);
typedef int (*ossl_SSL_renegotiate_abbreviated_t)(ossl_SSL *s);
typedef int (*ossl_SSL_renegotiate_pending_t)(const ossl_SSL *s);
typedef int (*ossl_SSL_new_session_ticket_t)(ossl_SSL *s);
typedef int (*ossl_SSL_shutdown_t)(ossl_SSL *s);
typedef int (*ossl_SSL_verify_client_post_handshake_t)(ossl_SSL *s);
typedef void (*ossl_SSL_CTX_set_post_handshake_auth_t)(ossl_SSL_CTX *ctx, int val);
typedef void (*ossl_SSL_set_post_handshake_auth_t)(ossl_SSL *s, int val);
typedef const ossl_SSL_METHOD * (*ossl_SSL_CTX_get_ssl_method_t)(const ossl_SSL_CTX *ctx);
typedef const ossl_SSL_METHOD * (*ossl_SSL_get_ssl_method_t)(const ossl_SSL *s);
typedef int (*ossl_SSL_set_ssl_method_t)(ossl_SSL *s, const ossl_SSL_METHOD *method);
typedef const char * (*ossl_SSL_alert_type_string_long_t)(int value);
typedef const char * (*ossl_SSL_alert_type_string_t)(int value);
typedef const char * (*ossl_SSL_alert_desc_string_long_t)(int value);
typedef const char * (*ossl_SSL_alert_desc_string_t)(int value);
typedef void (*ossl_SSL_set0_CA_list_t)(ossl_SSL *s, ossl_STACK_OF(ossl_X509_NAME) *name_list);
typedef void (*ossl_SSL_CTX_set0_CA_list_t)(ossl_SSL_CTX *ctx, ossl_STACK_OF(ossl_X509_NAME) *name_list);
typedef const ossl_STACK_OF(ossl_X509_NAME) * (*ossl_SSL_get0_CA_list_t)(const ossl_SSL *s);
typedef const ossl_STACK_OF(ossl_X509_NAME) * (*ossl_SSL_CTX_get0_CA_list_t)(const ossl_SSL_CTX *ctx);
typedef int (*ossl_SSL_add1_to_CA_list_t)(ossl_SSL *ssl, const ossl_X509 *x);
typedef int (*ossl_SSL_CTX_add1_to_CA_list_t)(ossl_SSL_CTX *ctx, const ossl_X509 *x);
typedef const ossl_STACK_OF(ossl_X509_NAME) * (*ossl_SSL_get0_peer_CA_list_t)(const ossl_SSL *s);
typedef void (*ossl_SSL_set_client_CA_list_t)(ossl_SSL *s, ossl_STACK_OF(ossl_X509_NAME) *name_list);
typedef void (*ossl_SSL_CTX_set_client_CA_list_t)(ossl_SSL_CTX *ctx, ossl_STACK_OF(ossl_X509_NAME) *name_list);
typedef ossl_STACK_OF(ossl_X509_NAME) * (*ossl_SSL_get_client_CA_list_t)(const ossl_SSL *s);
typedef ossl_STACK_OF(ossl_X509_NAME) * (*ossl_SSL_CTX_get_client_CA_list_t)(const ossl_SSL_CTX *s);
typedef int (*ossl_SSL_add_client_CA_t)(ossl_SSL *ssl, ossl_X509 *x);
typedef int (*ossl_SSL_CTX_add_client_CA_t)(ossl_SSL_CTX *ctx, ossl_X509 *x);
typedef void (*ossl_SSL_set_connect_state_t)(ossl_SSL *s);
typedef void (*ossl_SSL_set_accept_state_t)(ossl_SSL *s);
typedef long (*ossl_SSL_get_default_timeout_t)(const ossl_SSL *s);
typedef char * (*ossl_SSL_CIPHER_description_t)(const ossl_SSL_CIPHER *_p0, char *buf, int size);
typedef ossl_STACK_OF(ossl_X509_NAME) * (*ossl_SSL_dup_CA_list_t)(const ossl_STACK_OF(ossl_X509_NAME) *sk);
typedef ossl_SSL * (*ossl_SSL_dup_t)(ossl_SSL *ssl);
typedef ossl_X509 * (*ossl_SSL_get_certificate_t)(const ossl_SSL *ssl);
typedef struct ossl_evp_pkey_st * (*ossl_SSL_get_privatekey_t)(const ossl_SSL *ssl);
typedef ossl_X509 * (*ossl_SSL_CTX_get0_certificate_t)(const ossl_SSL_CTX *ctx);
typedef ossl_EVP_PKEY * (*ossl_SSL_CTX_get0_privatekey_t)(const ossl_SSL_CTX *ctx);
typedef void (*ossl_SSL_CTX_set_quiet_shutdown_t)(ossl_SSL_CTX *ctx, int mode);
typedef int (*ossl_SSL_CTX_get_quiet_shutdown_t)(const ossl_SSL_CTX *ctx);
typedef void (*ossl_SSL_set_quiet_shutdown_t)(ossl_SSL *ssl, int mode);
typedef int (*ossl_SSL_get_quiet_shutdown_t)(const ossl_SSL *ssl);
typedef void (*ossl_SSL_set_shutdown_t)(ossl_SSL *ssl, int mode);
typedef int (*ossl_SSL_get_shutdown_t)(const ossl_SSL *ssl);
typedef int (*ossl_SSL_version_t)(const ossl_SSL *ssl);
typedef int (*ossl_SSL_client_version_t)(const ossl_SSL *s);
typedef int (*ossl_SSL_CTX_set_default_verify_paths_t)(ossl_SSL_CTX *ctx);
typedef int (*ossl_SSL_CTX_set_default_verify_dir_t)(ossl_SSL_CTX *ctx);
typedef int (*ossl_SSL_CTX_set_default_verify_file_t)(ossl_SSL_CTX *ctx);
typedef int (*ossl_SSL_CTX_set_default_verify_store_t)(ossl_SSL_CTX *ctx);
typedef int (*ossl_SSL_CTX_load_verify_file_t)(ossl_SSL_CTX *ctx, const char *CAfile);
typedef int (*ossl_SSL_CTX_load_verify_dir_t)(ossl_SSL_CTX *ctx, const char *CApath);
typedef int (*ossl_SSL_CTX_load_verify_store_t)(ossl_SSL_CTX *ctx, const char *CAstore);
typedef int (*ossl_SSL_CTX_load_verify_locations_t)(ossl_SSL_CTX *ctx, const char *CAfile, const char *CApath);
typedef ossl_SSL_SESSION * (*ossl_SSL_get_session_t)(const ossl_SSL *ssl);
typedef ossl_SSL_SESSION * (*ossl_SSL_get1_session_t)(ossl_SSL *ssl);
typedef ossl_SSL_CTX * (*ossl_SSL_get_SSL_CTX_t)(const ossl_SSL *ssl);
typedef ossl_SSL_CTX * (*ossl_SSL_set_SSL_CTX_t)(ossl_SSL *ssl, ossl_SSL_CTX *ctx);
typedef void (*ossl_SSL_set_info_callback_t)(ossl_SSL *ssl, void (*cb)(const ossl_SSL *, int, int));
typedef void (*SSL_get_info_callback_ret_t)(const ossl_SSL *, int, int);
typedef SSL_get_info_callback_ret_t (*ossl_SSL_get_info_callback_t)(const ossl_SSL *ssl);
typedef ossl_OSSL_HANDSHAKE_STATE (*ossl_SSL_get_state_t)(const ossl_SSL *ssl);
typedef void (*ossl_SSL_set_verify_result_t)(ossl_SSL *ssl, long v);
typedef long (*ossl_SSL_get_verify_result_t)(const ossl_SSL *ssl);
typedef ossl_STACK_OF(ossl_X509) * (*ossl_SSL_get0_verified_chain_t)(const ossl_SSL *s);
typedef size_t (*ossl_SSL_get_client_random_t)(const ossl_SSL *ssl, unsigned char *out, size_t outlen);
typedef size_t (*ossl_SSL_get_server_random_t)(const ossl_SSL *ssl, unsigned char *out, size_t outlen);
typedef size_t (*ossl_SSL_SESSION_get_master_key_t)(const ossl_SSL_SESSION *sess, unsigned char *out, size_t outlen);
typedef int (*ossl_SSL_SESSION_set1_master_key_t)(ossl_SSL_SESSION *sess, const unsigned char *in, size_t len);
typedef uint8_t (*ossl_SSL_SESSION_get_max_fragment_length_t)(const ossl_SSL_SESSION *sess);
typedef int (*ossl_SSL_set_ex_data_t)(ossl_SSL *ssl, int idx, void *data);
typedef void * (*ossl_SSL_get_ex_data_t)(const ossl_SSL *ssl, int idx);
typedef int (*ossl_SSL_SESSION_set_ex_data_t)(ossl_SSL_SESSION *ss, int idx, void *data);
typedef void * (*ossl_SSL_SESSION_get_ex_data_t)(const ossl_SSL_SESSION *ss, int idx);
typedef int (*ossl_SSL_CTX_set_ex_data_t)(ossl_SSL_CTX *ssl, int idx, void *data);
typedef void * (*ossl_SSL_CTX_get_ex_data_t)(const ossl_SSL_CTX *ssl, int idx);
typedef int (*ossl_SSL_get_ex_data_X509_STORE_CTX_idx_t)();
typedef void (*ossl_SSL_CTX_set_default_read_buffer_len_t)(ossl_SSL_CTX *ctx, size_t len);
typedef void (*ossl_SSL_set_default_read_buffer_len_t)(ossl_SSL *s, size_t len);
typedef void (*ossl_SSL_CTX_set_tmp_dh_callback_t)(ossl_SSL_CTX *ctx, ossl_DH *(*dh)(ossl_SSL *, int, int));
typedef void (*ossl_SSL_set_tmp_dh_callback_t)(ossl_SSL *ssl, ossl_DH *(*dh)(ossl_SSL *, int, int));
typedef const ossl_COMP_METHOD * (*ossl_SSL_get_current_compression_t)(const ossl_SSL *s);
typedef const ossl_COMP_METHOD * (*ossl_SSL_get_current_expansion_t)(const ossl_SSL *s);
typedef const char * (*ossl_SSL_COMP_get_name_t)(const ossl_COMP_METHOD *comp);
typedef const char * (*ossl_SSL_COMP_get0_name_t)(const ossl_SSL_COMP *comp);
typedef int (*ossl_SSL_COMP_get_id_t)(const ossl_SSL_COMP *comp);
typedef ossl_STACK_OF(ossl_SSL_COMP) * (*ossl_SSL_COMP_get_compression_methods_t)();
typedef ossl_STACK_OF(ossl_SSL_COMP) * (*ossl_SSL_COMP_set0_compression_methods_t)(ossl_STACK_OF(ossl_SSL_COMP) *meths);
typedef int (*ossl_SSL_COMP_add_compression_method_t)(int id, ossl_COMP_METHOD *cm);
typedef const ossl_SSL_CIPHER * (*ossl_SSL_CIPHER_find_t)(ossl_SSL *ssl, const unsigned char *ptr);
typedef int (*ossl_SSL_CIPHER_get_cipher_nid_t)(const ossl_SSL_CIPHER *c);
typedef int (*ossl_SSL_CIPHER_get_digest_nid_t)(const ossl_SSL_CIPHER *c);
typedef int (*ossl_SSL_bytes_to_cipher_list_t)(ossl_SSL *s, const unsigned char *bytes, size_t len, int isv2format, ossl_STACK_OF(ossl_SSL_CIPHER) **sk, ossl_STACK_OF(ossl_SSL_CIPHER) **scsvs);
typedef int (*ossl_SSL_set_session_ticket_ext_t)(ossl_SSL *s, void *ext_data, int ext_len);
typedef int (*ossl_SSL_set_session_ticket_ext_cb_t)(ossl_SSL *s, ossl_tls_session_ticket_ext_cb_fn cb, void *arg);
typedef int (*ossl_SSL_set_session_secret_cb_t)(ossl_SSL *s, ossl_tls_session_secret_cb_fn session_secret_cb, void *arg);
typedef void (*ossl_SSL_CTX_set_not_resumable_session_callback_t)(ossl_SSL_CTX *ctx, int (*cb)(ossl_SSL *, int));
typedef void (*ossl_SSL_set_not_resumable_session_callback_t)(ossl_SSL *ssl, int (*cb)(ossl_SSL *, int));
typedef void (*ossl_SSL_CTX_set_record_padding_callback_t)(ossl_SSL_CTX *ctx, size_t (*cb)(ossl_SSL *, int, size_t, void *));
typedef void (*ossl_SSL_CTX_set_record_padding_callback_arg_t)(ossl_SSL_CTX *ctx, void *arg);
typedef void * (*ossl_SSL_CTX_get_record_padding_callback_arg_t)(const ossl_SSL_CTX *ctx);
typedef int (*ossl_SSL_CTX_set_block_padding_t)(ossl_SSL_CTX *ctx, size_t block_size);
typedef int (*ossl_SSL_set_record_padding_callback_t)(ossl_SSL *ssl, size_t (*cb)(ossl_SSL *, int, size_t, void *));
typedef void (*ossl_SSL_set_record_padding_callback_arg_t)(ossl_SSL *ssl, void *arg);
typedef void * (*ossl_SSL_get_record_padding_callback_arg_t)(const ossl_SSL *ssl);
typedef int (*ossl_SSL_set_block_padding_t)(ossl_SSL *ssl, size_t block_size);
typedef int (*ossl_SSL_set_num_tickets_t)(ossl_SSL *s, size_t num_tickets);
typedef size_t (*ossl_SSL_get_num_tickets_t)(const ossl_SSL *s);
typedef int (*ossl_SSL_CTX_set_num_tickets_t)(ossl_SSL_CTX *ctx, size_t num_tickets);
typedef size_t (*ossl_SSL_CTX_get_num_tickets_t)(const ossl_SSL_CTX *ctx);
typedef int (*ossl_SSL_session_reused_t)(const ossl_SSL *s);
typedef int (*ossl_SSL_is_server_t)(const ossl_SSL *s);
typedef ossl_SSL_CONF_CTX * (*ossl_SSL_CONF_CTX_new_t)();
typedef int (*ossl_SSL_CONF_CTX_finish_t)(ossl_SSL_CONF_CTX *cctx);
typedef void (*ossl_SSL_CONF_CTX_free_t)(ossl_SSL_CONF_CTX *cctx);
typedef unsigned int (*ossl_SSL_CONF_CTX_set_flags_t)(ossl_SSL_CONF_CTX *cctx, unsigned int flags);
typedef unsigned int (*ossl_SSL_CONF_CTX_clear_flags_t)(ossl_SSL_CONF_CTX *cctx, unsigned int flags);
typedef int (*ossl_SSL_CONF_CTX_set1_prefix_t)(ossl_SSL_CONF_CTX *cctx, const char *pre);
typedef void (*ossl_SSL_CONF_CTX_set_ssl_t)(ossl_SSL_CONF_CTX *cctx, ossl_SSL *ssl);
typedef void (*ossl_SSL_CONF_CTX_set_ssl_ctx_t)(ossl_SSL_CONF_CTX *cctx, ossl_SSL_CTX *ctx);
typedef int (*ossl_SSL_CONF_cmd_t)(ossl_SSL_CONF_CTX *cctx, const char *cmd, const char *value);
typedef int (*ossl_SSL_CONF_cmd_argv_t)(ossl_SSL_CONF_CTX *cctx, int *pargc, char ***pargv);
typedef int (*ossl_SSL_CONF_cmd_value_type_t)(ossl_SSL_CONF_CTX *cctx, const char *cmd);
typedef void (*ossl_SSL_add_ssl_module_t)();
typedef int (*ossl_SSL_config_t)(ossl_SSL *s, const char *name);
typedef int (*ossl_SSL_CTX_config_t)(ossl_SSL_CTX *ctx, const char *name);
typedef void (*ossl_SSL_trace_t)(int write_p, int version, int content_type, const void *buf, size_t len, ossl_SSL *ssl, void *arg);
typedef int (*ossl_DTLSv1_listen_t)(ossl_SSL *s, ossl_BIO_ADDR *client);
typedef int (*ossl_SSL_set_ct_validation_callback_t)(ossl_SSL *s, ossl_ssl_ct_validation_cb callback, void *arg);
typedef int (*ossl_SSL_CTX_set_ct_validation_callback_t)(ossl_SSL_CTX *ctx, ossl_ssl_ct_validation_cb callback, void *arg);
typedef int (*ossl_SSL_enable_ct_t)(ossl_SSL *s, int validation_mode);
typedef int (*ossl_SSL_CTX_enable_ct_t)(ossl_SSL_CTX *ctx, int validation_mode);
typedef int (*ossl_SSL_ct_is_enabled_t)(const ossl_SSL *s);
typedef int (*ossl_SSL_CTX_ct_is_enabled_t)(const ossl_SSL_CTX *ctx);
typedef const ossl_STACK_OF(ossl_SCT) * (*ossl_SSL_get0_peer_scts_t)(ossl_SSL *s);
typedef int (*ossl_SSL_CTX_set_default_ctlog_list_file_t)(ossl_SSL_CTX *ctx);
typedef int (*ossl_SSL_CTX_set_ctlog_list_file_t)(ossl_SSL_CTX *ctx, const char *path);
typedef void (*ossl_SSL_CTX_set0_ctlog_store_t)(ossl_SSL_CTX *ctx, ossl_CTLOG_STORE *logs);
typedef const ossl_CTLOG_STORE * (*ossl_SSL_CTX_get0_ctlog_store_t)(const ossl_SSL_CTX *ctx);
typedef void (*ossl_SSL_set_security_level_t)(ossl_SSL *s, int level);
typedef int (*ossl_SSL_get_security_level_t)(const ossl_SSL *s);
typedef void (*ossl_SSL_set_security_callback_t)(ossl_SSL *s, int (*cb)(const ossl_SSL *, const ossl_SSL_CTX *, int, int, int, void *, void *));
typedef int (*SSL_get_security_callback_ret_t)(const ossl_SSL *, const ossl_SSL_CTX *, int, int, int, void *, void *);
typedef SSL_get_security_callback_ret_t (*ossl_SSL_get_security_callback_t)(const ossl_SSL *s);
typedef void (*ossl_SSL_set0_security_ex_data_t)(ossl_SSL *s, void *ex);
typedef void * (*ossl_SSL_get0_security_ex_data_t)(const ossl_SSL *s);
typedef void (*ossl_SSL_CTX_set_security_level_t)(ossl_SSL_CTX *ctx, int level);
typedef int (*ossl_SSL_CTX_get_security_level_t)(const ossl_SSL_CTX *ctx);
typedef void (*ossl_SSL_CTX_set_security_callback_t)(ossl_SSL_CTX *ctx, int (*cb)(const ossl_SSL *, const ossl_SSL_CTX *, int, int, int, void *, void *));
typedef int (*SSL_CTX_get_security_callback_ret_t)(const ossl_SSL *, const ossl_SSL_CTX *, int, int, int, void *, void *);
typedef SSL_CTX_get_security_callback_ret_t (*ossl_SSL_CTX_get_security_callback_t)(const ossl_SSL_CTX *ctx);
typedef void (*ossl_SSL_CTX_set0_security_ex_data_t)(ossl_SSL_CTX *ctx, void *ex);
typedef void * (*ossl_SSL_CTX_get0_security_ex_data_t)(const ossl_SSL_CTX *ctx);
typedef int (*ossl_OPENSSL_init_ssl_t)(uint64_t opts, const ossl_OPENSSL_INIT_SETTINGS *settings);
typedef int (*ossl_SSL_free_buffers_t)(ossl_SSL *ssl);
typedef int (*ossl_SSL_alloc_buffers_t)(ossl_SSL *ssl);
typedef int (*ossl_SSL_CTX_set_session_ticket_cb_t)(ossl_SSL_CTX *ctx, ossl_SSL_CTX_generate_session_ticket_fn gen_cb, ossl_SSL_CTX_decrypt_session_ticket_fn dec_cb, void *arg);
typedef int (*ossl_SSL_SESSION_set1_ticket_appdata_t)(ossl_SSL_SESSION *ss, const void *data, size_t len);
typedef int (*ossl_SSL_SESSION_get0_ticket_appdata_t)(ossl_SSL_SESSION *ss, void **data, size_t *len);
typedef void (*ossl_DTLS_set_timer_cb_t)(ossl_SSL *s, ossl_DTLS_timer_cb cb);
typedef void (*ossl_SSL_CTX_set_allow_early_data_cb_t)(ossl_SSL_CTX *ctx, ossl_SSL_allow_early_data_cb_fn cb, void *arg);
typedef void (*ossl_SSL_set_allow_early_data_cb_t)(ossl_SSL *s, ossl_SSL_allow_early_data_cb_fn cb, void *arg);
typedef const char * (*ossl_OSSL_default_cipher_list_t)();
typedef const char * (*ossl_OSSL_default_ciphersuites_t)();
typedef int (*ossl_SSL_CTX_set_tlsext_use_srtp_t)(ossl_SSL_CTX *ctx, const char *profiles);
typedef int (*ossl_SSL_set_tlsext_use_srtp_t)(ossl_SSL *ssl, const char *profiles);
typedef ossl_STACK_OF(ossl_SRTP_PROTECTION_PROFILE) * (*ossl_SSL_get_srtp_profiles_t)(ossl_SSL *ssl);
typedef ossl_SRTP_PROTECTION_PROFILE * (*ossl_SSL_get_selected_srtp_profile_t)(ossl_SSL *s);
typedef ossl_OSSL_STORE_CTX * (*ossl_OSSL_STORE_open_t)(const char *uri, const ossl_UI_METHOD *ui_method, void *ui_data, ossl_OSSL_STORE_post_process_info_fn post_process, void *post_process_data);
typedef ossl_OSSL_STORE_CTX * (*ossl_OSSL_STORE_open_ex_t)(const char *uri, ossl_OSSL_LIB_CTX *libctx, const char *propq, const ossl_UI_METHOD *ui_method, void *ui_data, const ossl_OSSL_PARAM params[], ossl_OSSL_STORE_post_process_info_fn post_process, void *post_process_data);
typedef int (*ossl_OSSL_STORE_ctrl_t)(ossl_OSSL_STORE_CTX *ctx, int cmd, ...);
typedef int (*ossl_OSSL_STORE_vctrl_t)(ossl_OSSL_STORE_CTX *ctx, int cmd, va_list args);
typedef ossl_OSSL_STORE_INFO * (*ossl_OSSL_STORE_load_t)(ossl_OSSL_STORE_CTX *ctx);
typedef int (*ossl_OSSL_STORE_eof_t)(ossl_OSSL_STORE_CTX *ctx);
typedef int (*ossl_OSSL_STORE_error_t)(ossl_OSSL_STORE_CTX *ctx);
typedef int (*ossl_OSSL_STORE_close_t)(ossl_OSSL_STORE_CTX *ctx);
typedef ossl_OSSL_STORE_CTX * (*ossl_OSSL_STORE_attach_t)(ossl_BIO *bio, const char *scheme, ossl_OSSL_LIB_CTX *libctx, const char *propq, const ossl_UI_METHOD *ui_method, void *ui_data, const ossl_OSSL_PARAM params[], ossl_OSSL_STORE_post_process_info_fn post_process, void *post_process_data);
typedef ossl_OSSL_STORE_INFO * (*ossl_OSSL_STORE_INFO_new_t)(int type, void *data);
typedef ossl_OSSL_STORE_INFO * (*ossl_OSSL_STORE_INFO_new_NAME_t)(char *name);
typedef int (*ossl_OSSL_STORE_INFO_set0_NAME_description_t)(ossl_OSSL_STORE_INFO *info, char *desc);
typedef ossl_OSSL_STORE_INFO * (*ossl_OSSL_STORE_INFO_new_PARAMS_t)(ossl_EVP_PKEY *params);
typedef ossl_OSSL_STORE_INFO * (*ossl_OSSL_STORE_INFO_new_PUBKEY_t)(ossl_EVP_PKEY *pubkey);
typedef ossl_OSSL_STORE_INFO * (*ossl_OSSL_STORE_INFO_new_PKEY_t)(ossl_EVP_PKEY *pkey);
typedef ossl_OSSL_STORE_INFO * (*ossl_OSSL_STORE_INFO_new_CERT_t)(ossl_X509 *x509);
typedef ossl_OSSL_STORE_INFO * (*ossl_OSSL_STORE_INFO_new_CRL_t)(ossl_X509_CRL *crl);
typedef int (*ossl_OSSL_STORE_INFO_get_type_t)(const ossl_OSSL_STORE_INFO *info);
typedef void * (*ossl_OSSL_STORE_INFO_get0_data_t)(int type, const ossl_OSSL_STORE_INFO *info);
typedef const char * (*ossl_OSSL_STORE_INFO_get0_NAME_t)(const ossl_OSSL_STORE_INFO *info);
typedef char * (*ossl_OSSL_STORE_INFO_get1_NAME_t)(const ossl_OSSL_STORE_INFO *info);
typedef const char * (*ossl_OSSL_STORE_INFO_get0_NAME_description_t)(const ossl_OSSL_STORE_INFO *info);
typedef char * (*ossl_OSSL_STORE_INFO_get1_NAME_description_t)(const ossl_OSSL_STORE_INFO *info);
typedef ossl_EVP_PKEY * (*ossl_OSSL_STORE_INFO_get0_PARAMS_t)(const ossl_OSSL_STORE_INFO *info);
typedef ossl_EVP_PKEY * (*ossl_OSSL_STORE_INFO_get1_PARAMS_t)(const ossl_OSSL_STORE_INFO *info);
typedef ossl_EVP_PKEY * (*ossl_OSSL_STORE_INFO_get0_PUBKEY_t)(const ossl_OSSL_STORE_INFO *info);
typedef ossl_EVP_PKEY * (*ossl_OSSL_STORE_INFO_get1_PUBKEY_t)(const ossl_OSSL_STORE_INFO *info);
typedef ossl_EVP_PKEY * (*ossl_OSSL_STORE_INFO_get0_PKEY_t)(const ossl_OSSL_STORE_INFO *info);
typedef ossl_EVP_PKEY * (*ossl_OSSL_STORE_INFO_get1_PKEY_t)(const ossl_OSSL_STORE_INFO *info);
typedef ossl_X509 * (*ossl_OSSL_STORE_INFO_get0_CERT_t)(const ossl_OSSL_STORE_INFO *info);
typedef ossl_X509 * (*ossl_OSSL_STORE_INFO_get1_CERT_t)(const ossl_OSSL_STORE_INFO *info);
typedef ossl_X509_CRL * (*ossl_OSSL_STORE_INFO_get0_CRL_t)(const ossl_OSSL_STORE_INFO *info);
typedef ossl_X509_CRL * (*ossl_OSSL_STORE_INFO_get1_CRL_t)(const ossl_OSSL_STORE_INFO *info);
typedef const char * (*ossl_OSSL_STORE_INFO_type_string_t)(int type);
typedef void (*ossl_OSSL_STORE_INFO_free_t)(ossl_OSSL_STORE_INFO *info);
typedef int (*ossl_OSSL_STORE_supports_search_t)(ossl_OSSL_STORE_CTX *ctx, int search_type);
typedef ossl_OSSL_STORE_SEARCH * (*ossl_OSSL_STORE_SEARCH_by_name_t)(ossl_X509_NAME *name);
typedef ossl_OSSL_STORE_SEARCH * (*ossl_OSSL_STORE_SEARCH_by_issuer_serial_t)(ossl_X509_NAME *name, const ossl_ASN1_INTEGER *serial);
typedef ossl_OSSL_STORE_SEARCH * (*ossl_OSSL_STORE_SEARCH_by_key_fingerprint_t)(const ossl_EVP_MD *digest, const unsigned char *bytes, size_t len);
typedef ossl_OSSL_STORE_SEARCH * (*ossl_OSSL_STORE_SEARCH_by_alias_t)(const char *alias);
typedef void (*ossl_OSSL_STORE_SEARCH_free_t)(ossl_OSSL_STORE_SEARCH *search);
typedef int (*ossl_OSSL_STORE_SEARCH_get_type_t)(const ossl_OSSL_STORE_SEARCH *criterion);
typedef ossl_X509_NAME * (*ossl_OSSL_STORE_SEARCH_get0_name_t)(const ossl_OSSL_STORE_SEARCH *criterion);
typedef const ossl_ASN1_INTEGER * (*ossl_OSSL_STORE_SEARCH_get0_serial_t)(const ossl_OSSL_STORE_SEARCH *criterion);
typedef const unsigned char * (*ossl_OSSL_STORE_SEARCH_get0_bytes_t)(const ossl_OSSL_STORE_SEARCH *criterion, size_t *length);
typedef const char * (*ossl_OSSL_STORE_SEARCH_get0_string_t)(const ossl_OSSL_STORE_SEARCH *criterion);
typedef const ossl_EVP_MD * (*ossl_OSSL_STORE_SEARCH_get0_digest_t)(const ossl_OSSL_STORE_SEARCH *criterion);
typedef int (*ossl_OSSL_STORE_expect_t)(ossl_OSSL_STORE_CTX *ctx, int expected_type);
typedef int (*ossl_OSSL_STORE_find_t)(ossl_OSSL_STORE_CTX *ctx, const ossl_OSSL_STORE_SEARCH *search);
typedef ossl_OSSL_STORE_LOADER * (*ossl_OSSL_STORE_LOADER_fetch_t)(ossl_OSSL_LIB_CTX *libctx, const char *scheme, const char *properties);
typedef int (*ossl_OSSL_STORE_LOADER_up_ref_t)(ossl_OSSL_STORE_LOADER *loader);
typedef void (*ossl_OSSL_STORE_LOADER_free_t)(ossl_OSSL_STORE_LOADER *loader);
typedef const ossl_OSSL_PROVIDER * (*ossl_OSSL_STORE_LOADER_get0_provider_t)(const ossl_OSSL_STORE_LOADER *loader);
typedef const char * (*ossl_OSSL_STORE_LOADER_get0_properties_t)(const ossl_OSSL_STORE_LOADER *loader);
typedef const char * (*ossl_OSSL_STORE_LOADER_get0_description_t)(const ossl_OSSL_STORE_LOADER *loader);
typedef int (*ossl_OSSL_STORE_LOADER_is_a_t)(const ossl_OSSL_STORE_LOADER *loader, const char *scheme);
typedef void (*ossl_OSSL_STORE_LOADER_do_all_provided_t)(ossl_OSSL_LIB_CTX *libctx, void (*fn)(ossl_OSSL_STORE_LOADER *, void *), void *arg);
typedef int (*ossl_OSSL_STORE_LOADER_names_do_all_t)(const ossl_OSSL_STORE_LOADER *loader, void (*fn)(const char *, void *), void *data);
typedef ossl_OSSL_STORE_LOADER * (*ossl_OSSL_STORE_LOADER_new_t)(ossl_ENGINE *e, const char *scheme);
typedef int (*ossl_OSSL_STORE_LOADER_set_open_t)(ossl_OSSL_STORE_LOADER *loader, ossl_OSSL_STORE_open_fn open_function);
typedef int (*ossl_OSSL_STORE_LOADER_set_open_ex_t)(ossl_OSSL_STORE_LOADER *loader, ossl_OSSL_STORE_open_ex_fn open_ex_function);
typedef int (*ossl_OSSL_STORE_LOADER_set_attach_t)(ossl_OSSL_STORE_LOADER *loader, ossl_OSSL_STORE_attach_fn attach_function);
typedef int (*ossl_OSSL_STORE_LOADER_set_ctrl_t)(ossl_OSSL_STORE_LOADER *loader, ossl_OSSL_STORE_ctrl_fn ctrl_function);
typedef int (*ossl_OSSL_STORE_LOADER_set_expect_t)(ossl_OSSL_STORE_LOADER *loader, ossl_OSSL_STORE_expect_fn expect_function);
typedef int (*ossl_OSSL_STORE_LOADER_set_find_t)(ossl_OSSL_STORE_LOADER *loader, ossl_OSSL_STORE_find_fn find_function);
typedef int (*ossl_OSSL_STORE_LOADER_set_load_t)(ossl_OSSL_STORE_LOADER *loader, ossl_OSSL_STORE_load_fn load_function);
typedef int (*ossl_OSSL_STORE_LOADER_set_eof_t)(ossl_OSSL_STORE_LOADER *loader, ossl_OSSL_STORE_eof_fn eof_function);
typedef int (*ossl_OSSL_STORE_LOADER_set_error_t)(ossl_OSSL_STORE_LOADER *loader, ossl_OSSL_STORE_error_fn error_function);
typedef int (*ossl_OSSL_STORE_LOADER_set_close_t)(ossl_OSSL_STORE_LOADER *loader, ossl_OSSL_STORE_close_fn close_function);
typedef const ossl_ENGINE * (*ossl_OSSL_STORE_LOADER_get0_engine_t)(const ossl_OSSL_STORE_LOADER *loader);
typedef const char * (*ossl_OSSL_STORE_LOADER_get0_scheme_t)(const ossl_OSSL_STORE_LOADER *loader);
typedef int (*ossl_OSSL_STORE_register_loader_t)(ossl_OSSL_STORE_LOADER *loader);
typedef ossl_OSSL_STORE_LOADER * (*ossl_OSSL_STORE_unregister_loader_t)(const char *scheme);
typedef int (*ossl_OSSL_STORE_do_all_loaders_t)(void (*do_function)(const ossl_OSSL_STORE_LOADER *, void *), void *do_arg);
typedef ossl_TS_REQ * (*ossl_TS_REQ_new_t)();
typedef void (*ossl_TS_REQ_free_t)(ossl_TS_REQ *a);
typedef ossl_TS_REQ * (*ossl_d2i_TS_REQ_t)(ossl_TS_REQ **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_TS_REQ_t)(const ossl_TS_REQ *a, unsigned char **out);
typedef ossl_TS_REQ * (*ossl_TS_REQ_dup_t)(const ossl_TS_REQ *a);
typedef ossl_TS_REQ * (*ossl_d2i_TS_REQ_fp_t)(FILE *fp, ossl_TS_REQ **a);
typedef int (*ossl_i2d_TS_REQ_fp_t)(FILE *fp, const ossl_TS_REQ *a);
typedef ossl_TS_REQ * (*ossl_d2i_TS_REQ_bio_t)(ossl_BIO *fp, ossl_TS_REQ **a);
typedef int (*ossl_i2d_TS_REQ_bio_t)(ossl_BIO *fp, const ossl_TS_REQ *a);
typedef ossl_TS_MSG_IMPRINT * (*ossl_TS_MSG_IMPRINT_new_t)();
typedef void (*ossl_TS_MSG_IMPRINT_free_t)(ossl_TS_MSG_IMPRINT *a);
typedef ossl_TS_MSG_IMPRINT * (*ossl_d2i_TS_MSG_IMPRINT_t)(ossl_TS_MSG_IMPRINT **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_TS_MSG_IMPRINT_t)(const ossl_TS_MSG_IMPRINT *a, unsigned char **out);
typedef ossl_TS_MSG_IMPRINT * (*ossl_TS_MSG_IMPRINT_dup_t)(const ossl_TS_MSG_IMPRINT *a);
typedef ossl_TS_MSG_IMPRINT * (*ossl_d2i_TS_MSG_IMPRINT_fp_t)(FILE *fp, ossl_TS_MSG_IMPRINT **a);
typedef int (*ossl_i2d_TS_MSG_IMPRINT_fp_t)(FILE *fp, const ossl_TS_MSG_IMPRINT *a);
typedef ossl_TS_MSG_IMPRINT * (*ossl_d2i_TS_MSG_IMPRINT_bio_t)(ossl_BIO *bio, ossl_TS_MSG_IMPRINT **a);
typedef int (*ossl_i2d_TS_MSG_IMPRINT_bio_t)(ossl_BIO *bio, const ossl_TS_MSG_IMPRINT *a);
typedef ossl_TS_RESP * (*ossl_TS_RESP_new_t)();
typedef void (*ossl_TS_RESP_free_t)(ossl_TS_RESP *a);
typedef ossl_TS_RESP * (*ossl_d2i_TS_RESP_t)(ossl_TS_RESP **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_TS_RESP_t)(const ossl_TS_RESP *a, unsigned char **out);
typedef ossl_TS_RESP * (*ossl_TS_RESP_dup_t)(const ossl_TS_RESP *a);
typedef ossl_TS_RESP * (*ossl_d2i_TS_RESP_fp_t)(FILE *fp, ossl_TS_RESP **a);
typedef int (*ossl_i2d_TS_RESP_fp_t)(FILE *fp, const ossl_TS_RESP *a);
typedef ossl_TS_RESP * (*ossl_d2i_TS_RESP_bio_t)(ossl_BIO *bio, ossl_TS_RESP **a);
typedef int (*ossl_i2d_TS_RESP_bio_t)(ossl_BIO *bio, const ossl_TS_RESP *a);
typedef ossl_TS_STATUS_INFO * (*ossl_TS_STATUS_INFO_new_t)();
typedef void (*ossl_TS_STATUS_INFO_free_t)(ossl_TS_STATUS_INFO *a);
typedef ossl_TS_STATUS_INFO * (*ossl_d2i_TS_STATUS_INFO_t)(ossl_TS_STATUS_INFO **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_TS_STATUS_INFO_t)(const ossl_TS_STATUS_INFO *a, unsigned char **out);
typedef ossl_TS_STATUS_INFO * (*ossl_TS_STATUS_INFO_dup_t)(const ossl_TS_STATUS_INFO *a);
typedef ossl_TS_TST_INFO * (*ossl_TS_TST_INFO_new_t)();
typedef void (*ossl_TS_TST_INFO_free_t)(ossl_TS_TST_INFO *a);
typedef ossl_TS_TST_INFO * (*ossl_d2i_TS_TST_INFO_t)(ossl_TS_TST_INFO **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_TS_TST_INFO_t)(const ossl_TS_TST_INFO *a, unsigned char **out);
typedef ossl_TS_TST_INFO * (*ossl_TS_TST_INFO_dup_t)(const ossl_TS_TST_INFO *a);
typedef ossl_TS_TST_INFO * (*ossl_PKCS7_to_TS_TST_INFO_t)(ossl_PKCS7 *token);
typedef ossl_TS_TST_INFO * (*ossl_d2i_TS_TST_INFO_fp_t)(FILE *fp, ossl_TS_TST_INFO **a);
typedef int (*ossl_i2d_TS_TST_INFO_fp_t)(FILE *fp, const ossl_TS_TST_INFO *a);
typedef ossl_TS_TST_INFO * (*ossl_d2i_TS_TST_INFO_bio_t)(ossl_BIO *bio, ossl_TS_TST_INFO **a);
typedef int (*ossl_i2d_TS_TST_INFO_bio_t)(ossl_BIO *bio, const ossl_TS_TST_INFO *a);
typedef ossl_TS_ACCURACY * (*ossl_TS_ACCURACY_new_t)();
typedef void (*ossl_TS_ACCURACY_free_t)(ossl_TS_ACCURACY *a);
typedef ossl_TS_ACCURACY * (*ossl_d2i_TS_ACCURACY_t)(ossl_TS_ACCURACY **a, const unsigned char **in, long len);
typedef int (*ossl_i2d_TS_ACCURACY_t)(const ossl_TS_ACCURACY *a, unsigned char **out);
typedef ossl_TS_ACCURACY * (*ossl_TS_ACCURACY_dup_t)(const ossl_TS_ACCURACY *a);
typedef int (*ossl_TS_REQ_set_version_t)(ossl_TS_REQ *a, long version);
typedef long (*ossl_TS_REQ_get_version_t)(const ossl_TS_REQ *a);
typedef int (*ossl_TS_STATUS_INFO_set_status_t)(ossl_TS_STATUS_INFO *a, int i);
typedef const ossl_ASN1_INTEGER * (*ossl_TS_STATUS_INFO_get0_status_t)(const ossl_TS_STATUS_INFO *a);
typedef const ossl_STACK_OF(ossl_ASN1_UTF8STRING) * (*ossl_TS_STATUS_INFO_get0_text_t)(const ossl_TS_STATUS_INFO *a);
typedef const ossl_ASN1_BIT_STRING * (*ossl_TS_STATUS_INFO_get0_failure_info_t)(const ossl_TS_STATUS_INFO *a);
typedef int (*ossl_TS_REQ_set_msg_imprint_t)(ossl_TS_REQ *a, ossl_TS_MSG_IMPRINT *msg_imprint);
typedef ossl_TS_MSG_IMPRINT * (*ossl_TS_REQ_get_msg_imprint_t)(ossl_TS_REQ *a);
typedef int (*ossl_TS_MSG_IMPRINT_set_algo_t)(ossl_TS_MSG_IMPRINT *a, ossl_X509_ALGOR *alg);
typedef ossl_X509_ALGOR * (*ossl_TS_MSG_IMPRINT_get_algo_t)(ossl_TS_MSG_IMPRINT *a);
typedef int (*ossl_TS_MSG_IMPRINT_set_msg_t)(ossl_TS_MSG_IMPRINT *a, unsigned char *d, int len);
typedef ossl_ASN1_OCTET_STRING * (*ossl_TS_MSG_IMPRINT_get_msg_t)(ossl_TS_MSG_IMPRINT *a);
typedef int (*ossl_TS_REQ_set_policy_id_t)(ossl_TS_REQ *a, const ossl_ASN1_OBJECT *policy);
typedef ossl_ASN1_OBJECT * (*ossl_TS_REQ_get_policy_id_t)(ossl_TS_REQ *a);
typedef int (*ossl_TS_REQ_set_nonce_t)(ossl_TS_REQ *a, const ossl_ASN1_INTEGER *nonce);
typedef const ossl_ASN1_INTEGER * (*ossl_TS_REQ_get_nonce_t)(const ossl_TS_REQ *a);
typedef int (*ossl_TS_REQ_set_cert_req_t)(ossl_TS_REQ *a, int cert_req);
typedef int (*ossl_TS_REQ_get_cert_req_t)(const ossl_TS_REQ *a);
typedef ossl_STACK_OF(ossl_X509_EXTENSION) * (*ossl_TS_REQ_get_exts_t)(ossl_TS_REQ *a);
typedef void (*ossl_TS_REQ_ext_free_t)(ossl_TS_REQ *a);
typedef int (*ossl_TS_REQ_get_ext_count_t)(ossl_TS_REQ *a);
typedef int (*ossl_TS_REQ_get_ext_by_NID_t)(ossl_TS_REQ *a, int nid, int lastpos);
typedef int (*ossl_TS_REQ_get_ext_by_OBJ_t)(ossl_TS_REQ *a, const ossl_ASN1_OBJECT *obj, int lastpos);
typedef int (*ossl_TS_REQ_get_ext_by_critical_t)(ossl_TS_REQ *a, int crit, int lastpos);
typedef ossl_X509_EXTENSION * (*ossl_TS_REQ_get_ext_t)(ossl_TS_REQ *a, int loc);
typedef ossl_X509_EXTENSION * (*ossl_TS_REQ_delete_ext_t)(ossl_TS_REQ *a, int loc);
typedef int (*ossl_TS_REQ_add_ext_t)(ossl_TS_REQ *a, ossl_X509_EXTENSION *ex, int loc);
typedef void * (*ossl_TS_REQ_get_ext_d2i_t)(ossl_TS_REQ *a, int nid, int *crit, int *idx);
typedef int (*ossl_TS_REQ_print_bio_t)(ossl_BIO *bio, ossl_TS_REQ *a);
typedef int (*ossl_TS_RESP_set_status_info_t)(ossl_TS_RESP *a, ossl_TS_STATUS_INFO *info);
typedef ossl_TS_STATUS_INFO * (*ossl_TS_RESP_get_status_info_t)(ossl_TS_RESP *a);
typedef void (*ossl_TS_RESP_set_tst_info_t)(ossl_TS_RESP *a, ossl_PKCS7 *p7, ossl_TS_TST_INFO *tst_info);
typedef ossl_PKCS7 * (*ossl_TS_RESP_get_token_t)(ossl_TS_RESP *a);
typedef ossl_TS_TST_INFO * (*ossl_TS_RESP_get_tst_info_t)(ossl_TS_RESP *a);
typedef int (*ossl_TS_TST_INFO_set_version_t)(ossl_TS_TST_INFO *a, long version);
typedef long (*ossl_TS_TST_INFO_get_version_t)(const ossl_TS_TST_INFO *a);
typedef int (*ossl_TS_TST_INFO_set_policy_id_t)(ossl_TS_TST_INFO *a, ossl_ASN1_OBJECT *policy_id);
typedef ossl_ASN1_OBJECT * (*ossl_TS_TST_INFO_get_policy_id_t)(ossl_TS_TST_INFO *a);
typedef int (*ossl_TS_TST_INFO_set_msg_imprint_t)(ossl_TS_TST_INFO *a, ossl_TS_MSG_IMPRINT *msg_imprint);
typedef ossl_TS_MSG_IMPRINT * (*ossl_TS_TST_INFO_get_msg_imprint_t)(ossl_TS_TST_INFO *a);
typedef int (*ossl_TS_TST_INFO_set_serial_t)(ossl_TS_TST_INFO *a, const ossl_ASN1_INTEGER *serial);
typedef const ossl_ASN1_INTEGER * (*ossl_TS_TST_INFO_get_serial_t)(const ossl_TS_TST_INFO *a);
typedef int (*ossl_TS_TST_INFO_set_time_t)(ossl_TS_TST_INFO *a, const ossl_ASN1_GENERALIZEDTIME *gtime);
typedef const ossl_ASN1_GENERALIZEDTIME * (*ossl_TS_TST_INFO_get_time_t)(const ossl_TS_TST_INFO *a);
typedef int (*ossl_TS_TST_INFO_set_accuracy_t)(ossl_TS_TST_INFO *a, ossl_TS_ACCURACY *accuracy);
typedef ossl_TS_ACCURACY * (*ossl_TS_TST_INFO_get_accuracy_t)(ossl_TS_TST_INFO *a);
typedef int (*ossl_TS_ACCURACY_set_seconds_t)(ossl_TS_ACCURACY *a, const ossl_ASN1_INTEGER *seconds);
typedef const ossl_ASN1_INTEGER * (*ossl_TS_ACCURACY_get_seconds_t)(const ossl_TS_ACCURACY *a);
typedef int (*ossl_TS_ACCURACY_set_millis_t)(ossl_TS_ACCURACY *a, const ossl_ASN1_INTEGER *millis);
typedef const ossl_ASN1_INTEGER * (*ossl_TS_ACCURACY_get_millis_t)(const ossl_TS_ACCURACY *a);
typedef int (*ossl_TS_ACCURACY_set_micros_t)(ossl_TS_ACCURACY *a, const ossl_ASN1_INTEGER *micros);
typedef const ossl_ASN1_INTEGER * (*ossl_TS_ACCURACY_get_micros_t)(const ossl_TS_ACCURACY *a);
typedef int (*ossl_TS_TST_INFO_set_ordering_t)(ossl_TS_TST_INFO *a, int ordering);
typedef int (*ossl_TS_TST_INFO_get_ordering_t)(const ossl_TS_TST_INFO *a);
typedef int (*ossl_TS_TST_INFO_set_nonce_t)(ossl_TS_TST_INFO *a, const ossl_ASN1_INTEGER *nonce);
typedef const ossl_ASN1_INTEGER * (*ossl_TS_TST_INFO_get_nonce_t)(const ossl_TS_TST_INFO *a);
typedef int (*ossl_TS_TST_INFO_set_tsa_t)(ossl_TS_TST_INFO *a, ossl_GENERAL_NAME *tsa);
typedef ossl_GENERAL_NAME * (*ossl_TS_TST_INFO_get_tsa_t)(ossl_TS_TST_INFO *a);
typedef ossl_STACK_OF(ossl_X509_EXTENSION) * (*ossl_TS_TST_INFO_get_exts_t)(ossl_TS_TST_INFO *a);
typedef void (*ossl_TS_TST_INFO_ext_free_t)(ossl_TS_TST_INFO *a);
typedef int (*ossl_TS_TST_INFO_get_ext_count_t)(ossl_TS_TST_INFO *a);
typedef int (*ossl_TS_TST_INFO_get_ext_by_NID_t)(ossl_TS_TST_INFO *a, int nid, int lastpos);
typedef int (*ossl_TS_TST_INFO_get_ext_by_OBJ_t)(ossl_TS_TST_INFO *a, const ossl_ASN1_OBJECT *obj, int lastpos);
typedef int (*ossl_TS_TST_INFO_get_ext_by_critical_t)(ossl_TS_TST_INFO *a, int crit, int lastpos);
typedef ossl_X509_EXTENSION * (*ossl_TS_TST_INFO_get_ext_t)(ossl_TS_TST_INFO *a, int loc);
typedef ossl_X509_EXTENSION * (*ossl_TS_TST_INFO_delete_ext_t)(ossl_TS_TST_INFO *a, int loc);
typedef int (*ossl_TS_TST_INFO_add_ext_t)(ossl_TS_TST_INFO *a, ossl_X509_EXTENSION *ex, int loc);
typedef void * (*ossl_TS_TST_INFO_get_ext_d2i_t)(ossl_TS_TST_INFO *a, int nid, int *crit, int *idx);
typedef ossl_TS_RESP_CTX * (*ossl_TS_RESP_CTX_new_t)();
typedef ossl_TS_RESP_CTX * (*ossl_TS_RESP_CTX_new_ex_t)(ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef void (*ossl_TS_RESP_CTX_free_t)(ossl_TS_RESP_CTX *ctx);
typedef int (*ossl_TS_RESP_CTX_set_signer_cert_t)(ossl_TS_RESP_CTX *ctx, ossl_X509 *signer);
typedef int (*ossl_TS_RESP_CTX_set_signer_key_t)(ossl_TS_RESP_CTX *ctx, ossl_EVP_PKEY *key);
typedef int (*ossl_TS_RESP_CTX_set_signer_digest_t)(ossl_TS_RESP_CTX *ctx, const ossl_EVP_MD *signer_digest);
typedef int (*ossl_TS_RESP_CTX_set_ess_cert_id_digest_t)(ossl_TS_RESP_CTX *ctx, const ossl_EVP_MD *md);
typedef int (*ossl_TS_RESP_CTX_set_def_policy_t)(ossl_TS_RESP_CTX *ctx, const ossl_ASN1_OBJECT *def_policy);
typedef int (*ossl_TS_RESP_CTX_set_certs_t)(ossl_TS_RESP_CTX *ctx, ossl_STACK_OF(ossl_X509) *certs);
typedef int (*ossl_TS_RESP_CTX_add_policy_t)(ossl_TS_RESP_CTX *ctx, const ossl_ASN1_OBJECT *policy);
typedef int (*ossl_TS_RESP_CTX_add_md_t)(ossl_TS_RESP_CTX *ctx, const ossl_EVP_MD *md);
typedef int (*ossl_TS_RESP_CTX_set_accuracy_t)(ossl_TS_RESP_CTX *ctx, int secs, int millis, int micros);
typedef int (*ossl_TS_RESP_CTX_set_clock_precision_digits_t)(ossl_TS_RESP_CTX *ctx, unsigned int clock_precision_digits);
typedef void (*ossl_TS_RESP_CTX_add_flags_t)(ossl_TS_RESP_CTX *ctx, int flags);
typedef void (*ossl_TS_RESP_CTX_set_serial_cb_t)(ossl_TS_RESP_CTX *ctx, ossl_TS_serial_cb cb, void *data);
typedef void (*ossl_TS_RESP_CTX_set_time_cb_t)(ossl_TS_RESP_CTX *ctx, ossl_TS_time_cb cb, void *data);
typedef void (*ossl_TS_RESP_CTX_set_extension_cb_t)(ossl_TS_RESP_CTX *ctx, ossl_TS_extension_cb cb, void *data);
typedef int (*ossl_TS_RESP_CTX_set_status_info_t)(ossl_TS_RESP_CTX *ctx, int status, const char *text);
typedef int (*ossl_TS_RESP_CTX_set_status_info_cond_t)(ossl_TS_RESP_CTX *ctx, int status, const char *text);
typedef int (*ossl_TS_RESP_CTX_add_failure_info_t)(ossl_TS_RESP_CTX *ctx, int failure);
typedef ossl_TS_REQ * (*ossl_TS_RESP_CTX_get_request_t)(ossl_TS_RESP_CTX *ctx);
typedef ossl_TS_TST_INFO * (*ossl_TS_RESP_CTX_get_tst_info_t)(ossl_TS_RESP_CTX *ctx);
typedef ossl_TS_RESP * (*ossl_TS_RESP_create_response_t)(ossl_TS_RESP_CTX *ctx, ossl_BIO *req_bio);
typedef int (*ossl_TS_RESP_verify_signature_t)(ossl_PKCS7 *token, ossl_STACK_OF(ossl_X509) *certs, ossl_X509_STORE *store, ossl_X509 **signer_out);
typedef int (*ossl_TS_RESP_verify_response_t)(ossl_TS_VERIFY_CTX *ctx, ossl_TS_RESP *response);
typedef int (*ossl_TS_RESP_verify_token_t)(ossl_TS_VERIFY_CTX *ctx, ossl_PKCS7 *token);
typedef ossl_TS_VERIFY_CTX * (*ossl_TS_VERIFY_CTX_new_t)();
typedef void (*ossl_TS_VERIFY_CTX_init_t)(ossl_TS_VERIFY_CTX *ctx);
typedef void (*ossl_TS_VERIFY_CTX_free_t)(ossl_TS_VERIFY_CTX *ctx);
typedef void (*ossl_TS_VERIFY_CTX_cleanup_t)(ossl_TS_VERIFY_CTX *ctx);
typedef int (*ossl_TS_VERIFY_CTX_set_flags_t)(ossl_TS_VERIFY_CTX *ctx, int f);
typedef int (*ossl_TS_VERIFY_CTX_add_flags_t)(ossl_TS_VERIFY_CTX *ctx, int f);
typedef ossl_BIO * (*ossl_TS_VERIFY_CTX_set_data_t)(ossl_TS_VERIFY_CTX *ctx, ossl_BIO *b);
typedef unsigned char * (*ossl_TS_VERIFY_CTX_set_imprint_t)(ossl_TS_VERIFY_CTX *ctx, unsigned char *hexstr, long len);
typedef ossl_X509_STORE * (*ossl_TS_VERIFY_CTX_set_store_t)(ossl_TS_VERIFY_CTX *ctx, ossl_X509_STORE *s);
typedef ossl_STACK_OF(ossl_X509) * (*ossl_TS_VERIFY_CTX_set_certs_t)(ossl_TS_VERIFY_CTX *ctx, ossl_STACK_OF(ossl_X509) *certs);
typedef ossl_TS_VERIFY_CTX * (*ossl_TS_REQ_to_TS_VERIFY_CTX_t)(ossl_TS_REQ *req, ossl_TS_VERIFY_CTX *ctx);
typedef int (*ossl_TS_RESP_print_bio_t)(ossl_BIO *bio, ossl_TS_RESP *a);
typedef int (*ossl_TS_STATUS_INFO_print_bio_t)(ossl_BIO *bio, ossl_TS_STATUS_INFO *a);
typedef int (*ossl_TS_TST_INFO_print_bio_t)(ossl_BIO *bio, ossl_TS_TST_INFO *a);
typedef int (*ossl_TS_ASN1_INTEGER_print_bio_t)(ossl_BIO *bio, const ossl_ASN1_INTEGER *num);
typedef int (*ossl_TS_OBJ_print_bio_t)(ossl_BIO *bio, const ossl_ASN1_OBJECT *obj);
typedef int (*ossl_TS_ext_print_bio_t)(ossl_BIO *bio, const ossl_STACK_OF(ossl_X509_EXTENSION) *extensions);
typedef int (*ossl_TS_X509_ALGOR_print_bio_t)(ossl_BIO *bio, const ossl_X509_ALGOR *alg);
typedef int (*ossl_TS_MSG_IMPRINT_print_bio_t)(ossl_BIO *bio, ossl_TS_MSG_IMPRINT *msg);
typedef ossl_X509 * (*ossl_TS_CONF_load_cert_t)(const char *file);
typedef ossl_STACK_OF(ossl_X509) * (*ossl_TS_CONF_load_certs_t)(const char *file);
typedef ossl_EVP_PKEY * (*ossl_TS_CONF_load_key_t)(const char *file, const char *pass);
typedef const char * (*ossl_TS_CONF_get_tsa_section_t)(ossl_CONF *conf, const char *section);
typedef int (*ossl_TS_CONF_set_serial_t)(ossl_CONF *conf, const char *section, ossl_TS_serial_cb cb, ossl_TS_RESP_CTX *ctx);
typedef int (*ossl_TS_CONF_set_crypto_device_t)(ossl_CONF *conf, const char *section, const char *device);
typedef int (*ossl_TS_CONF_set_default_engine_t)(const char *name);
typedef int (*ossl_TS_CONF_set_signer_cert_t)(ossl_CONF *conf, const char *section, const char *cert, ossl_TS_RESP_CTX *ctx);
typedef int (*ossl_TS_CONF_set_certs_t)(ossl_CONF *conf, const char *section, const char *certs, ossl_TS_RESP_CTX *ctx);
typedef int (*ossl_TS_CONF_set_signer_key_t)(ossl_CONF *conf, const char *section, const char *key, const char *pass, ossl_TS_RESP_CTX *ctx);
typedef int (*ossl_TS_CONF_set_signer_digest_t)(ossl_CONF *conf, const char *section, const char *md, ossl_TS_RESP_CTX *ctx);
typedef int (*ossl_TS_CONF_set_def_policy_t)(ossl_CONF *conf, const char *section, const char *policy, ossl_TS_RESP_CTX *ctx);
typedef int (*ossl_TS_CONF_set_policies_t)(ossl_CONF *conf, const char *section, ossl_TS_RESP_CTX *ctx);
typedef int (*ossl_TS_CONF_set_digests_t)(ossl_CONF *conf, const char *section, ossl_TS_RESP_CTX *ctx);
typedef int (*ossl_TS_CONF_set_accuracy_t)(ossl_CONF *conf, const char *section, ossl_TS_RESP_CTX *ctx);
typedef int (*ossl_TS_CONF_set_clock_precision_digits_t)(const ossl_CONF *conf, const char *section, ossl_TS_RESP_CTX *ctx);
typedef int (*ossl_TS_CONF_set_ordering_t)(ossl_CONF *conf, const char *section, ossl_TS_RESP_CTX *ctx);
typedef int (*ossl_TS_CONF_set_tsa_name_t)(ossl_CONF *conf, const char *section, ossl_TS_RESP_CTX *ctx);
typedef int (*ossl_TS_CONF_set_ess_cert_id_chain_t)(ossl_CONF *conf, const char *section, ossl_TS_RESP_CTX *ctx);
typedef int (*ossl_TS_CONF_set_ess_cert_id_digest_t)(ossl_CONF *conf, const char *section, ossl_TS_RESP_CTX *ctx);
typedef ossl_TXT_DB * (*ossl_TXT_DB_read_t)(ossl_BIO *in, int num);
typedef long (*ossl_TXT_DB_write_t)(ossl_BIO *out, ossl_TXT_DB *db);
typedef int (*ossl_TXT_DB_create_index_t)(ossl_TXT_DB *db, int field, int (*qual)(ossl_OPENSSL_STRING *), ossl_OPENSSL_LH_HASHFUNC hash, ossl_OPENSSL_LH_COMPFUNC cmp);
typedef void (*ossl_TXT_DB_free_t)(ossl_TXT_DB *db);
typedef ossl_OPENSSL_STRING * (*ossl_TXT_DB_get_by_index_t)(ossl_TXT_DB *db, int idx, ossl_OPENSSL_STRING *value);
typedef int (*ossl_TXT_DB_insert_t)(ossl_TXT_DB *db, ossl_OPENSSL_STRING *value);
typedef int (*ossl_WHIRLPOOL_Init_t)(ossl_WHIRLPOOL_CTX *c);
typedef int (*ossl_WHIRLPOOL_Update_t)(ossl_WHIRLPOOL_CTX *c, const void *inp, size_t bytes);
typedef void (*ossl_WHIRLPOOL_BitUpdate_t)(ossl_WHIRLPOOL_CTX *c, const void *inp, size_t bits);
typedef int (*ossl_WHIRLPOOL_Final_t)(unsigned char *md, ossl_WHIRLPOOL_CTX *c);
typedef unsigned char * (*ossl_WHIRLPOOL_t)(const void *inp, size_t bytes, unsigned char *md);

struct ossl_functions {
  ossl_AES_options_t ossl_AES_options;
  ossl_AES_set_encrypt_key_t ossl_AES_set_encrypt_key;
  ossl_AES_set_decrypt_key_t ossl_AES_set_decrypt_key;
  ossl_AES_encrypt_t ossl_AES_encrypt;
  ossl_AES_decrypt_t ossl_AES_decrypt;
  ossl_AES_ecb_encrypt_t ossl_AES_ecb_encrypt;
  ossl_AES_cbc_encrypt_t ossl_AES_cbc_encrypt;
  ossl_AES_cfb128_encrypt_t ossl_AES_cfb128_encrypt;
  ossl_AES_cfb1_encrypt_t ossl_AES_cfb1_encrypt;
  ossl_AES_cfb8_encrypt_t ossl_AES_cfb8_encrypt;
  ossl_AES_ofb128_encrypt_t ossl_AES_ofb128_encrypt;
  ossl_AES_ige_encrypt_t ossl_AES_ige_encrypt;
  ossl_AES_bi_ige_encrypt_t ossl_AES_bi_ige_encrypt;
  ossl_AES_wrap_key_t ossl_AES_wrap_key;
  ossl_AES_unwrap_key_t ossl_AES_unwrap_key;
  ossl_OPENSSL_sk_num_t ossl_OPENSSL_sk_num;
  ossl_OPENSSL_sk_value_t ossl_OPENSSL_sk_value;
  ossl_OPENSSL_sk_set_t ossl_OPENSSL_sk_set;
  ossl_OPENSSL_sk_new_t ossl_OPENSSL_sk_new;
  ossl_OPENSSL_sk_new_null_t ossl_OPENSSL_sk_new_null;
  ossl_OPENSSL_sk_new_reserve_t ossl_OPENSSL_sk_new_reserve;
  ossl_OPENSSL_sk_reserve_t ossl_OPENSSL_sk_reserve;
  ossl_OPENSSL_sk_free_t ossl_OPENSSL_sk_free;
  ossl_OPENSSL_sk_pop_free_t ossl_OPENSSL_sk_pop_free;
  ossl_OPENSSL_sk_deep_copy_t ossl_OPENSSL_sk_deep_copy;
  ossl_OPENSSL_sk_insert_t ossl_OPENSSL_sk_insert;
  ossl_OPENSSL_sk_delete_t ossl_OPENSSL_sk_delete;
  ossl_OPENSSL_sk_delete_ptr_t ossl_OPENSSL_sk_delete_ptr;
  ossl_OPENSSL_sk_find_t ossl_OPENSSL_sk_find;
  ossl_OPENSSL_sk_find_ex_t ossl_OPENSSL_sk_find_ex;
  ossl_OPENSSL_sk_find_all_t ossl_OPENSSL_sk_find_all;
  ossl_OPENSSL_sk_push_t ossl_OPENSSL_sk_push;
  ossl_OPENSSL_sk_unshift_t ossl_OPENSSL_sk_unshift;
  ossl_OPENSSL_sk_shift_t ossl_OPENSSL_sk_shift;
  ossl_OPENSSL_sk_pop_t ossl_OPENSSL_sk_pop;
  ossl_OPENSSL_sk_zero_t ossl_OPENSSL_sk_zero;
  ossl_OPENSSL_sk_set_cmp_func_t ossl_OPENSSL_sk_set_cmp_func;
  ossl_OPENSSL_sk_dup_t ossl_OPENSSL_sk_dup;
  ossl_OPENSSL_sk_sort_t ossl_OPENSSL_sk_sort;
  ossl_OPENSSL_sk_is_sorted_t ossl_OPENSSL_sk_is_sorted;
  ossl_ERR_load_ASN1_strings_t ossl_ERR_load_ASN1_strings;
  ossl_ERR_load_ASYNC_strings_t ossl_ERR_load_ASYNC_strings;
  ossl_ERR_load_BIO_strings_t ossl_ERR_load_BIO_strings;
  ossl_ERR_load_BN_strings_t ossl_ERR_load_BN_strings;
  ossl_ERR_load_BUF_strings_t ossl_ERR_load_BUF_strings;
  ossl_ERR_load_CMS_strings_t ossl_ERR_load_CMS_strings;
  ossl_ERR_load_COMP_strings_t ossl_ERR_load_COMP_strings;
  ossl_ERR_load_CONF_strings_t ossl_ERR_load_CONF_strings;
  ossl_ERR_load_CRYPTO_strings_t ossl_ERR_load_CRYPTO_strings;
  ossl_ERR_load_CT_strings_t ossl_ERR_load_CT_strings;
  ossl_ERR_load_DH_strings_t ossl_ERR_load_DH_strings;
  ossl_ERR_load_DSA_strings_t ossl_ERR_load_DSA_strings;
  ossl_ERR_load_EC_strings_t ossl_ERR_load_EC_strings;
  ossl_ERR_load_ENGINE_strings_t ossl_ERR_load_ENGINE_strings;
  ossl_ERR_load_ERR_strings_t ossl_ERR_load_ERR_strings;
  ossl_ERR_load_EVP_strings_t ossl_ERR_load_EVP_strings;
  ossl_ERR_load_KDF_strings_t ossl_ERR_load_KDF_strings;
  ossl_ERR_load_OBJ_strings_t ossl_ERR_load_OBJ_strings;
  ossl_ERR_load_OCSP_strings_t ossl_ERR_load_OCSP_strings;
  ossl_ERR_load_PEM_strings_t ossl_ERR_load_PEM_strings;
  ossl_ERR_load_PKCS12_strings_t ossl_ERR_load_PKCS12_strings;
  ossl_ERR_load_PKCS7_strings_t ossl_ERR_load_PKCS7_strings;
  ossl_ERR_load_RAND_strings_t ossl_ERR_load_RAND_strings;
  ossl_ERR_load_RSA_strings_t ossl_ERR_load_RSA_strings;
  ossl_ERR_load_OSSL_STORE_strings_t ossl_ERR_load_OSSL_STORE_strings;
  ossl_ERR_load_TS_strings_t ossl_ERR_load_TS_strings;
  ossl_ERR_load_UI_strings_t ossl_ERR_load_UI_strings;
  ossl_ERR_load_X509_strings_t ossl_ERR_load_X509_strings;
  ossl_ERR_load_X509V3_strings_t ossl_ERR_load_X509V3_strings;
  ossl_OSSL_provider_init_t ossl_OSSL_provider_init;
  ossl_CRYPTO_THREAD_lock_new_t ossl_CRYPTO_THREAD_lock_new;
  ossl_CRYPTO_THREAD_read_lock_t ossl_CRYPTO_THREAD_read_lock;
  ossl_CRYPTO_THREAD_write_lock_t ossl_CRYPTO_THREAD_write_lock;
  ossl_CRYPTO_THREAD_unlock_t ossl_CRYPTO_THREAD_unlock;
  ossl_CRYPTO_THREAD_lock_free_t ossl_CRYPTO_THREAD_lock_free;
  ossl_CRYPTO_atomic_add_t ossl_CRYPTO_atomic_add;
  ossl_CRYPTO_atomic_or_t ossl_CRYPTO_atomic_or;
  ossl_CRYPTO_atomic_load_t ossl_CRYPTO_atomic_load;
  ossl_OPENSSL_strlcpy_t ossl_OPENSSL_strlcpy;
  ossl_OPENSSL_strlcat_t ossl_OPENSSL_strlcat;
  ossl_OPENSSL_strnlen_t ossl_OPENSSL_strnlen;
  ossl_OPENSSL_buf2hexstr_ex_t ossl_OPENSSL_buf2hexstr_ex;
  ossl_OPENSSL_buf2hexstr_t ossl_OPENSSL_buf2hexstr;
  ossl_OPENSSL_hexstr2buf_ex_t ossl_OPENSSL_hexstr2buf_ex;
  ossl_OPENSSL_hexstr2buf_t ossl_OPENSSL_hexstr2buf;
  ossl_OPENSSL_hexchar2int_t ossl_OPENSSL_hexchar2int;
  ossl_OPENSSL_strcasecmp_t ossl_OPENSSL_strcasecmp;
  ossl_OPENSSL_strncasecmp_t ossl_OPENSSL_strncasecmp;
  ossl_OPENSSL_version_major_t ossl_OPENSSL_version_major;
  ossl_OPENSSL_version_minor_t ossl_OPENSSL_version_minor;
  ossl_OPENSSL_version_patch_t ossl_OPENSSL_version_patch;
  ossl_OPENSSL_version_pre_release_t ossl_OPENSSL_version_pre_release;
  ossl_OPENSSL_version_build_metadata_t ossl_OPENSSL_version_build_metadata;
  ossl_OpenSSL_version_num_t ossl_OpenSSL_version_num;
  ossl_OpenSSL_version_t ossl_OpenSSL_version;
  ossl_OPENSSL_info_t ossl_OPENSSL_info;
  ossl_OPENSSL_issetugid_t ossl_OPENSSL_issetugid;
  ossl_CRYPTO_get_ex_new_index_t ossl_CRYPTO_get_ex_new_index;
  ossl_CRYPTO_free_ex_index_t ossl_CRYPTO_free_ex_index;
  ossl_CRYPTO_new_ex_data_t ossl_CRYPTO_new_ex_data;
  ossl_CRYPTO_dup_ex_data_t ossl_CRYPTO_dup_ex_data;
  ossl_CRYPTO_free_ex_data_t ossl_CRYPTO_free_ex_data;
  ossl_CRYPTO_alloc_ex_data_t ossl_CRYPTO_alloc_ex_data;
  ossl_CRYPTO_set_ex_data_t ossl_CRYPTO_set_ex_data;
  ossl_CRYPTO_get_ex_data_t ossl_CRYPTO_get_ex_data;
  ossl_CRYPTO_set_mem_functions_t ossl_CRYPTO_set_mem_functions;
  ossl_CRYPTO_get_mem_functions_t ossl_CRYPTO_get_mem_functions;
  ossl_CRYPTO_malloc_t ossl_CRYPTO_malloc;
  ossl_CRYPTO_zalloc_t ossl_CRYPTO_zalloc;
  ossl_CRYPTO_memdup_t ossl_CRYPTO_memdup;
  ossl_CRYPTO_strdup_t ossl_CRYPTO_strdup;
  ossl_CRYPTO_strndup_t ossl_CRYPTO_strndup;
  ossl_CRYPTO_free_t ossl_CRYPTO_free;
  ossl_CRYPTO_clear_free_t ossl_CRYPTO_clear_free;
  ossl_CRYPTO_realloc_t ossl_CRYPTO_realloc;
  ossl_CRYPTO_clear_realloc_t ossl_CRYPTO_clear_realloc;
  ossl_CRYPTO_secure_malloc_init_t ossl_CRYPTO_secure_malloc_init;
  ossl_CRYPTO_secure_malloc_done_t ossl_CRYPTO_secure_malloc_done;
  ossl_CRYPTO_secure_malloc_t ossl_CRYPTO_secure_malloc;
  ossl_CRYPTO_secure_zalloc_t ossl_CRYPTO_secure_zalloc;
  ossl_CRYPTO_secure_free_t ossl_CRYPTO_secure_free;
  ossl_CRYPTO_secure_clear_free_t ossl_CRYPTO_secure_clear_free;
  ossl_CRYPTO_secure_allocated_t ossl_CRYPTO_secure_allocated;
  ossl_CRYPTO_secure_malloc_initialized_t ossl_CRYPTO_secure_malloc_initialized;
  ossl_CRYPTO_secure_actual_size_t ossl_CRYPTO_secure_actual_size;
  ossl_CRYPTO_secure_used_t ossl_CRYPTO_secure_used;
  ossl_OPENSSL_cleanse_t ossl_OPENSSL_cleanse;
  ossl_ossl_noreturn ossl_OPENSSL_die_t ossl_OPENSSL_die;
  ossl_OPENSSL_isservice_t ossl_OPENSSL_isservice;
  ossl_OPENSSL_init_t ossl_OPENSSL_init;
  ossl_OPENSSL_fork_prepare_t ossl_OPENSSL_fork_prepare;
  ossl_OPENSSL_fork_parent_t ossl_OPENSSL_fork_parent;
  ossl_OPENSSL_fork_child_t ossl_OPENSSL_fork_child;
  ossl_OPENSSL_gmtime_t ossl_OPENSSL_gmtime;
  ossl_OPENSSL_gmtime_adj_t ossl_OPENSSL_gmtime_adj;
  ossl_OPENSSL_gmtime_diff_t ossl_OPENSSL_gmtime_diff;
  ossl_CRYPTO_memcmp_t ossl_CRYPTO_memcmp;
  ossl_OPENSSL_cleanup_t ossl_OPENSSL_cleanup;
  ossl_OPENSSL_init_crypto_t ossl_OPENSSL_init_crypto;
  ossl_OPENSSL_atexit_t ossl_OPENSSL_atexit;
  ossl_OPENSSL_thread_stop_t ossl_OPENSSL_thread_stop;
  ossl_OPENSSL_thread_stop_ex_t ossl_OPENSSL_thread_stop_ex;
  ossl_OPENSSL_INIT_new_t ossl_OPENSSL_INIT_new;
  ossl_OPENSSL_INIT_set_config_filename_t ossl_OPENSSL_INIT_set_config_filename;
  ossl_OPENSSL_INIT_set_config_file_flags_t ossl_OPENSSL_INIT_set_config_file_flags;
  ossl_OPENSSL_INIT_set_config_appname_t ossl_OPENSSL_INIT_set_config_appname;
  ossl_OPENSSL_INIT_free_t ossl_OPENSSL_INIT_free;
  ossl_CRYPTO_THREAD_run_once_t ossl_CRYPTO_THREAD_run_once;
  ossl_CRYPTO_THREAD_init_local_t ossl_CRYPTO_THREAD_init_local;
  ossl_CRYPTO_THREAD_get_local_t ossl_CRYPTO_THREAD_get_local;
  ossl_CRYPTO_THREAD_set_local_t ossl_CRYPTO_THREAD_set_local;
  ossl_CRYPTO_THREAD_cleanup_local_t ossl_CRYPTO_THREAD_cleanup_local;
  ossl_CRYPTO_THREAD_get_current_id_t ossl_CRYPTO_THREAD_get_current_id;
  ossl_CRYPTO_THREAD_compare_id_t ossl_CRYPTO_THREAD_compare_id;
  ossl_OSSL_LIB_CTX_new_t ossl_OSSL_LIB_CTX_new;
  ossl_OSSL_LIB_CTX_new_from_dispatch_t ossl_OSSL_LIB_CTX_new_from_dispatch;
  ossl_OSSL_LIB_CTX_new_child_t ossl_OSSL_LIB_CTX_new_child;
  ossl_OSSL_LIB_CTX_load_config_t ossl_OSSL_LIB_CTX_load_config;
  ossl_OSSL_LIB_CTX_free_t ossl_OSSL_LIB_CTX_free;
  ossl_OSSL_LIB_CTX_get0_global_default_t ossl_OSSL_LIB_CTX_get0_global_default;
  ossl_OSSL_LIB_CTX_set0_default_t ossl_OSSL_LIB_CTX_set0_default;
  ossl_BIO_get_new_index_t ossl_BIO_get_new_index;
  ossl_BIO_set_flags_t ossl_BIO_set_flags;
  ossl_BIO_test_flags_t ossl_BIO_test_flags;
  ossl_BIO_clear_flags_t ossl_BIO_clear_flags;
  ossl_BIO_get_callback_t ossl_BIO_get_callback;
  ossl_BIO_set_callback_t ossl_BIO_set_callback;
  ossl_BIO_debug_callback_t ossl_BIO_debug_callback;
  ossl_BIO_get_callback_ex_t ossl_BIO_get_callback_ex;
  ossl_BIO_set_callback_ex_t ossl_BIO_set_callback_ex;
  ossl_BIO_debug_callback_ex_t ossl_BIO_debug_callback_ex;
  ossl_BIO_get_callback_arg_t ossl_BIO_get_callback_arg;
  ossl_BIO_set_callback_arg_t ossl_BIO_set_callback_arg;
  ossl_BIO_method_name_t ossl_BIO_method_name;
  ossl_BIO_method_type_t ossl_BIO_method_type;
  ossl_BIO_ctrl_pending_t ossl_BIO_ctrl_pending;
  ossl_BIO_ctrl_wpending_t ossl_BIO_ctrl_wpending;
  ossl_BIO_ctrl_get_write_guarantee_t ossl_BIO_ctrl_get_write_guarantee;
  ossl_BIO_ctrl_get_read_request_t ossl_BIO_ctrl_get_read_request;
  ossl_BIO_ctrl_reset_read_request_t ossl_BIO_ctrl_reset_read_request;
  ossl_BIO_set_ex_data_t ossl_BIO_set_ex_data;
  ossl_BIO_get_ex_data_t ossl_BIO_get_ex_data;
  ossl_BIO_number_read_t ossl_BIO_number_read;
  ossl_BIO_number_written_t ossl_BIO_number_written;
  ossl_BIO_asn1_set_prefix_t ossl_BIO_asn1_set_prefix;
  ossl_BIO_asn1_get_prefix_t ossl_BIO_asn1_get_prefix;
  ossl_BIO_asn1_set_suffix_t ossl_BIO_asn1_set_suffix;
  ossl_BIO_asn1_get_suffix_t ossl_BIO_asn1_get_suffix;
  ossl_BIO_s_file_t ossl_BIO_s_file;
  ossl_BIO_new_file_t ossl_BIO_new_file;
  ossl_BIO_new_from_core_bio_t ossl_BIO_new_from_core_bio;
  ossl_BIO_new_fp_t ossl_BIO_new_fp;
  ossl_BIO_new_ex_t ossl_BIO_new_ex;
  ossl_BIO_new_t ossl_BIO_new;
  ossl_BIO_free_t ossl_BIO_free;
  ossl_BIO_set_data_t ossl_BIO_set_data;
  ossl_BIO_get_data_t ossl_BIO_get_data;
  ossl_BIO_set_init_t ossl_BIO_set_init;
  ossl_BIO_get_init_t ossl_BIO_get_init;
  ossl_BIO_set_shutdown_t ossl_BIO_set_shutdown;
  ossl_BIO_get_shutdown_t ossl_BIO_get_shutdown;
  ossl_BIO_vfree_t ossl_BIO_vfree;
  ossl_BIO_up_ref_t ossl_BIO_up_ref;
  ossl_BIO_read_t ossl_BIO_read;
  ossl_BIO_read_ex_t ossl_BIO_read_ex;
  ossl_BIO_gets_t ossl_BIO_gets;
  ossl_BIO_get_line_t ossl_BIO_get_line;
  ossl_BIO_write_t ossl_BIO_write;
  ossl_BIO_write_ex_t ossl_BIO_write_ex;
  ossl_BIO_puts_t ossl_BIO_puts;
  ossl_BIO_indent_t ossl_BIO_indent;
  ossl_BIO_ctrl_t ossl_BIO_ctrl;
  ossl_BIO_callback_ctrl_t ossl_BIO_callback_ctrl;
  ossl_BIO_ptr_ctrl_t ossl_BIO_ptr_ctrl;
  ossl_BIO_int_ctrl_t ossl_BIO_int_ctrl;
  ossl_BIO_push_t ossl_BIO_push;
  ossl_BIO_pop_t ossl_BIO_pop;
  ossl_BIO_free_all_t ossl_BIO_free_all;
  ossl_BIO_find_type_t ossl_BIO_find_type;
  ossl_BIO_next_t ossl_BIO_next;
  ossl_BIO_set_next_t ossl_BIO_set_next;
  ossl_BIO_get_retry_BIO_t ossl_BIO_get_retry_BIO;
  ossl_BIO_get_retry_reason_t ossl_BIO_get_retry_reason;
  ossl_BIO_set_retry_reason_t ossl_BIO_set_retry_reason;
  ossl_BIO_dup_chain_t ossl_BIO_dup_chain;
  ossl_BIO_nread0_t ossl_BIO_nread0;
  ossl_BIO_nread_t ossl_BIO_nread;
  ossl_BIO_nwrite0_t ossl_BIO_nwrite0;
  ossl_BIO_nwrite_t ossl_BIO_nwrite;
  ossl_BIO_s_mem_t ossl_BIO_s_mem;
  ossl_BIO_s_secmem_t ossl_BIO_s_secmem;
  ossl_BIO_new_mem_buf_t ossl_BIO_new_mem_buf;
  ossl_BIO_s_socket_t ossl_BIO_s_socket;
  ossl_BIO_s_connect_t ossl_BIO_s_connect;
  ossl_BIO_s_accept_t ossl_BIO_s_accept;
  ossl_BIO_s_fd_t ossl_BIO_s_fd;
  ossl_BIO_s_log_t ossl_BIO_s_log;
  ossl_BIO_s_bio_t ossl_BIO_s_bio;
  ossl_BIO_s_null_t ossl_BIO_s_null;
  ossl_BIO_f_null_t ossl_BIO_f_null;
  ossl_BIO_f_buffer_t ossl_BIO_f_buffer;
  ossl_BIO_f_readbuffer_t ossl_BIO_f_readbuffer;
  ossl_BIO_f_linebuffer_t ossl_BIO_f_linebuffer;
  ossl_BIO_f_nbio_test_t ossl_BIO_f_nbio_test;
  ossl_BIO_f_prefix_t ossl_BIO_f_prefix;
  ossl_BIO_s_core_t ossl_BIO_s_core;
  ossl_BIO_s_datagram_t ossl_BIO_s_datagram;
  ossl_BIO_dgram_non_fatal_error_t ossl_BIO_dgram_non_fatal_error;
  ossl_BIO_new_dgram_t ossl_BIO_new_dgram;
  ossl_BIO_sock_should_retry_t ossl_BIO_sock_should_retry;
  ossl_BIO_sock_non_fatal_error_t ossl_BIO_sock_non_fatal_error;
  ossl_BIO_socket_wait_t ossl_BIO_socket_wait;
  ossl_BIO_wait_t ossl_BIO_wait;
  ossl_BIO_do_connect_retry_t ossl_BIO_do_connect_retry;
  ossl_BIO_fd_should_retry_t ossl_BIO_fd_should_retry;
  ossl_BIO_fd_non_fatal_error_t ossl_BIO_fd_non_fatal_error;
  ossl_BIO_dump_cb_t ossl_BIO_dump_cb;
  ossl_BIO_dump_indent_cb_t ossl_BIO_dump_indent_cb;
  ossl_BIO_dump_t ossl_BIO_dump;
  ossl_BIO_dump_indent_t ossl_BIO_dump_indent;
  ossl_BIO_dump_fp_t ossl_BIO_dump_fp;
  ossl_BIO_dump_indent_fp_t ossl_BIO_dump_indent_fp;
  ossl_BIO_hex_string_t ossl_BIO_hex_string;
  ossl_BIO_ADDR_new_t ossl_BIO_ADDR_new;
  ossl_BIO_ADDR_rawmake_t ossl_BIO_ADDR_rawmake;
  ossl_BIO_ADDR_free_t ossl_BIO_ADDR_free;
  ossl_BIO_ADDR_clear_t ossl_BIO_ADDR_clear;
  ossl_BIO_ADDR_family_t ossl_BIO_ADDR_family;
  ossl_BIO_ADDR_rawaddress_t ossl_BIO_ADDR_rawaddress;
  ossl_BIO_ADDR_rawport_t ossl_BIO_ADDR_rawport;
  ossl_BIO_ADDR_hostname_string_t ossl_BIO_ADDR_hostname_string;
  ossl_BIO_ADDR_service_string_t ossl_BIO_ADDR_service_string;
  ossl_BIO_ADDR_path_string_t ossl_BIO_ADDR_path_string;
  ossl_BIO_ADDRINFO_next_t ossl_BIO_ADDRINFO_next;
  ossl_BIO_ADDRINFO_family_t ossl_BIO_ADDRINFO_family;
  ossl_BIO_ADDRINFO_socktype_t ossl_BIO_ADDRINFO_socktype;
  ossl_BIO_ADDRINFO_protocol_t ossl_BIO_ADDRINFO_protocol;
  ossl_BIO_ADDRINFO_address_t ossl_BIO_ADDRINFO_address;
  ossl_BIO_ADDRINFO_free_t ossl_BIO_ADDRINFO_free;
  ossl_BIO_parse_hostserv_t ossl_BIO_parse_hostserv;
  ossl_BIO_lookup_t ossl_BIO_lookup;
  ossl_BIO_lookup_ex_t ossl_BIO_lookup_ex;
  ossl_BIO_sock_error_t ossl_BIO_sock_error;
  ossl_BIO_socket_ioctl_t ossl_BIO_socket_ioctl;
  ossl_BIO_socket_nbio_t ossl_BIO_socket_nbio;
  ossl_BIO_sock_init_t ossl_BIO_sock_init;
  ossl_BIO_set_tcp_ndelay_t ossl_BIO_set_tcp_ndelay;
  ossl_BIO_gethostbyname_t ossl_BIO_gethostbyname;
  ossl_BIO_get_port_t ossl_BIO_get_port;
  ossl_BIO_get_host_ip_t ossl_BIO_get_host_ip;
  ossl_BIO_get_accept_socket_t ossl_BIO_get_accept_socket;
  ossl_BIO_accept_t ossl_BIO_accept;
  ossl_BIO_sock_info_t ossl_BIO_sock_info;
  ossl_BIO_socket_t ossl_BIO_socket;
  ossl_BIO_connect_t ossl_BIO_connect;
  ossl_BIO_bind_t ossl_BIO_bind;
  ossl_BIO_listen_t ossl_BIO_listen;
  ossl_BIO_accept_ex_t ossl_BIO_accept_ex;
  ossl_BIO_closesocket_t ossl_BIO_closesocket;
  ossl_BIO_new_socket_t ossl_BIO_new_socket;
  ossl_BIO_new_connect_t ossl_BIO_new_connect;
  ossl_BIO_new_accept_t ossl_BIO_new_accept;
  ossl_BIO_new_fd_t ossl_BIO_new_fd;
  ossl_BIO_new_bio_pair_t ossl_BIO_new_bio_pair;
  ossl_BIO_copy_next_retry_t ossl_BIO_copy_next_retry;
  ossl_BIO_printf_t ossl_BIO_printf;
  ossl_BIO_vprintf_t ossl_BIO_vprintf;
  ossl_BIO_snprintf_t ossl_BIO_snprintf;
  ossl_BIO_vsnprintf_t ossl_BIO_vsnprintf;
  ossl_BIO_meth_new_t ossl_BIO_meth_new;
  ossl_BIO_meth_free_t ossl_BIO_meth_free;
  ossl_BIO_meth_get_write_t ossl_BIO_meth_get_write;
  ossl_BIO_meth_get_write_ex_t ossl_BIO_meth_get_write_ex;
  ossl_BIO_meth_set_write_t ossl_BIO_meth_set_write;
  ossl_BIO_meth_set_write_ex_t ossl_BIO_meth_set_write_ex;
  ossl_BIO_meth_get_read_t ossl_BIO_meth_get_read;
  ossl_BIO_meth_get_read_ex_t ossl_BIO_meth_get_read_ex;
  ossl_BIO_meth_set_read_t ossl_BIO_meth_set_read;
  ossl_BIO_meth_set_read_ex_t ossl_BIO_meth_set_read_ex;
  ossl_BIO_meth_get_puts_t ossl_BIO_meth_get_puts;
  ossl_BIO_meth_set_puts_t ossl_BIO_meth_set_puts;
  ossl_BIO_meth_get_gets_t ossl_BIO_meth_get_gets;
  ossl_BIO_meth_set_gets_t ossl_BIO_meth_set_gets;
  ossl_BIO_meth_get_ctrl_t ossl_BIO_meth_get_ctrl;
  ossl_BIO_meth_set_ctrl_t ossl_BIO_meth_set_ctrl;
  ossl_BIO_meth_get_create_t ossl_BIO_meth_get_create;
  ossl_BIO_meth_set_create_t ossl_BIO_meth_set_create;
  ossl_BIO_meth_get_destroy_t ossl_BIO_meth_get_destroy;
  ossl_BIO_meth_set_destroy_t ossl_BIO_meth_set_destroy;
  ossl_BIO_meth_get_callback_ctrl_t ossl_BIO_meth_get_callback_ctrl;
  ossl_BIO_meth_set_callback_ctrl_t ossl_BIO_meth_set_callback_ctrl;
  ossl_BN_set_flags_t ossl_BN_set_flags;
  ossl_BN_get_flags_t ossl_BN_get_flags;
  ossl_BN_with_flags_t ossl_BN_with_flags;
  ossl_BN_GENCB_call_t ossl_BN_GENCB_call;
  ossl_BN_GENCB_new_t ossl_BN_GENCB_new;
  ossl_BN_GENCB_free_t ossl_BN_GENCB_free;
  ossl_BN_GENCB_set_old_t ossl_BN_GENCB_set_old;
  ossl_BN_GENCB_set_t ossl_BN_GENCB_set;
  ossl_BN_GENCB_get_arg_t ossl_BN_GENCB_get_arg;
  ossl_BN_abs_is_word_t ossl_BN_abs_is_word;
  ossl_BN_is_zero_t ossl_BN_is_zero;
  ossl_BN_is_one_t ossl_BN_is_one;
  ossl_BN_is_word_t ossl_BN_is_word;
  ossl_BN_is_odd_t ossl_BN_is_odd;
  ossl_BN_zero_ex_t ossl_BN_zero_ex;
  ossl_BN_value_one_t ossl_BN_value_one;
  ossl_BN_options_t ossl_BN_options;
  ossl_BN_CTX_new_ex_t ossl_BN_CTX_new_ex;
  ossl_BN_CTX_new_t ossl_BN_CTX_new;
  ossl_BN_CTX_secure_new_ex_t ossl_BN_CTX_secure_new_ex;
  ossl_BN_CTX_secure_new_t ossl_BN_CTX_secure_new;
  ossl_BN_CTX_free_t ossl_BN_CTX_free;
  ossl_BN_CTX_start_t ossl_BN_CTX_start;
  ossl_BN_CTX_get_t ossl_BN_CTX_get;
  ossl_BN_CTX_end_t ossl_BN_CTX_end;
  ossl_BN_rand_ex_t ossl_BN_rand_ex;
  ossl_BN_rand_t ossl_BN_rand;
  ossl_BN_priv_rand_ex_t ossl_BN_priv_rand_ex;
  ossl_BN_priv_rand_t ossl_BN_priv_rand;
  ossl_BN_rand_range_ex_t ossl_BN_rand_range_ex;
  ossl_BN_rand_range_t ossl_BN_rand_range;
  ossl_BN_priv_rand_range_ex_t ossl_BN_priv_rand_range_ex;
  ossl_BN_priv_rand_range_t ossl_BN_priv_rand_range;
  ossl_BN_pseudo_rand_t ossl_BN_pseudo_rand;
  ossl_BN_pseudo_rand_range_t ossl_BN_pseudo_rand_range;
  ossl_BN_num_bits_t ossl_BN_num_bits;
  ossl_BN_num_bits_word_t ossl_BN_num_bits_word;
  ossl_BN_security_bits_t ossl_BN_security_bits;
  ossl_BN_new_t ossl_BN_new;
  ossl_BN_secure_new_t ossl_BN_secure_new;
  ossl_BN_clear_free_t ossl_BN_clear_free;
  ossl_BN_copy_t ossl_BN_copy;
  ossl_BN_swap_t ossl_BN_swap;
  ossl_BN_bin2bn_t ossl_BN_bin2bn;
  ossl_BN_bn2bin_t ossl_BN_bn2bin;
  ossl_BN_bn2binpad_t ossl_BN_bn2binpad;
  ossl_BN_lebin2bn_t ossl_BN_lebin2bn;
  ossl_BN_bn2lebinpad_t ossl_BN_bn2lebinpad;
  ossl_BN_native2bn_t ossl_BN_native2bn;
  ossl_BN_bn2nativepad_t ossl_BN_bn2nativepad;
  ossl_BN_mpi2bn_t ossl_BN_mpi2bn;
  ossl_BN_bn2mpi_t ossl_BN_bn2mpi;
  ossl_BN_sub_t ossl_BN_sub;
  ossl_BN_usub_t ossl_BN_usub;
  ossl_BN_uadd_t ossl_BN_uadd;
  ossl_BN_add_t ossl_BN_add;
  ossl_BN_mul_t ossl_BN_mul;
  ossl_BN_sqr_t ossl_BN_sqr;
  ossl_BN_set_negative_t ossl_BN_set_negative;
  ossl_BN_is_negative_t ossl_BN_is_negative;
  ossl_BN_div_t ossl_BN_div;
  ossl_BN_nnmod_t ossl_BN_nnmod;
  ossl_BN_mod_add_t ossl_BN_mod_add;
  ossl_BN_mod_add_quick_t ossl_BN_mod_add_quick;
  ossl_BN_mod_sub_t ossl_BN_mod_sub;
  ossl_BN_mod_sub_quick_t ossl_BN_mod_sub_quick;
  ossl_BN_mod_mul_t ossl_BN_mod_mul;
  ossl_BN_mod_sqr_t ossl_BN_mod_sqr;
  ossl_BN_mod_lshift1_t ossl_BN_mod_lshift1;
  ossl_BN_mod_lshift1_quick_t ossl_BN_mod_lshift1_quick;
  ossl_BN_mod_lshift_t ossl_BN_mod_lshift;
  ossl_BN_mod_lshift_quick_t ossl_BN_mod_lshift_quick;
  ossl_BN_mod_word_t ossl_BN_mod_word;
  ossl_BN_div_word_t ossl_BN_div_word;
  ossl_BN_mul_word_t ossl_BN_mul_word;
  ossl_BN_add_word_t ossl_BN_add_word;
  ossl_BN_sub_word_t ossl_BN_sub_word;
  ossl_BN_set_word_t ossl_BN_set_word;
  ossl_BN_get_word_t ossl_BN_get_word;
  ossl_BN_cmp_t ossl_BN_cmp;
  ossl_BN_free_t ossl_BN_free;
  ossl_BN_is_bit_set_t ossl_BN_is_bit_set;
  ossl_BN_lshift_t ossl_BN_lshift;
  ossl_BN_lshift1_t ossl_BN_lshift1;
  ossl_BN_exp_t ossl_BN_exp;
  ossl_BN_mod_exp_t ossl_BN_mod_exp;
  ossl_BN_mod_exp_mont_t ossl_BN_mod_exp_mont;
  ossl_BN_mod_exp_mont_consttime_t ossl_BN_mod_exp_mont_consttime;
  ossl_BN_mod_exp_mont_word_t ossl_BN_mod_exp_mont_word;
  ossl_BN_mod_exp2_mont_t ossl_BN_mod_exp2_mont;
  ossl_BN_mod_exp_simple_t ossl_BN_mod_exp_simple;
  ossl_BN_mod_exp_mont_consttime_x2_t ossl_BN_mod_exp_mont_consttime_x2;
  ossl_BN_mask_bits_t ossl_BN_mask_bits;
  ossl_BN_print_fp_t ossl_BN_print_fp;
  ossl_BN_print_t ossl_BN_print;
  ossl_BN_reciprocal_t ossl_BN_reciprocal;
  ossl_BN_rshift_t ossl_BN_rshift;
  ossl_BN_rshift1_t ossl_BN_rshift1;
  ossl_BN_clear_t ossl_BN_clear;
  ossl_BN_dup_t ossl_BN_dup;
  ossl_BN_ucmp_t ossl_BN_ucmp;
  ossl_BN_set_bit_t ossl_BN_set_bit;
  ossl_BN_clear_bit_t ossl_BN_clear_bit;
  ossl_BN_bn2hex_t ossl_BN_bn2hex;
  ossl_BN_bn2dec_t ossl_BN_bn2dec;
  ossl_BN_hex2bn_t ossl_BN_hex2bn;
  ossl_BN_dec2bn_t ossl_BN_dec2bn;
  ossl_BN_asc2bn_t ossl_BN_asc2bn;
  ossl_BN_gcd_t ossl_BN_gcd;
  ossl_BN_kronecker_t ossl_BN_kronecker;
  ossl_BN_mod_inverse_t ossl_BN_mod_inverse;
  ossl_BN_mod_sqrt_t ossl_BN_mod_sqrt;
  ossl_BN_consttime_swap_t ossl_BN_consttime_swap;
  ossl_BN_generate_prime_t ossl_BN_generate_prime;
  ossl_BN_is_prime_t ossl_BN_is_prime;
  ossl_BN_is_prime_fasttest_t ossl_BN_is_prime_fasttest;
  ossl_BN_is_prime_ex_t ossl_BN_is_prime_ex;
  ossl_BN_is_prime_fasttest_ex_t ossl_BN_is_prime_fasttest_ex;
  ossl_BN_generate_prime_ex2_t ossl_BN_generate_prime_ex2;
  ossl_BN_generate_prime_ex_t ossl_BN_generate_prime_ex;
  ossl_BN_check_prime_t ossl_BN_check_prime;
  ossl_BN_X931_generate_Xpq_t ossl_BN_X931_generate_Xpq;
  ossl_BN_X931_derive_prime_ex_t ossl_BN_X931_derive_prime_ex;
  ossl_BN_X931_generate_prime_ex_t ossl_BN_X931_generate_prime_ex;
  ossl_BN_MONT_CTX_new_t ossl_BN_MONT_CTX_new;
  ossl_BN_mod_mul_montgomery_t ossl_BN_mod_mul_montgomery;
  ossl_BN_to_montgomery_t ossl_BN_to_montgomery;
  ossl_BN_from_montgomery_t ossl_BN_from_montgomery;
  ossl_BN_MONT_CTX_free_t ossl_BN_MONT_CTX_free;
  ossl_BN_MONT_CTX_set_t ossl_BN_MONT_CTX_set;
  ossl_BN_MONT_CTX_copy_t ossl_BN_MONT_CTX_copy;
  ossl_BN_MONT_CTX_set_locked_t ossl_BN_MONT_CTX_set_locked;
  ossl_BN_BLINDING_new_t ossl_BN_BLINDING_new;
  ossl_BN_BLINDING_free_t ossl_BN_BLINDING_free;
  ossl_BN_BLINDING_update_t ossl_BN_BLINDING_update;
  ossl_BN_BLINDING_convert_t ossl_BN_BLINDING_convert;
  ossl_BN_BLINDING_invert_t ossl_BN_BLINDING_invert;
  ossl_BN_BLINDING_convert_ex_t ossl_BN_BLINDING_convert_ex;
  ossl_BN_BLINDING_invert_ex_t ossl_BN_BLINDING_invert_ex;
  ossl_BN_BLINDING_is_current_thread_t ossl_BN_BLINDING_is_current_thread;
  ossl_BN_BLINDING_set_current_thread_t ossl_BN_BLINDING_set_current_thread;
  ossl_BN_BLINDING_lock_t ossl_BN_BLINDING_lock;
  ossl_BN_BLINDING_unlock_t ossl_BN_BLINDING_unlock;
  ossl_BN_BLINDING_get_flags_t ossl_BN_BLINDING_get_flags;
  ossl_BN_BLINDING_set_flags_t ossl_BN_BLINDING_set_flags;
  ossl_BN_BLINDING_create_param_t ossl_BN_BLINDING_create_param;
  ossl_BN_set_params_t ossl_BN_set_params;
  ossl_BN_get_params_t ossl_BN_get_params;
  ossl_BN_RECP_CTX_new_t ossl_BN_RECP_CTX_new;
  ossl_BN_RECP_CTX_free_t ossl_BN_RECP_CTX_free;
  ossl_BN_RECP_CTX_set_t ossl_BN_RECP_CTX_set;
  ossl_BN_mod_mul_reciprocal_t ossl_BN_mod_mul_reciprocal;
  ossl_BN_mod_exp_recp_t ossl_BN_mod_exp_recp;
  ossl_BN_div_recp_t ossl_BN_div_recp;
  ossl_BN_GF2m_add_t ossl_BN_GF2m_add;
  ossl_BN_GF2m_mod_t ossl_BN_GF2m_mod;
  ossl_BN_GF2m_mod_mul_t ossl_BN_GF2m_mod_mul;
  ossl_BN_GF2m_mod_sqr_t ossl_BN_GF2m_mod_sqr;
  ossl_BN_GF2m_mod_inv_t ossl_BN_GF2m_mod_inv;
  ossl_BN_GF2m_mod_div_t ossl_BN_GF2m_mod_div;
  ossl_BN_GF2m_mod_exp_t ossl_BN_GF2m_mod_exp;
  ossl_BN_GF2m_mod_sqrt_t ossl_BN_GF2m_mod_sqrt;
  ossl_BN_GF2m_mod_solve_quad_t ossl_BN_GF2m_mod_solve_quad;
  ossl_BN_GF2m_mod_arr_t ossl_BN_GF2m_mod_arr;
  ossl_BN_GF2m_mod_mul_arr_t ossl_BN_GF2m_mod_mul_arr;
  ossl_BN_GF2m_mod_sqr_arr_t ossl_BN_GF2m_mod_sqr_arr;
  ossl_BN_GF2m_mod_inv_arr_t ossl_BN_GF2m_mod_inv_arr;
  ossl_BN_GF2m_mod_div_arr_t ossl_BN_GF2m_mod_div_arr;
  ossl_BN_GF2m_mod_exp_arr_t ossl_BN_GF2m_mod_exp_arr;
  ossl_BN_GF2m_mod_sqrt_arr_t ossl_BN_GF2m_mod_sqrt_arr;
  ossl_BN_GF2m_mod_solve_quad_arr_t ossl_BN_GF2m_mod_solve_quad_arr;
  ossl_BN_GF2m_poly2arr_t ossl_BN_GF2m_poly2arr;
  ossl_BN_GF2m_arr2poly_t ossl_BN_GF2m_arr2poly;
  ossl_BN_nist_mod_192_t ossl_BN_nist_mod_192;
  ossl_BN_nist_mod_224_t ossl_BN_nist_mod_224;
  ossl_BN_nist_mod_256_t ossl_BN_nist_mod_256;
  ossl_BN_nist_mod_384_t ossl_BN_nist_mod_384;
  ossl_BN_nist_mod_521_t ossl_BN_nist_mod_521;
  ossl_BN_get0_nist_prime_192_t ossl_BN_get0_nist_prime_192;
  ossl_BN_get0_nist_prime_224_t ossl_BN_get0_nist_prime_224;
  ossl_BN_get0_nist_prime_256_t ossl_BN_get0_nist_prime_256;
  ossl_BN_get0_nist_prime_384_t ossl_BN_get0_nist_prime_384;
  ossl_BN_get0_nist_prime_521_t ossl_BN_get0_nist_prime_521;
  ossl_BN_nist_mod_func_t ossl_BN_nist_mod_func;
  ossl_BN_generate_dsa_nonce_t ossl_BN_generate_dsa_nonce;
  ossl_BN_get_rfc2409_prime_768_t ossl_BN_get_rfc2409_prime_768;
  ossl_BN_get_rfc2409_prime_1024_t ossl_BN_get_rfc2409_prime_1024;
  ossl_BN_get_rfc3526_prime_1536_t ossl_BN_get_rfc3526_prime_1536;
  ossl_BN_get_rfc3526_prime_2048_t ossl_BN_get_rfc3526_prime_2048;
  ossl_BN_get_rfc3526_prime_3072_t ossl_BN_get_rfc3526_prime_3072;
  ossl_BN_get_rfc3526_prime_4096_t ossl_BN_get_rfc3526_prime_4096;
  ossl_BN_get_rfc3526_prime_6144_t ossl_BN_get_rfc3526_prime_6144;
  ossl_BN_get_rfc3526_prime_8192_t ossl_BN_get_rfc3526_prime_8192;
  ossl_BN_bntest_rand_t ossl_BN_bntest_rand;
  ossl_d2i_ASN1_SEQUENCE_ANY_t ossl_d2i_ASN1_SEQUENCE_ANY;
  ossl_i2d_ASN1_SEQUENCE_ANY_t ossl_i2d_ASN1_SEQUENCE_ANY;
  ossl_ASN1_SEQUENCE_ANY_it_t ossl_ASN1_SEQUENCE_ANY_it;
  ossl_d2i_ASN1_SET_ANY_t ossl_d2i_ASN1_SET_ANY;
  ossl_i2d_ASN1_SET_ANY_t ossl_i2d_ASN1_SET_ANY;
  ossl_ASN1_SET_ANY_it_t ossl_ASN1_SET_ANY_it;
  ossl_ASN1_TYPE_new_t ossl_ASN1_TYPE_new;
  ossl_ASN1_TYPE_free_t ossl_ASN1_TYPE_free;
  ossl_d2i_ASN1_TYPE_t ossl_d2i_ASN1_TYPE;
  ossl_i2d_ASN1_TYPE_t ossl_i2d_ASN1_TYPE;
  ossl_ASN1_ANY_it_t ossl_ASN1_ANY_it;
  ossl_ASN1_TYPE_get_t ossl_ASN1_TYPE_get;
  ossl_ASN1_TYPE_set_t ossl_ASN1_TYPE_set;
  ossl_ASN1_TYPE_set1_t ossl_ASN1_TYPE_set1;
  ossl_ASN1_TYPE_cmp_t ossl_ASN1_TYPE_cmp;
  ossl_ASN1_TYPE_pack_sequence_t ossl_ASN1_TYPE_pack_sequence;
  ossl_ASN1_TYPE_unpack_sequence_t ossl_ASN1_TYPE_unpack_sequence;
  ossl_ASN1_OBJECT_new_t ossl_ASN1_OBJECT_new;
  ossl_ASN1_OBJECT_free_t ossl_ASN1_OBJECT_free;
  ossl_d2i_ASN1_OBJECT_t ossl_d2i_ASN1_OBJECT;
  ossl_i2d_ASN1_OBJECT_t ossl_i2d_ASN1_OBJECT;
  ossl_ASN1_OBJECT_it_t ossl_ASN1_OBJECT_it;
  ossl_ASN1_STRING_new_t ossl_ASN1_STRING_new;
  ossl_ASN1_STRING_free_t ossl_ASN1_STRING_free;
  ossl_ASN1_STRING_clear_free_t ossl_ASN1_STRING_clear_free;
  ossl_ASN1_STRING_copy_t ossl_ASN1_STRING_copy;
  ossl_ASN1_STRING_dup_t ossl_ASN1_STRING_dup;
  ossl_ASN1_STRING_type_new_t ossl_ASN1_STRING_type_new;
  ossl_ASN1_STRING_cmp_t ossl_ASN1_STRING_cmp;
  ossl_ASN1_STRING_set_t ossl_ASN1_STRING_set;
  ossl_ASN1_STRING_set0_t ossl_ASN1_STRING_set0;
  ossl_ASN1_STRING_length_t ossl_ASN1_STRING_length;
  ossl_ASN1_STRING_length_set_t ossl_ASN1_STRING_length_set;
  ossl_ASN1_STRING_type_t ossl_ASN1_STRING_type;
  ossl_ASN1_STRING_data_t ossl_ASN1_STRING_data;
  ossl_ASN1_STRING_get0_data_t ossl_ASN1_STRING_get0_data;
  ossl_ASN1_BIT_STRING_new_t ossl_ASN1_BIT_STRING_new;
  ossl_ASN1_BIT_STRING_free_t ossl_ASN1_BIT_STRING_free;
  ossl_d2i_ASN1_BIT_STRING_t ossl_d2i_ASN1_BIT_STRING;
  ossl_i2d_ASN1_BIT_STRING_t ossl_i2d_ASN1_BIT_STRING;
  ossl_ASN1_BIT_STRING_it_t ossl_ASN1_BIT_STRING_it;
  ossl_ASN1_BIT_STRING_set_t ossl_ASN1_BIT_STRING_set;
  ossl_ASN1_BIT_STRING_set_bit_t ossl_ASN1_BIT_STRING_set_bit;
  ossl_ASN1_BIT_STRING_get_bit_t ossl_ASN1_BIT_STRING_get_bit;
  ossl_ASN1_BIT_STRING_check_t ossl_ASN1_BIT_STRING_check;
  ossl_ASN1_BIT_STRING_name_print_t ossl_ASN1_BIT_STRING_name_print;
  ossl_ASN1_BIT_STRING_num_asc_t ossl_ASN1_BIT_STRING_num_asc;
  ossl_ASN1_BIT_STRING_set_asc_t ossl_ASN1_BIT_STRING_set_asc;
  ossl_ASN1_INTEGER_new_t ossl_ASN1_INTEGER_new;
  ossl_ASN1_INTEGER_free_t ossl_ASN1_INTEGER_free;
  ossl_d2i_ASN1_INTEGER_t ossl_d2i_ASN1_INTEGER;
  ossl_i2d_ASN1_INTEGER_t ossl_i2d_ASN1_INTEGER;
  ossl_ASN1_INTEGER_it_t ossl_ASN1_INTEGER_it;
  ossl_d2i_ASN1_UINTEGER_t ossl_d2i_ASN1_UINTEGER;
  ossl_ASN1_INTEGER_dup_t ossl_ASN1_INTEGER_dup;
  ossl_ASN1_INTEGER_cmp_t ossl_ASN1_INTEGER_cmp;
  ossl_ASN1_ENUMERATED_new_t ossl_ASN1_ENUMERATED_new;
  ossl_ASN1_ENUMERATED_free_t ossl_ASN1_ENUMERATED_free;
  ossl_d2i_ASN1_ENUMERATED_t ossl_d2i_ASN1_ENUMERATED;
  ossl_i2d_ASN1_ENUMERATED_t ossl_i2d_ASN1_ENUMERATED;
  ossl_ASN1_ENUMERATED_it_t ossl_ASN1_ENUMERATED_it;
  ossl_ASN1_UTCTIME_check_t ossl_ASN1_UTCTIME_check;
  ossl_ASN1_UTCTIME_set_t ossl_ASN1_UTCTIME_set;
  ossl_ASN1_UTCTIME_adj_t ossl_ASN1_UTCTIME_adj;
  ossl_ASN1_UTCTIME_set_string_t ossl_ASN1_UTCTIME_set_string;
  ossl_ASN1_UTCTIME_cmp_time_t_t ossl_ASN1_UTCTIME_cmp_time_t;
  ossl_ASN1_GENERALIZEDTIME_check_t ossl_ASN1_GENERALIZEDTIME_check;
  ossl_ASN1_GENERALIZEDTIME_set_t ossl_ASN1_GENERALIZEDTIME_set;
  ossl_ASN1_GENERALIZEDTIME_adj_t ossl_ASN1_GENERALIZEDTIME_adj;
  ossl_ASN1_GENERALIZEDTIME_set_string_t ossl_ASN1_GENERALIZEDTIME_set_string;
  ossl_ASN1_TIME_diff_t ossl_ASN1_TIME_diff;
  ossl_ASN1_OCTET_STRING_new_t ossl_ASN1_OCTET_STRING_new;
  ossl_ASN1_OCTET_STRING_free_t ossl_ASN1_OCTET_STRING_free;
  ossl_d2i_ASN1_OCTET_STRING_t ossl_d2i_ASN1_OCTET_STRING;
  ossl_i2d_ASN1_OCTET_STRING_t ossl_i2d_ASN1_OCTET_STRING;
  ossl_ASN1_OCTET_STRING_it_t ossl_ASN1_OCTET_STRING_it;
  ossl_ASN1_OCTET_STRING_dup_t ossl_ASN1_OCTET_STRING_dup;
  ossl_ASN1_OCTET_STRING_cmp_t ossl_ASN1_OCTET_STRING_cmp;
  ossl_ASN1_OCTET_STRING_set_t ossl_ASN1_OCTET_STRING_set;
  ossl_ASN1_VISIBLESTRING_new_t ossl_ASN1_VISIBLESTRING_new;
  ossl_ASN1_VISIBLESTRING_free_t ossl_ASN1_VISIBLESTRING_free;
  ossl_d2i_ASN1_VISIBLESTRING_t ossl_d2i_ASN1_VISIBLESTRING;
  ossl_i2d_ASN1_VISIBLESTRING_t ossl_i2d_ASN1_VISIBLESTRING;
  ossl_ASN1_VISIBLESTRING_it_t ossl_ASN1_VISIBLESTRING_it;
  ossl_ASN1_UNIVERSALSTRING_new_t ossl_ASN1_UNIVERSALSTRING_new;
  ossl_ASN1_UNIVERSALSTRING_free_t ossl_ASN1_UNIVERSALSTRING_free;
  ossl_d2i_ASN1_UNIVERSALSTRING_t ossl_d2i_ASN1_UNIVERSALSTRING;
  ossl_i2d_ASN1_UNIVERSALSTRING_t ossl_i2d_ASN1_UNIVERSALSTRING;
  ossl_ASN1_UNIVERSALSTRING_it_t ossl_ASN1_UNIVERSALSTRING_it;
  ossl_ASN1_UTF8STRING_new_t ossl_ASN1_UTF8STRING_new;
  ossl_ASN1_UTF8STRING_free_t ossl_ASN1_UTF8STRING_free;
  ossl_d2i_ASN1_UTF8STRING_t ossl_d2i_ASN1_UTF8STRING;
  ossl_i2d_ASN1_UTF8STRING_t ossl_i2d_ASN1_UTF8STRING;
  ossl_ASN1_UTF8STRING_it_t ossl_ASN1_UTF8STRING_it;
  ossl_ASN1_NULL_new_t ossl_ASN1_NULL_new;
  ossl_ASN1_NULL_free_t ossl_ASN1_NULL_free;
  ossl_d2i_ASN1_NULL_t ossl_d2i_ASN1_NULL;
  ossl_i2d_ASN1_NULL_t ossl_i2d_ASN1_NULL;
  ossl_ASN1_NULL_it_t ossl_ASN1_NULL_it;
  ossl_ASN1_BMPSTRING_new_t ossl_ASN1_BMPSTRING_new;
  ossl_ASN1_BMPSTRING_free_t ossl_ASN1_BMPSTRING_free;
  ossl_d2i_ASN1_BMPSTRING_t ossl_d2i_ASN1_BMPSTRING;
  ossl_i2d_ASN1_BMPSTRING_t ossl_i2d_ASN1_BMPSTRING;
  ossl_ASN1_BMPSTRING_it_t ossl_ASN1_BMPSTRING_it;
  ossl_UTF8_getc_t ossl_UTF8_getc;
  ossl_UTF8_putc_t ossl_UTF8_putc;
  ossl_ASN1_PRINTABLE_new_t ossl_ASN1_PRINTABLE_new;
  ossl_ASN1_PRINTABLE_free_t ossl_ASN1_PRINTABLE_free;
  ossl_d2i_ASN1_PRINTABLE_t ossl_d2i_ASN1_PRINTABLE;
  ossl_i2d_ASN1_PRINTABLE_t ossl_i2d_ASN1_PRINTABLE;
  ossl_ASN1_PRINTABLE_it_t ossl_ASN1_PRINTABLE_it;
  ossl_DIRECTORYSTRING_new_t ossl_DIRECTORYSTRING_new;
  ossl_DIRECTORYSTRING_free_t ossl_DIRECTORYSTRING_free;
  ossl_d2i_DIRECTORYSTRING_t ossl_d2i_DIRECTORYSTRING;
  ossl_i2d_DIRECTORYSTRING_t ossl_i2d_DIRECTORYSTRING;
  ossl_DIRECTORYSTRING_it_t ossl_DIRECTORYSTRING_it;
  ossl_DISPLAYTEXT_new_t ossl_DISPLAYTEXT_new;
  ossl_DISPLAYTEXT_free_t ossl_DISPLAYTEXT_free;
  ossl_d2i_DISPLAYTEXT_t ossl_d2i_DISPLAYTEXT;
  ossl_i2d_DISPLAYTEXT_t ossl_i2d_DISPLAYTEXT;
  ossl_DISPLAYTEXT_it_t ossl_DISPLAYTEXT_it;
  ossl_ASN1_PRINTABLESTRING_new_t ossl_ASN1_PRINTABLESTRING_new;
  ossl_ASN1_PRINTABLESTRING_free_t ossl_ASN1_PRINTABLESTRING_free;
  ossl_d2i_ASN1_PRINTABLESTRING_t ossl_d2i_ASN1_PRINTABLESTRING;
  ossl_i2d_ASN1_PRINTABLESTRING_t ossl_i2d_ASN1_PRINTABLESTRING;
  ossl_ASN1_PRINTABLESTRING_it_t ossl_ASN1_PRINTABLESTRING_it;
  ossl_ASN1_T61STRING_new_t ossl_ASN1_T61STRING_new;
  ossl_ASN1_T61STRING_free_t ossl_ASN1_T61STRING_free;
  ossl_d2i_ASN1_T61STRING_t ossl_d2i_ASN1_T61STRING;
  ossl_i2d_ASN1_T61STRING_t ossl_i2d_ASN1_T61STRING;
  ossl_ASN1_T61STRING_it_t ossl_ASN1_T61STRING_it;
  ossl_ASN1_IA5STRING_new_t ossl_ASN1_IA5STRING_new;
  ossl_ASN1_IA5STRING_free_t ossl_ASN1_IA5STRING_free;
  ossl_d2i_ASN1_IA5STRING_t ossl_d2i_ASN1_IA5STRING;
  ossl_i2d_ASN1_IA5STRING_t ossl_i2d_ASN1_IA5STRING;
  ossl_ASN1_IA5STRING_it_t ossl_ASN1_IA5STRING_it;
  ossl_ASN1_GENERALSTRING_new_t ossl_ASN1_GENERALSTRING_new;
  ossl_ASN1_GENERALSTRING_free_t ossl_ASN1_GENERALSTRING_free;
  ossl_d2i_ASN1_GENERALSTRING_t ossl_d2i_ASN1_GENERALSTRING;
  ossl_i2d_ASN1_GENERALSTRING_t ossl_i2d_ASN1_GENERALSTRING;
  ossl_ASN1_GENERALSTRING_it_t ossl_ASN1_GENERALSTRING_it;
  ossl_ASN1_UTCTIME_new_t ossl_ASN1_UTCTIME_new;
  ossl_ASN1_UTCTIME_free_t ossl_ASN1_UTCTIME_free;
  ossl_d2i_ASN1_UTCTIME_t ossl_d2i_ASN1_UTCTIME;
  ossl_i2d_ASN1_UTCTIME_t ossl_i2d_ASN1_UTCTIME;
  ossl_ASN1_UTCTIME_it_t ossl_ASN1_UTCTIME_it;
  ossl_ASN1_GENERALIZEDTIME_new_t ossl_ASN1_GENERALIZEDTIME_new;
  ossl_ASN1_GENERALIZEDTIME_free_t ossl_ASN1_GENERALIZEDTIME_free;
  ossl_d2i_ASN1_GENERALIZEDTIME_t ossl_d2i_ASN1_GENERALIZEDTIME;
  ossl_i2d_ASN1_GENERALIZEDTIME_t ossl_i2d_ASN1_GENERALIZEDTIME;
  ossl_ASN1_GENERALIZEDTIME_it_t ossl_ASN1_GENERALIZEDTIME_it;
  ossl_ASN1_TIME_new_t ossl_ASN1_TIME_new;
  ossl_ASN1_TIME_free_t ossl_ASN1_TIME_free;
  ossl_d2i_ASN1_TIME_t ossl_d2i_ASN1_TIME;
  ossl_i2d_ASN1_TIME_t ossl_i2d_ASN1_TIME;
  ossl_ASN1_TIME_it_t ossl_ASN1_TIME_it;
  ossl_ASN1_TIME_dup_t ossl_ASN1_TIME_dup;
  ossl_ASN1_UTCTIME_dup_t ossl_ASN1_UTCTIME_dup;
  ossl_ASN1_GENERALIZEDTIME_dup_t ossl_ASN1_GENERALIZEDTIME_dup;
  ossl_ASN1_OCTET_STRING_NDEF_it_t ossl_ASN1_OCTET_STRING_NDEF_it;
  ossl_ASN1_TIME_set_t ossl_ASN1_TIME_set;
  ossl_ASN1_TIME_adj_t ossl_ASN1_TIME_adj;
  ossl_ASN1_TIME_check_t ossl_ASN1_TIME_check;
  ossl_ASN1_TIME_to_generalizedtime_t ossl_ASN1_TIME_to_generalizedtime;
  ossl_ASN1_TIME_set_string_t ossl_ASN1_TIME_set_string;
  ossl_ASN1_TIME_set_string_X509_t ossl_ASN1_TIME_set_string_X509;
  ossl_ASN1_TIME_to_tm_t ossl_ASN1_TIME_to_tm;
  ossl_ASN1_TIME_normalize_t ossl_ASN1_TIME_normalize;
  ossl_ASN1_TIME_cmp_time_t_t ossl_ASN1_TIME_cmp_time_t;
  ossl_ASN1_TIME_compare_t ossl_ASN1_TIME_compare;
  ossl_i2a_ASN1_INTEGER_t ossl_i2a_ASN1_INTEGER;
  ossl_a2i_ASN1_INTEGER_t ossl_a2i_ASN1_INTEGER;
  ossl_i2a_ASN1_ENUMERATED_t ossl_i2a_ASN1_ENUMERATED;
  ossl_a2i_ASN1_ENUMERATED_t ossl_a2i_ASN1_ENUMERATED;
  ossl_i2a_ASN1_OBJECT_t ossl_i2a_ASN1_OBJECT;
  ossl_a2i_ASN1_STRING_t ossl_a2i_ASN1_STRING;
  ossl_i2a_ASN1_STRING_t ossl_i2a_ASN1_STRING;
  ossl_i2t_ASN1_OBJECT_t ossl_i2t_ASN1_OBJECT;
  ossl_a2d_ASN1_OBJECT_t ossl_a2d_ASN1_OBJECT;
  ossl_ASN1_OBJECT_create_t ossl_ASN1_OBJECT_create;
  ossl_ASN1_INTEGER_get_int64_t ossl_ASN1_INTEGER_get_int64;
  ossl_ASN1_INTEGER_set_int64_t ossl_ASN1_INTEGER_set_int64;
  ossl_ASN1_INTEGER_get_uint64_t ossl_ASN1_INTEGER_get_uint64;
  ossl_ASN1_INTEGER_set_uint64_t ossl_ASN1_INTEGER_set_uint64;
  ossl_ASN1_INTEGER_set_t ossl_ASN1_INTEGER_set;
  ossl_ASN1_INTEGER_get_t ossl_ASN1_INTEGER_get;
  ossl_BN_to_ASN1_INTEGER_t ossl_BN_to_ASN1_INTEGER;
  ossl_ASN1_INTEGER_to_BN_t ossl_ASN1_INTEGER_to_BN;
  ossl_ASN1_ENUMERATED_get_int64_t ossl_ASN1_ENUMERATED_get_int64;
  ossl_ASN1_ENUMERATED_set_int64_t ossl_ASN1_ENUMERATED_set_int64;
  ossl_ASN1_ENUMERATED_set_t ossl_ASN1_ENUMERATED_set;
  ossl_ASN1_ENUMERATED_get_t ossl_ASN1_ENUMERATED_get;
  ossl_BN_to_ASN1_ENUMERATED_t ossl_BN_to_ASN1_ENUMERATED;
  ossl_ASN1_ENUMERATED_to_BN_t ossl_ASN1_ENUMERATED_to_BN;
  ossl_ASN1_PRINTABLE_type_t ossl_ASN1_PRINTABLE_type;
  ossl_ASN1_tag2bit_t ossl_ASN1_tag2bit;
  ossl_ASN1_get_object_t ossl_ASN1_get_object;
  ossl_ASN1_check_infinite_end_t ossl_ASN1_check_infinite_end;
  ossl_ASN1_const_check_infinite_end_t ossl_ASN1_const_check_infinite_end;
  ossl_ASN1_put_object_t ossl_ASN1_put_object;
  ossl_ASN1_put_eoc_t ossl_ASN1_put_eoc;
  ossl_ASN1_object_size_t ossl_ASN1_object_size;
  ossl_ASN1_dup_t ossl_ASN1_dup;
  ossl_ASN1_item_dup_t ossl_ASN1_item_dup;
  ossl_ASN1_item_sign_ex_t ossl_ASN1_item_sign_ex;
  ossl_ASN1_item_verify_ex_t ossl_ASN1_item_verify_ex;
  ossl_ASN1_d2i_fp_t ossl_ASN1_d2i_fp;
  ossl_ASN1_item_d2i_fp_ex_t ossl_ASN1_item_d2i_fp_ex;
  ossl_ASN1_item_d2i_fp_t ossl_ASN1_item_d2i_fp;
  ossl_ASN1_i2d_fp_t ossl_ASN1_i2d_fp;
  ossl_ASN1_item_i2d_fp_t ossl_ASN1_item_i2d_fp;
  ossl_ASN1_STRING_print_ex_fp_t ossl_ASN1_STRING_print_ex_fp;
  ossl_ASN1_STRING_to_UTF8_t ossl_ASN1_STRING_to_UTF8;
  ossl_ASN1_d2i_bio_t ossl_ASN1_d2i_bio;
  ossl_ASN1_item_d2i_bio_ex_t ossl_ASN1_item_d2i_bio_ex;
  ossl_ASN1_item_d2i_bio_t ossl_ASN1_item_d2i_bio;
  ossl_ASN1_i2d_bio_t ossl_ASN1_i2d_bio;
  ossl_ASN1_item_i2d_bio_t ossl_ASN1_item_i2d_bio;
  ossl_ASN1_item_i2d_mem_bio_t ossl_ASN1_item_i2d_mem_bio;
  ossl_ASN1_UTCTIME_print_t ossl_ASN1_UTCTIME_print;
  ossl_ASN1_GENERALIZEDTIME_print_t ossl_ASN1_GENERALIZEDTIME_print;
  ossl_ASN1_TIME_print_t ossl_ASN1_TIME_print;
  ossl_ASN1_TIME_print_ex_t ossl_ASN1_TIME_print_ex;
  ossl_ASN1_STRING_print_t ossl_ASN1_STRING_print;
  ossl_ASN1_STRING_print_ex_t ossl_ASN1_STRING_print_ex;
  ossl_ASN1_buf_print_t ossl_ASN1_buf_print;
  ossl_ASN1_bn_print_t ossl_ASN1_bn_print;
  ossl_ASN1_parse_t ossl_ASN1_parse;
  ossl_ASN1_parse_dump_t ossl_ASN1_parse_dump;
  ossl_ASN1_tag2str_t ossl_ASN1_tag2str;
  ossl_ASN1_UNIVERSALSTRING_to_string_t ossl_ASN1_UNIVERSALSTRING_to_string;
  ossl_ASN1_TYPE_set_octetstring_t ossl_ASN1_TYPE_set_octetstring;
  ossl_ASN1_TYPE_get_octetstring_t ossl_ASN1_TYPE_get_octetstring;
  ossl_ASN1_TYPE_set_int_octetstring_t ossl_ASN1_TYPE_set_int_octetstring;
  ossl_ASN1_TYPE_get_int_octetstring_t ossl_ASN1_TYPE_get_int_octetstring;
  ossl_ASN1_item_unpack_t ossl_ASN1_item_unpack;
  ossl_ASN1_item_pack_t ossl_ASN1_item_pack;
  ossl_ASN1_STRING_set_default_mask_t ossl_ASN1_STRING_set_default_mask;
  ossl_ASN1_STRING_set_default_mask_asc_t ossl_ASN1_STRING_set_default_mask_asc;
  ossl_ASN1_STRING_get_default_mask_t ossl_ASN1_STRING_get_default_mask;
  ossl_ASN1_mbstring_copy_t ossl_ASN1_mbstring_copy;
  ossl_ASN1_mbstring_ncopy_t ossl_ASN1_mbstring_ncopy;
  ossl_ASN1_STRING_set_by_NID_t ossl_ASN1_STRING_set_by_NID;
  ossl_ASN1_STRING_TABLE_get_t ossl_ASN1_STRING_TABLE_get;
  ossl_ASN1_STRING_TABLE_add_t ossl_ASN1_STRING_TABLE_add;
  ossl_ASN1_STRING_TABLE_cleanup_t ossl_ASN1_STRING_TABLE_cleanup;
  ossl_ASN1_item_new_t ossl_ASN1_item_new;
  ossl_ASN1_item_new_ex_t ossl_ASN1_item_new_ex;
  ossl_ASN1_item_free_t ossl_ASN1_item_free;
  ossl_ASN1_item_d2i_ex_t ossl_ASN1_item_d2i_ex;
  ossl_ASN1_item_d2i_t ossl_ASN1_item_d2i;
  ossl_ASN1_item_i2d_t ossl_ASN1_item_i2d;
  ossl_ASN1_item_ndef_i2d_t ossl_ASN1_item_ndef_i2d;
  ossl_ASN1_add_oid_module_t ossl_ASN1_add_oid_module;
  ossl_ASN1_add_stable_module_t ossl_ASN1_add_stable_module;
  ossl_ASN1_generate_nconf_t ossl_ASN1_generate_nconf;
  ossl_ASN1_generate_v3_t ossl_ASN1_generate_v3;
  ossl_ASN1_str2mask_t ossl_ASN1_str2mask;
  ossl_ASN1_item_print_t ossl_ASN1_item_print;
  ossl_ASN1_PCTX_new_t ossl_ASN1_PCTX_new;
  ossl_ASN1_PCTX_free_t ossl_ASN1_PCTX_free;
  ossl_ASN1_PCTX_get_flags_t ossl_ASN1_PCTX_get_flags;
  ossl_ASN1_PCTX_set_flags_t ossl_ASN1_PCTX_set_flags;
  ossl_ASN1_PCTX_get_nm_flags_t ossl_ASN1_PCTX_get_nm_flags;
  ossl_ASN1_PCTX_set_nm_flags_t ossl_ASN1_PCTX_set_nm_flags;
  ossl_ASN1_PCTX_get_cert_flags_t ossl_ASN1_PCTX_get_cert_flags;
  ossl_ASN1_PCTX_set_cert_flags_t ossl_ASN1_PCTX_set_cert_flags;
  ossl_ASN1_PCTX_get_oid_flags_t ossl_ASN1_PCTX_get_oid_flags;
  ossl_ASN1_PCTX_set_oid_flags_t ossl_ASN1_PCTX_set_oid_flags;
  ossl_ASN1_PCTX_get_str_flags_t ossl_ASN1_PCTX_get_str_flags;
  ossl_ASN1_PCTX_set_str_flags_t ossl_ASN1_PCTX_set_str_flags;
  ossl_ASN1_SCTX_new_t ossl_ASN1_SCTX_new;
  ossl_ASN1_SCTX_free_t ossl_ASN1_SCTX_free;
  ossl_ASN1_SCTX_get_item_t ossl_ASN1_SCTX_get_item;
  ossl_ASN1_SCTX_get_template_t ossl_ASN1_SCTX_get_template;
  ossl_ASN1_SCTX_get_flags_t ossl_ASN1_SCTX_get_flags;
  ossl_ASN1_SCTX_set_app_data_t ossl_ASN1_SCTX_set_app_data;
  ossl_ASN1_SCTX_get_app_data_t ossl_ASN1_SCTX_get_app_data;
  ossl_BIO_f_asn1_t ossl_BIO_f_asn1;
  ossl_BIO_new_NDEF_t ossl_BIO_new_NDEF;
  ossl_i2d_ASN1_bio_stream_t ossl_i2d_ASN1_bio_stream;
  ossl_PEM_write_bio_ASN1_stream_t ossl_PEM_write_bio_ASN1_stream;
  ossl_SMIME_write_ASN1_t ossl_SMIME_write_ASN1;
  ossl_SMIME_write_ASN1_ex_t ossl_SMIME_write_ASN1_ex;
  ossl_SMIME_read_ASN1_t ossl_SMIME_read_ASN1;
  ossl_SMIME_read_ASN1_ex_t ossl_SMIME_read_ASN1_ex;
  ossl_SMIME_crlf_copy_t ossl_SMIME_crlf_copy;
  ossl_SMIME_text_t ossl_SMIME_text;
  ossl_ASN1_ITEM_lookup_t ossl_ASN1_ITEM_lookup;
  ossl_ASN1_ITEM_get_t ossl_ASN1_ITEM_get;
  ossl_ASN1_BOOLEAN_it_t ossl_ASN1_BOOLEAN_it;
  ossl_ASN1_TBOOLEAN_it_t ossl_ASN1_TBOOLEAN_it;
  ossl_ASN1_FBOOLEAN_it_t ossl_ASN1_FBOOLEAN_it;
  ossl_ASN1_SEQUENCE_it_t ossl_ASN1_SEQUENCE_it;
  ossl_CBIGNUM_it_t ossl_CBIGNUM_it;
  ossl_BIGNUM_it_t ossl_BIGNUM_it;
  ossl_INT32_it_t ossl_INT32_it;
  ossl_ZINT32_it_t ossl_ZINT32_it;
  ossl_UINT32_it_t ossl_UINT32_it;
  ossl_ZUINT32_it_t ossl_ZUINT32_it;
  ossl_INT64_it_t ossl_INT64_it;
  ossl_ZINT64_it_t ossl_ZINT64_it;
  ossl_UINT64_it_t ossl_UINT64_it;
  ossl_ZUINT64_it_t ossl_ZUINT64_it;
  ossl_LONG_it_t ossl_LONG_it;
  ossl_ZLONG_it_t ossl_ZLONG_it;
  ossl_ASN1_item_ex_new_t ossl_ASN1_item_ex_new;
  ossl_ASN1_item_ex_free_t ossl_ASN1_item_ex_free;
  ossl_ASN1_item_ex_d2i_t ossl_ASN1_item_ex_d2i;
  ossl_ASN1_item_ex_i2d_t ossl_ASN1_item_ex_i2d;
  ossl_ASYNC_init_thread_t ossl_ASYNC_init_thread;
  ossl_ASYNC_cleanup_thread_t ossl_ASYNC_cleanup_thread;
  ossl_ASYNC_WAIT_CTX_new_t ossl_ASYNC_WAIT_CTX_new;
  ossl_ASYNC_WAIT_CTX_free_t ossl_ASYNC_WAIT_CTX_free;
  ossl_ASYNC_WAIT_CTX_set_wait_fd_t ossl_ASYNC_WAIT_CTX_set_wait_fd;
  ossl_ASYNC_WAIT_CTX_get_fd_t ossl_ASYNC_WAIT_CTX_get_fd;
  ossl_ASYNC_WAIT_CTX_get_all_fds_t ossl_ASYNC_WAIT_CTX_get_all_fds;
  ossl_ASYNC_WAIT_CTX_get_callback_t ossl_ASYNC_WAIT_CTX_get_callback;
  ossl_ASYNC_WAIT_CTX_set_callback_t ossl_ASYNC_WAIT_CTX_set_callback;
  ossl_ASYNC_WAIT_CTX_set_status_t ossl_ASYNC_WAIT_CTX_set_status;
  ossl_ASYNC_WAIT_CTX_get_status_t ossl_ASYNC_WAIT_CTX_get_status;
  ossl_ASYNC_WAIT_CTX_get_changed_fds_t ossl_ASYNC_WAIT_CTX_get_changed_fds;
  ossl_ASYNC_WAIT_CTX_clear_fd_t ossl_ASYNC_WAIT_CTX_clear_fd;
  ossl_ASYNC_is_capable_t ossl_ASYNC_is_capable;
  ossl_ASYNC_start_job_t ossl_ASYNC_start_job;
  ossl_ASYNC_pause_job_t ossl_ASYNC_pause_job;
  ossl_ASYNC_get_current_job_t ossl_ASYNC_get_current_job;
  ossl_ASYNC_get_wait_ctx_t ossl_ASYNC_get_wait_ctx;
  ossl_ASYNC_block_pause_t ossl_ASYNC_block_pause;
  ossl_ASYNC_unblock_pause_t ossl_ASYNC_unblock_pause;
  ossl_BF_set_key_t ossl_BF_set_key;
  ossl_BF_encrypt_t ossl_BF_encrypt;
  ossl_BF_decrypt_t ossl_BF_decrypt;
  ossl_BF_ecb_encrypt_t ossl_BF_ecb_encrypt;
  ossl_BF_cbc_encrypt_t ossl_BF_cbc_encrypt;
  ossl_BF_cfb64_encrypt_t ossl_BF_cfb64_encrypt;
  ossl_BF_ofb64_encrypt_t ossl_BF_ofb64_encrypt;
  ossl_BF_options_t ossl_BF_options;
  ossl_BUF_MEM_new_t ossl_BUF_MEM_new;
  ossl_BUF_MEM_new_ex_t ossl_BUF_MEM_new_ex;
  ossl_BUF_MEM_free_t ossl_BUF_MEM_free;
  ossl_BUF_MEM_grow_t ossl_BUF_MEM_grow;
  ossl_BUF_MEM_grow_clean_t ossl_BUF_MEM_grow_clean;
  ossl_BUF_reverse_t ossl_BUF_reverse;
  ossl_Camellia_set_key_t ossl_Camellia_set_key;
  ossl_Camellia_encrypt_t ossl_Camellia_encrypt;
  ossl_Camellia_decrypt_t ossl_Camellia_decrypt;
  ossl_Camellia_ecb_encrypt_t ossl_Camellia_ecb_encrypt;
  ossl_Camellia_cbc_encrypt_t ossl_Camellia_cbc_encrypt;
  ossl_Camellia_cfb128_encrypt_t ossl_Camellia_cfb128_encrypt;
  ossl_Camellia_cfb1_encrypt_t ossl_Camellia_cfb1_encrypt;
  ossl_Camellia_cfb8_encrypt_t ossl_Camellia_cfb8_encrypt;
  ossl_Camellia_ofb128_encrypt_t ossl_Camellia_ofb128_encrypt;
  ossl_Camellia_ctr128_encrypt_t ossl_Camellia_ctr128_encrypt;
  ossl_CAST_set_key_t ossl_CAST_set_key;
  ossl_CAST_ecb_encrypt_t ossl_CAST_ecb_encrypt;
  ossl_CAST_encrypt_t ossl_CAST_encrypt;
  ossl_CAST_decrypt_t ossl_CAST_decrypt;
  ossl_CAST_cbc_encrypt_t ossl_CAST_cbc_encrypt;
  ossl_CAST_cfb64_encrypt_t ossl_CAST_cfb64_encrypt;
  ossl_CAST_ofb64_encrypt_t ossl_CAST_ofb64_encrypt;
  ossl_OSSL_PARAM_locate_t ossl_OSSL_PARAM_locate;
  ossl_OSSL_PARAM_locate_const_t ossl_OSSL_PARAM_locate_const;
  ossl_OSSL_PARAM_construct_int_t ossl_OSSL_PARAM_construct_int;
  ossl_OSSL_PARAM_construct_uint_t ossl_OSSL_PARAM_construct_uint;
  ossl_OSSL_PARAM_construct_long_t ossl_OSSL_PARAM_construct_long;
  ossl_OSSL_PARAM_construct_ulong_t ossl_OSSL_PARAM_construct_ulong;
  ossl_OSSL_PARAM_construct_int32_t ossl_OSSL_PARAM_construct_int32;
  ossl_OSSL_PARAM_construct_uint32_t ossl_OSSL_PARAM_construct_uint32;
  ossl_OSSL_PARAM_construct_int64_t ossl_OSSL_PARAM_construct_int64;
  ossl_OSSL_PARAM_construct_uint64_t ossl_OSSL_PARAM_construct_uint64;
  ossl_OSSL_PARAM_construct_size_t_t ossl_OSSL_PARAM_construct_size_t;
  ossl_OSSL_PARAM_construct_time_t_t ossl_OSSL_PARAM_construct_time_t;
  ossl_OSSL_PARAM_construct_BN_t ossl_OSSL_PARAM_construct_BN;
  ossl_OSSL_PARAM_construct_double_t ossl_OSSL_PARAM_construct_double;
  ossl_OSSL_PARAM_construct_utf8_string_t ossl_OSSL_PARAM_construct_utf8_string;
  ossl_OSSL_PARAM_construct_utf8_ptr_t ossl_OSSL_PARAM_construct_utf8_ptr;
  ossl_OSSL_PARAM_construct_octet_string_t ossl_OSSL_PARAM_construct_octet_string;
  ossl_OSSL_PARAM_construct_octet_ptr_t ossl_OSSL_PARAM_construct_octet_ptr;
  ossl_OSSL_PARAM_construct_end_t ossl_OSSL_PARAM_construct_end;
  ossl_OSSL_PARAM_allocate_from_text_t ossl_OSSL_PARAM_allocate_from_text;
  ossl_OSSL_PARAM_get_int_t ossl_OSSL_PARAM_get_int;
  ossl_OSSL_PARAM_get_uint_t ossl_OSSL_PARAM_get_uint;
  ossl_OSSL_PARAM_get_long_t ossl_OSSL_PARAM_get_long;
  ossl_OSSL_PARAM_get_ulong_t ossl_OSSL_PARAM_get_ulong;
  ossl_OSSL_PARAM_get_int32_t ossl_OSSL_PARAM_get_int32;
  ossl_OSSL_PARAM_get_uint32_t ossl_OSSL_PARAM_get_uint32;
  ossl_OSSL_PARAM_get_int64_t ossl_OSSL_PARAM_get_int64;
  ossl_OSSL_PARAM_get_uint64_t ossl_OSSL_PARAM_get_uint64;
  ossl_OSSL_PARAM_get_size_t_t ossl_OSSL_PARAM_get_size_t;
  ossl_OSSL_PARAM_get_time_t_t ossl_OSSL_PARAM_get_time_t;
  ossl_OSSL_PARAM_set_int_t ossl_OSSL_PARAM_set_int;
  ossl_OSSL_PARAM_set_uint_t ossl_OSSL_PARAM_set_uint;
  ossl_OSSL_PARAM_set_long_t ossl_OSSL_PARAM_set_long;
  ossl_OSSL_PARAM_set_ulong_t ossl_OSSL_PARAM_set_ulong;
  ossl_OSSL_PARAM_set_int32_t ossl_OSSL_PARAM_set_int32;
  ossl_OSSL_PARAM_set_uint32_t ossl_OSSL_PARAM_set_uint32;
  ossl_OSSL_PARAM_set_int64_t ossl_OSSL_PARAM_set_int64;
  ossl_OSSL_PARAM_set_uint64_t ossl_OSSL_PARAM_set_uint64;
  ossl_OSSL_PARAM_set_size_t_t ossl_OSSL_PARAM_set_size_t;
  ossl_OSSL_PARAM_set_time_t_t ossl_OSSL_PARAM_set_time_t;
  ossl_OSSL_PARAM_get_double_t ossl_OSSL_PARAM_get_double;
  ossl_OSSL_PARAM_set_double_t ossl_OSSL_PARAM_set_double;
  ossl_OSSL_PARAM_get_BN_t ossl_OSSL_PARAM_get_BN;
  ossl_OSSL_PARAM_set_BN_t ossl_OSSL_PARAM_set_BN;
  ossl_OSSL_PARAM_get_utf8_string_t ossl_OSSL_PARAM_get_utf8_string;
  ossl_OSSL_PARAM_set_utf8_string_t ossl_OSSL_PARAM_set_utf8_string;
  ossl_OSSL_PARAM_get_octet_string_t ossl_OSSL_PARAM_get_octet_string;
  ossl_OSSL_PARAM_set_octet_string_t ossl_OSSL_PARAM_set_octet_string;
  ossl_OSSL_PARAM_get_utf8_ptr_t ossl_OSSL_PARAM_get_utf8_ptr;
  ossl_OSSL_PARAM_set_utf8_ptr_t ossl_OSSL_PARAM_set_utf8_ptr;
  ossl_OSSL_PARAM_get_octet_ptr_t ossl_OSSL_PARAM_get_octet_ptr;
  ossl_OSSL_PARAM_set_octet_ptr_t ossl_OSSL_PARAM_set_octet_ptr;
  ossl_OSSL_PARAM_get_utf8_string_ptr_t ossl_OSSL_PARAM_get_utf8_string_ptr;
  ossl_OSSL_PARAM_get_octet_string_ptr_t ossl_OSSL_PARAM_get_octet_string_ptr;
  ossl_OSSL_PARAM_modified_t ossl_OSSL_PARAM_modified;
  ossl_OSSL_PARAM_set_all_unmodified_t ossl_OSSL_PARAM_set_all_unmodified;
  ossl_OSSL_PARAM_dup_t ossl_OSSL_PARAM_dup;
  ossl_OSSL_PARAM_merge_t ossl_OSSL_PARAM_merge;
  ossl_OSSL_PARAM_free_t ossl_OSSL_PARAM_free;
  ossl_OBJ_NAME_init_t ossl_OBJ_NAME_init;
  ossl_OBJ_NAME_new_index_t ossl_OBJ_NAME_new_index;
  ossl_OBJ_NAME_get_t ossl_OBJ_NAME_get;
  ossl_OBJ_NAME_add_t ossl_OBJ_NAME_add;
  ossl_OBJ_NAME_remove_t ossl_OBJ_NAME_remove;
  ossl_OBJ_NAME_cleanup_t ossl_OBJ_NAME_cleanup;
  ossl_OBJ_NAME_do_all_t ossl_OBJ_NAME_do_all;
  ossl_OBJ_NAME_do_all_sorted_t ossl_OBJ_NAME_do_all_sorted;
  ossl_OBJ_dup_t ossl_OBJ_dup;
  ossl_OBJ_nid2obj_t ossl_OBJ_nid2obj;
  ossl_OBJ_nid2ln_t ossl_OBJ_nid2ln;
  ossl_OBJ_nid2sn_t ossl_OBJ_nid2sn;
  ossl_OBJ_obj2nid_t ossl_OBJ_obj2nid;
  ossl_OBJ_txt2obj_t ossl_OBJ_txt2obj;
  ossl_OBJ_obj2txt_t ossl_OBJ_obj2txt;
  ossl_OBJ_txt2nid_t ossl_OBJ_txt2nid;
  ossl_OBJ_ln2nid_t ossl_OBJ_ln2nid;
  ossl_OBJ_sn2nid_t ossl_OBJ_sn2nid;
  ossl_OBJ_cmp_t ossl_OBJ_cmp;
  ossl_OBJ_bsearch__t ossl_OBJ_bsearch_;
  ossl_OBJ_bsearch_ex__t ossl_OBJ_bsearch_ex_;
  ossl_OBJ_new_nid_t ossl_OBJ_new_nid;
  ossl_OBJ_add_object_t ossl_OBJ_add_object;
  ossl_OBJ_create_t ossl_OBJ_create;
  ossl_OBJ_create_objects_t ossl_OBJ_create_objects;
  ossl_OBJ_length_t ossl_OBJ_length;
  ossl_OBJ_get0_data_t ossl_OBJ_get0_data;
  ossl_OBJ_find_sigid_algs_t ossl_OBJ_find_sigid_algs;
  ossl_OBJ_find_sigid_by_algs_t ossl_OBJ_find_sigid_by_algs;
  ossl_OBJ_add_sigid_t ossl_OBJ_add_sigid;
  ossl_OBJ_sigid_free_t ossl_OBJ_sigid_free;
  ossl_EVP_set_default_properties_t ossl_EVP_set_default_properties;
  ossl_EVP_default_properties_is_fips_enabled_t ossl_EVP_default_properties_is_fips_enabled;
  ossl_EVP_default_properties_enable_fips_t ossl_EVP_default_properties_enable_fips;
  ossl_EVP_MD_meth_new_t ossl_EVP_MD_meth_new;
  ossl_EVP_MD_meth_dup_t ossl_EVP_MD_meth_dup;
  ossl_EVP_MD_meth_free_t ossl_EVP_MD_meth_free;
  ossl_EVP_MD_meth_set_input_blocksize_t ossl_EVP_MD_meth_set_input_blocksize;
  ossl_EVP_MD_meth_set_result_size_t ossl_EVP_MD_meth_set_result_size;
  ossl_EVP_MD_meth_set_app_datasize_t ossl_EVP_MD_meth_set_app_datasize;
  ossl_EVP_MD_meth_set_flags_t ossl_EVP_MD_meth_set_flags;
  ossl_EVP_MD_meth_set_init_t ossl_EVP_MD_meth_set_init;
  ossl_EVP_MD_meth_set_update_t ossl_EVP_MD_meth_set_update;
  ossl_EVP_MD_meth_set_final_t ossl_EVP_MD_meth_set_final;
  ossl_EVP_MD_meth_set_copy_t ossl_EVP_MD_meth_set_copy;
  ossl_EVP_MD_meth_set_cleanup_t ossl_EVP_MD_meth_set_cleanup;
  ossl_EVP_MD_meth_set_ctrl_t ossl_EVP_MD_meth_set_ctrl;
  ossl_EVP_MD_meth_get_input_blocksize_t ossl_EVP_MD_meth_get_input_blocksize;
  ossl_EVP_MD_meth_get_result_size_t ossl_EVP_MD_meth_get_result_size;
  ossl_EVP_MD_meth_get_app_datasize_t ossl_EVP_MD_meth_get_app_datasize;
  ossl_EVP_MD_meth_get_flags_t ossl_EVP_MD_meth_get_flags;
  ossl_EVP_MD_meth_get_init_t ossl_EVP_MD_meth_get_init;
  ossl_EVP_MD_meth_get_update_t ossl_EVP_MD_meth_get_update;
  ossl_EVP_MD_meth_get_final_t ossl_EVP_MD_meth_get_final;
  ossl_EVP_MD_meth_get_copy_t ossl_EVP_MD_meth_get_copy;
  ossl_EVP_MD_meth_get_cleanup_t ossl_EVP_MD_meth_get_cleanup;
  ossl_EVP_MD_meth_get_ctrl_t ossl_EVP_MD_meth_get_ctrl;
  ossl_EVP_CIPHER_meth_new_t ossl_EVP_CIPHER_meth_new;
  ossl_EVP_CIPHER_meth_dup_t ossl_EVP_CIPHER_meth_dup;
  ossl_EVP_CIPHER_meth_free_t ossl_EVP_CIPHER_meth_free;
  ossl_EVP_CIPHER_meth_set_iv_length_t ossl_EVP_CIPHER_meth_set_iv_length;
  ossl_EVP_CIPHER_meth_set_flags_t ossl_EVP_CIPHER_meth_set_flags;
  ossl_EVP_CIPHER_meth_set_impl_ctx_size_t ossl_EVP_CIPHER_meth_set_impl_ctx_size;
  ossl_EVP_CIPHER_meth_set_init_t ossl_EVP_CIPHER_meth_set_init;
  ossl_EVP_CIPHER_meth_set_do_cipher_t ossl_EVP_CIPHER_meth_set_do_cipher;
  ossl_EVP_CIPHER_meth_set_cleanup_t ossl_EVP_CIPHER_meth_set_cleanup;
  ossl_EVP_CIPHER_meth_set_set_asn1_params_t ossl_EVP_CIPHER_meth_set_set_asn1_params;
  ossl_EVP_CIPHER_meth_set_get_asn1_params_t ossl_EVP_CIPHER_meth_set_get_asn1_params;
  ossl_EVP_CIPHER_meth_set_ctrl_t ossl_EVP_CIPHER_meth_set_ctrl;
  ossl_EVP_CIPHER_meth_get_init_t ossl_EVP_CIPHER_meth_get_init;
  ossl_EVP_CIPHER_meth_get_do_cipher_t ossl_EVP_CIPHER_meth_get_do_cipher;
  ossl_EVP_CIPHER_meth_get_cleanup_t ossl_EVP_CIPHER_meth_get_cleanup;
  ossl_EVP_CIPHER_meth_get_set_asn1_params_t ossl_EVP_CIPHER_meth_get_set_asn1_params;
  ossl_EVP_CIPHER_meth_get_get_asn1_params_t ossl_EVP_CIPHER_meth_get_get_asn1_params;
  ossl_EVP_CIPHER_meth_get_ctrl_t ossl_EVP_CIPHER_meth_get_ctrl;
  ossl_EVP_MD_get_type_t ossl_EVP_MD_get_type;
  ossl_EVP_MD_get0_name_t ossl_EVP_MD_get0_name;
  ossl_EVP_MD_get0_description_t ossl_EVP_MD_get0_description;
  ossl_EVP_MD_is_a_t ossl_EVP_MD_is_a;
  ossl_EVP_MD_names_do_all_t ossl_EVP_MD_names_do_all;
  ossl_EVP_MD_get0_provider_t ossl_EVP_MD_get0_provider;
  ossl_EVP_MD_get_pkey_type_t ossl_EVP_MD_get_pkey_type;
  ossl_EVP_MD_get_size_t ossl_EVP_MD_get_size;
  ossl_EVP_MD_get_block_size_t ossl_EVP_MD_get_block_size;
  ossl_EVP_MD_get_flags_t ossl_EVP_MD_get_flags;
  ossl_EVP_MD_CTX_get0_md_t ossl_EVP_MD_CTX_get0_md;
  ossl_EVP_MD_CTX_get1_md_t ossl_EVP_MD_CTX_get1_md;
  ossl_EVP_MD_CTX_md_t ossl_EVP_MD_CTX_md;
  ossl_EVP_MD_CTX_update_fn_t ossl_EVP_MD_CTX_update_fn;
  ossl_EVP_MD_CTX_set_update_fn_t ossl_EVP_MD_CTX_set_update_fn;
  ossl_EVP_MD_CTX_get_pkey_ctx_t ossl_EVP_MD_CTX_get_pkey_ctx;
  ossl_EVP_MD_CTX_set_pkey_ctx_t ossl_EVP_MD_CTX_set_pkey_ctx;
  ossl_EVP_MD_CTX_get0_md_data_t ossl_EVP_MD_CTX_get0_md_data;
  ossl_EVP_CIPHER_get_nid_t ossl_EVP_CIPHER_get_nid;
  ossl_EVP_CIPHER_get0_name_t ossl_EVP_CIPHER_get0_name;
  ossl_EVP_CIPHER_get0_description_t ossl_EVP_CIPHER_get0_description;
  ossl_EVP_CIPHER_is_a_t ossl_EVP_CIPHER_is_a;
  ossl_EVP_CIPHER_names_do_all_t ossl_EVP_CIPHER_names_do_all;
  ossl_EVP_CIPHER_get0_provider_t ossl_EVP_CIPHER_get0_provider;
  ossl_EVP_CIPHER_get_block_size_t ossl_EVP_CIPHER_get_block_size;
  ossl_EVP_CIPHER_impl_ctx_size_t ossl_EVP_CIPHER_impl_ctx_size;
  ossl_EVP_CIPHER_get_key_length_t ossl_EVP_CIPHER_get_key_length;
  ossl_EVP_CIPHER_get_iv_length_t ossl_EVP_CIPHER_get_iv_length;
  ossl_EVP_CIPHER_get_flags_t ossl_EVP_CIPHER_get_flags;
  ossl_EVP_CIPHER_get_mode_t ossl_EVP_CIPHER_get_mode;
  ossl_EVP_CIPHER_get_type_t ossl_EVP_CIPHER_get_type;
  ossl_EVP_CIPHER_fetch_t ossl_EVP_CIPHER_fetch;
  ossl_EVP_CIPHER_up_ref_t ossl_EVP_CIPHER_up_ref;
  ossl_EVP_CIPHER_free_t ossl_EVP_CIPHER_free;
  ossl_EVP_CIPHER_CTX_get0_cipher_t ossl_EVP_CIPHER_CTX_get0_cipher;
  ossl_EVP_CIPHER_CTX_get1_cipher_t ossl_EVP_CIPHER_CTX_get1_cipher;
  ossl_EVP_CIPHER_CTX_is_encrypting_t ossl_EVP_CIPHER_CTX_is_encrypting;
  ossl_EVP_CIPHER_CTX_get_nid_t ossl_EVP_CIPHER_CTX_get_nid;
  ossl_EVP_CIPHER_CTX_get_block_size_t ossl_EVP_CIPHER_CTX_get_block_size;
  ossl_EVP_CIPHER_CTX_get_key_length_t ossl_EVP_CIPHER_CTX_get_key_length;
  ossl_EVP_CIPHER_CTX_get_iv_length_t ossl_EVP_CIPHER_CTX_get_iv_length;
  ossl_EVP_CIPHER_CTX_get_tag_length_t ossl_EVP_CIPHER_CTX_get_tag_length;
  ossl_EVP_CIPHER_CTX_cipher_t ossl_EVP_CIPHER_CTX_cipher;
  ossl_EVP_CIPHER_CTX_iv_t ossl_EVP_CIPHER_CTX_iv;
  ossl_EVP_CIPHER_CTX_original_iv_t ossl_EVP_CIPHER_CTX_original_iv;
  ossl_EVP_CIPHER_CTX_iv_noconst_t ossl_EVP_CIPHER_CTX_iv_noconst;
  ossl_EVP_CIPHER_CTX_get_updated_iv_t ossl_EVP_CIPHER_CTX_get_updated_iv;
  ossl_EVP_CIPHER_CTX_get_original_iv_t ossl_EVP_CIPHER_CTX_get_original_iv;
  ossl_EVP_CIPHER_CTX_buf_noconst_t ossl_EVP_CIPHER_CTX_buf_noconst;
  ossl_EVP_CIPHER_CTX_get_num_t ossl_EVP_CIPHER_CTX_get_num;
  ossl_EVP_CIPHER_CTX_set_num_t ossl_EVP_CIPHER_CTX_set_num;
  ossl_EVP_CIPHER_CTX_copy_t ossl_EVP_CIPHER_CTX_copy;
  ossl_EVP_CIPHER_CTX_get_app_data_t ossl_EVP_CIPHER_CTX_get_app_data;
  ossl_EVP_CIPHER_CTX_set_app_data_t ossl_EVP_CIPHER_CTX_set_app_data;
  ossl_EVP_CIPHER_CTX_get_cipher_data_t ossl_EVP_CIPHER_CTX_get_cipher_data;
  ossl_EVP_CIPHER_CTX_set_cipher_data_t ossl_EVP_CIPHER_CTX_set_cipher_data;
  ossl_EVP_Cipher_t ossl_EVP_Cipher;
  ossl_EVP_MD_get_params_t ossl_EVP_MD_get_params;
  ossl_EVP_MD_CTX_set_params_t ossl_EVP_MD_CTX_set_params;
  ossl_EVP_MD_CTX_get_params_t ossl_EVP_MD_CTX_get_params;
  ossl_EVP_MD_gettable_params_t ossl_EVP_MD_gettable_params;
  ossl_EVP_MD_settable_ctx_params_t ossl_EVP_MD_settable_ctx_params;
  ossl_EVP_MD_gettable_ctx_params_t ossl_EVP_MD_gettable_ctx_params;
  ossl_EVP_MD_CTX_settable_params_t ossl_EVP_MD_CTX_settable_params;
  ossl_EVP_MD_CTX_gettable_params_t ossl_EVP_MD_CTX_gettable_params;
  ossl_EVP_MD_CTX_ctrl_t ossl_EVP_MD_CTX_ctrl;
  ossl_EVP_MD_CTX_new_t ossl_EVP_MD_CTX_new;
  ossl_EVP_MD_CTX_reset_t ossl_EVP_MD_CTX_reset;
  ossl_EVP_MD_CTX_free_t ossl_EVP_MD_CTX_free;
  ossl_EVP_MD_CTX_copy_ex_t ossl_EVP_MD_CTX_copy_ex;
  ossl_EVP_MD_CTX_set_flags_t ossl_EVP_MD_CTX_set_flags;
  ossl_EVP_MD_CTX_clear_flags_t ossl_EVP_MD_CTX_clear_flags;
  ossl_EVP_MD_CTX_test_flags_t ossl_EVP_MD_CTX_test_flags;
  ossl_EVP_DigestInit_ex2_t ossl_EVP_DigestInit_ex2;
  ossl_EVP_DigestInit_ex_t ossl_EVP_DigestInit_ex;
  ossl_EVP_DigestUpdate_t ossl_EVP_DigestUpdate;
  ossl_EVP_DigestFinal_ex_t ossl_EVP_DigestFinal_ex;
  ossl_EVP_Digest_t ossl_EVP_Digest;
  ossl_EVP_Q_digest_t ossl_EVP_Q_digest;
  ossl_EVP_MD_CTX_copy_t ossl_EVP_MD_CTX_copy;
  ossl_EVP_DigestInit_t ossl_EVP_DigestInit;
  ossl_EVP_DigestFinal_t ossl_EVP_DigestFinal;
  ossl_EVP_DigestFinalXOF_t ossl_EVP_DigestFinalXOF;
  ossl_EVP_MD_fetch_t ossl_EVP_MD_fetch;
  ossl_EVP_MD_up_ref_t ossl_EVP_MD_up_ref;
  ossl_EVP_MD_free_t ossl_EVP_MD_free;
  ossl_EVP_read_pw_string_t ossl_EVP_read_pw_string;
  ossl_EVP_read_pw_string_min_t ossl_EVP_read_pw_string_min;
  ossl_EVP_set_pw_prompt_t ossl_EVP_set_pw_prompt;
  ossl_EVP_get_pw_prompt_t ossl_EVP_get_pw_prompt;
  ossl_EVP_BytesToKey_t ossl_EVP_BytesToKey;
  ossl_EVP_CIPHER_CTX_set_flags_t ossl_EVP_CIPHER_CTX_set_flags;
  ossl_EVP_CIPHER_CTX_clear_flags_t ossl_EVP_CIPHER_CTX_clear_flags;
  ossl_EVP_CIPHER_CTX_test_flags_t ossl_EVP_CIPHER_CTX_test_flags;
  ossl_EVP_EncryptInit_t ossl_EVP_EncryptInit;
  ossl_EVP_EncryptInit_ex_t ossl_EVP_EncryptInit_ex;
  ossl_EVP_EncryptInit_ex2_t ossl_EVP_EncryptInit_ex2;
  ossl_EVP_EncryptUpdate_t ossl_EVP_EncryptUpdate;
  ossl_EVP_EncryptFinal_ex_t ossl_EVP_EncryptFinal_ex;
  ossl_EVP_EncryptFinal_t ossl_EVP_EncryptFinal;
  ossl_EVP_DecryptInit_t ossl_EVP_DecryptInit;
  ossl_EVP_DecryptInit_ex_t ossl_EVP_DecryptInit_ex;
  ossl_EVP_DecryptInit_ex2_t ossl_EVP_DecryptInit_ex2;
  ossl_EVP_DecryptUpdate_t ossl_EVP_DecryptUpdate;
  ossl_EVP_DecryptFinal_t ossl_EVP_DecryptFinal;
  ossl_EVP_DecryptFinal_ex_t ossl_EVP_DecryptFinal_ex;
  ossl_EVP_CipherInit_t ossl_EVP_CipherInit;
  ossl_EVP_CipherInit_ex_t ossl_EVP_CipherInit_ex;
  ossl_EVP_CipherInit_ex2_t ossl_EVP_CipherInit_ex2;
  ossl_EVP_CipherUpdate_t ossl_EVP_CipherUpdate;
  ossl_EVP_CipherFinal_t ossl_EVP_CipherFinal;
  ossl_EVP_CipherFinal_ex_t ossl_EVP_CipherFinal_ex;
  ossl_EVP_SignFinal_t ossl_EVP_SignFinal;
  ossl_EVP_SignFinal_ex_t ossl_EVP_SignFinal_ex;
  ossl_EVP_DigestSign_t ossl_EVP_DigestSign;
  ossl_EVP_VerifyFinal_t ossl_EVP_VerifyFinal;
  ossl_EVP_VerifyFinal_ex_t ossl_EVP_VerifyFinal_ex;
  ossl_EVP_DigestVerify_t ossl_EVP_DigestVerify;
  ossl_EVP_DigestSignInit_ex_t ossl_EVP_DigestSignInit_ex;
  ossl_EVP_DigestSignInit_t ossl_EVP_DigestSignInit;
  ossl_EVP_DigestSignUpdate_t ossl_EVP_DigestSignUpdate;
  ossl_EVP_DigestSignFinal_t ossl_EVP_DigestSignFinal;
  ossl_EVP_DigestVerifyInit_ex_t ossl_EVP_DigestVerifyInit_ex;
  ossl_EVP_DigestVerifyInit_t ossl_EVP_DigestVerifyInit;
  ossl_EVP_DigestVerifyUpdate_t ossl_EVP_DigestVerifyUpdate;
  ossl_EVP_DigestVerifyFinal_t ossl_EVP_DigestVerifyFinal;
  ossl_EVP_OpenInit_t ossl_EVP_OpenInit;
  ossl_EVP_OpenFinal_t ossl_EVP_OpenFinal;
  ossl_EVP_SealInit_t ossl_EVP_SealInit;
  ossl_EVP_SealFinal_t ossl_EVP_SealFinal;
  ossl_EVP_ENCODE_CTX_new_t ossl_EVP_ENCODE_CTX_new;
  ossl_EVP_ENCODE_CTX_free_t ossl_EVP_ENCODE_CTX_free;
  ossl_EVP_ENCODE_CTX_copy_t ossl_EVP_ENCODE_CTX_copy;
  ossl_EVP_ENCODE_CTX_num_t ossl_EVP_ENCODE_CTX_num;
  ossl_EVP_EncodeInit_t ossl_EVP_EncodeInit;
  ossl_EVP_EncodeUpdate_t ossl_EVP_EncodeUpdate;
  ossl_EVP_EncodeFinal_t ossl_EVP_EncodeFinal;
  ossl_EVP_EncodeBlock_t ossl_EVP_EncodeBlock;
  ossl_EVP_DecodeInit_t ossl_EVP_DecodeInit;
  ossl_EVP_DecodeUpdate_t ossl_EVP_DecodeUpdate;
  ossl_EVP_DecodeFinal_t ossl_EVP_DecodeFinal;
  ossl_EVP_DecodeBlock_t ossl_EVP_DecodeBlock;
  ossl_EVP_CIPHER_CTX_new_t ossl_EVP_CIPHER_CTX_new;
  ossl_EVP_CIPHER_CTX_reset_t ossl_EVP_CIPHER_CTX_reset;
  ossl_EVP_CIPHER_CTX_free_t ossl_EVP_CIPHER_CTX_free;
  ossl_EVP_CIPHER_CTX_set_key_length_t ossl_EVP_CIPHER_CTX_set_key_length;
  ossl_EVP_CIPHER_CTX_set_padding_t ossl_EVP_CIPHER_CTX_set_padding;
  ossl_EVP_CIPHER_CTX_ctrl_t ossl_EVP_CIPHER_CTX_ctrl;
  ossl_EVP_CIPHER_CTX_rand_key_t ossl_EVP_CIPHER_CTX_rand_key;
  ossl_EVP_CIPHER_get_params_t ossl_EVP_CIPHER_get_params;
  ossl_EVP_CIPHER_CTX_set_params_t ossl_EVP_CIPHER_CTX_set_params;
  ossl_EVP_CIPHER_CTX_get_params_t ossl_EVP_CIPHER_CTX_get_params;
  ossl_EVP_CIPHER_gettable_params_t ossl_EVP_CIPHER_gettable_params;
  ossl_EVP_CIPHER_settable_ctx_params_t ossl_EVP_CIPHER_settable_ctx_params;
  ossl_EVP_CIPHER_gettable_ctx_params_t ossl_EVP_CIPHER_gettable_ctx_params;
  ossl_EVP_CIPHER_CTX_settable_params_t ossl_EVP_CIPHER_CTX_settable_params;
  ossl_EVP_CIPHER_CTX_gettable_params_t ossl_EVP_CIPHER_CTX_gettable_params;
  ossl_BIO_f_md_t ossl_BIO_f_md;
  ossl_BIO_f_base64_t ossl_BIO_f_base64;
  ossl_BIO_f_cipher_t ossl_BIO_f_cipher;
  ossl_BIO_f_reliable_t ossl_BIO_f_reliable;
  ossl_BIO_set_cipher_t ossl_BIO_set_cipher;
  ossl_EVP_md_null_t ossl_EVP_md_null;
  ossl_EVP_md4_t ossl_EVP_md4;
  ossl_EVP_md5_t ossl_EVP_md5;
  ossl_EVP_md5_sha1_t ossl_EVP_md5_sha1;
  ossl_EVP_blake2b512_t ossl_EVP_blake2b512;
  ossl_EVP_blake2s256_t ossl_EVP_blake2s256;
  ossl_EVP_sha1_t ossl_EVP_sha1;
  ossl_EVP_sha224_t ossl_EVP_sha224;
  ossl_EVP_sha256_t ossl_EVP_sha256;
  ossl_EVP_sha384_t ossl_EVP_sha384;
  ossl_EVP_sha512_t ossl_EVP_sha512;
  ossl_EVP_sha512_224_t ossl_EVP_sha512_224;
  ossl_EVP_sha512_256_t ossl_EVP_sha512_256;
  ossl_EVP_sha3_224_t ossl_EVP_sha3_224;
  ossl_EVP_sha3_256_t ossl_EVP_sha3_256;
  ossl_EVP_sha3_384_t ossl_EVP_sha3_384;
  ossl_EVP_sha3_512_t ossl_EVP_sha3_512;
  ossl_EVP_shake128_t ossl_EVP_shake128;
  ossl_EVP_shake256_t ossl_EVP_shake256;
  ossl_EVP_mdc2_t ossl_EVP_mdc2;
  ossl_EVP_ripemd160_t ossl_EVP_ripemd160;
  ossl_EVP_whirlpool_t ossl_EVP_whirlpool;
  ossl_EVP_sm3_t ossl_EVP_sm3;
  ossl_EVP_enc_null_t ossl_EVP_enc_null;
  ossl_EVP_des_ecb_t ossl_EVP_des_ecb;
  ossl_EVP_des_ede_t ossl_EVP_des_ede;
  ossl_EVP_des_ede3_t ossl_EVP_des_ede3;
  ossl_EVP_des_ede_ecb_t ossl_EVP_des_ede_ecb;
  ossl_EVP_des_ede3_ecb_t ossl_EVP_des_ede3_ecb;
  ossl_EVP_des_cfb64_t ossl_EVP_des_cfb64;
  ossl_EVP_des_cfb1_t ossl_EVP_des_cfb1;
  ossl_EVP_des_cfb8_t ossl_EVP_des_cfb8;
  ossl_EVP_des_ede_cfb64_t ossl_EVP_des_ede_cfb64;
  ossl_EVP_des_ede3_cfb64_t ossl_EVP_des_ede3_cfb64;
  ossl_EVP_des_ede3_cfb1_t ossl_EVP_des_ede3_cfb1;
  ossl_EVP_des_ede3_cfb8_t ossl_EVP_des_ede3_cfb8;
  ossl_EVP_des_ofb_t ossl_EVP_des_ofb;
  ossl_EVP_des_ede_ofb_t ossl_EVP_des_ede_ofb;
  ossl_EVP_des_ede3_ofb_t ossl_EVP_des_ede3_ofb;
  ossl_EVP_des_cbc_t ossl_EVP_des_cbc;
  ossl_EVP_des_ede_cbc_t ossl_EVP_des_ede_cbc;
  ossl_EVP_des_ede3_cbc_t ossl_EVP_des_ede3_cbc;
  ossl_EVP_desx_cbc_t ossl_EVP_desx_cbc;
  ossl_EVP_des_ede3_wrap_t ossl_EVP_des_ede3_wrap;
  ossl_EVP_rc4_t ossl_EVP_rc4;
  ossl_EVP_rc4_40_t ossl_EVP_rc4_40;
  ossl_EVP_rc4_hmac_md5_t ossl_EVP_rc4_hmac_md5;
  ossl_EVP_idea_ecb_t ossl_EVP_idea_ecb;
  ossl_EVP_idea_cfb64_t ossl_EVP_idea_cfb64;
  ossl_EVP_idea_ofb_t ossl_EVP_idea_ofb;
  ossl_EVP_idea_cbc_t ossl_EVP_idea_cbc;
  ossl_EVP_rc2_ecb_t ossl_EVP_rc2_ecb;
  ossl_EVP_rc2_cbc_t ossl_EVP_rc2_cbc;
  ossl_EVP_rc2_40_cbc_t ossl_EVP_rc2_40_cbc;
  ossl_EVP_rc2_64_cbc_t ossl_EVP_rc2_64_cbc;
  ossl_EVP_rc2_cfb64_t ossl_EVP_rc2_cfb64;
  ossl_EVP_rc2_ofb_t ossl_EVP_rc2_ofb;
  ossl_EVP_bf_ecb_t ossl_EVP_bf_ecb;
  ossl_EVP_bf_cbc_t ossl_EVP_bf_cbc;
  ossl_EVP_bf_cfb64_t ossl_EVP_bf_cfb64;
  ossl_EVP_bf_ofb_t ossl_EVP_bf_ofb;
  ossl_EVP_cast5_ecb_t ossl_EVP_cast5_ecb;
  ossl_EVP_cast5_cbc_t ossl_EVP_cast5_cbc;
  ossl_EVP_cast5_cfb64_t ossl_EVP_cast5_cfb64;
  ossl_EVP_cast5_ofb_t ossl_EVP_cast5_ofb;
  ossl_EVP_aes_128_ecb_t ossl_EVP_aes_128_ecb;
  ossl_EVP_aes_128_cbc_t ossl_EVP_aes_128_cbc;
  ossl_EVP_aes_128_cfb1_t ossl_EVP_aes_128_cfb1;
  ossl_EVP_aes_128_cfb8_t ossl_EVP_aes_128_cfb8;
  ossl_EVP_aes_128_cfb128_t ossl_EVP_aes_128_cfb128;
  ossl_EVP_aes_128_ofb_t ossl_EVP_aes_128_ofb;
  ossl_EVP_aes_128_ctr_t ossl_EVP_aes_128_ctr;
  ossl_EVP_aes_128_ccm_t ossl_EVP_aes_128_ccm;
  ossl_EVP_aes_128_gcm_t ossl_EVP_aes_128_gcm;
  ossl_EVP_aes_128_xts_t ossl_EVP_aes_128_xts;
  ossl_EVP_aes_128_wrap_t ossl_EVP_aes_128_wrap;
  ossl_EVP_aes_128_wrap_pad_t ossl_EVP_aes_128_wrap_pad;
  ossl_EVP_aes_128_ocb_t ossl_EVP_aes_128_ocb;
  ossl_EVP_aes_192_ecb_t ossl_EVP_aes_192_ecb;
  ossl_EVP_aes_192_cbc_t ossl_EVP_aes_192_cbc;
  ossl_EVP_aes_192_cfb1_t ossl_EVP_aes_192_cfb1;
  ossl_EVP_aes_192_cfb8_t ossl_EVP_aes_192_cfb8;
  ossl_EVP_aes_192_cfb128_t ossl_EVP_aes_192_cfb128;
  ossl_EVP_aes_192_ofb_t ossl_EVP_aes_192_ofb;
  ossl_EVP_aes_192_ctr_t ossl_EVP_aes_192_ctr;
  ossl_EVP_aes_192_ccm_t ossl_EVP_aes_192_ccm;
  ossl_EVP_aes_192_gcm_t ossl_EVP_aes_192_gcm;
  ossl_EVP_aes_192_wrap_t ossl_EVP_aes_192_wrap;
  ossl_EVP_aes_192_wrap_pad_t ossl_EVP_aes_192_wrap_pad;
  ossl_EVP_aes_192_ocb_t ossl_EVP_aes_192_ocb;
  ossl_EVP_aes_256_ecb_t ossl_EVP_aes_256_ecb;
  ossl_EVP_aes_256_cbc_t ossl_EVP_aes_256_cbc;
  ossl_EVP_aes_256_cfb1_t ossl_EVP_aes_256_cfb1;
  ossl_EVP_aes_256_cfb8_t ossl_EVP_aes_256_cfb8;
  ossl_EVP_aes_256_cfb128_t ossl_EVP_aes_256_cfb128;
  ossl_EVP_aes_256_ofb_t ossl_EVP_aes_256_ofb;
  ossl_EVP_aes_256_ctr_t ossl_EVP_aes_256_ctr;
  ossl_EVP_aes_256_ccm_t ossl_EVP_aes_256_ccm;
  ossl_EVP_aes_256_gcm_t ossl_EVP_aes_256_gcm;
  ossl_EVP_aes_256_xts_t ossl_EVP_aes_256_xts;
  ossl_EVP_aes_256_wrap_t ossl_EVP_aes_256_wrap;
  ossl_EVP_aes_256_wrap_pad_t ossl_EVP_aes_256_wrap_pad;
  ossl_EVP_aes_256_ocb_t ossl_EVP_aes_256_ocb;
  ossl_EVP_aes_128_cbc_hmac_sha1_t ossl_EVP_aes_128_cbc_hmac_sha1;
  ossl_EVP_aes_256_cbc_hmac_sha1_t ossl_EVP_aes_256_cbc_hmac_sha1;
  ossl_EVP_aes_128_cbc_hmac_sha256_t ossl_EVP_aes_128_cbc_hmac_sha256;
  ossl_EVP_aes_256_cbc_hmac_sha256_t ossl_EVP_aes_256_cbc_hmac_sha256;
  ossl_EVP_aria_128_ecb_t ossl_EVP_aria_128_ecb;
  ossl_EVP_aria_128_cbc_t ossl_EVP_aria_128_cbc;
  ossl_EVP_aria_128_cfb1_t ossl_EVP_aria_128_cfb1;
  ossl_EVP_aria_128_cfb8_t ossl_EVP_aria_128_cfb8;
  ossl_EVP_aria_128_cfb128_t ossl_EVP_aria_128_cfb128;
  ossl_EVP_aria_128_ctr_t ossl_EVP_aria_128_ctr;
  ossl_EVP_aria_128_ofb_t ossl_EVP_aria_128_ofb;
  ossl_EVP_aria_128_gcm_t ossl_EVP_aria_128_gcm;
  ossl_EVP_aria_128_ccm_t ossl_EVP_aria_128_ccm;
  ossl_EVP_aria_192_ecb_t ossl_EVP_aria_192_ecb;
  ossl_EVP_aria_192_cbc_t ossl_EVP_aria_192_cbc;
  ossl_EVP_aria_192_cfb1_t ossl_EVP_aria_192_cfb1;
  ossl_EVP_aria_192_cfb8_t ossl_EVP_aria_192_cfb8;
  ossl_EVP_aria_192_cfb128_t ossl_EVP_aria_192_cfb128;
  ossl_EVP_aria_192_ctr_t ossl_EVP_aria_192_ctr;
  ossl_EVP_aria_192_ofb_t ossl_EVP_aria_192_ofb;
  ossl_EVP_aria_192_gcm_t ossl_EVP_aria_192_gcm;
  ossl_EVP_aria_192_ccm_t ossl_EVP_aria_192_ccm;
  ossl_EVP_aria_256_ecb_t ossl_EVP_aria_256_ecb;
  ossl_EVP_aria_256_cbc_t ossl_EVP_aria_256_cbc;
  ossl_EVP_aria_256_cfb1_t ossl_EVP_aria_256_cfb1;
  ossl_EVP_aria_256_cfb8_t ossl_EVP_aria_256_cfb8;
  ossl_EVP_aria_256_cfb128_t ossl_EVP_aria_256_cfb128;
  ossl_EVP_aria_256_ctr_t ossl_EVP_aria_256_ctr;
  ossl_EVP_aria_256_ofb_t ossl_EVP_aria_256_ofb;
  ossl_EVP_aria_256_gcm_t ossl_EVP_aria_256_gcm;
  ossl_EVP_aria_256_ccm_t ossl_EVP_aria_256_ccm;
  ossl_EVP_camellia_128_ecb_t ossl_EVP_camellia_128_ecb;
  ossl_EVP_camellia_128_cbc_t ossl_EVP_camellia_128_cbc;
  ossl_EVP_camellia_128_cfb1_t ossl_EVP_camellia_128_cfb1;
  ossl_EVP_camellia_128_cfb8_t ossl_EVP_camellia_128_cfb8;
  ossl_EVP_camellia_128_cfb128_t ossl_EVP_camellia_128_cfb128;
  ossl_EVP_camellia_128_ofb_t ossl_EVP_camellia_128_ofb;
  ossl_EVP_camellia_128_ctr_t ossl_EVP_camellia_128_ctr;
  ossl_EVP_camellia_192_ecb_t ossl_EVP_camellia_192_ecb;
  ossl_EVP_camellia_192_cbc_t ossl_EVP_camellia_192_cbc;
  ossl_EVP_camellia_192_cfb1_t ossl_EVP_camellia_192_cfb1;
  ossl_EVP_camellia_192_cfb8_t ossl_EVP_camellia_192_cfb8;
  ossl_EVP_camellia_192_cfb128_t ossl_EVP_camellia_192_cfb128;
  ossl_EVP_camellia_192_ofb_t ossl_EVP_camellia_192_ofb;
  ossl_EVP_camellia_192_ctr_t ossl_EVP_camellia_192_ctr;
  ossl_EVP_camellia_256_ecb_t ossl_EVP_camellia_256_ecb;
  ossl_EVP_camellia_256_cbc_t ossl_EVP_camellia_256_cbc;
  ossl_EVP_camellia_256_cfb1_t ossl_EVP_camellia_256_cfb1;
  ossl_EVP_camellia_256_cfb8_t ossl_EVP_camellia_256_cfb8;
  ossl_EVP_camellia_256_cfb128_t ossl_EVP_camellia_256_cfb128;
  ossl_EVP_camellia_256_ofb_t ossl_EVP_camellia_256_ofb;
  ossl_EVP_camellia_256_ctr_t ossl_EVP_camellia_256_ctr;
  ossl_EVP_chacha20_t ossl_EVP_chacha20;
  ossl_EVP_chacha20_poly1305_t ossl_EVP_chacha20_poly1305;
  ossl_EVP_seed_ecb_t ossl_EVP_seed_ecb;
  ossl_EVP_seed_cbc_t ossl_EVP_seed_cbc;
  ossl_EVP_seed_cfb128_t ossl_EVP_seed_cfb128;
  ossl_EVP_seed_ofb_t ossl_EVP_seed_ofb;
  ossl_EVP_sm4_ecb_t ossl_EVP_sm4_ecb;
  ossl_EVP_sm4_cbc_t ossl_EVP_sm4_cbc;
  ossl_EVP_sm4_cfb128_t ossl_EVP_sm4_cfb128;
  ossl_EVP_sm4_ofb_t ossl_EVP_sm4_ofb;
  ossl_EVP_sm4_ctr_t ossl_EVP_sm4_ctr;
  ossl_EVP_add_cipher_t ossl_EVP_add_cipher;
  ossl_EVP_add_digest_t ossl_EVP_add_digest;
  ossl_EVP_get_cipherbyname_t ossl_EVP_get_cipherbyname;
  ossl_EVP_get_digestbyname_t ossl_EVP_get_digestbyname;
  ossl_EVP_CIPHER_do_all_t ossl_EVP_CIPHER_do_all;
  ossl_EVP_CIPHER_do_all_sorted_t ossl_EVP_CIPHER_do_all_sorted;
  ossl_EVP_CIPHER_do_all_provided_t ossl_EVP_CIPHER_do_all_provided;
  ossl_EVP_MD_do_all_t ossl_EVP_MD_do_all;
  ossl_EVP_MD_do_all_sorted_t ossl_EVP_MD_do_all_sorted;
  ossl_EVP_MD_do_all_provided_t ossl_EVP_MD_do_all_provided;
  ossl_EVP_MAC_fetch_t ossl_EVP_MAC_fetch;
  ossl_EVP_MAC_up_ref_t ossl_EVP_MAC_up_ref;
  ossl_EVP_MAC_free_t ossl_EVP_MAC_free;
  ossl_EVP_MAC_get0_name_t ossl_EVP_MAC_get0_name;
  ossl_EVP_MAC_get0_description_t ossl_EVP_MAC_get0_description;
  ossl_EVP_MAC_is_a_t ossl_EVP_MAC_is_a;
  ossl_EVP_MAC_get0_provider_t ossl_EVP_MAC_get0_provider;
  ossl_EVP_MAC_get_params_t ossl_EVP_MAC_get_params;
  ossl_EVP_MAC_CTX_new_t ossl_EVP_MAC_CTX_new;
  ossl_EVP_MAC_CTX_free_t ossl_EVP_MAC_CTX_free;
  ossl_EVP_MAC_CTX_dup_t ossl_EVP_MAC_CTX_dup;
  ossl_EVP_MAC_CTX_get0_mac_t ossl_EVP_MAC_CTX_get0_mac;
  ossl_EVP_MAC_CTX_get_params_t ossl_EVP_MAC_CTX_get_params;
  ossl_EVP_MAC_CTX_set_params_t ossl_EVP_MAC_CTX_set_params;
  ossl_EVP_MAC_CTX_get_mac_size_t ossl_EVP_MAC_CTX_get_mac_size;
  ossl_EVP_MAC_CTX_get_block_size_t ossl_EVP_MAC_CTX_get_block_size;
  ossl_EVP_Q_mac_t ossl_EVP_Q_mac;
  ossl_EVP_MAC_init_t ossl_EVP_MAC_init;
  ossl_EVP_MAC_update_t ossl_EVP_MAC_update;
  ossl_EVP_MAC_final_t ossl_EVP_MAC_final;
  ossl_EVP_MAC_finalXOF_t ossl_EVP_MAC_finalXOF;
  ossl_EVP_MAC_gettable_params_t ossl_EVP_MAC_gettable_params;
  ossl_EVP_MAC_gettable_ctx_params_t ossl_EVP_MAC_gettable_ctx_params;
  ossl_EVP_MAC_settable_ctx_params_t ossl_EVP_MAC_settable_ctx_params;
  ossl_EVP_MAC_CTX_gettable_params_t ossl_EVP_MAC_CTX_gettable_params;
  ossl_EVP_MAC_CTX_settable_params_t ossl_EVP_MAC_CTX_settable_params;
  ossl_EVP_MAC_do_all_provided_t ossl_EVP_MAC_do_all_provided;
  ossl_EVP_MAC_names_do_all_t ossl_EVP_MAC_names_do_all;
  ossl_EVP_RAND_fetch_t ossl_EVP_RAND_fetch;
  ossl_EVP_RAND_up_ref_t ossl_EVP_RAND_up_ref;
  ossl_EVP_RAND_free_t ossl_EVP_RAND_free;
  ossl_EVP_RAND_get0_name_t ossl_EVP_RAND_get0_name;
  ossl_EVP_RAND_get0_description_t ossl_EVP_RAND_get0_description;
  ossl_EVP_RAND_is_a_t ossl_EVP_RAND_is_a;
  ossl_EVP_RAND_get0_provider_t ossl_EVP_RAND_get0_provider;
  ossl_EVP_RAND_get_params_t ossl_EVP_RAND_get_params;
  ossl_EVP_RAND_CTX_new_t ossl_EVP_RAND_CTX_new;
  ossl_EVP_RAND_CTX_free_t ossl_EVP_RAND_CTX_free;
  ossl_EVP_RAND_CTX_get0_rand_t ossl_EVP_RAND_CTX_get0_rand;
  ossl_EVP_RAND_CTX_get_params_t ossl_EVP_RAND_CTX_get_params;
  ossl_EVP_RAND_CTX_set_params_t ossl_EVP_RAND_CTX_set_params;
  ossl_EVP_RAND_gettable_params_t ossl_EVP_RAND_gettable_params;
  ossl_EVP_RAND_gettable_ctx_params_t ossl_EVP_RAND_gettable_ctx_params;
  ossl_EVP_RAND_settable_ctx_params_t ossl_EVP_RAND_settable_ctx_params;
  ossl_EVP_RAND_CTX_gettable_params_t ossl_EVP_RAND_CTX_gettable_params;
  ossl_EVP_RAND_CTX_settable_params_t ossl_EVP_RAND_CTX_settable_params;
  ossl_EVP_RAND_do_all_provided_t ossl_EVP_RAND_do_all_provided;
  ossl_EVP_RAND_names_do_all_t ossl_EVP_RAND_names_do_all;
  ossl_EVP_RAND_instantiate_t ossl_EVP_RAND_instantiate;
  ossl_EVP_RAND_uninstantiate_t ossl_EVP_RAND_uninstantiate;
  ossl_EVP_RAND_generate_t ossl_EVP_RAND_generate;
  ossl_EVP_RAND_reseed_t ossl_EVP_RAND_reseed;
  ossl_EVP_RAND_nonce_t ossl_EVP_RAND_nonce;
  ossl_EVP_RAND_enable_locking_t ossl_EVP_RAND_enable_locking;
  ossl_EVP_RAND_verify_zeroization_t ossl_EVP_RAND_verify_zeroization;
  ossl_EVP_RAND_get_strength_t ossl_EVP_RAND_get_strength;
  ossl_EVP_RAND_get_state_t ossl_EVP_RAND_get_state;
  ossl_EVP_PKEY_decrypt_old_t ossl_EVP_PKEY_decrypt_old;
  ossl_EVP_PKEY_encrypt_old_t ossl_EVP_PKEY_encrypt_old;
  ossl_EVP_PKEY_is_a_t ossl_EVP_PKEY_is_a;
  ossl_EVP_PKEY_type_names_do_all_t ossl_EVP_PKEY_type_names_do_all;
  ossl_EVP_PKEY_type_t ossl_EVP_PKEY_type;
  ossl_EVP_PKEY_get_id_t ossl_EVP_PKEY_get_id;
  ossl_EVP_PKEY_get_base_id_t ossl_EVP_PKEY_get_base_id;
  ossl_EVP_PKEY_get_bits_t ossl_EVP_PKEY_get_bits;
  ossl_EVP_PKEY_get_security_bits_t ossl_EVP_PKEY_get_security_bits;
  ossl_EVP_PKEY_get_size_t ossl_EVP_PKEY_get_size;
  ossl_EVP_PKEY_can_sign_t ossl_EVP_PKEY_can_sign;
  ossl_EVP_PKEY_set_type_t ossl_EVP_PKEY_set_type;
  ossl_EVP_PKEY_set_type_str_t ossl_EVP_PKEY_set_type_str;
  ossl_EVP_PKEY_set_type_by_keymgmt_t ossl_EVP_PKEY_set_type_by_keymgmt;
  ossl_EVP_PKEY_set1_engine_t ossl_EVP_PKEY_set1_engine;
  ossl_EVP_PKEY_get0_engine_t ossl_EVP_PKEY_get0_engine;
  ossl_EVP_PKEY_assign_t ossl_EVP_PKEY_assign;
  ossl_EVP_PKEY_get0_t ossl_EVP_PKEY_get0;
  ossl_EVP_PKEY_get0_hmac_t ossl_EVP_PKEY_get0_hmac;
  ossl_EVP_PKEY_get0_poly1305_t ossl_EVP_PKEY_get0_poly1305;
  ossl_EVP_PKEY_get0_siphash_t ossl_EVP_PKEY_get0_siphash;
  ossl_EVP_PKEY_set1_RSA_t ossl_EVP_PKEY_set1_RSA;
  ossl_EVP_PKEY_get0_RSA_t ossl_EVP_PKEY_get0_RSA;
  ossl_EVP_PKEY_get1_RSA_t ossl_EVP_PKEY_get1_RSA;
  ossl_EVP_PKEY_set1_DSA_t ossl_EVP_PKEY_set1_DSA;
  ossl_EVP_PKEY_get0_DSA_t ossl_EVP_PKEY_get0_DSA;
  ossl_EVP_PKEY_get1_DSA_t ossl_EVP_PKEY_get1_DSA;
  ossl_EVP_PKEY_set1_DH_t ossl_EVP_PKEY_set1_DH;
  ossl_EVP_PKEY_get0_DH_t ossl_EVP_PKEY_get0_DH;
  ossl_EVP_PKEY_get1_DH_t ossl_EVP_PKEY_get1_DH;
  ossl_EVP_PKEY_set1_EC_KEY_t ossl_EVP_PKEY_set1_EC_KEY;
  ossl_EVP_PKEY_get0_EC_KEY_t ossl_EVP_PKEY_get0_EC_KEY;
  ossl_EVP_PKEY_get1_EC_KEY_t ossl_EVP_PKEY_get1_EC_KEY;
  ossl_EVP_PKEY_new_t ossl_EVP_PKEY_new;
  ossl_EVP_PKEY_up_ref_t ossl_EVP_PKEY_up_ref;
  ossl_EVP_PKEY_dup_t ossl_EVP_PKEY_dup;
  ossl_EVP_PKEY_free_t ossl_EVP_PKEY_free;
  ossl_EVP_PKEY_get0_description_t ossl_EVP_PKEY_get0_description;
  ossl_EVP_PKEY_get0_provider_t ossl_EVP_PKEY_get0_provider;
  ossl_d2i_PublicKey_t ossl_d2i_PublicKey;
  ossl_i2d_PublicKey_t ossl_i2d_PublicKey;
  ossl_d2i_PrivateKey_ex_t ossl_d2i_PrivateKey_ex;
  ossl_d2i_PrivateKey_t ossl_d2i_PrivateKey;
  ossl_d2i_AutoPrivateKey_ex_t ossl_d2i_AutoPrivateKey_ex;
  ossl_d2i_AutoPrivateKey_t ossl_d2i_AutoPrivateKey;
  ossl_i2d_PrivateKey_t ossl_i2d_PrivateKey;
  ossl_i2d_KeyParams_t ossl_i2d_KeyParams;
  ossl_d2i_KeyParams_t ossl_d2i_KeyParams;
  ossl_i2d_KeyParams_bio_t ossl_i2d_KeyParams_bio;
  ossl_d2i_KeyParams_bio_t ossl_d2i_KeyParams_bio;
  ossl_EVP_PKEY_copy_parameters_t ossl_EVP_PKEY_copy_parameters;
  ossl_EVP_PKEY_missing_parameters_t ossl_EVP_PKEY_missing_parameters;
  ossl_EVP_PKEY_save_parameters_t ossl_EVP_PKEY_save_parameters;
  ossl_EVP_PKEY_parameters_eq_t ossl_EVP_PKEY_parameters_eq;
  ossl_EVP_PKEY_eq_t ossl_EVP_PKEY_eq;
  ossl_EVP_PKEY_cmp_parameters_t ossl_EVP_PKEY_cmp_parameters;
  ossl_EVP_PKEY_cmp_t ossl_EVP_PKEY_cmp;
  ossl_EVP_PKEY_print_public_t ossl_EVP_PKEY_print_public;
  ossl_EVP_PKEY_print_private_t ossl_EVP_PKEY_print_private;
  ossl_EVP_PKEY_print_params_t ossl_EVP_PKEY_print_params;
  ossl_EVP_PKEY_print_public_fp_t ossl_EVP_PKEY_print_public_fp;
  ossl_EVP_PKEY_print_private_fp_t ossl_EVP_PKEY_print_private_fp;
  ossl_EVP_PKEY_print_params_fp_t ossl_EVP_PKEY_print_params_fp;
  ossl_EVP_PKEY_get_default_digest_nid_t ossl_EVP_PKEY_get_default_digest_nid;
  ossl_EVP_PKEY_get_default_digest_name_t ossl_EVP_PKEY_get_default_digest_name;
  ossl_EVP_PKEY_digestsign_supports_digest_t ossl_EVP_PKEY_digestsign_supports_digest;
  ossl_EVP_PKEY_set1_encoded_public_key_t ossl_EVP_PKEY_set1_encoded_public_key;
  ossl_EVP_PKEY_get1_encoded_public_key_t ossl_EVP_PKEY_get1_encoded_public_key;
  ossl_EVP_CIPHER_param_to_asn1_t ossl_EVP_CIPHER_param_to_asn1;
  ossl_EVP_CIPHER_asn1_to_param_t ossl_EVP_CIPHER_asn1_to_param;
  ossl_EVP_CIPHER_set_asn1_iv_t ossl_EVP_CIPHER_set_asn1_iv;
  ossl_EVP_CIPHER_get_asn1_iv_t ossl_EVP_CIPHER_get_asn1_iv;
  ossl_PKCS5_PBE_keyivgen_t ossl_PKCS5_PBE_keyivgen;
  ossl_PKCS5_PBE_keyivgen_ex_t ossl_PKCS5_PBE_keyivgen_ex;
  ossl_PKCS5_PBKDF2_HMAC_SHA1_t ossl_PKCS5_PBKDF2_HMAC_SHA1;
  ossl_PKCS5_PBKDF2_HMAC_t ossl_PKCS5_PBKDF2_HMAC;
  ossl_PKCS5_v2_PBE_keyivgen_t ossl_PKCS5_v2_PBE_keyivgen;
  ossl_PKCS5_v2_PBE_keyivgen_ex_t ossl_PKCS5_v2_PBE_keyivgen_ex;
  ossl_EVP_PBE_scrypt_t ossl_EVP_PBE_scrypt;
  ossl_EVP_PBE_scrypt_ex_t ossl_EVP_PBE_scrypt_ex;
  ossl_PKCS5_v2_scrypt_keyivgen_t ossl_PKCS5_v2_scrypt_keyivgen;
  ossl_PKCS5_v2_scrypt_keyivgen_ex_t ossl_PKCS5_v2_scrypt_keyivgen_ex;
  ossl_PKCS5_PBE_add_t ossl_PKCS5_PBE_add;
  ossl_EVP_PBE_CipherInit_t ossl_EVP_PBE_CipherInit;
  ossl_EVP_PBE_CipherInit_ex_t ossl_EVP_PBE_CipherInit_ex;
  ossl_EVP_PBE_alg_add_type_t ossl_EVP_PBE_alg_add_type;
  ossl_EVP_PBE_alg_add_t ossl_EVP_PBE_alg_add;
  ossl_EVP_PBE_find_t ossl_EVP_PBE_find;
  ossl_EVP_PBE_find_ex_t ossl_EVP_PBE_find_ex;
  ossl_EVP_PBE_cleanup_t ossl_EVP_PBE_cleanup;
  ossl_EVP_PBE_get_t ossl_EVP_PBE_get;
  ossl_EVP_PKEY_asn1_get_count_t ossl_EVP_PKEY_asn1_get_count;
  ossl_EVP_PKEY_asn1_get0_t ossl_EVP_PKEY_asn1_get0;
  ossl_EVP_PKEY_asn1_find_t ossl_EVP_PKEY_asn1_find;
  ossl_EVP_PKEY_asn1_find_str_t ossl_EVP_PKEY_asn1_find_str;
  ossl_EVP_PKEY_asn1_add0_t ossl_EVP_PKEY_asn1_add0;
  ossl_EVP_PKEY_asn1_add_alias_t ossl_EVP_PKEY_asn1_add_alias;
  ossl_EVP_PKEY_asn1_get0_info_t ossl_EVP_PKEY_asn1_get0_info;
  ossl_EVP_PKEY_get0_asn1_t ossl_EVP_PKEY_get0_asn1;
  ossl_EVP_PKEY_asn1_new_t ossl_EVP_PKEY_asn1_new;
  ossl_EVP_PKEY_asn1_copy_t ossl_EVP_PKEY_asn1_copy;
  ossl_EVP_PKEY_asn1_free_t ossl_EVP_PKEY_asn1_free;
  ossl_EVP_PKEY_asn1_set_public_t ossl_EVP_PKEY_asn1_set_public;
  ossl_EVP_PKEY_asn1_set_private_t ossl_EVP_PKEY_asn1_set_private;
  ossl_EVP_PKEY_asn1_set_param_t ossl_EVP_PKEY_asn1_set_param;
  ossl_EVP_PKEY_asn1_set_free_t ossl_EVP_PKEY_asn1_set_free;
  ossl_EVP_PKEY_asn1_set_ctrl_t ossl_EVP_PKEY_asn1_set_ctrl;
  ossl_EVP_PKEY_asn1_set_item_t ossl_EVP_PKEY_asn1_set_item;
  ossl_EVP_PKEY_asn1_set_siginf_t ossl_EVP_PKEY_asn1_set_siginf;
  ossl_EVP_PKEY_asn1_set_check_t ossl_EVP_PKEY_asn1_set_check;
  ossl_EVP_PKEY_asn1_set_public_check_t ossl_EVP_PKEY_asn1_set_public_check;
  ossl_EVP_PKEY_asn1_set_param_check_t ossl_EVP_PKEY_asn1_set_param_check;
  ossl_EVP_PKEY_asn1_set_set_priv_key_t ossl_EVP_PKEY_asn1_set_set_priv_key;
  ossl_EVP_PKEY_asn1_set_set_pub_key_t ossl_EVP_PKEY_asn1_set_set_pub_key;
  ossl_EVP_PKEY_asn1_set_get_priv_key_t ossl_EVP_PKEY_asn1_set_get_priv_key;
  ossl_EVP_PKEY_asn1_set_get_pub_key_t ossl_EVP_PKEY_asn1_set_get_pub_key;
  ossl_EVP_PKEY_asn1_set_security_bits_t ossl_EVP_PKEY_asn1_set_security_bits;
  ossl_EVP_PKEY_CTX_get_signature_md_t ossl_EVP_PKEY_CTX_get_signature_md;
  ossl_EVP_PKEY_CTX_set_signature_md_t ossl_EVP_PKEY_CTX_set_signature_md;
  ossl_EVP_PKEY_CTX_set1_id_t ossl_EVP_PKEY_CTX_set1_id;
  ossl_EVP_PKEY_CTX_get1_id_t ossl_EVP_PKEY_CTX_get1_id;
  ossl_EVP_PKEY_CTX_get1_id_len_t ossl_EVP_PKEY_CTX_get1_id_len;
  ossl_EVP_PKEY_CTX_set_kem_op_t ossl_EVP_PKEY_CTX_set_kem_op;
  ossl_EVP_PKEY_get0_type_name_t ossl_EVP_PKEY_get0_type_name;
  ossl_EVP_PKEY_CTX_set_mac_key_t ossl_EVP_PKEY_CTX_set_mac_key;
  ossl_EVP_PKEY_meth_find_t ossl_EVP_PKEY_meth_find;
  ossl_EVP_PKEY_meth_new_t ossl_EVP_PKEY_meth_new;
  ossl_EVP_PKEY_meth_get0_info_t ossl_EVP_PKEY_meth_get0_info;
  ossl_EVP_PKEY_meth_copy_t ossl_EVP_PKEY_meth_copy;
  ossl_EVP_PKEY_meth_free_t ossl_EVP_PKEY_meth_free;
  ossl_EVP_PKEY_meth_add0_t ossl_EVP_PKEY_meth_add0;
  ossl_EVP_PKEY_meth_remove_t ossl_EVP_PKEY_meth_remove;
  ossl_EVP_PKEY_meth_get_count_t ossl_EVP_PKEY_meth_get_count;
  ossl_EVP_PKEY_meth_get0_t ossl_EVP_PKEY_meth_get0;
  ossl_EVP_KEYMGMT_fetch_t ossl_EVP_KEYMGMT_fetch;
  ossl_EVP_KEYMGMT_up_ref_t ossl_EVP_KEYMGMT_up_ref;
  ossl_EVP_KEYMGMT_free_t ossl_EVP_KEYMGMT_free;
  ossl_EVP_KEYMGMT_get0_provider_t ossl_EVP_KEYMGMT_get0_provider;
  ossl_EVP_KEYMGMT_get0_name_t ossl_EVP_KEYMGMT_get0_name;
  ossl_EVP_KEYMGMT_get0_description_t ossl_EVP_KEYMGMT_get0_description;
  ossl_EVP_KEYMGMT_is_a_t ossl_EVP_KEYMGMT_is_a;
  ossl_EVP_KEYMGMT_do_all_provided_t ossl_EVP_KEYMGMT_do_all_provided;
  ossl_EVP_KEYMGMT_names_do_all_t ossl_EVP_KEYMGMT_names_do_all;
  ossl_EVP_KEYMGMT_gettable_params_t ossl_EVP_KEYMGMT_gettable_params;
  ossl_EVP_KEYMGMT_settable_params_t ossl_EVP_KEYMGMT_settable_params;
  ossl_EVP_KEYMGMT_gen_settable_params_t ossl_EVP_KEYMGMT_gen_settable_params;
  ossl_EVP_PKEY_CTX_new_t ossl_EVP_PKEY_CTX_new;
  ossl_EVP_PKEY_CTX_new_id_t ossl_EVP_PKEY_CTX_new_id;
  ossl_EVP_PKEY_CTX_new_from_name_t ossl_EVP_PKEY_CTX_new_from_name;
  ossl_EVP_PKEY_CTX_new_from_pkey_t ossl_EVP_PKEY_CTX_new_from_pkey;
  ossl_EVP_PKEY_CTX_dup_t ossl_EVP_PKEY_CTX_dup;
  ossl_EVP_PKEY_CTX_free_t ossl_EVP_PKEY_CTX_free;
  ossl_EVP_PKEY_CTX_is_a_t ossl_EVP_PKEY_CTX_is_a;
  ossl_EVP_PKEY_CTX_get_params_t ossl_EVP_PKEY_CTX_get_params;
  ossl_EVP_PKEY_CTX_gettable_params_t ossl_EVP_PKEY_CTX_gettable_params;
  ossl_EVP_PKEY_CTX_set_params_t ossl_EVP_PKEY_CTX_set_params;
  ossl_EVP_PKEY_CTX_settable_params_t ossl_EVP_PKEY_CTX_settable_params;
  ossl_EVP_PKEY_CTX_ctrl_t ossl_EVP_PKEY_CTX_ctrl;
  ossl_EVP_PKEY_CTX_ctrl_str_t ossl_EVP_PKEY_CTX_ctrl_str;
  ossl_EVP_PKEY_CTX_ctrl_uint64_t ossl_EVP_PKEY_CTX_ctrl_uint64;
  ossl_EVP_PKEY_CTX_str2ctrl_t ossl_EVP_PKEY_CTX_str2ctrl;
  ossl_EVP_PKEY_CTX_hex2ctrl_t ossl_EVP_PKEY_CTX_hex2ctrl;
  ossl_EVP_PKEY_CTX_md_t ossl_EVP_PKEY_CTX_md;
  ossl_EVP_PKEY_CTX_get_operation_t ossl_EVP_PKEY_CTX_get_operation;
  ossl_EVP_PKEY_CTX_set0_keygen_info_t ossl_EVP_PKEY_CTX_set0_keygen_info;
  ossl_EVP_PKEY_new_mac_key_t ossl_EVP_PKEY_new_mac_key;
  ossl_EVP_PKEY_new_raw_private_key_ex_t ossl_EVP_PKEY_new_raw_private_key_ex;
  ossl_EVP_PKEY_new_raw_private_key_t ossl_EVP_PKEY_new_raw_private_key;
  ossl_EVP_PKEY_new_raw_public_key_ex_t ossl_EVP_PKEY_new_raw_public_key_ex;
  ossl_EVP_PKEY_new_raw_public_key_t ossl_EVP_PKEY_new_raw_public_key;
  ossl_EVP_PKEY_get_raw_private_key_t ossl_EVP_PKEY_get_raw_private_key;
  ossl_EVP_PKEY_get_raw_public_key_t ossl_EVP_PKEY_get_raw_public_key;
  ossl_EVP_PKEY_new_CMAC_key_t ossl_EVP_PKEY_new_CMAC_key;
  ossl_EVP_PKEY_CTX_set_data_t ossl_EVP_PKEY_CTX_set_data;
  ossl_EVP_PKEY_CTX_get_data_t ossl_EVP_PKEY_CTX_get_data;
  ossl_EVP_PKEY_CTX_get0_pkey_t ossl_EVP_PKEY_CTX_get0_pkey;
  ossl_EVP_PKEY_CTX_get0_peerkey_t ossl_EVP_PKEY_CTX_get0_peerkey;
  ossl_EVP_PKEY_CTX_set_app_data_t ossl_EVP_PKEY_CTX_set_app_data;
  ossl_EVP_PKEY_CTX_get_app_data_t ossl_EVP_PKEY_CTX_get_app_data;
  ossl_EVP_SIGNATURE_free_t ossl_EVP_SIGNATURE_free;
  ossl_EVP_SIGNATURE_up_ref_t ossl_EVP_SIGNATURE_up_ref;
  ossl_EVP_SIGNATURE_get0_provider_t ossl_EVP_SIGNATURE_get0_provider;
  ossl_EVP_SIGNATURE_fetch_t ossl_EVP_SIGNATURE_fetch;
  ossl_EVP_SIGNATURE_is_a_t ossl_EVP_SIGNATURE_is_a;
  ossl_EVP_SIGNATURE_get0_name_t ossl_EVP_SIGNATURE_get0_name;
  ossl_EVP_SIGNATURE_get0_description_t ossl_EVP_SIGNATURE_get0_description;
  ossl_EVP_SIGNATURE_do_all_provided_t ossl_EVP_SIGNATURE_do_all_provided;
  ossl_EVP_SIGNATURE_names_do_all_t ossl_EVP_SIGNATURE_names_do_all;
  ossl_EVP_SIGNATURE_gettable_ctx_params_t ossl_EVP_SIGNATURE_gettable_ctx_params;
  ossl_EVP_SIGNATURE_settable_ctx_params_t ossl_EVP_SIGNATURE_settable_ctx_params;
  ossl_EVP_ASYM_CIPHER_free_t ossl_EVP_ASYM_CIPHER_free;
  ossl_EVP_ASYM_CIPHER_up_ref_t ossl_EVP_ASYM_CIPHER_up_ref;
  ossl_EVP_ASYM_CIPHER_get0_provider_t ossl_EVP_ASYM_CIPHER_get0_provider;
  ossl_EVP_ASYM_CIPHER_fetch_t ossl_EVP_ASYM_CIPHER_fetch;
  ossl_EVP_ASYM_CIPHER_is_a_t ossl_EVP_ASYM_CIPHER_is_a;
  ossl_EVP_ASYM_CIPHER_get0_name_t ossl_EVP_ASYM_CIPHER_get0_name;
  ossl_EVP_ASYM_CIPHER_get0_description_t ossl_EVP_ASYM_CIPHER_get0_description;
  ossl_EVP_ASYM_CIPHER_do_all_provided_t ossl_EVP_ASYM_CIPHER_do_all_provided;
  ossl_EVP_ASYM_CIPHER_names_do_all_t ossl_EVP_ASYM_CIPHER_names_do_all;
  ossl_EVP_ASYM_CIPHER_gettable_ctx_params_t ossl_EVP_ASYM_CIPHER_gettable_ctx_params;
  ossl_EVP_ASYM_CIPHER_settable_ctx_params_t ossl_EVP_ASYM_CIPHER_settable_ctx_params;
  ossl_EVP_KEM_free_t ossl_EVP_KEM_free;
  ossl_EVP_KEM_up_ref_t ossl_EVP_KEM_up_ref;
  ossl_EVP_KEM_get0_provider_t ossl_EVP_KEM_get0_provider;
  ossl_EVP_KEM_fetch_t ossl_EVP_KEM_fetch;
  ossl_EVP_KEM_is_a_t ossl_EVP_KEM_is_a;
  ossl_EVP_KEM_get0_name_t ossl_EVP_KEM_get0_name;
  ossl_EVP_KEM_get0_description_t ossl_EVP_KEM_get0_description;
  ossl_EVP_KEM_do_all_provided_t ossl_EVP_KEM_do_all_provided;
  ossl_EVP_KEM_names_do_all_t ossl_EVP_KEM_names_do_all;
  ossl_EVP_KEM_gettable_ctx_params_t ossl_EVP_KEM_gettable_ctx_params;
  ossl_EVP_KEM_settable_ctx_params_t ossl_EVP_KEM_settable_ctx_params;
  ossl_EVP_PKEY_sign_init_t ossl_EVP_PKEY_sign_init;
  ossl_EVP_PKEY_sign_init_ex_t ossl_EVP_PKEY_sign_init_ex;
  ossl_EVP_PKEY_sign_t ossl_EVP_PKEY_sign;
  ossl_EVP_PKEY_verify_init_t ossl_EVP_PKEY_verify_init;
  ossl_EVP_PKEY_verify_init_ex_t ossl_EVP_PKEY_verify_init_ex;
  ossl_EVP_PKEY_verify_t ossl_EVP_PKEY_verify;
  ossl_EVP_PKEY_verify_recover_init_t ossl_EVP_PKEY_verify_recover_init;
  ossl_EVP_PKEY_verify_recover_init_ex_t ossl_EVP_PKEY_verify_recover_init_ex;
  ossl_EVP_PKEY_verify_recover_t ossl_EVP_PKEY_verify_recover;
  ossl_EVP_PKEY_encrypt_init_t ossl_EVP_PKEY_encrypt_init;
  ossl_EVP_PKEY_encrypt_init_ex_t ossl_EVP_PKEY_encrypt_init_ex;
  ossl_EVP_PKEY_encrypt_t ossl_EVP_PKEY_encrypt;
  ossl_EVP_PKEY_decrypt_init_t ossl_EVP_PKEY_decrypt_init;
  ossl_EVP_PKEY_decrypt_init_ex_t ossl_EVP_PKEY_decrypt_init_ex;
  ossl_EVP_PKEY_decrypt_t ossl_EVP_PKEY_decrypt;
  ossl_EVP_PKEY_derive_init_t ossl_EVP_PKEY_derive_init;
  ossl_EVP_PKEY_derive_init_ex_t ossl_EVP_PKEY_derive_init_ex;
  ossl_EVP_PKEY_derive_set_peer_ex_t ossl_EVP_PKEY_derive_set_peer_ex;
  ossl_EVP_PKEY_derive_set_peer_t ossl_EVP_PKEY_derive_set_peer;
  ossl_EVP_PKEY_derive_t ossl_EVP_PKEY_derive;
  ossl_EVP_PKEY_encapsulate_init_t ossl_EVP_PKEY_encapsulate_init;
  ossl_EVP_PKEY_encapsulate_t ossl_EVP_PKEY_encapsulate;
  ossl_EVP_PKEY_decapsulate_init_t ossl_EVP_PKEY_decapsulate_init;
  ossl_EVP_PKEY_decapsulate_t ossl_EVP_PKEY_decapsulate;
  ossl_EVP_PKEY_fromdata_init_t ossl_EVP_PKEY_fromdata_init;
  ossl_EVP_PKEY_fromdata_t ossl_EVP_PKEY_fromdata;
  ossl_EVP_PKEY_fromdata_settable_t ossl_EVP_PKEY_fromdata_settable;
  ossl_EVP_PKEY_todata_t ossl_EVP_PKEY_todata;
  ossl_EVP_PKEY_export_t ossl_EVP_PKEY_export;
  ossl_EVP_PKEY_gettable_params_t ossl_EVP_PKEY_gettable_params;
  ossl_EVP_PKEY_get_params_t ossl_EVP_PKEY_get_params;
  ossl_EVP_PKEY_get_int_param_t ossl_EVP_PKEY_get_int_param;
  ossl_EVP_PKEY_get_size_t_param_t ossl_EVP_PKEY_get_size_t_param;
  ossl_EVP_PKEY_get_bn_param_t ossl_EVP_PKEY_get_bn_param;
  ossl_EVP_PKEY_get_utf8_string_param_t ossl_EVP_PKEY_get_utf8_string_param;
  ossl_EVP_PKEY_get_octet_string_param_t ossl_EVP_PKEY_get_octet_string_param;
  ossl_EVP_PKEY_settable_params_t ossl_EVP_PKEY_settable_params;
  ossl_EVP_PKEY_set_params_t ossl_EVP_PKEY_set_params;
  ossl_EVP_PKEY_set_int_param_t ossl_EVP_PKEY_set_int_param;
  ossl_EVP_PKEY_set_size_t_param_t ossl_EVP_PKEY_set_size_t_param;
  ossl_EVP_PKEY_set_bn_param_t ossl_EVP_PKEY_set_bn_param;
  ossl_EVP_PKEY_set_utf8_string_param_t ossl_EVP_PKEY_set_utf8_string_param;
  ossl_EVP_PKEY_set_octet_string_param_t ossl_EVP_PKEY_set_octet_string_param;
  ossl_EVP_PKEY_get_ec_point_conv_form_t ossl_EVP_PKEY_get_ec_point_conv_form;
  ossl_EVP_PKEY_get_field_type_t ossl_EVP_PKEY_get_field_type;
  ossl_EVP_PKEY_Q_keygen_t ossl_EVP_PKEY_Q_keygen;
  ossl_EVP_PKEY_paramgen_init_t ossl_EVP_PKEY_paramgen_init;
  ossl_EVP_PKEY_paramgen_t ossl_EVP_PKEY_paramgen;
  ossl_EVP_PKEY_keygen_init_t ossl_EVP_PKEY_keygen_init;
  ossl_EVP_PKEY_keygen_t ossl_EVP_PKEY_keygen;
  ossl_EVP_PKEY_generate_t ossl_EVP_PKEY_generate;
  ossl_EVP_PKEY_check_t ossl_EVP_PKEY_check;
  ossl_EVP_PKEY_public_check_t ossl_EVP_PKEY_public_check;
  ossl_EVP_PKEY_public_check_quick_t ossl_EVP_PKEY_public_check_quick;
  ossl_EVP_PKEY_param_check_t ossl_EVP_PKEY_param_check;
  ossl_EVP_PKEY_param_check_quick_t ossl_EVP_PKEY_param_check_quick;
  ossl_EVP_PKEY_private_check_t ossl_EVP_PKEY_private_check;
  ossl_EVP_PKEY_pairwise_check_t ossl_EVP_PKEY_pairwise_check;
  ossl_EVP_PKEY_set_ex_data_t ossl_EVP_PKEY_set_ex_data;
  ossl_EVP_PKEY_get_ex_data_t ossl_EVP_PKEY_get_ex_data;
  ossl_EVP_PKEY_CTX_set_cb_t ossl_EVP_PKEY_CTX_set_cb;
  ossl_EVP_PKEY_CTX_get_cb_t ossl_EVP_PKEY_CTX_get_cb;
  ossl_EVP_PKEY_CTX_get_keygen_info_t ossl_EVP_PKEY_CTX_get_keygen_info;
  ossl_EVP_PKEY_meth_set_init_t ossl_EVP_PKEY_meth_set_init;
  ossl_EVP_PKEY_meth_set_copy_t ossl_EVP_PKEY_meth_set_copy;
  ossl_EVP_PKEY_meth_set_cleanup_t ossl_EVP_PKEY_meth_set_cleanup;
  ossl_EVP_PKEY_meth_set_paramgen_t ossl_EVP_PKEY_meth_set_paramgen;
  ossl_EVP_PKEY_meth_set_keygen_t ossl_EVP_PKEY_meth_set_keygen;
  ossl_EVP_PKEY_meth_set_sign_t ossl_EVP_PKEY_meth_set_sign;
  ossl_EVP_PKEY_meth_set_verify_t ossl_EVP_PKEY_meth_set_verify;
  ossl_EVP_PKEY_meth_set_verify_recover_t ossl_EVP_PKEY_meth_set_verify_recover;
  ossl_EVP_PKEY_meth_set_signctx_t ossl_EVP_PKEY_meth_set_signctx;
  ossl_EVP_PKEY_meth_set_verifyctx_t ossl_EVP_PKEY_meth_set_verifyctx;
  ossl_EVP_PKEY_meth_set_encrypt_t ossl_EVP_PKEY_meth_set_encrypt;
  ossl_EVP_PKEY_meth_set_decrypt_t ossl_EVP_PKEY_meth_set_decrypt;
  ossl_EVP_PKEY_meth_set_derive_t ossl_EVP_PKEY_meth_set_derive;
  ossl_EVP_PKEY_meth_set_ctrl_t ossl_EVP_PKEY_meth_set_ctrl;
  ossl_EVP_PKEY_meth_set_digestsign_t ossl_EVP_PKEY_meth_set_digestsign;
  ossl_EVP_PKEY_meth_set_digestverify_t ossl_EVP_PKEY_meth_set_digestverify;
  ossl_EVP_PKEY_meth_set_check_t ossl_EVP_PKEY_meth_set_check;
  ossl_EVP_PKEY_meth_set_public_check_t ossl_EVP_PKEY_meth_set_public_check;
  ossl_EVP_PKEY_meth_set_param_check_t ossl_EVP_PKEY_meth_set_param_check;
  ossl_EVP_PKEY_meth_set_digest_custom_t ossl_EVP_PKEY_meth_set_digest_custom;
  ossl_EVP_PKEY_meth_get_init_t ossl_EVP_PKEY_meth_get_init;
  ossl_EVP_PKEY_meth_get_copy_t ossl_EVP_PKEY_meth_get_copy;
  ossl_EVP_PKEY_meth_get_cleanup_t ossl_EVP_PKEY_meth_get_cleanup;
  ossl_EVP_PKEY_meth_get_paramgen_t ossl_EVP_PKEY_meth_get_paramgen;
  ossl_EVP_PKEY_meth_get_keygen_t ossl_EVP_PKEY_meth_get_keygen;
  ossl_EVP_PKEY_meth_get_sign_t ossl_EVP_PKEY_meth_get_sign;
  ossl_EVP_PKEY_meth_get_verify_t ossl_EVP_PKEY_meth_get_verify;
  ossl_EVP_PKEY_meth_get_verify_recover_t ossl_EVP_PKEY_meth_get_verify_recover;
  ossl_EVP_PKEY_meth_get_signctx_t ossl_EVP_PKEY_meth_get_signctx;
  ossl_EVP_PKEY_meth_get_verifyctx_t ossl_EVP_PKEY_meth_get_verifyctx;
  ossl_EVP_PKEY_meth_get_encrypt_t ossl_EVP_PKEY_meth_get_encrypt;
  ossl_EVP_PKEY_meth_get_decrypt_t ossl_EVP_PKEY_meth_get_decrypt;
  ossl_EVP_PKEY_meth_get_derive_t ossl_EVP_PKEY_meth_get_derive;
  ossl_EVP_PKEY_meth_get_ctrl_t ossl_EVP_PKEY_meth_get_ctrl;
  ossl_EVP_PKEY_meth_get_digestsign_t ossl_EVP_PKEY_meth_get_digestsign;
  ossl_EVP_PKEY_meth_get_digestverify_t ossl_EVP_PKEY_meth_get_digestverify;
  ossl_EVP_PKEY_meth_get_check_t ossl_EVP_PKEY_meth_get_check;
  ossl_EVP_PKEY_meth_get_public_check_t ossl_EVP_PKEY_meth_get_public_check;
  ossl_EVP_PKEY_meth_get_param_check_t ossl_EVP_PKEY_meth_get_param_check;
  ossl_EVP_PKEY_meth_get_digest_custom_t ossl_EVP_PKEY_meth_get_digest_custom;
  ossl_EVP_KEYEXCH_free_t ossl_EVP_KEYEXCH_free;
  ossl_EVP_KEYEXCH_up_ref_t ossl_EVP_KEYEXCH_up_ref;
  ossl_EVP_KEYEXCH_fetch_t ossl_EVP_KEYEXCH_fetch;
  ossl_EVP_KEYEXCH_get0_provider_t ossl_EVP_KEYEXCH_get0_provider;
  ossl_EVP_KEYEXCH_is_a_t ossl_EVP_KEYEXCH_is_a;
  ossl_EVP_KEYEXCH_get0_name_t ossl_EVP_KEYEXCH_get0_name;
  ossl_EVP_KEYEXCH_get0_description_t ossl_EVP_KEYEXCH_get0_description;
  ossl_EVP_KEYEXCH_do_all_provided_t ossl_EVP_KEYEXCH_do_all_provided;
  ossl_EVP_KEYEXCH_names_do_all_t ossl_EVP_KEYEXCH_names_do_all;
  ossl_EVP_KEYEXCH_gettable_ctx_params_t ossl_EVP_KEYEXCH_gettable_ctx_params;
  ossl_EVP_KEYEXCH_settable_ctx_params_t ossl_EVP_KEYEXCH_settable_ctx_params;
  ossl_EVP_add_alg_module_t ossl_EVP_add_alg_module;
  ossl_EVP_PKEY_CTX_set_group_name_t ossl_EVP_PKEY_CTX_set_group_name;
  ossl_EVP_PKEY_CTX_get_group_name_t ossl_EVP_PKEY_CTX_get_group_name;
  ossl_EVP_PKEY_get_group_name_t ossl_EVP_PKEY_get_group_name;
  ossl_EVP_PKEY_CTX_get0_libctx_t ossl_EVP_PKEY_CTX_get0_libctx;
  ossl_EVP_PKEY_CTX_get0_propq_t ossl_EVP_PKEY_CTX_get0_propq;
  ossl_EVP_PKEY_CTX_get0_provider_t ossl_EVP_PKEY_CTX_get0_provider;
  ossl_CMAC_CTX_new_t ossl_CMAC_CTX_new;
  ossl_CMAC_CTX_cleanup_t ossl_CMAC_CTX_cleanup;
  ossl_CMAC_CTX_free_t ossl_CMAC_CTX_free;
  ossl_CMAC_CTX_get0_cipher_ctx_t ossl_CMAC_CTX_get0_cipher_ctx;
  ossl_CMAC_CTX_copy_t ossl_CMAC_CTX_copy;
  ossl_CMAC_Init_t ossl_CMAC_Init;
  ossl_CMAC_Update_t ossl_CMAC_Update;
  ossl_CMAC_Final_t ossl_CMAC_Final;
  ossl_CMAC_resume_t ossl_CMAC_resume;
  ossl_EVP_PKEY_CTX_set_ec_paramgen_curve_nid_t ossl_EVP_PKEY_CTX_set_ec_paramgen_curve_nid;
  ossl_EVP_PKEY_CTX_set_ec_param_enc_t ossl_EVP_PKEY_CTX_set_ec_param_enc;
  ossl_EVP_PKEY_CTX_set_ecdh_cofactor_mode_t ossl_EVP_PKEY_CTX_set_ecdh_cofactor_mode;
  ossl_EVP_PKEY_CTX_get_ecdh_cofactor_mode_t ossl_EVP_PKEY_CTX_get_ecdh_cofactor_mode;
  ossl_EVP_PKEY_CTX_set_ecdh_kdf_type_t ossl_EVP_PKEY_CTX_set_ecdh_kdf_type;
  ossl_EVP_PKEY_CTX_get_ecdh_kdf_type_t ossl_EVP_PKEY_CTX_get_ecdh_kdf_type;
  ossl_EVP_PKEY_CTX_set_ecdh_kdf_md_t ossl_EVP_PKEY_CTX_set_ecdh_kdf_md;
  ossl_EVP_PKEY_CTX_get_ecdh_kdf_md_t ossl_EVP_PKEY_CTX_get_ecdh_kdf_md;
  ossl_EVP_PKEY_CTX_set_ecdh_kdf_outlen_t ossl_EVP_PKEY_CTX_set_ecdh_kdf_outlen;
  ossl_EVP_PKEY_CTX_get_ecdh_kdf_outlen_t ossl_EVP_PKEY_CTX_get_ecdh_kdf_outlen;
  ossl_EVP_PKEY_CTX_set0_ecdh_kdf_ukm_t ossl_EVP_PKEY_CTX_set0_ecdh_kdf_ukm;
  ossl_EVP_PKEY_CTX_get0_ecdh_kdf_ukm_t ossl_EVP_PKEY_CTX_get0_ecdh_kdf_ukm;
  ossl_OSSL_EC_curve_nid2name_t ossl_OSSL_EC_curve_nid2name;
  ossl_EC_GFp_simple_method_t ossl_EC_GFp_simple_method;
  ossl_EC_GFp_mont_method_t ossl_EC_GFp_mont_method;
  ossl_EC_GFp_nist_method_t ossl_EC_GFp_nist_method;
  ossl_EC_GF2m_simple_method_t ossl_EC_GF2m_simple_method;
  ossl_EC_GROUP_new_t ossl_EC_GROUP_new;
  ossl_EC_GROUP_clear_free_t ossl_EC_GROUP_clear_free;
  ossl_EC_GROUP_method_of_t ossl_EC_GROUP_method_of;
  ossl_EC_METHOD_get_field_type_t ossl_EC_METHOD_get_field_type;
  ossl_EC_GROUP_free_t ossl_EC_GROUP_free;
  ossl_EC_GROUP_copy_t ossl_EC_GROUP_copy;
  ossl_EC_GROUP_dup_t ossl_EC_GROUP_dup;
  ossl_EC_GROUP_set_generator_t ossl_EC_GROUP_set_generator;
  ossl_EC_GROUP_get0_generator_t ossl_EC_GROUP_get0_generator;
  ossl_EC_GROUP_get_mont_data_t ossl_EC_GROUP_get_mont_data;
  ossl_EC_GROUP_get_order_t ossl_EC_GROUP_get_order;
  ossl_EC_GROUP_get0_order_t ossl_EC_GROUP_get0_order;
  ossl_EC_GROUP_order_bits_t ossl_EC_GROUP_order_bits;
  ossl_EC_GROUP_get_cofactor_t ossl_EC_GROUP_get_cofactor;
  ossl_EC_GROUP_get0_cofactor_t ossl_EC_GROUP_get0_cofactor;
  ossl_EC_GROUP_set_curve_name_t ossl_EC_GROUP_set_curve_name;
  ossl_EC_GROUP_get_curve_name_t ossl_EC_GROUP_get_curve_name;
  ossl_EC_GROUP_get0_field_t ossl_EC_GROUP_get0_field;
  ossl_EC_GROUP_get_field_type_t ossl_EC_GROUP_get_field_type;
  ossl_EC_GROUP_set_asn1_flag_t ossl_EC_GROUP_set_asn1_flag;
  ossl_EC_GROUP_get_asn1_flag_t ossl_EC_GROUP_get_asn1_flag;
  ossl_EC_GROUP_set_point_conversion_form_t ossl_EC_GROUP_set_point_conversion_form;
  ossl_EC_GROUP_get_point_conversion_form_t ossl_EC_GROUP_get_point_conversion_form;
  ossl_EC_GROUP_get0_seed_t ossl_EC_GROUP_get0_seed;
  ossl_EC_GROUP_get_seed_len_t ossl_EC_GROUP_get_seed_len;
  ossl_EC_GROUP_set_seed_t ossl_EC_GROUP_set_seed;
  ossl_EC_GROUP_set_curve_t ossl_EC_GROUP_set_curve;
  ossl_EC_GROUP_get_curve_t ossl_EC_GROUP_get_curve;
  ossl_EC_GROUP_set_curve_GFp_t ossl_EC_GROUP_set_curve_GFp;
  ossl_EC_GROUP_get_curve_GFp_t ossl_EC_GROUP_get_curve_GFp;
  ossl_EC_GROUP_set_curve_GF2m_t ossl_EC_GROUP_set_curve_GF2m;
  ossl_EC_GROUP_get_curve_GF2m_t ossl_EC_GROUP_get_curve_GF2m;
  ossl_EC_GROUP_get_degree_t ossl_EC_GROUP_get_degree;
  ossl_EC_GROUP_check_t ossl_EC_GROUP_check;
  ossl_EC_GROUP_check_discriminant_t ossl_EC_GROUP_check_discriminant;
  ossl_EC_GROUP_cmp_t ossl_EC_GROUP_cmp;
  ossl_EC_GROUP_new_curve_GFp_t ossl_EC_GROUP_new_curve_GFp;
  ossl_EC_GROUP_new_curve_GF2m_t ossl_EC_GROUP_new_curve_GF2m;
  ossl_EC_GROUP_new_from_params_t ossl_EC_GROUP_new_from_params;
  ossl_EC_GROUP_new_by_curve_name_ex_t ossl_EC_GROUP_new_by_curve_name_ex;
  ossl_EC_GROUP_new_by_curve_name_t ossl_EC_GROUP_new_by_curve_name;
  ossl_EC_GROUP_new_from_ecparameters_t ossl_EC_GROUP_new_from_ecparameters;
  ossl_EC_GROUP_get_ecparameters_t ossl_EC_GROUP_get_ecparameters;
  ossl_EC_GROUP_new_from_ecpkparameters_t ossl_EC_GROUP_new_from_ecpkparameters;
  ossl_EC_GROUP_get_ecpkparameters_t ossl_EC_GROUP_get_ecpkparameters;
  ossl_EC_get_builtin_curves_t ossl_EC_get_builtin_curves;
  ossl_EC_curve_nid2nist_t ossl_EC_curve_nid2nist;
  ossl_EC_curve_nist2nid_t ossl_EC_curve_nist2nid;
  ossl_EC_GROUP_check_named_curve_t ossl_EC_GROUP_check_named_curve;
  ossl_EC_POINT_new_t ossl_EC_POINT_new;
  ossl_EC_POINT_free_t ossl_EC_POINT_free;
  ossl_EC_POINT_clear_free_t ossl_EC_POINT_clear_free;
  ossl_EC_POINT_copy_t ossl_EC_POINT_copy;
  ossl_EC_POINT_dup_t ossl_EC_POINT_dup;
  ossl_EC_POINT_set_to_infinity_t ossl_EC_POINT_set_to_infinity;
  ossl_EC_POINT_method_of_t ossl_EC_POINT_method_of;
  ossl_EC_POINT_set_Jprojective_coordinates_GFp_t ossl_EC_POINT_set_Jprojective_coordinates_GFp;
  ossl_EC_POINT_get_Jprojective_coordinates_GFp_t ossl_EC_POINT_get_Jprojective_coordinates_GFp;
  ossl_EC_POINT_set_affine_coordinates_t ossl_EC_POINT_set_affine_coordinates;
  ossl_EC_POINT_get_affine_coordinates_t ossl_EC_POINT_get_affine_coordinates;
  ossl_EC_POINT_set_affine_coordinates_GFp_t ossl_EC_POINT_set_affine_coordinates_GFp;
  ossl_EC_POINT_get_affine_coordinates_GFp_t ossl_EC_POINT_get_affine_coordinates_GFp;
  ossl_EC_POINT_set_compressed_coordinates_t ossl_EC_POINT_set_compressed_coordinates;
  ossl_EC_POINT_set_compressed_coordinates_GFp_t ossl_EC_POINT_set_compressed_coordinates_GFp;
  ossl_EC_POINT_set_affine_coordinates_GF2m_t ossl_EC_POINT_set_affine_coordinates_GF2m;
  ossl_EC_POINT_get_affine_coordinates_GF2m_t ossl_EC_POINT_get_affine_coordinates_GF2m;
  ossl_EC_POINT_set_compressed_coordinates_GF2m_t ossl_EC_POINT_set_compressed_coordinates_GF2m;
  ossl_EC_POINT_point2oct_t ossl_EC_POINT_point2oct;
  ossl_EC_POINT_oct2point_t ossl_EC_POINT_oct2point;
  ossl_EC_POINT_point2buf_t ossl_EC_POINT_point2buf;
  ossl_EC_POINT_point2bn_t ossl_EC_POINT_point2bn;
  ossl_EC_POINT_bn2point_t ossl_EC_POINT_bn2point;
  ossl_EC_POINT_point2hex_t ossl_EC_POINT_point2hex;
  ossl_EC_POINT_hex2point_t ossl_EC_POINT_hex2point;
  ossl_EC_POINT_add_t ossl_EC_POINT_add;
  ossl_EC_POINT_dbl_t ossl_EC_POINT_dbl;
  ossl_EC_POINT_invert_t ossl_EC_POINT_invert;
  ossl_EC_POINT_is_at_infinity_t ossl_EC_POINT_is_at_infinity;
  ossl_EC_POINT_is_on_curve_t ossl_EC_POINT_is_on_curve;
  ossl_EC_POINT_cmp_t ossl_EC_POINT_cmp;
  ossl_EC_POINT_make_affine_t ossl_EC_POINT_make_affine;
  ossl_EC_POINTs_make_affine_t ossl_EC_POINTs_make_affine;
  ossl_EC_POINTs_mul_t ossl_EC_POINTs_mul;
  ossl_EC_POINT_mul_t ossl_EC_POINT_mul;
  ossl_EC_GROUP_precompute_mult_t ossl_EC_GROUP_precompute_mult;
  ossl_EC_GROUP_have_precompute_mult_t ossl_EC_GROUP_have_precompute_mult;
  ossl_ECPKPARAMETERS_it_t ossl_ECPKPARAMETERS_it;
  ossl_ECPKPARAMETERS_new_t ossl_ECPKPARAMETERS_new;
  ossl_ECPKPARAMETERS_free_t ossl_ECPKPARAMETERS_free;
  ossl_ECPARAMETERS_it_t ossl_ECPARAMETERS_it;
  ossl_ECPARAMETERS_new_t ossl_ECPARAMETERS_new;
  ossl_ECPARAMETERS_free_t ossl_ECPARAMETERS_free;
  ossl_EC_GROUP_get_basis_type_t ossl_EC_GROUP_get_basis_type;
  ossl_EC_GROUP_get_trinomial_basis_t ossl_EC_GROUP_get_trinomial_basis;
  ossl_EC_GROUP_get_pentanomial_basis_t ossl_EC_GROUP_get_pentanomial_basis;
  ossl_d2i_ECPKParameters_t ossl_d2i_ECPKParameters;
  ossl_i2d_ECPKParameters_t ossl_i2d_ECPKParameters;
  ossl_ECPKParameters_print_t ossl_ECPKParameters_print;
  ossl_ECPKParameters_print_fp_t ossl_ECPKParameters_print_fp;
  ossl_EC_KEY_new_ex_t ossl_EC_KEY_new_ex;
  ossl_EC_KEY_new_t ossl_EC_KEY_new;
  ossl_EC_KEY_get_flags_t ossl_EC_KEY_get_flags;
  ossl_EC_KEY_set_flags_t ossl_EC_KEY_set_flags;
  ossl_EC_KEY_clear_flags_t ossl_EC_KEY_clear_flags;
  ossl_EC_KEY_decoded_from_explicit_params_t ossl_EC_KEY_decoded_from_explicit_params;
  ossl_EC_KEY_new_by_curve_name_ex_t ossl_EC_KEY_new_by_curve_name_ex;
  ossl_EC_KEY_new_by_curve_name_t ossl_EC_KEY_new_by_curve_name;
  ossl_EC_KEY_free_t ossl_EC_KEY_free;
  ossl_EC_KEY_copy_t ossl_EC_KEY_copy;
  ossl_EC_KEY_dup_t ossl_EC_KEY_dup;
  ossl_EC_KEY_up_ref_t ossl_EC_KEY_up_ref;
  ossl_EC_KEY_get0_engine_t ossl_EC_KEY_get0_engine;
  ossl_EC_KEY_get0_group_t ossl_EC_KEY_get0_group;
  ossl_EC_KEY_set_group_t ossl_EC_KEY_set_group;
  ossl_EC_KEY_get0_private_key_t ossl_EC_KEY_get0_private_key;
  ossl_EC_KEY_set_private_key_t ossl_EC_KEY_set_private_key;
  ossl_EC_KEY_get0_public_key_t ossl_EC_KEY_get0_public_key;
  ossl_EC_KEY_set_public_key_t ossl_EC_KEY_set_public_key;
  ossl_EC_KEY_get_enc_flags_t ossl_EC_KEY_get_enc_flags;
  ossl_EC_KEY_set_enc_flags_t ossl_EC_KEY_set_enc_flags;
  ossl_EC_KEY_get_conv_form_t ossl_EC_KEY_get_conv_form;
  ossl_EC_KEY_set_conv_form_t ossl_EC_KEY_set_conv_form;
  ossl_EC_KEY_set_ex_data_t ossl_EC_KEY_set_ex_data;
  ossl_EC_KEY_get_ex_data_t ossl_EC_KEY_get_ex_data;
  ossl_EC_KEY_set_asn1_flag_t ossl_EC_KEY_set_asn1_flag;
  ossl_EC_KEY_precompute_mult_t ossl_EC_KEY_precompute_mult;
  ossl_EC_KEY_generate_key_t ossl_EC_KEY_generate_key;
  ossl_EC_KEY_check_key_t ossl_EC_KEY_check_key;
  ossl_EC_KEY_can_sign_t ossl_EC_KEY_can_sign;
  ossl_EC_KEY_set_public_key_affine_coordinates_t ossl_EC_KEY_set_public_key_affine_coordinates;
  ossl_EC_KEY_key2buf_t ossl_EC_KEY_key2buf;
  ossl_EC_KEY_oct2key_t ossl_EC_KEY_oct2key;
  ossl_EC_KEY_oct2priv_t ossl_EC_KEY_oct2priv;
  ossl_EC_KEY_priv2oct_t ossl_EC_KEY_priv2oct;
  ossl_EC_KEY_priv2buf_t ossl_EC_KEY_priv2buf;
  ossl_d2i_ECPrivateKey_t ossl_d2i_ECPrivateKey;
  ossl_i2d_ECPrivateKey_t ossl_i2d_ECPrivateKey;
  ossl_d2i_ECParameters_t ossl_d2i_ECParameters;
  ossl_i2d_ECParameters_t ossl_i2d_ECParameters;
  ossl_o2i_ECPublicKey_t ossl_o2i_ECPublicKey;
  ossl_i2o_ECPublicKey_t ossl_i2o_ECPublicKey;
  ossl_ECParameters_print_t ossl_ECParameters_print;
  ossl_EC_KEY_print_t ossl_EC_KEY_print;
  ossl_ECParameters_print_fp_t ossl_ECParameters_print_fp;
  ossl_EC_KEY_print_fp_t ossl_EC_KEY_print_fp;
  ossl_EC_KEY_OpenSSL_t ossl_EC_KEY_OpenSSL;
  ossl_EC_KEY_get_default_method_t ossl_EC_KEY_get_default_method;
  ossl_EC_KEY_set_default_method_t ossl_EC_KEY_set_default_method;
  ossl_EC_KEY_get_method_t ossl_EC_KEY_get_method;
  ossl_EC_KEY_set_method_t ossl_EC_KEY_set_method;
  ossl_EC_KEY_new_method_t ossl_EC_KEY_new_method;
  ossl_ECDH_KDF_X9_62_t ossl_ECDH_KDF_X9_62;
  ossl_ECDH_compute_key_t ossl_ECDH_compute_key;
  ossl_ECDSA_SIG_new_t ossl_ECDSA_SIG_new;
  ossl_ECDSA_SIG_free_t ossl_ECDSA_SIG_free;
  ossl_d2i_ECDSA_SIG_t ossl_d2i_ECDSA_SIG;
  ossl_i2d_ECDSA_SIG_t ossl_i2d_ECDSA_SIG;
  ossl_ECDSA_SIG_get0_t ossl_ECDSA_SIG_get0;
  ossl_ECDSA_SIG_get0_r_t ossl_ECDSA_SIG_get0_r;
  ossl_ECDSA_SIG_get0_s_t ossl_ECDSA_SIG_get0_s;
  ossl_ECDSA_SIG_set0_t ossl_ECDSA_SIG_set0;
  ossl_ECDSA_do_sign_t ossl_ECDSA_do_sign;
  ossl_ECDSA_do_sign_ex_t ossl_ECDSA_do_sign_ex;
  ossl_ECDSA_do_verify_t ossl_ECDSA_do_verify;
  ossl_ECDSA_sign_setup_t ossl_ECDSA_sign_setup;
  ossl_ECDSA_sign_t ossl_ECDSA_sign;
  ossl_ECDSA_sign_ex_t ossl_ECDSA_sign_ex;
  ossl_ECDSA_verify_t ossl_ECDSA_verify;
  ossl_ECDSA_size_t ossl_ECDSA_size;
  ossl_EC_KEY_METHOD_new_t ossl_EC_KEY_METHOD_new;
  ossl_EC_KEY_METHOD_free_t ossl_EC_KEY_METHOD_free;
  ossl_EC_KEY_METHOD_set_init_t ossl_EC_KEY_METHOD_set_init;
  ossl_EC_KEY_METHOD_set_keygen_t ossl_EC_KEY_METHOD_set_keygen;
  ossl_EC_KEY_METHOD_set_compute_key_t ossl_EC_KEY_METHOD_set_compute_key;
  ossl_EC_KEY_METHOD_set_sign_t ossl_EC_KEY_METHOD_set_sign;
  ossl_EC_KEY_METHOD_set_verify_t ossl_EC_KEY_METHOD_set_verify;
  ossl_EC_KEY_METHOD_get_init_t ossl_EC_KEY_METHOD_get_init;
  ossl_EC_KEY_METHOD_get_keygen_t ossl_EC_KEY_METHOD_get_keygen;
  ossl_EC_KEY_METHOD_get_compute_key_t ossl_EC_KEY_METHOD_get_compute_key;
  ossl_EC_KEY_METHOD_get_sign_t ossl_EC_KEY_METHOD_get_sign;
  ossl_EC_KEY_METHOD_get_verify_t ossl_EC_KEY_METHOD_get_verify;
  ossl_EVP_PKEY_CTX_set_rsa_padding_t ossl_EVP_PKEY_CTX_set_rsa_padding;
  ossl_EVP_PKEY_CTX_get_rsa_padding_t ossl_EVP_PKEY_CTX_get_rsa_padding;
  ossl_EVP_PKEY_CTX_set_rsa_pss_saltlen_t ossl_EVP_PKEY_CTX_set_rsa_pss_saltlen;
  ossl_EVP_PKEY_CTX_get_rsa_pss_saltlen_t ossl_EVP_PKEY_CTX_get_rsa_pss_saltlen;
  ossl_EVP_PKEY_CTX_set_rsa_keygen_bits_t ossl_EVP_PKEY_CTX_set_rsa_keygen_bits;
  ossl_EVP_PKEY_CTX_set1_rsa_keygen_pubexp_t ossl_EVP_PKEY_CTX_set1_rsa_keygen_pubexp;
  ossl_EVP_PKEY_CTX_set_rsa_keygen_primes_t ossl_EVP_PKEY_CTX_set_rsa_keygen_primes;
  ossl_EVP_PKEY_CTX_set_rsa_pss_keygen_saltlen_t ossl_EVP_PKEY_CTX_set_rsa_pss_keygen_saltlen;
  ossl_EVP_PKEY_CTX_set_rsa_keygen_pubexp_t ossl_EVP_PKEY_CTX_set_rsa_keygen_pubexp;
  ossl_EVP_PKEY_CTX_set_rsa_mgf1_md_t ossl_EVP_PKEY_CTX_set_rsa_mgf1_md;
  ossl_EVP_PKEY_CTX_set_rsa_mgf1_md_name_t ossl_EVP_PKEY_CTX_set_rsa_mgf1_md_name;
  ossl_EVP_PKEY_CTX_get_rsa_mgf1_md_t ossl_EVP_PKEY_CTX_get_rsa_mgf1_md;
  ossl_EVP_PKEY_CTX_get_rsa_mgf1_md_name_t ossl_EVP_PKEY_CTX_get_rsa_mgf1_md_name;
  ossl_EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md_t ossl_EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md;
  ossl_EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md_name_t ossl_EVP_PKEY_CTX_set_rsa_pss_keygen_mgf1_md_name;
  ossl_EVP_PKEY_CTX_set_rsa_pss_keygen_md_t ossl_EVP_PKEY_CTX_set_rsa_pss_keygen_md;
  ossl_EVP_PKEY_CTX_set_rsa_pss_keygen_md_name_t ossl_EVP_PKEY_CTX_set_rsa_pss_keygen_md_name;
  ossl_EVP_PKEY_CTX_set_rsa_oaep_md_t ossl_EVP_PKEY_CTX_set_rsa_oaep_md;
  ossl_EVP_PKEY_CTX_set_rsa_oaep_md_name_t ossl_EVP_PKEY_CTX_set_rsa_oaep_md_name;
  ossl_EVP_PKEY_CTX_get_rsa_oaep_md_t ossl_EVP_PKEY_CTX_get_rsa_oaep_md;
  ossl_EVP_PKEY_CTX_get_rsa_oaep_md_name_t ossl_EVP_PKEY_CTX_get_rsa_oaep_md_name;
  ossl_EVP_PKEY_CTX_set0_rsa_oaep_label_t ossl_EVP_PKEY_CTX_set0_rsa_oaep_label;
  ossl_EVP_PKEY_CTX_get0_rsa_oaep_label_t ossl_EVP_PKEY_CTX_get0_rsa_oaep_label;
  ossl_RSA_new_t ossl_RSA_new;
  ossl_RSA_new_method_t ossl_RSA_new_method;
  ossl_RSA_bits_t ossl_RSA_bits;
  ossl_RSA_size_t ossl_RSA_size;
  ossl_RSA_security_bits_t ossl_RSA_security_bits;
  ossl_RSA_set0_key_t ossl_RSA_set0_key;
  ossl_RSA_set0_factors_t ossl_RSA_set0_factors;
  ossl_RSA_set0_crt_params_t ossl_RSA_set0_crt_params;
  ossl_RSA_set0_multi_prime_params_t ossl_RSA_set0_multi_prime_params;
  ossl_RSA_get0_key_t ossl_RSA_get0_key;
  ossl_RSA_get0_factors_t ossl_RSA_get0_factors;
  ossl_RSA_get_multi_prime_extra_count_t ossl_RSA_get_multi_prime_extra_count;
  ossl_RSA_get0_multi_prime_factors_t ossl_RSA_get0_multi_prime_factors;
  ossl_RSA_get0_crt_params_t ossl_RSA_get0_crt_params;
  ossl_RSA_get0_multi_prime_crt_params_t ossl_RSA_get0_multi_prime_crt_params;
  ossl_RSA_get0_n_t ossl_RSA_get0_n;
  ossl_RSA_get0_e_t ossl_RSA_get0_e;
  ossl_RSA_get0_d_t ossl_RSA_get0_d;
  ossl_RSA_get0_p_t ossl_RSA_get0_p;
  ossl_RSA_get0_q_t ossl_RSA_get0_q;
  ossl_RSA_get0_dmp1_t ossl_RSA_get0_dmp1;
  ossl_RSA_get0_dmq1_t ossl_RSA_get0_dmq1;
  ossl_RSA_get0_iqmp_t ossl_RSA_get0_iqmp;
  ossl_RSA_get0_pss_params_t ossl_RSA_get0_pss_params;
  ossl_RSA_clear_flags_t ossl_RSA_clear_flags;
  ossl_RSA_test_flags_t ossl_RSA_test_flags;
  ossl_RSA_set_flags_t ossl_RSA_set_flags;
  ossl_RSA_get_version_t ossl_RSA_get_version;
  ossl_RSA_get0_engine_t ossl_RSA_get0_engine;
  ossl_RSA_generate_key_t ossl_RSA_generate_key;
  ossl_RSA_generate_key_ex_t ossl_RSA_generate_key_ex;
  ossl_RSA_generate_multi_prime_key_t ossl_RSA_generate_multi_prime_key;
  ossl_RSA_X931_derive_ex_t ossl_RSA_X931_derive_ex;
  ossl_RSA_X931_generate_key_ex_t ossl_RSA_X931_generate_key_ex;
  ossl_RSA_check_key_t ossl_RSA_check_key;
  ossl_RSA_check_key_ex_t ossl_RSA_check_key_ex;
  ossl_RSA_public_encrypt_t ossl_RSA_public_encrypt;
  ossl_RSA_private_encrypt_t ossl_RSA_private_encrypt;
  ossl_RSA_public_decrypt_t ossl_RSA_public_decrypt;
  ossl_RSA_private_decrypt_t ossl_RSA_private_decrypt;
  ossl_RSA_free_t ossl_RSA_free;
  ossl_RSA_up_ref_t ossl_RSA_up_ref;
  ossl_RSA_flags_t ossl_RSA_flags;
  ossl_RSA_set_default_method_t ossl_RSA_set_default_method;
  ossl_RSA_get_default_method_t ossl_RSA_get_default_method;
  ossl_RSA_null_method_t ossl_RSA_null_method;
  ossl_RSA_get_method_t ossl_RSA_get_method;
  ossl_RSA_set_method_t ossl_RSA_set_method;
  ossl_RSA_PKCS1_OpenSSL_t ossl_RSA_PKCS1_OpenSSL;
  ossl_d2i_RSAPublicKey_t ossl_d2i_RSAPublicKey;
  ossl_i2d_RSAPublicKey_t ossl_i2d_RSAPublicKey;
  ossl_RSAPublicKey_it_t ossl_RSAPublicKey_it;
  ossl_d2i_RSAPrivateKey_t ossl_d2i_RSAPrivateKey;
  ossl_i2d_RSAPrivateKey_t ossl_i2d_RSAPrivateKey;
  ossl_RSAPrivateKey_it_t ossl_RSAPrivateKey_it;
  ossl_RSA_pkey_ctx_ctrl_t ossl_RSA_pkey_ctx_ctrl;
  ossl_RSA_PSS_PARAMS_new_t ossl_RSA_PSS_PARAMS_new;
  ossl_RSA_PSS_PARAMS_free_t ossl_RSA_PSS_PARAMS_free;
  ossl_d2i_RSA_PSS_PARAMS_t ossl_d2i_RSA_PSS_PARAMS;
  ossl_i2d_RSA_PSS_PARAMS_t ossl_i2d_RSA_PSS_PARAMS;
  ossl_RSA_PSS_PARAMS_it_t ossl_RSA_PSS_PARAMS_it;
  ossl_RSA_PSS_PARAMS_dup_t ossl_RSA_PSS_PARAMS_dup;
  ossl_RSA_OAEP_PARAMS_new_t ossl_RSA_OAEP_PARAMS_new;
  ossl_RSA_OAEP_PARAMS_free_t ossl_RSA_OAEP_PARAMS_free;
  ossl_d2i_RSA_OAEP_PARAMS_t ossl_d2i_RSA_OAEP_PARAMS;
  ossl_i2d_RSA_OAEP_PARAMS_t ossl_i2d_RSA_OAEP_PARAMS;
  ossl_RSA_OAEP_PARAMS_it_t ossl_RSA_OAEP_PARAMS_it;
  ossl_RSA_print_fp_t ossl_RSA_print_fp;
  ossl_RSA_print_t ossl_RSA_print;
  ossl_RSA_sign_t ossl_RSA_sign;
  ossl_RSA_verify_t ossl_RSA_verify;
  ossl_RSA_sign_ASN1_OCTET_STRING_t ossl_RSA_sign_ASN1_OCTET_STRING;
  ossl_RSA_verify_ASN1_OCTET_STRING_t ossl_RSA_verify_ASN1_OCTET_STRING;
  ossl_RSA_blinding_on_t ossl_RSA_blinding_on;
  ossl_RSA_blinding_off_t ossl_RSA_blinding_off;
  ossl_RSA_setup_blinding_t ossl_RSA_setup_blinding;
  ossl_RSA_padding_add_PKCS1_type_1_t ossl_RSA_padding_add_PKCS1_type_1;
  ossl_RSA_padding_check_PKCS1_type_1_t ossl_RSA_padding_check_PKCS1_type_1;
  ossl_RSA_padding_add_PKCS1_type_2_t ossl_RSA_padding_add_PKCS1_type_2;
  ossl_RSA_padding_check_PKCS1_type_2_t ossl_RSA_padding_check_PKCS1_type_2;
  ossl_PKCS1_MGF1_t ossl_PKCS1_MGF1;
  ossl_RSA_padding_add_PKCS1_OAEP_t ossl_RSA_padding_add_PKCS1_OAEP;
  ossl_RSA_padding_check_PKCS1_OAEP_t ossl_RSA_padding_check_PKCS1_OAEP;
  ossl_RSA_padding_add_PKCS1_OAEP_mgf1_t ossl_RSA_padding_add_PKCS1_OAEP_mgf1;
  ossl_RSA_padding_check_PKCS1_OAEP_mgf1_t ossl_RSA_padding_check_PKCS1_OAEP_mgf1;
  ossl_RSA_padding_add_none_t ossl_RSA_padding_add_none;
  ossl_RSA_padding_check_none_t ossl_RSA_padding_check_none;
  ossl_RSA_padding_add_X931_t ossl_RSA_padding_add_X931;
  ossl_RSA_padding_check_X931_t ossl_RSA_padding_check_X931;
  ossl_RSA_X931_hash_id_t ossl_RSA_X931_hash_id;
  ossl_RSA_verify_PKCS1_PSS_t ossl_RSA_verify_PKCS1_PSS;
  ossl_RSA_padding_add_PKCS1_PSS_t ossl_RSA_padding_add_PKCS1_PSS;
  ossl_RSA_verify_PKCS1_PSS_mgf1_t ossl_RSA_verify_PKCS1_PSS_mgf1;
  ossl_RSA_padding_add_PKCS1_PSS_mgf1_t ossl_RSA_padding_add_PKCS1_PSS_mgf1;
  ossl_RSA_set_ex_data_t ossl_RSA_set_ex_data;
  ossl_RSA_get_ex_data_t ossl_RSA_get_ex_data;
  ossl_RSAPublicKey_dup_t ossl_RSAPublicKey_dup;
  ossl_RSAPrivateKey_dup_t ossl_RSAPrivateKey_dup;
  ossl_RSA_meth_new_t ossl_RSA_meth_new;
  ossl_RSA_meth_free_t ossl_RSA_meth_free;
  ossl_RSA_meth_dup_t ossl_RSA_meth_dup;
  ossl_RSA_meth_get0_name_t ossl_RSA_meth_get0_name;
  ossl_RSA_meth_set1_name_t ossl_RSA_meth_set1_name;
  ossl_RSA_meth_get_flags_t ossl_RSA_meth_get_flags;
  ossl_RSA_meth_set_flags_t ossl_RSA_meth_set_flags;
  ossl_RSA_meth_get0_app_data_t ossl_RSA_meth_get0_app_data;
  ossl_RSA_meth_set0_app_data_t ossl_RSA_meth_set0_app_data;
  ossl_RSA_meth_get_pub_enc_t ossl_RSA_meth_get_pub_enc;
  ossl_RSA_meth_set_pub_enc_t ossl_RSA_meth_set_pub_enc;
  ossl_RSA_meth_get_pub_dec_t ossl_RSA_meth_get_pub_dec;
  ossl_RSA_meth_set_pub_dec_t ossl_RSA_meth_set_pub_dec;
  ossl_RSA_meth_get_priv_enc_t ossl_RSA_meth_get_priv_enc;
  ossl_RSA_meth_set_priv_enc_t ossl_RSA_meth_set_priv_enc;
  ossl_RSA_meth_get_priv_dec_t ossl_RSA_meth_get_priv_dec;
  ossl_RSA_meth_set_priv_dec_t ossl_RSA_meth_set_priv_dec;
  ossl_RSA_meth_get_mod_exp_t ossl_RSA_meth_get_mod_exp;
  ossl_RSA_meth_set_mod_exp_t ossl_RSA_meth_set_mod_exp;
  ossl_RSA_meth_get_bn_mod_exp_t ossl_RSA_meth_get_bn_mod_exp;
  ossl_RSA_meth_set_bn_mod_exp_t ossl_RSA_meth_set_bn_mod_exp;
  ossl_RSA_meth_get_init_t ossl_RSA_meth_get_init;
  ossl_RSA_meth_set_init_t ossl_RSA_meth_set_init;
  ossl_RSA_meth_get_finish_t ossl_RSA_meth_get_finish;
  ossl_RSA_meth_set_finish_t ossl_RSA_meth_set_finish;
  ossl_RSA_meth_get_sign_t ossl_RSA_meth_get_sign;
  ossl_RSA_meth_set_sign_t ossl_RSA_meth_set_sign;
  ossl_RSA_meth_get_verify_t ossl_RSA_meth_get_verify;
  ossl_RSA_meth_set_verify_t ossl_RSA_meth_set_verify;
  ossl_RSA_meth_get_keygen_t ossl_RSA_meth_get_keygen;
  ossl_RSA_meth_set_keygen_t ossl_RSA_meth_set_keygen;
  ossl_RSA_meth_get_multi_prime_keygen_t ossl_RSA_meth_get_multi_prime_keygen;
  ossl_RSA_meth_set_multi_prime_keygen_t ossl_RSA_meth_set_multi_prime_keygen;
  ossl_EVP_PKEY_CTX_set_dsa_paramgen_bits_t ossl_EVP_PKEY_CTX_set_dsa_paramgen_bits;
  ossl_EVP_PKEY_CTX_set_dsa_paramgen_q_bits_t ossl_EVP_PKEY_CTX_set_dsa_paramgen_q_bits;
  ossl_EVP_PKEY_CTX_set_dsa_paramgen_md_props_t ossl_EVP_PKEY_CTX_set_dsa_paramgen_md_props;
  ossl_EVP_PKEY_CTX_set_dsa_paramgen_gindex_t ossl_EVP_PKEY_CTX_set_dsa_paramgen_gindex;
  ossl_EVP_PKEY_CTX_set_dsa_paramgen_type_t ossl_EVP_PKEY_CTX_set_dsa_paramgen_type;
  ossl_EVP_PKEY_CTX_set_dsa_paramgen_seed_t ossl_EVP_PKEY_CTX_set_dsa_paramgen_seed;
  ossl_EVP_PKEY_CTX_set_dsa_paramgen_md_t ossl_EVP_PKEY_CTX_set_dsa_paramgen_md;
  ossl_EVP_PKEY_CTX_set_dh_paramgen_type_t ossl_EVP_PKEY_CTX_set_dh_paramgen_type;
  ossl_EVP_PKEY_CTX_set_dh_paramgen_gindex_t ossl_EVP_PKEY_CTX_set_dh_paramgen_gindex;
  ossl_EVP_PKEY_CTX_set_dh_paramgen_seed_t ossl_EVP_PKEY_CTX_set_dh_paramgen_seed;
  ossl_EVP_PKEY_CTX_set_dh_paramgen_prime_len_t ossl_EVP_PKEY_CTX_set_dh_paramgen_prime_len;
  ossl_EVP_PKEY_CTX_set_dh_paramgen_subprime_len_t ossl_EVP_PKEY_CTX_set_dh_paramgen_subprime_len;
  ossl_EVP_PKEY_CTX_set_dh_paramgen_generator_t ossl_EVP_PKEY_CTX_set_dh_paramgen_generator;
  ossl_EVP_PKEY_CTX_set_dh_nid_t ossl_EVP_PKEY_CTX_set_dh_nid;
  ossl_EVP_PKEY_CTX_set_dh_rfc5114_t ossl_EVP_PKEY_CTX_set_dh_rfc5114;
  ossl_EVP_PKEY_CTX_set_dhx_rfc5114_t ossl_EVP_PKEY_CTX_set_dhx_rfc5114;
  ossl_EVP_PKEY_CTX_set_dh_pad_t ossl_EVP_PKEY_CTX_set_dh_pad;
  ossl_EVP_PKEY_CTX_set_dh_kdf_type_t ossl_EVP_PKEY_CTX_set_dh_kdf_type;
  ossl_EVP_PKEY_CTX_get_dh_kdf_type_t ossl_EVP_PKEY_CTX_get_dh_kdf_type;
  ossl_EVP_PKEY_CTX_set0_dh_kdf_oid_t ossl_EVP_PKEY_CTX_set0_dh_kdf_oid;
  ossl_EVP_PKEY_CTX_get0_dh_kdf_oid_t ossl_EVP_PKEY_CTX_get0_dh_kdf_oid;
  ossl_EVP_PKEY_CTX_set_dh_kdf_md_t ossl_EVP_PKEY_CTX_set_dh_kdf_md;
  ossl_EVP_PKEY_CTX_get_dh_kdf_md_t ossl_EVP_PKEY_CTX_get_dh_kdf_md;
  ossl_EVP_PKEY_CTX_set_dh_kdf_outlen_t ossl_EVP_PKEY_CTX_set_dh_kdf_outlen;
  ossl_EVP_PKEY_CTX_get_dh_kdf_outlen_t ossl_EVP_PKEY_CTX_get_dh_kdf_outlen;
  ossl_EVP_PKEY_CTX_set0_dh_kdf_ukm_t ossl_EVP_PKEY_CTX_set0_dh_kdf_ukm;
  ossl_EVP_PKEY_CTX_get0_dh_kdf_ukm_t ossl_EVP_PKEY_CTX_get0_dh_kdf_ukm;
  ossl_DHparams_it_t ossl_DHparams_it;
  ossl_DHparams_dup_t ossl_DHparams_dup;
  ossl_DH_OpenSSL_t ossl_DH_OpenSSL;
  ossl_DH_set_default_method_t ossl_DH_set_default_method;
  ossl_DH_get_default_method_t ossl_DH_get_default_method;
  ossl_DH_set_method_t ossl_DH_set_method;
  ossl_DH_new_method_t ossl_DH_new_method;
  ossl_DH_new_t ossl_DH_new;
  ossl_DH_free_t ossl_DH_free;
  ossl_DH_up_ref_t ossl_DH_up_ref;
  ossl_DH_bits_t ossl_DH_bits;
  ossl_DH_size_t ossl_DH_size;
  ossl_DH_security_bits_t ossl_DH_security_bits;
  ossl_DH_set_ex_data_t ossl_DH_set_ex_data;
  ossl_DH_get_ex_data_t ossl_DH_get_ex_data;
  ossl_DH_generate_parameters_ex_t ossl_DH_generate_parameters_ex;
  ossl_DH_check_params_ex_t ossl_DH_check_params_ex;
  ossl_DH_check_ex_t ossl_DH_check_ex;
  ossl_DH_check_pub_key_ex_t ossl_DH_check_pub_key_ex;
  ossl_DH_check_params_t ossl_DH_check_params;
  ossl_DH_check_t ossl_DH_check;
  ossl_DH_check_pub_key_t ossl_DH_check_pub_key;
  ossl_DH_generate_key_t ossl_DH_generate_key;
  ossl_DH_compute_key_t ossl_DH_compute_key;
  ossl_DH_compute_key_padded_t ossl_DH_compute_key_padded;
  ossl_d2i_DHparams_t ossl_d2i_DHparams;
  ossl_i2d_DHparams_t ossl_i2d_DHparams;
  ossl_d2i_DHxparams_t ossl_d2i_DHxparams;
  ossl_i2d_DHxparams_t ossl_i2d_DHxparams;
  ossl_DHparams_print_fp_t ossl_DHparams_print_fp;
  ossl_DHparams_print_t ossl_DHparams_print;
  ossl_DH_get_1024_160_t ossl_DH_get_1024_160;
  ossl_DH_get_2048_224_t ossl_DH_get_2048_224;
  ossl_DH_get_2048_256_t ossl_DH_get_2048_256;
  ossl_DH_new_by_nid_t ossl_DH_new_by_nid;
  ossl_DH_get_nid_t ossl_DH_get_nid;
  ossl_DH_KDF_X9_42_t ossl_DH_KDF_X9_42;
  ossl_DH_get0_pqg_t ossl_DH_get0_pqg;
  ossl_DH_set0_pqg_t ossl_DH_set0_pqg;
  ossl_DH_get0_key_t ossl_DH_get0_key;
  ossl_DH_set0_key_t ossl_DH_set0_key;
  ossl_DH_get0_p_t ossl_DH_get0_p;
  ossl_DH_get0_q_t ossl_DH_get0_q;
  ossl_DH_get0_g_t ossl_DH_get0_g;
  ossl_DH_get0_priv_key_t ossl_DH_get0_priv_key;
  ossl_DH_get0_pub_key_t ossl_DH_get0_pub_key;
  ossl_DH_clear_flags_t ossl_DH_clear_flags;
  ossl_DH_test_flags_t ossl_DH_test_flags;
  ossl_DH_set_flags_t ossl_DH_set_flags;
  ossl_DH_get0_engine_t ossl_DH_get0_engine;
  ossl_DH_get_length_t ossl_DH_get_length;
  ossl_DH_set_length_t ossl_DH_set_length;
  ossl_DH_meth_new_t ossl_DH_meth_new;
  ossl_DH_meth_free_t ossl_DH_meth_free;
  ossl_DH_meth_dup_t ossl_DH_meth_dup;
  ossl_DH_meth_get0_name_t ossl_DH_meth_get0_name;
  ossl_DH_meth_set1_name_t ossl_DH_meth_set1_name;
  ossl_DH_meth_get_flags_t ossl_DH_meth_get_flags;
  ossl_DH_meth_set_flags_t ossl_DH_meth_set_flags;
  ossl_DH_meth_get0_app_data_t ossl_DH_meth_get0_app_data;
  ossl_DH_meth_set0_app_data_t ossl_DH_meth_set0_app_data;
  ossl_DH_meth_get_generate_key_t ossl_DH_meth_get_generate_key;
  ossl_DH_meth_set_generate_key_t ossl_DH_meth_set_generate_key;
  ossl_DH_meth_get_compute_key_t ossl_DH_meth_get_compute_key;
  ossl_DH_meth_set_compute_key_t ossl_DH_meth_set_compute_key;
  ossl_DH_meth_get_bn_mod_exp_t ossl_DH_meth_get_bn_mod_exp;
  ossl_DH_meth_set_bn_mod_exp_t ossl_DH_meth_set_bn_mod_exp;
  ossl_DH_meth_get_init_t ossl_DH_meth_get_init;
  ossl_DH_meth_set_init_t ossl_DH_meth_set_init;
  ossl_DH_meth_get_finish_t ossl_DH_meth_get_finish;
  ossl_DH_meth_set_finish_t ossl_DH_meth_set_finish;
  ossl_DH_meth_get_generate_params_t ossl_DH_meth_get_generate_params;
  ossl_DH_meth_set_generate_params_t ossl_DH_meth_set_generate_params;
  ossl_DH_generate_parameters_t ossl_DH_generate_parameters;
  ossl_DSA_SIG_new_t ossl_DSA_SIG_new;
  ossl_DSA_SIG_free_t ossl_DSA_SIG_free;
  ossl_d2i_DSA_SIG_t ossl_d2i_DSA_SIG;
  ossl_i2d_DSA_SIG_t ossl_i2d_DSA_SIG;
  ossl_DSA_SIG_get0_t ossl_DSA_SIG_get0;
  ossl_DSA_SIG_set0_t ossl_DSA_SIG_set0;
  ossl_DSAparams_dup_t ossl_DSAparams_dup;
  ossl_DSA_do_sign_t ossl_DSA_do_sign;
  ossl_DSA_do_verify_t ossl_DSA_do_verify;
  ossl_DSA_OpenSSL_t ossl_DSA_OpenSSL;
  ossl_DSA_set_default_method_t ossl_DSA_set_default_method;
  ossl_DSA_get_default_method_t ossl_DSA_get_default_method;
  ossl_DSA_set_method_t ossl_DSA_set_method;
  ossl_DSA_get_method_t ossl_DSA_get_method;
  ossl_DSA_new_t ossl_DSA_new;
  ossl_DSA_new_method_t ossl_DSA_new_method;
  ossl_DSA_free_t ossl_DSA_free;
  ossl_DSA_up_ref_t ossl_DSA_up_ref;
  ossl_DSA_size_t ossl_DSA_size;
  ossl_DSA_bits_t ossl_DSA_bits;
  ossl_DSA_security_bits_t ossl_DSA_security_bits;
  ossl_DSA_sign_setup_t ossl_DSA_sign_setup;
  ossl_DSA_sign_t ossl_DSA_sign;
  ossl_DSA_verify_t ossl_DSA_verify;
  ossl_DSA_set_ex_data_t ossl_DSA_set_ex_data;
  ossl_DSA_get_ex_data_t ossl_DSA_get_ex_data;
  ossl_d2i_DSAPublicKey_t ossl_d2i_DSAPublicKey;
  ossl_i2d_DSAPublicKey_t ossl_i2d_DSAPublicKey;
  ossl_d2i_DSAPrivateKey_t ossl_d2i_DSAPrivateKey;
  ossl_i2d_DSAPrivateKey_t ossl_i2d_DSAPrivateKey;
  ossl_d2i_DSAparams_t ossl_d2i_DSAparams;
  ossl_i2d_DSAparams_t ossl_i2d_DSAparams;
  ossl_DSA_generate_parameters_t ossl_DSA_generate_parameters;
  ossl_DSA_generate_parameters_ex_t ossl_DSA_generate_parameters_ex;
  ossl_DSA_generate_key_t ossl_DSA_generate_key;
  ossl_DSAparams_print_t ossl_DSAparams_print;
  ossl_DSA_print_t ossl_DSA_print;
  ossl_DSAparams_print_fp_t ossl_DSAparams_print_fp;
  ossl_DSA_print_fp_t ossl_DSA_print_fp;
  ossl_DSA_dup_DH_t ossl_DSA_dup_DH;
  ossl_DSA_get0_pqg_t ossl_DSA_get0_pqg;
  ossl_DSA_set0_pqg_t ossl_DSA_set0_pqg;
  ossl_DSA_get0_key_t ossl_DSA_get0_key;
  ossl_DSA_set0_key_t ossl_DSA_set0_key;
  ossl_DSA_get0_p_t ossl_DSA_get0_p;
  ossl_DSA_get0_q_t ossl_DSA_get0_q;
  ossl_DSA_get0_g_t ossl_DSA_get0_g;
  ossl_DSA_get0_pub_key_t ossl_DSA_get0_pub_key;
  ossl_DSA_get0_priv_key_t ossl_DSA_get0_priv_key;
  ossl_DSA_clear_flags_t ossl_DSA_clear_flags;
  ossl_DSA_test_flags_t ossl_DSA_test_flags;
  ossl_DSA_set_flags_t ossl_DSA_set_flags;
  ossl_DSA_get0_engine_t ossl_DSA_get0_engine;
  ossl_DSA_meth_new_t ossl_DSA_meth_new;
  ossl_DSA_meth_free_t ossl_DSA_meth_free;
  ossl_DSA_meth_dup_t ossl_DSA_meth_dup;
  ossl_DSA_meth_get0_name_t ossl_DSA_meth_get0_name;
  ossl_DSA_meth_set1_name_t ossl_DSA_meth_set1_name;
  ossl_DSA_meth_get_flags_t ossl_DSA_meth_get_flags;
  ossl_DSA_meth_set_flags_t ossl_DSA_meth_set_flags;
  ossl_DSA_meth_get0_app_data_t ossl_DSA_meth_get0_app_data;
  ossl_DSA_meth_set0_app_data_t ossl_DSA_meth_set0_app_data;
  ossl_DSA_meth_get_sign_t ossl_DSA_meth_get_sign;
  ossl_DSA_meth_set_sign_t ossl_DSA_meth_set_sign;
  ossl_DSA_meth_get_sign_setup_t ossl_DSA_meth_get_sign_setup;
  ossl_DSA_meth_set_sign_setup_t ossl_DSA_meth_set_sign_setup;
  ossl_DSA_meth_get_verify_t ossl_DSA_meth_get_verify;
  ossl_DSA_meth_set_verify_t ossl_DSA_meth_set_verify;
  ossl_DSA_meth_get_mod_exp_t ossl_DSA_meth_get_mod_exp;
  ossl_DSA_meth_set_mod_exp_t ossl_DSA_meth_set_mod_exp;
  ossl_DSA_meth_get_bn_mod_exp_t ossl_DSA_meth_get_bn_mod_exp;
  ossl_DSA_meth_set_bn_mod_exp_t ossl_DSA_meth_set_bn_mod_exp;
  ossl_DSA_meth_get_init_t ossl_DSA_meth_get_init;
  ossl_DSA_meth_set_init_t ossl_DSA_meth_set_init;
  ossl_DSA_meth_get_finish_t ossl_DSA_meth_get_finish;
  ossl_DSA_meth_set_finish_t ossl_DSA_meth_set_finish;
  ossl_DSA_meth_get_paramgen_t ossl_DSA_meth_get_paramgen;
  ossl_DSA_meth_set_paramgen_t ossl_DSA_meth_set_paramgen;
  ossl_DSA_meth_get_keygen_t ossl_DSA_meth_get_keygen;
  ossl_DSA_meth_set_keygen_t ossl_DSA_meth_set_keygen;
  ossl_SHA1_Init_t ossl_SHA1_Init;
  ossl_SHA1_Update_t ossl_SHA1_Update;
  ossl_SHA1_Final_t ossl_SHA1_Final;
  ossl_SHA1_Transform_t ossl_SHA1_Transform;
  ossl_SHA1_t ossl_SHA1;
  ossl_SHA224_Init_t ossl_SHA224_Init;
  ossl_SHA224_Update_t ossl_SHA224_Update;
  ossl_SHA224_Final_t ossl_SHA224_Final;
  ossl_SHA256_Init_t ossl_SHA256_Init;
  ossl_SHA256_Update_t ossl_SHA256_Update;
  ossl_SHA256_Final_t ossl_SHA256_Final;
  ossl_SHA256_Transform_t ossl_SHA256_Transform;
  ossl_SHA224_t ossl_SHA224;
  ossl_SHA256_t ossl_SHA256;
  ossl_SHA384_Init_t ossl_SHA384_Init;
  ossl_SHA384_Update_t ossl_SHA384_Update;
  ossl_SHA384_Final_t ossl_SHA384_Final;
  ossl_SHA512_Init_t ossl_SHA512_Init;
  ossl_SHA512_Update_t ossl_SHA512_Update;
  ossl_SHA512_Final_t ossl_SHA512_Final;
  ossl_SHA512_Transform_t ossl_SHA512_Transform;
  ossl_SHA384_t ossl_SHA384;
  ossl_SHA512_t ossl_SHA512;
  ossl_OPENSSL_LH_error_t ossl_OPENSSL_LH_error;
  ossl_OPENSSL_LH_new_t ossl_OPENSSL_LH_new;
  ossl_OPENSSL_LH_free_t ossl_OPENSSL_LH_free;
  ossl_OPENSSL_LH_flush_t ossl_OPENSSL_LH_flush;
  ossl_OPENSSL_LH_insert_t ossl_OPENSSL_LH_insert;
  ossl_OPENSSL_LH_delete_t ossl_OPENSSL_LH_delete;
  ossl_OPENSSL_LH_retrieve_t ossl_OPENSSL_LH_retrieve;
  ossl_OPENSSL_LH_doall_t ossl_OPENSSL_LH_doall;
  ossl_OPENSSL_LH_doall_arg_t ossl_OPENSSL_LH_doall_arg;
  ossl_OPENSSL_LH_strhash_t ossl_OPENSSL_LH_strhash;
  ossl_OPENSSL_LH_num_items_t ossl_OPENSSL_LH_num_items;
  ossl_OPENSSL_LH_get_down_load_t ossl_OPENSSL_LH_get_down_load;
  ossl_OPENSSL_LH_set_down_load_t ossl_OPENSSL_LH_set_down_load;
  ossl_OPENSSL_LH_stats_t ossl_OPENSSL_LH_stats;
  ossl_OPENSSL_LH_node_stats_t ossl_OPENSSL_LH_node_stats;
  ossl_OPENSSL_LH_node_usage_stats_t ossl_OPENSSL_LH_node_usage_stats;
  ossl_OPENSSL_LH_stats_bio_t ossl_OPENSSL_LH_stats_bio;
  ossl_OPENSSL_LH_node_stats_bio_t ossl_OPENSSL_LH_node_stats_bio;
  ossl_OPENSSL_LH_node_usage_stats_bio_t ossl_OPENSSL_LH_node_usage_stats_bio;
  ossl_X509_TRUST_set_t ossl_X509_TRUST_set;
  ossl_X509_TRUST_get_count_t ossl_X509_TRUST_get_count;
  ossl_X509_TRUST_get0_t ossl_X509_TRUST_get0;
  ossl_X509_TRUST_get_by_id_t ossl_X509_TRUST_get_by_id;
  ossl_X509_TRUST_add_t ossl_X509_TRUST_add;
  ossl_X509_TRUST_cleanup_t ossl_X509_TRUST_cleanup;
  ossl_X509_TRUST_get_flags_t ossl_X509_TRUST_get_flags;
  ossl_X509_TRUST_get0_name_t ossl_X509_TRUST_get0_name;
  ossl_X509_TRUST_get_trust_t ossl_X509_TRUST_get_trust;
  ossl_X509_trusted_t ossl_X509_trusted;
  ossl_X509_add1_trust_object_t ossl_X509_add1_trust_object;
  ossl_X509_add1_reject_object_t ossl_X509_add1_reject_object;
  ossl_X509_trust_clear_t ossl_X509_trust_clear;
  ossl_X509_reject_clear_t ossl_X509_reject_clear;
  ossl_X509_get0_trust_objects_t ossl_X509_get0_trust_objects;
  ossl_X509_get0_reject_objects_t ossl_X509_get0_reject_objects;
  ossl_X509_TRUST_set_default_t ossl_X509_TRUST_set_default;
  ossl_X509_check_trust_t ossl_X509_check_trust;
  ossl_X509_verify_cert_t ossl_X509_verify_cert;
  ossl_X509_STORE_CTX_verify_t ossl_X509_STORE_CTX_verify;
  ossl_X509_build_chain_t ossl_X509_build_chain;
  ossl_X509_STORE_set_depth_t ossl_X509_STORE_set_depth;
  ossl_X509_STORE_CTX_print_verify_cb_t ossl_X509_STORE_CTX_print_verify_cb;
  ossl_X509_STORE_CTX_set_depth_t ossl_X509_STORE_CTX_set_depth;
  ossl_X509_OBJECT_idx_by_subject_t ossl_X509_OBJECT_idx_by_subject;
  ossl_X509_OBJECT_retrieve_by_subject_t ossl_X509_OBJECT_retrieve_by_subject;
  ossl_X509_OBJECT_retrieve_match_t ossl_X509_OBJECT_retrieve_match;
  ossl_X509_OBJECT_up_ref_count_t ossl_X509_OBJECT_up_ref_count;
  ossl_X509_OBJECT_new_t ossl_X509_OBJECT_new;
  ossl_X509_OBJECT_free_t ossl_X509_OBJECT_free;
  ossl_X509_OBJECT_get_type_t ossl_X509_OBJECT_get_type;
  ossl_X509_OBJECT_get0_X509_t ossl_X509_OBJECT_get0_X509;
  ossl_X509_OBJECT_set1_X509_t ossl_X509_OBJECT_set1_X509;
  ossl_X509_OBJECT_get0_X509_CRL_t ossl_X509_OBJECT_get0_X509_CRL;
  ossl_X509_OBJECT_set1_X509_CRL_t ossl_X509_OBJECT_set1_X509_CRL;
  ossl_X509_STORE_new_t ossl_X509_STORE_new;
  ossl_X509_STORE_free_t ossl_X509_STORE_free;
  ossl_X509_STORE_lock_t ossl_X509_STORE_lock;
  ossl_X509_STORE_unlock_t ossl_X509_STORE_unlock;
  ossl_X509_STORE_up_ref_t ossl_X509_STORE_up_ref;
  ossl_X509_STORE_get0_objects_t ossl_X509_STORE_get0_objects;
  ossl_X509_STORE_get1_all_certs_t ossl_X509_STORE_get1_all_certs;
  ossl_X509_STORE_CTX_get1_certs_t ossl_X509_STORE_CTX_get1_certs;
  ossl_X509_STORE_CTX_get1_crls_t ossl_X509_STORE_CTX_get1_crls;
  ossl_X509_STORE_set_flags_t ossl_X509_STORE_set_flags;
  ossl_X509_STORE_set_purpose_t ossl_X509_STORE_set_purpose;
  ossl_X509_STORE_set_trust_t ossl_X509_STORE_set_trust;
  ossl_X509_STORE_set1_param_t ossl_X509_STORE_set1_param;
  ossl_X509_STORE_get0_param_t ossl_X509_STORE_get0_param;
  ossl_X509_STORE_set_verify_t ossl_X509_STORE_set_verify;
  ossl_X509_STORE_CTX_set_verify_t ossl_X509_STORE_CTX_set_verify;
  ossl_X509_STORE_get_verify_t ossl_X509_STORE_get_verify;
  ossl_X509_STORE_set_verify_cb_t ossl_X509_STORE_set_verify_cb;
  ossl_X509_STORE_get_verify_cb_t ossl_X509_STORE_get_verify_cb;
  ossl_X509_STORE_set_get_issuer_t ossl_X509_STORE_set_get_issuer;
  ossl_X509_STORE_get_get_issuer_t ossl_X509_STORE_get_get_issuer;
  ossl_X509_STORE_set_check_issued_t ossl_X509_STORE_set_check_issued;
  ossl_X509_STORE_get_check_issued_t ossl_X509_STORE_get_check_issued;
  ossl_X509_STORE_set_check_revocation_t ossl_X509_STORE_set_check_revocation;
  ossl_X509_STORE_get_check_revocation_t ossl_X509_STORE_get_check_revocation;
  ossl_X509_STORE_set_get_crl_t ossl_X509_STORE_set_get_crl;
  ossl_X509_STORE_get_get_crl_t ossl_X509_STORE_get_get_crl;
  ossl_X509_STORE_set_check_crl_t ossl_X509_STORE_set_check_crl;
  ossl_X509_STORE_get_check_crl_t ossl_X509_STORE_get_check_crl;
  ossl_X509_STORE_set_cert_crl_t ossl_X509_STORE_set_cert_crl;
  ossl_X509_STORE_get_cert_crl_t ossl_X509_STORE_get_cert_crl;
  ossl_X509_STORE_set_check_policy_t ossl_X509_STORE_set_check_policy;
  ossl_X509_STORE_get_check_policy_t ossl_X509_STORE_get_check_policy;
  ossl_X509_STORE_set_lookup_certs_t ossl_X509_STORE_set_lookup_certs;
  ossl_X509_STORE_get_lookup_certs_t ossl_X509_STORE_get_lookup_certs;
  ossl_X509_STORE_set_lookup_crls_t ossl_X509_STORE_set_lookup_crls;
  ossl_X509_STORE_get_lookup_crls_t ossl_X509_STORE_get_lookup_crls;
  ossl_X509_STORE_set_cleanup_t ossl_X509_STORE_set_cleanup;
  ossl_X509_STORE_get_cleanup_t ossl_X509_STORE_get_cleanup;
  ossl_X509_STORE_set_ex_data_t ossl_X509_STORE_set_ex_data;
  ossl_X509_STORE_get_ex_data_t ossl_X509_STORE_get_ex_data;
  ossl_X509_STORE_CTX_new_ex_t ossl_X509_STORE_CTX_new_ex;
  ossl_X509_STORE_CTX_new_t ossl_X509_STORE_CTX_new;
  ossl_X509_STORE_CTX_get1_issuer_t ossl_X509_STORE_CTX_get1_issuer;
  ossl_X509_STORE_CTX_free_t ossl_X509_STORE_CTX_free;
  ossl_X509_STORE_CTX_init_t ossl_X509_STORE_CTX_init;
  ossl_X509_STORE_CTX_set0_trusted_stack_t ossl_X509_STORE_CTX_set0_trusted_stack;
  ossl_X509_STORE_CTX_cleanup_t ossl_X509_STORE_CTX_cleanup;
  ossl_X509_STORE_CTX_get0_store_t ossl_X509_STORE_CTX_get0_store;
  ossl_X509_STORE_CTX_get0_cert_t ossl_X509_STORE_CTX_get0_cert;
  ossl_X509_STORE_CTX_get0_untrusted_t ossl_X509_STORE_CTX_get0_untrusted;
  ossl_X509_STORE_CTX_set0_untrusted_t ossl_X509_STORE_CTX_set0_untrusted;
  ossl_X509_STORE_CTX_set_verify_cb_t ossl_X509_STORE_CTX_set_verify_cb;
  ossl_X509_STORE_CTX_get_verify_cb_t ossl_X509_STORE_CTX_get_verify_cb;
  ossl_X509_STORE_CTX_get_verify_t ossl_X509_STORE_CTX_get_verify;
  ossl_X509_STORE_CTX_get_get_issuer_t ossl_X509_STORE_CTX_get_get_issuer;
  ossl_X509_STORE_CTX_get_check_issued_t ossl_X509_STORE_CTX_get_check_issued;
  ossl_X509_STORE_CTX_get_check_revocation_t ossl_X509_STORE_CTX_get_check_revocation;
  ossl_X509_STORE_CTX_get_get_crl_t ossl_X509_STORE_CTX_get_get_crl;
  ossl_X509_STORE_CTX_get_check_crl_t ossl_X509_STORE_CTX_get_check_crl;
  ossl_X509_STORE_CTX_get_cert_crl_t ossl_X509_STORE_CTX_get_cert_crl;
  ossl_X509_STORE_CTX_get_check_policy_t ossl_X509_STORE_CTX_get_check_policy;
  ossl_X509_STORE_CTX_get_lookup_certs_t ossl_X509_STORE_CTX_get_lookup_certs;
  ossl_X509_STORE_CTX_get_lookup_crls_t ossl_X509_STORE_CTX_get_lookup_crls;
  ossl_X509_STORE_CTX_get_cleanup_t ossl_X509_STORE_CTX_get_cleanup;
  ossl_X509_STORE_add_lookup_t ossl_X509_STORE_add_lookup;
  ossl_X509_LOOKUP_hash_dir_t ossl_X509_LOOKUP_hash_dir;
  ossl_X509_LOOKUP_file_t ossl_X509_LOOKUP_file;
  ossl_X509_LOOKUP_store_t ossl_X509_LOOKUP_store;
  ossl_X509_LOOKUP_meth_new_t ossl_X509_LOOKUP_meth_new;
  ossl_X509_LOOKUP_meth_free_t ossl_X509_LOOKUP_meth_free;
  ossl_X509_LOOKUP_meth_set_new_item_t ossl_X509_LOOKUP_meth_set_new_item;
  ossl_X509_LOOKUP_meth_get_new_item_t ossl_X509_LOOKUP_meth_get_new_item;
  ossl_X509_LOOKUP_meth_set_free_t ossl_X509_LOOKUP_meth_set_free;
  ossl_X509_LOOKUP_meth_get_free_t ossl_X509_LOOKUP_meth_get_free;
  ossl_X509_LOOKUP_meth_set_init_t ossl_X509_LOOKUP_meth_set_init;
  ossl_X509_LOOKUP_meth_get_init_t ossl_X509_LOOKUP_meth_get_init;
  ossl_X509_LOOKUP_meth_set_shutdown_t ossl_X509_LOOKUP_meth_set_shutdown;
  ossl_X509_LOOKUP_meth_get_shutdown_t ossl_X509_LOOKUP_meth_get_shutdown;
  ossl_X509_LOOKUP_meth_set_ctrl_t ossl_X509_LOOKUP_meth_set_ctrl;
  ossl_X509_LOOKUP_meth_get_ctrl_t ossl_X509_LOOKUP_meth_get_ctrl;
  ossl_X509_LOOKUP_meth_set_get_by_subject_t ossl_X509_LOOKUP_meth_set_get_by_subject;
  ossl_X509_LOOKUP_meth_get_get_by_subject_t ossl_X509_LOOKUP_meth_get_get_by_subject;
  ossl_X509_LOOKUP_meth_set_get_by_issuer_serial_t ossl_X509_LOOKUP_meth_set_get_by_issuer_serial;
  ossl_X509_LOOKUP_meth_get_get_by_issuer_serial_t ossl_X509_LOOKUP_meth_get_get_by_issuer_serial;
  ossl_X509_LOOKUP_meth_set_get_by_fingerprint_t ossl_X509_LOOKUP_meth_set_get_by_fingerprint;
  ossl_X509_LOOKUP_meth_get_get_by_fingerprint_t ossl_X509_LOOKUP_meth_get_get_by_fingerprint;
  ossl_X509_LOOKUP_meth_set_get_by_alias_t ossl_X509_LOOKUP_meth_set_get_by_alias;
  ossl_X509_LOOKUP_meth_get_get_by_alias_t ossl_X509_LOOKUP_meth_get_get_by_alias;
  ossl_X509_STORE_add_cert_t ossl_X509_STORE_add_cert;
  ossl_X509_STORE_add_crl_t ossl_X509_STORE_add_crl;
  ossl_X509_STORE_CTX_get_by_subject_t ossl_X509_STORE_CTX_get_by_subject;
  ossl_X509_STORE_CTX_get_obj_by_subject_t ossl_X509_STORE_CTX_get_obj_by_subject;
  ossl_X509_LOOKUP_ctrl_t ossl_X509_LOOKUP_ctrl;
  ossl_X509_LOOKUP_ctrl_ex_t ossl_X509_LOOKUP_ctrl_ex;
  ossl_X509_load_cert_file_t ossl_X509_load_cert_file;
  ossl_X509_load_cert_file_ex_t ossl_X509_load_cert_file_ex;
  ossl_X509_load_crl_file_t ossl_X509_load_crl_file;
  ossl_X509_load_cert_crl_file_t ossl_X509_load_cert_crl_file;
  ossl_X509_load_cert_crl_file_ex_t ossl_X509_load_cert_crl_file_ex;
  ossl_X509_LOOKUP_new_t ossl_X509_LOOKUP_new;
  ossl_X509_LOOKUP_free_t ossl_X509_LOOKUP_free;
  ossl_X509_LOOKUP_init_t ossl_X509_LOOKUP_init;
  ossl_X509_LOOKUP_by_subject_t ossl_X509_LOOKUP_by_subject;
  ossl_X509_LOOKUP_by_subject_ex_t ossl_X509_LOOKUP_by_subject_ex;
  ossl_X509_LOOKUP_by_issuer_serial_t ossl_X509_LOOKUP_by_issuer_serial;
  ossl_X509_LOOKUP_by_fingerprint_t ossl_X509_LOOKUP_by_fingerprint;
  ossl_X509_LOOKUP_by_alias_t ossl_X509_LOOKUP_by_alias;
  ossl_X509_LOOKUP_set_method_data_t ossl_X509_LOOKUP_set_method_data;
  ossl_X509_LOOKUP_get_method_data_t ossl_X509_LOOKUP_get_method_data;
  ossl_X509_LOOKUP_get_store_t ossl_X509_LOOKUP_get_store;
  ossl_X509_LOOKUP_shutdown_t ossl_X509_LOOKUP_shutdown;
  ossl_X509_STORE_load_file_t ossl_X509_STORE_load_file;
  ossl_X509_STORE_load_path_t ossl_X509_STORE_load_path;
  ossl_X509_STORE_load_store_t ossl_X509_STORE_load_store;
  ossl_X509_STORE_load_locations_t ossl_X509_STORE_load_locations;
  ossl_X509_STORE_set_default_paths_t ossl_X509_STORE_set_default_paths;
  ossl_X509_STORE_load_file_ex_t ossl_X509_STORE_load_file_ex;
  ossl_X509_STORE_load_store_ex_t ossl_X509_STORE_load_store_ex;
  ossl_X509_STORE_load_locations_ex_t ossl_X509_STORE_load_locations_ex;
  ossl_X509_STORE_set_default_paths_ex_t ossl_X509_STORE_set_default_paths_ex;
  ossl_X509_STORE_CTX_set_ex_data_t ossl_X509_STORE_CTX_set_ex_data;
  ossl_X509_STORE_CTX_get_ex_data_t ossl_X509_STORE_CTX_get_ex_data;
  ossl_X509_STORE_CTX_get_error_t ossl_X509_STORE_CTX_get_error;
  ossl_X509_STORE_CTX_set_error_t ossl_X509_STORE_CTX_set_error;
  ossl_X509_STORE_CTX_get_error_depth_t ossl_X509_STORE_CTX_get_error_depth;
  ossl_X509_STORE_CTX_set_error_depth_t ossl_X509_STORE_CTX_set_error_depth;
  ossl_X509_STORE_CTX_get_current_cert_t ossl_X509_STORE_CTX_get_current_cert;
  ossl_X509_STORE_CTX_set_current_cert_t ossl_X509_STORE_CTX_set_current_cert;
  ossl_X509_STORE_CTX_get0_current_issuer_t ossl_X509_STORE_CTX_get0_current_issuer;
  ossl_X509_STORE_CTX_get0_current_crl_t ossl_X509_STORE_CTX_get0_current_crl;
  ossl_X509_STORE_CTX_get0_parent_ctx_t ossl_X509_STORE_CTX_get0_parent_ctx;
  ossl_X509_STORE_CTX_get0_chain_t ossl_X509_STORE_CTX_get0_chain;
  ossl_X509_STORE_CTX_get1_chain_t ossl_X509_STORE_CTX_get1_chain;
  ossl_X509_STORE_CTX_set_cert_t ossl_X509_STORE_CTX_set_cert;
  ossl_X509_STORE_CTX_set0_verified_chain_t ossl_X509_STORE_CTX_set0_verified_chain;
  ossl_X509_STORE_CTX_set0_crls_t ossl_X509_STORE_CTX_set0_crls;
  ossl_X509_STORE_CTX_set_purpose_t ossl_X509_STORE_CTX_set_purpose;
  ossl_X509_STORE_CTX_set_trust_t ossl_X509_STORE_CTX_set_trust;
  ossl_X509_STORE_CTX_purpose_inherit_t ossl_X509_STORE_CTX_purpose_inherit;
  ossl_X509_STORE_CTX_set_flags_t ossl_X509_STORE_CTX_set_flags;
  ossl_X509_STORE_CTX_set_time_t ossl_X509_STORE_CTX_set_time;
  ossl_X509_STORE_CTX_get0_policy_tree_t ossl_X509_STORE_CTX_get0_policy_tree;
  ossl_X509_STORE_CTX_get_explicit_policy_t ossl_X509_STORE_CTX_get_explicit_policy;
  ossl_X509_STORE_CTX_get_num_untrusted_t ossl_X509_STORE_CTX_get_num_untrusted;
  ossl_X509_STORE_CTX_get0_param_t ossl_X509_STORE_CTX_get0_param;
  ossl_X509_STORE_CTX_set0_param_t ossl_X509_STORE_CTX_set0_param;
  ossl_X509_STORE_CTX_set_default_t ossl_X509_STORE_CTX_set_default;
  ossl_X509_STORE_CTX_set0_dane_t ossl_X509_STORE_CTX_set0_dane;
  ossl_X509_VERIFY_PARAM_new_t ossl_X509_VERIFY_PARAM_new;
  ossl_X509_VERIFY_PARAM_free_t ossl_X509_VERIFY_PARAM_free;
  ossl_X509_VERIFY_PARAM_inherit_t ossl_X509_VERIFY_PARAM_inherit;
  ossl_X509_VERIFY_PARAM_set1_t ossl_X509_VERIFY_PARAM_set1;
  ossl_X509_VERIFY_PARAM_set1_name_t ossl_X509_VERIFY_PARAM_set1_name;
  ossl_X509_VERIFY_PARAM_set_flags_t ossl_X509_VERIFY_PARAM_set_flags;
  ossl_X509_VERIFY_PARAM_clear_flags_t ossl_X509_VERIFY_PARAM_clear_flags;
  ossl_X509_VERIFY_PARAM_get_flags_t ossl_X509_VERIFY_PARAM_get_flags;
  ossl_X509_VERIFY_PARAM_set_purpose_t ossl_X509_VERIFY_PARAM_set_purpose;
  ossl_X509_VERIFY_PARAM_set_trust_t ossl_X509_VERIFY_PARAM_set_trust;
  ossl_X509_VERIFY_PARAM_set_depth_t ossl_X509_VERIFY_PARAM_set_depth;
  ossl_X509_VERIFY_PARAM_set_auth_level_t ossl_X509_VERIFY_PARAM_set_auth_level;
  ossl_X509_VERIFY_PARAM_get_time_t ossl_X509_VERIFY_PARAM_get_time;
  ossl_X509_VERIFY_PARAM_set_time_t ossl_X509_VERIFY_PARAM_set_time;
  ossl_X509_VERIFY_PARAM_add0_policy_t ossl_X509_VERIFY_PARAM_add0_policy;
  ossl_X509_VERIFY_PARAM_set1_policies_t ossl_X509_VERIFY_PARAM_set1_policies;
  ossl_X509_VERIFY_PARAM_set_inh_flags_t ossl_X509_VERIFY_PARAM_set_inh_flags;
  ossl_X509_VERIFY_PARAM_get_inh_flags_t ossl_X509_VERIFY_PARAM_get_inh_flags;
  ossl_X509_VERIFY_PARAM_get0_host_t ossl_X509_VERIFY_PARAM_get0_host;
  ossl_X509_VERIFY_PARAM_set1_host_t ossl_X509_VERIFY_PARAM_set1_host;
  ossl_X509_VERIFY_PARAM_add1_host_t ossl_X509_VERIFY_PARAM_add1_host;
  ossl_X509_VERIFY_PARAM_set_hostflags_t ossl_X509_VERIFY_PARAM_set_hostflags;
  ossl_X509_VERIFY_PARAM_get_hostflags_t ossl_X509_VERIFY_PARAM_get_hostflags;
  ossl_X509_VERIFY_PARAM_get0_peername_t ossl_X509_VERIFY_PARAM_get0_peername;
  ossl_X509_VERIFY_PARAM_move_peername_t ossl_X509_VERIFY_PARAM_move_peername;
  ossl_X509_VERIFY_PARAM_get0_email_t ossl_X509_VERIFY_PARAM_get0_email;
  ossl_X509_VERIFY_PARAM_set1_email_t ossl_X509_VERIFY_PARAM_set1_email;
  ossl_X509_VERIFY_PARAM_get1_ip_asc_t ossl_X509_VERIFY_PARAM_get1_ip_asc;
  ossl_X509_VERIFY_PARAM_set1_ip_t ossl_X509_VERIFY_PARAM_set1_ip;
  ossl_X509_VERIFY_PARAM_set1_ip_asc_t ossl_X509_VERIFY_PARAM_set1_ip_asc;
  ossl_X509_VERIFY_PARAM_get_depth_t ossl_X509_VERIFY_PARAM_get_depth;
  ossl_X509_VERIFY_PARAM_get_auth_level_t ossl_X509_VERIFY_PARAM_get_auth_level;
  ossl_X509_VERIFY_PARAM_get0_name_t ossl_X509_VERIFY_PARAM_get0_name;
  ossl_X509_VERIFY_PARAM_add0_table_t ossl_X509_VERIFY_PARAM_add0_table;
  ossl_X509_VERIFY_PARAM_get_count_t ossl_X509_VERIFY_PARAM_get_count;
  ossl_X509_VERIFY_PARAM_get0_t ossl_X509_VERIFY_PARAM_get0;
  ossl_X509_VERIFY_PARAM_lookup_t ossl_X509_VERIFY_PARAM_lookup;
  ossl_X509_VERIFY_PARAM_table_cleanup_t ossl_X509_VERIFY_PARAM_table_cleanup;
  ossl_X509_policy_check_t ossl_X509_policy_check;
  ossl_X509_policy_tree_free_t ossl_X509_policy_tree_free;
  ossl_X509_policy_tree_level_count_t ossl_X509_policy_tree_level_count;
  ossl_X509_policy_tree_get0_level_t ossl_X509_policy_tree_get0_level;
  ossl_X509_policy_tree_get0_policies_t ossl_X509_policy_tree_get0_policies;
  ossl_X509_policy_tree_get0_user_policies_t ossl_X509_policy_tree_get0_user_policies;
  ossl_X509_policy_level_node_count_t ossl_X509_policy_level_node_count;
  ossl_X509_policy_level_get0_node_t ossl_X509_policy_level_get0_node;
  ossl_X509_policy_node_get0_policy_t ossl_X509_policy_node_get0_policy;
  ossl_X509_policy_node_get0_qualifiers_t ossl_X509_policy_node_get0_qualifiers;
  ossl_X509_policy_node_get0_parent_t ossl_X509_policy_node_get0_parent;
  ossl_PKCS7_ISSUER_AND_SERIAL_new_t ossl_PKCS7_ISSUER_AND_SERIAL_new;
  ossl_PKCS7_ISSUER_AND_SERIAL_free_t ossl_PKCS7_ISSUER_AND_SERIAL_free;
  ossl_d2i_PKCS7_ISSUER_AND_SERIAL_t ossl_d2i_PKCS7_ISSUER_AND_SERIAL;
  ossl_i2d_PKCS7_ISSUER_AND_SERIAL_t ossl_i2d_PKCS7_ISSUER_AND_SERIAL;
  ossl_PKCS7_ISSUER_AND_SERIAL_it_t ossl_PKCS7_ISSUER_AND_SERIAL_it;
  ossl_PKCS7_ISSUER_AND_SERIAL_digest_t ossl_PKCS7_ISSUER_AND_SERIAL_digest;
  ossl_d2i_PKCS7_fp_t ossl_d2i_PKCS7_fp;
  ossl_i2d_PKCS7_fp_t ossl_i2d_PKCS7_fp;
  ossl_PKCS7_dup_t ossl_PKCS7_dup;
  ossl_d2i_PKCS7_bio_t ossl_d2i_PKCS7_bio;
  ossl_i2d_PKCS7_bio_t ossl_i2d_PKCS7_bio;
  ossl_i2d_PKCS7_bio_stream_t ossl_i2d_PKCS7_bio_stream;
  ossl_PEM_write_bio_PKCS7_stream_t ossl_PEM_write_bio_PKCS7_stream;
  ossl_PKCS7_SIGNER_INFO_new_t ossl_PKCS7_SIGNER_INFO_new;
  ossl_PKCS7_SIGNER_INFO_free_t ossl_PKCS7_SIGNER_INFO_free;
  ossl_d2i_PKCS7_SIGNER_INFO_t ossl_d2i_PKCS7_SIGNER_INFO;
  ossl_i2d_PKCS7_SIGNER_INFO_t ossl_i2d_PKCS7_SIGNER_INFO;
  ossl_PKCS7_SIGNER_INFO_it_t ossl_PKCS7_SIGNER_INFO_it;
  ossl_PKCS7_RECIP_INFO_new_t ossl_PKCS7_RECIP_INFO_new;
  ossl_PKCS7_RECIP_INFO_free_t ossl_PKCS7_RECIP_INFO_free;
  ossl_d2i_PKCS7_RECIP_INFO_t ossl_d2i_PKCS7_RECIP_INFO;
  ossl_i2d_PKCS7_RECIP_INFO_t ossl_i2d_PKCS7_RECIP_INFO;
  ossl_PKCS7_RECIP_INFO_it_t ossl_PKCS7_RECIP_INFO_it;
  ossl_PKCS7_SIGNED_new_t ossl_PKCS7_SIGNED_new;
  ossl_PKCS7_SIGNED_free_t ossl_PKCS7_SIGNED_free;
  ossl_d2i_PKCS7_SIGNED_t ossl_d2i_PKCS7_SIGNED;
  ossl_i2d_PKCS7_SIGNED_t ossl_i2d_PKCS7_SIGNED;
  ossl_PKCS7_SIGNED_it_t ossl_PKCS7_SIGNED_it;
  ossl_PKCS7_ENC_CONTENT_new_t ossl_PKCS7_ENC_CONTENT_new;
  ossl_PKCS7_ENC_CONTENT_free_t ossl_PKCS7_ENC_CONTENT_free;
  ossl_d2i_PKCS7_ENC_CONTENT_t ossl_d2i_PKCS7_ENC_CONTENT;
  ossl_i2d_PKCS7_ENC_CONTENT_t ossl_i2d_PKCS7_ENC_CONTENT;
  ossl_PKCS7_ENC_CONTENT_it_t ossl_PKCS7_ENC_CONTENT_it;
  ossl_PKCS7_ENVELOPE_new_t ossl_PKCS7_ENVELOPE_new;
  ossl_PKCS7_ENVELOPE_free_t ossl_PKCS7_ENVELOPE_free;
  ossl_d2i_PKCS7_ENVELOPE_t ossl_d2i_PKCS7_ENVELOPE;
  ossl_i2d_PKCS7_ENVELOPE_t ossl_i2d_PKCS7_ENVELOPE;
  ossl_PKCS7_ENVELOPE_it_t ossl_PKCS7_ENVELOPE_it;
  ossl_PKCS7_SIGN_ENVELOPE_new_t ossl_PKCS7_SIGN_ENVELOPE_new;
  ossl_PKCS7_SIGN_ENVELOPE_free_t ossl_PKCS7_SIGN_ENVELOPE_free;
  ossl_d2i_PKCS7_SIGN_ENVELOPE_t ossl_d2i_PKCS7_SIGN_ENVELOPE;
  ossl_i2d_PKCS7_SIGN_ENVELOPE_t ossl_i2d_PKCS7_SIGN_ENVELOPE;
  ossl_PKCS7_SIGN_ENVELOPE_it_t ossl_PKCS7_SIGN_ENVELOPE_it;
  ossl_PKCS7_DIGEST_new_t ossl_PKCS7_DIGEST_new;
  ossl_PKCS7_DIGEST_free_t ossl_PKCS7_DIGEST_free;
  ossl_d2i_PKCS7_DIGEST_t ossl_d2i_PKCS7_DIGEST;
  ossl_i2d_PKCS7_DIGEST_t ossl_i2d_PKCS7_DIGEST;
  ossl_PKCS7_DIGEST_it_t ossl_PKCS7_DIGEST_it;
  ossl_PKCS7_ENCRYPT_new_t ossl_PKCS7_ENCRYPT_new;
  ossl_PKCS7_ENCRYPT_free_t ossl_PKCS7_ENCRYPT_free;
  ossl_d2i_PKCS7_ENCRYPT_t ossl_d2i_PKCS7_ENCRYPT;
  ossl_i2d_PKCS7_ENCRYPT_t ossl_i2d_PKCS7_ENCRYPT;
  ossl_PKCS7_ENCRYPT_it_t ossl_PKCS7_ENCRYPT_it;
  ossl_PKCS7_new_t ossl_PKCS7_new;
  ossl_PKCS7_free_t ossl_PKCS7_free;
  ossl_d2i_PKCS7_t ossl_d2i_PKCS7;
  ossl_i2d_PKCS7_t ossl_i2d_PKCS7;
  ossl_PKCS7_it_t ossl_PKCS7_it;
  ossl_PKCS7_new_ex_t ossl_PKCS7_new_ex;
  ossl_PKCS7_ATTR_SIGN_it_t ossl_PKCS7_ATTR_SIGN_it;
  ossl_PKCS7_ATTR_VERIFY_it_t ossl_PKCS7_ATTR_VERIFY_it;
  ossl_i2d_PKCS7_NDEF_t ossl_i2d_PKCS7_NDEF;
  ossl_PKCS7_print_ctx_t ossl_PKCS7_print_ctx;
  ossl_PKCS7_ctrl_t ossl_PKCS7_ctrl;
  ossl_PKCS7_type_is_other_t ossl_PKCS7_type_is_other;
  ossl_PKCS7_set_type_t ossl_PKCS7_set_type;
  ossl_PKCS7_set0_type_other_t ossl_PKCS7_set0_type_other;
  ossl_PKCS7_set_content_t ossl_PKCS7_set_content;
  ossl_PKCS7_SIGNER_INFO_set_t ossl_PKCS7_SIGNER_INFO_set;
  ossl_PKCS7_SIGNER_INFO_sign_t ossl_PKCS7_SIGNER_INFO_sign;
  ossl_PKCS7_add_signer_t ossl_PKCS7_add_signer;
  ossl_PKCS7_add_certificate_t ossl_PKCS7_add_certificate;
  ossl_PKCS7_add_crl_t ossl_PKCS7_add_crl;
  ossl_PKCS7_content_new_t ossl_PKCS7_content_new;
  ossl_PKCS7_dataVerify_t ossl_PKCS7_dataVerify;
  ossl_PKCS7_signatureVerify_t ossl_PKCS7_signatureVerify;
  ossl_PKCS7_dataInit_t ossl_PKCS7_dataInit;
  ossl_PKCS7_dataFinal_t ossl_PKCS7_dataFinal;
  ossl_PKCS7_dataDecode_t ossl_PKCS7_dataDecode;
  ossl_PKCS7_add_signature_t ossl_PKCS7_add_signature;
  ossl_PKCS7_cert_from_signer_info_t ossl_PKCS7_cert_from_signer_info;
  ossl_PKCS7_set_digest_t ossl_PKCS7_set_digest;
  ossl_PKCS7_get_signer_info_t ossl_PKCS7_get_signer_info;
  ossl_PKCS7_add_recipient_t ossl_PKCS7_add_recipient;
  ossl_PKCS7_SIGNER_INFO_get0_algs_t ossl_PKCS7_SIGNER_INFO_get0_algs;
  ossl_PKCS7_RECIP_INFO_get0_alg_t ossl_PKCS7_RECIP_INFO_get0_alg;
  ossl_PKCS7_add_recipient_info_t ossl_PKCS7_add_recipient_info;
  ossl_PKCS7_RECIP_INFO_set_t ossl_PKCS7_RECIP_INFO_set;
  ossl_PKCS7_set_cipher_t ossl_PKCS7_set_cipher;
  ossl_PKCS7_stream_t ossl_PKCS7_stream;
  ossl_PKCS7_get_issuer_and_serial_t ossl_PKCS7_get_issuer_and_serial;
  ossl_PKCS7_get_octet_string_t ossl_PKCS7_get_octet_string;
  ossl_PKCS7_digest_from_attributes_t ossl_PKCS7_digest_from_attributes;
  ossl_PKCS7_add_signed_attribute_t ossl_PKCS7_add_signed_attribute;
  ossl_PKCS7_add_attribute_t ossl_PKCS7_add_attribute;
  ossl_PKCS7_get_attribute_t ossl_PKCS7_get_attribute;
  ossl_PKCS7_get_signed_attribute_t ossl_PKCS7_get_signed_attribute;
  ossl_PKCS7_set_signed_attributes_t ossl_PKCS7_set_signed_attributes;
  ossl_PKCS7_set_attributes_t ossl_PKCS7_set_attributes;
  ossl_PKCS7_sign_t ossl_PKCS7_sign;
  ossl_PKCS7_sign_ex_t ossl_PKCS7_sign_ex;
  ossl_PKCS7_sign_add_signer_t ossl_PKCS7_sign_add_signer;
  ossl_PKCS7_final_t ossl_PKCS7_final;
  ossl_PKCS7_verify_t ossl_PKCS7_verify;
  ossl_PKCS7_get0_signers_t ossl_PKCS7_get0_signers;
  ossl_PKCS7_encrypt_t ossl_PKCS7_encrypt;
  ossl_PKCS7_encrypt_ex_t ossl_PKCS7_encrypt_ex;
  ossl_PKCS7_decrypt_t ossl_PKCS7_decrypt;
  ossl_PKCS7_add_attrib_smimecap_t ossl_PKCS7_add_attrib_smimecap;
  ossl_PKCS7_get_smimecap_t ossl_PKCS7_get_smimecap;
  ossl_PKCS7_simple_smimecap_t ossl_PKCS7_simple_smimecap;
  ossl_PKCS7_add_attrib_content_type_t ossl_PKCS7_add_attrib_content_type;
  ossl_PKCS7_add0_attrib_signing_time_t ossl_PKCS7_add0_attrib_signing_time;
  ossl_PKCS7_add1_attrib_digest_t ossl_PKCS7_add1_attrib_digest;
  ossl_SMIME_write_PKCS7_t ossl_SMIME_write_PKCS7;
  ossl_SMIME_read_PKCS7_ex_t ossl_SMIME_read_PKCS7_ex;
  ossl_SMIME_read_PKCS7_t ossl_SMIME_read_PKCS7;
  ossl_BIO_new_PKCS7_t ossl_BIO_new_PKCS7;
  ossl_X509_CRL_set_default_method_t ossl_X509_CRL_set_default_method;
  ossl_X509_CRL_METHOD_new_t ossl_X509_CRL_METHOD_new;
  ossl_X509_CRL_METHOD_free_t ossl_X509_CRL_METHOD_free;
  ossl_X509_CRL_set_meth_data_t ossl_X509_CRL_set_meth_data;
  ossl_X509_CRL_get_meth_data_t ossl_X509_CRL_get_meth_data;
  ossl_X509_verify_cert_error_string_t ossl_X509_verify_cert_error_string;
  ossl_X509_verify_t ossl_X509_verify;
  ossl_X509_self_signed_t ossl_X509_self_signed;
  ossl_X509_REQ_verify_ex_t ossl_X509_REQ_verify_ex;
  ossl_X509_REQ_verify_t ossl_X509_REQ_verify;
  ossl_X509_CRL_verify_t ossl_X509_CRL_verify;
  ossl_NETSCAPE_SPKI_verify_t ossl_NETSCAPE_SPKI_verify;
  ossl_NETSCAPE_SPKI_b64_decode_t ossl_NETSCAPE_SPKI_b64_decode;
  ossl_NETSCAPE_SPKI_b64_encode_t ossl_NETSCAPE_SPKI_b64_encode;
  ossl_NETSCAPE_SPKI_get_pubkey_t ossl_NETSCAPE_SPKI_get_pubkey;
  ossl_NETSCAPE_SPKI_set_pubkey_t ossl_NETSCAPE_SPKI_set_pubkey;
  ossl_NETSCAPE_SPKI_print_t ossl_NETSCAPE_SPKI_print;
  ossl_X509_signature_dump_t ossl_X509_signature_dump;
  ossl_X509_signature_print_t ossl_X509_signature_print;
  ossl_X509_sign_t ossl_X509_sign;
  ossl_X509_sign_ctx_t ossl_X509_sign_ctx;
  ossl_X509_REQ_sign_t ossl_X509_REQ_sign;
  ossl_X509_REQ_sign_ctx_t ossl_X509_REQ_sign_ctx;
  ossl_X509_CRL_sign_t ossl_X509_CRL_sign;
  ossl_X509_CRL_sign_ctx_t ossl_X509_CRL_sign_ctx;
  ossl_NETSCAPE_SPKI_sign_t ossl_NETSCAPE_SPKI_sign;
  ossl_X509_pubkey_digest_t ossl_X509_pubkey_digest;
  ossl_X509_digest_t ossl_X509_digest;
  ossl_X509_digest_sig_t ossl_X509_digest_sig;
  ossl_X509_CRL_digest_t ossl_X509_CRL_digest;
  ossl_X509_REQ_digest_t ossl_X509_REQ_digest;
  ossl_X509_NAME_digest_t ossl_X509_NAME_digest;
  ossl_X509_load_http_t ossl_X509_load_http;
  ossl_X509_CRL_load_http_t ossl_X509_CRL_load_http;
  ossl_CONF_set_default_method_t ossl_CONF_set_default_method;
  ossl_CONF_set_nconf_t ossl_CONF_set_nconf;
  ossl_CONF_load_t ossl_CONF_load;
  ossl_CONF_load_fp_t ossl_CONF_load_fp;
  ossl_CONF_load_bio_t ossl_CONF_load_bio;
  ossl_CONF_get_section_t ossl_CONF_get_section;
  ossl_CONF_get_string_t ossl_CONF_get_string;
  ossl_CONF_get_number_t ossl_CONF_get_number;
  ossl_CONF_free_t ossl_CONF_free;
  ossl_CONF_dump_fp_t ossl_CONF_dump_fp;
  ossl_CONF_dump_bio_t ossl_CONF_dump_bio;
  ossl_OPENSSL_config_t ossl_OPENSSL_config;
  ossl_NCONF_new_ex_t ossl_NCONF_new_ex;
  ossl_NCONF_get0_libctx_t ossl_NCONF_get0_libctx;
  ossl_NCONF_new_t ossl_NCONF_new;
  ossl_NCONF_default_t ossl_NCONF_default;
  ossl_NCONF_WIN32_t ossl_NCONF_WIN32;
  ossl_NCONF_free_t ossl_NCONF_free;
  ossl_NCONF_free_data_t ossl_NCONF_free_data;
  ossl_NCONF_load_t ossl_NCONF_load;
  ossl_NCONF_load_fp_t ossl_NCONF_load_fp;
  ossl_NCONF_load_bio_t ossl_NCONF_load_bio;
  ossl_NCONF_get_section_names_t ossl_NCONF_get_section_names;
  ossl_NCONF_get_section_t ossl_NCONF_get_section;
  ossl_NCONF_get_string_t ossl_NCONF_get_string;
  ossl_NCONF_get_number_e_t ossl_NCONF_get_number_e;
  ossl_NCONF_dump_fp_t ossl_NCONF_dump_fp;
  ossl_NCONF_dump_bio_t ossl_NCONF_dump_bio;
  ossl_CONF_modules_load_t ossl_CONF_modules_load;
  ossl_CONF_modules_load_file_ex_t ossl_CONF_modules_load_file_ex;
  ossl_CONF_modules_load_file_t ossl_CONF_modules_load_file;
  ossl_CONF_modules_unload_t ossl_CONF_modules_unload;
  ossl_CONF_modules_finish_t ossl_CONF_modules_finish;
  ossl_CONF_module_add_t ossl_CONF_module_add;
  ossl_CONF_imodule_get_name_t ossl_CONF_imodule_get_name;
  ossl_CONF_imodule_get_value_t ossl_CONF_imodule_get_value;
  ossl_CONF_imodule_get_usr_data_t ossl_CONF_imodule_get_usr_data;
  ossl_CONF_imodule_set_usr_data_t ossl_CONF_imodule_set_usr_data;
  ossl_CONF_imodule_get_module_t ossl_CONF_imodule_get_module;
  ossl_CONF_imodule_get_flags_t ossl_CONF_imodule_get_flags;
  ossl_CONF_imodule_set_flags_t ossl_CONF_imodule_set_flags;
  ossl_CONF_module_get_usr_data_t ossl_CONF_module_get_usr_data;
  ossl_CONF_module_set_usr_data_t ossl_CONF_module_set_usr_data;
  ossl_CONF_get1_default_config_file_t ossl_CONF_get1_default_config_file;
  ossl_CONF_parse_list_t ossl_CONF_parse_list;
  ossl_OPENSSL_load_builtin_modules_t ossl_OPENSSL_load_builtin_modules;
  ossl_OSSL_HTTP_REQ_CTX_new_t ossl_OSSL_HTTP_REQ_CTX_new;
  ossl_OSSL_HTTP_REQ_CTX_free_t ossl_OSSL_HTTP_REQ_CTX_free;
  ossl_OSSL_HTTP_REQ_CTX_set_request_line_t ossl_OSSL_HTTP_REQ_CTX_set_request_line;
  ossl_OSSL_HTTP_REQ_CTX_add1_header_t ossl_OSSL_HTTP_REQ_CTX_add1_header;
  ossl_OSSL_HTTP_REQ_CTX_set_expected_t ossl_OSSL_HTTP_REQ_CTX_set_expected;
  ossl_OSSL_HTTP_REQ_CTX_set1_req_t ossl_OSSL_HTTP_REQ_CTX_set1_req;
  ossl_OSSL_HTTP_REQ_CTX_nbio_t ossl_OSSL_HTTP_REQ_CTX_nbio;
  ossl_OSSL_HTTP_REQ_CTX_nbio_d2i_t ossl_OSSL_HTTP_REQ_CTX_nbio_d2i;
  ossl_OSSL_HTTP_REQ_CTX_exchange_t ossl_OSSL_HTTP_REQ_CTX_exchange;
  ossl_OSSL_HTTP_REQ_CTX_get0_mem_bio_t ossl_OSSL_HTTP_REQ_CTX_get0_mem_bio;
  ossl_OSSL_HTTP_REQ_CTX_get_resp_len_t ossl_OSSL_HTTP_REQ_CTX_get_resp_len;
  ossl_OSSL_HTTP_REQ_CTX_set_max_response_length_t ossl_OSSL_HTTP_REQ_CTX_set_max_response_length;
  ossl_OSSL_HTTP_is_alive_t ossl_OSSL_HTTP_is_alive;
  ossl_OSSL_HTTP_open_t ossl_OSSL_HTTP_open;
  ossl_OSSL_HTTP_proxy_connect_t ossl_OSSL_HTTP_proxy_connect;
  ossl_OSSL_HTTP_set1_request_t ossl_OSSL_HTTP_set1_request;
  ossl_OSSL_HTTP_exchange_t ossl_OSSL_HTTP_exchange;
  ossl_OSSL_HTTP_get_t ossl_OSSL_HTTP_get;
  ossl_OSSL_HTTP_transfer_t ossl_OSSL_HTTP_transfer;
  ossl_OSSL_HTTP_close_t ossl_OSSL_HTTP_close;
  ossl_OSSL_parse_url_t ossl_OSSL_parse_url;
  ossl_OSSL_HTTP_parse_url_t ossl_OSSL_HTTP_parse_url;
  ossl_OSSL_HTTP_adapt_proxy_t ossl_OSSL_HTTP_adapt_proxy;
  ossl_d2i_X509_fp_t ossl_d2i_X509_fp;
  ossl_i2d_X509_fp_t ossl_i2d_X509_fp;
  ossl_d2i_X509_CRL_fp_t ossl_d2i_X509_CRL_fp;
  ossl_i2d_X509_CRL_fp_t ossl_i2d_X509_CRL_fp;
  ossl_d2i_X509_REQ_fp_t ossl_d2i_X509_REQ_fp;
  ossl_i2d_X509_REQ_fp_t ossl_i2d_X509_REQ_fp;
  ossl_d2i_RSAPrivateKey_fp_t ossl_d2i_RSAPrivateKey_fp;
  ossl_i2d_RSAPrivateKey_fp_t ossl_i2d_RSAPrivateKey_fp;
  ossl_d2i_RSAPublicKey_fp_t ossl_d2i_RSAPublicKey_fp;
  ossl_i2d_RSAPublicKey_fp_t ossl_i2d_RSAPublicKey_fp;
  ossl_d2i_RSA_PUBKEY_fp_t ossl_d2i_RSA_PUBKEY_fp;
  ossl_i2d_RSA_PUBKEY_fp_t ossl_i2d_RSA_PUBKEY_fp;
  ossl_d2i_DSA_PUBKEY_fp_t ossl_d2i_DSA_PUBKEY_fp;
  ossl_i2d_DSA_PUBKEY_fp_t ossl_i2d_DSA_PUBKEY_fp;
  ossl_d2i_DSAPrivateKey_fp_t ossl_d2i_DSAPrivateKey_fp;
  ossl_i2d_DSAPrivateKey_fp_t ossl_i2d_DSAPrivateKey_fp;
  ossl_d2i_EC_PUBKEY_fp_t ossl_d2i_EC_PUBKEY_fp;
  ossl_i2d_EC_PUBKEY_fp_t ossl_i2d_EC_PUBKEY_fp;
  ossl_d2i_ECPrivateKey_fp_t ossl_d2i_ECPrivateKey_fp;
  ossl_i2d_ECPrivateKey_fp_t ossl_i2d_ECPrivateKey_fp;
  ossl_d2i_PKCS8_fp_t ossl_d2i_PKCS8_fp;
  ossl_i2d_PKCS8_fp_t ossl_i2d_PKCS8_fp;
  ossl_d2i_X509_PUBKEY_fp_t ossl_d2i_X509_PUBKEY_fp;
  ossl_i2d_X509_PUBKEY_fp_t ossl_i2d_X509_PUBKEY_fp;
  ossl_d2i_PKCS8_PRIV_KEY_INFO_fp_t ossl_d2i_PKCS8_PRIV_KEY_INFO_fp;
  ossl_i2d_PKCS8_PRIV_KEY_INFO_fp_t ossl_i2d_PKCS8_PRIV_KEY_INFO_fp;
  ossl_i2d_PKCS8PrivateKeyInfo_fp_t ossl_i2d_PKCS8PrivateKeyInfo_fp;
  ossl_i2d_PrivateKey_fp_t ossl_i2d_PrivateKey_fp;
  ossl_d2i_PrivateKey_ex_fp_t ossl_d2i_PrivateKey_ex_fp;
  ossl_d2i_PrivateKey_fp_t ossl_d2i_PrivateKey_fp;
  ossl_i2d_PUBKEY_fp_t ossl_i2d_PUBKEY_fp;
  ossl_d2i_PUBKEY_fp_t ossl_d2i_PUBKEY_fp;
  ossl_d2i_X509_bio_t ossl_d2i_X509_bio;
  ossl_i2d_X509_bio_t ossl_i2d_X509_bio;
  ossl_d2i_X509_CRL_bio_t ossl_d2i_X509_CRL_bio;
  ossl_i2d_X509_CRL_bio_t ossl_i2d_X509_CRL_bio;
  ossl_d2i_X509_REQ_bio_t ossl_d2i_X509_REQ_bio;
  ossl_i2d_X509_REQ_bio_t ossl_i2d_X509_REQ_bio;
  ossl_d2i_RSAPrivateKey_bio_t ossl_d2i_RSAPrivateKey_bio;
  ossl_i2d_RSAPrivateKey_bio_t ossl_i2d_RSAPrivateKey_bio;
  ossl_d2i_RSAPublicKey_bio_t ossl_d2i_RSAPublicKey_bio;
  ossl_i2d_RSAPublicKey_bio_t ossl_i2d_RSAPublicKey_bio;
  ossl_d2i_RSA_PUBKEY_bio_t ossl_d2i_RSA_PUBKEY_bio;
  ossl_i2d_RSA_PUBKEY_bio_t ossl_i2d_RSA_PUBKEY_bio;
  ossl_d2i_DSA_PUBKEY_bio_t ossl_d2i_DSA_PUBKEY_bio;
  ossl_i2d_DSA_PUBKEY_bio_t ossl_i2d_DSA_PUBKEY_bio;
  ossl_d2i_DSAPrivateKey_bio_t ossl_d2i_DSAPrivateKey_bio;
  ossl_i2d_DSAPrivateKey_bio_t ossl_i2d_DSAPrivateKey_bio;
  ossl_d2i_EC_PUBKEY_bio_t ossl_d2i_EC_PUBKEY_bio;
  ossl_i2d_EC_PUBKEY_bio_t ossl_i2d_EC_PUBKEY_bio;
  ossl_d2i_ECPrivateKey_bio_t ossl_d2i_ECPrivateKey_bio;
  ossl_i2d_ECPrivateKey_bio_t ossl_i2d_ECPrivateKey_bio;
  ossl_d2i_PKCS8_bio_t ossl_d2i_PKCS8_bio;
  ossl_i2d_PKCS8_bio_t ossl_i2d_PKCS8_bio;
  ossl_d2i_X509_PUBKEY_bio_t ossl_d2i_X509_PUBKEY_bio;
  ossl_i2d_X509_PUBKEY_bio_t ossl_i2d_X509_PUBKEY_bio;
  ossl_d2i_PKCS8_PRIV_KEY_INFO_bio_t ossl_d2i_PKCS8_PRIV_KEY_INFO_bio;
  ossl_i2d_PKCS8_PRIV_KEY_INFO_bio_t ossl_i2d_PKCS8_PRIV_KEY_INFO_bio;
  ossl_i2d_PKCS8PrivateKeyInfo_bio_t ossl_i2d_PKCS8PrivateKeyInfo_bio;
  ossl_i2d_PrivateKey_bio_t ossl_i2d_PrivateKey_bio;
  ossl_d2i_PrivateKey_ex_bio_t ossl_d2i_PrivateKey_ex_bio;
  ossl_d2i_PrivateKey_bio_t ossl_d2i_PrivateKey_bio;
  ossl_i2d_PUBKEY_bio_t ossl_i2d_PUBKEY_bio;
  ossl_d2i_PUBKEY_bio_t ossl_d2i_PUBKEY_bio;
  ossl_X509_dup_t ossl_X509_dup;
  ossl_X509_ALGOR_dup_t ossl_X509_ALGOR_dup;
  ossl_X509_ATTRIBUTE_dup_t ossl_X509_ATTRIBUTE_dup;
  ossl_X509_CRL_dup_t ossl_X509_CRL_dup;
  ossl_X509_EXTENSION_dup_t ossl_X509_EXTENSION_dup;
  ossl_X509_PUBKEY_dup_t ossl_X509_PUBKEY_dup;
  ossl_X509_REQ_dup_t ossl_X509_REQ_dup;
  ossl_X509_REVOKED_dup_t ossl_X509_REVOKED_dup;
  ossl_X509_ALGOR_set0_t ossl_X509_ALGOR_set0;
  ossl_X509_ALGOR_get0_t ossl_X509_ALGOR_get0;
  ossl_X509_ALGOR_set_md_t ossl_X509_ALGOR_set_md;
  ossl_X509_ALGOR_cmp_t ossl_X509_ALGOR_cmp;
  ossl_X509_ALGOR_copy_t ossl_X509_ALGOR_copy;
  ossl_X509_NAME_dup_t ossl_X509_NAME_dup;
  ossl_X509_NAME_ENTRY_dup_t ossl_X509_NAME_ENTRY_dup;
  ossl_X509_cmp_time_t ossl_X509_cmp_time;
  ossl_X509_cmp_current_time_t ossl_X509_cmp_current_time;
  ossl_X509_cmp_timeframe_t ossl_X509_cmp_timeframe;
  ossl_X509_time_adj_t ossl_X509_time_adj;
  ossl_X509_time_adj_ex_t ossl_X509_time_adj_ex;
  ossl_X509_gmtime_adj_t ossl_X509_gmtime_adj;
  ossl_X509_get_default_cert_area_t ossl_X509_get_default_cert_area;
  ossl_X509_get_default_cert_dir_t ossl_X509_get_default_cert_dir;
  ossl_X509_get_default_cert_file_t ossl_X509_get_default_cert_file;
  ossl_X509_get_default_cert_dir_env_t ossl_X509_get_default_cert_dir_env;
  ossl_X509_get_default_cert_file_env_t ossl_X509_get_default_cert_file_env;
  ossl_X509_get_default_private_dir_t ossl_X509_get_default_private_dir;
  ossl_X509_to_X509_REQ_t ossl_X509_to_X509_REQ;
  ossl_X509_REQ_to_X509_t ossl_X509_REQ_to_X509;
  ossl_X509_ALGOR_new_t ossl_X509_ALGOR_new;
  ossl_X509_ALGOR_free_t ossl_X509_ALGOR_free;
  ossl_d2i_X509_ALGOR_t ossl_d2i_X509_ALGOR;
  ossl_i2d_X509_ALGOR_t ossl_i2d_X509_ALGOR;
  ossl_X509_ALGOR_it_t ossl_X509_ALGOR_it;
  ossl_d2i_X509_ALGORS_t ossl_d2i_X509_ALGORS;
  ossl_i2d_X509_ALGORS_t ossl_i2d_X509_ALGORS;
  ossl_X509_ALGORS_it_t ossl_X509_ALGORS_it;
  ossl_X509_VAL_new_t ossl_X509_VAL_new;
  ossl_X509_VAL_free_t ossl_X509_VAL_free;
  ossl_d2i_X509_VAL_t ossl_d2i_X509_VAL;
  ossl_i2d_X509_VAL_t ossl_i2d_X509_VAL;
  ossl_X509_VAL_it_t ossl_X509_VAL_it;
  ossl_X509_PUBKEY_new_t ossl_X509_PUBKEY_new;
  ossl_X509_PUBKEY_free_t ossl_X509_PUBKEY_free;
  ossl_d2i_X509_PUBKEY_t ossl_d2i_X509_PUBKEY;
  ossl_i2d_X509_PUBKEY_t ossl_i2d_X509_PUBKEY;
  ossl_X509_PUBKEY_it_t ossl_X509_PUBKEY_it;
  ossl_X509_PUBKEY_new_ex_t ossl_X509_PUBKEY_new_ex;
  ossl_X509_PUBKEY_set_t ossl_X509_PUBKEY_set;
  ossl_X509_PUBKEY_get0_t ossl_X509_PUBKEY_get0;
  ossl_X509_PUBKEY_get_t ossl_X509_PUBKEY_get;
  ossl_X509_get_pubkey_parameters_t ossl_X509_get_pubkey_parameters;
  ossl_X509_get_pathlen_t ossl_X509_get_pathlen;
  ossl_d2i_PUBKEY_t ossl_d2i_PUBKEY;
  ossl_i2d_PUBKEY_t ossl_i2d_PUBKEY;
  ossl_d2i_PUBKEY_ex_t ossl_d2i_PUBKEY_ex;
  ossl_d2i_RSA_PUBKEY_t ossl_d2i_RSA_PUBKEY;
  ossl_i2d_RSA_PUBKEY_t ossl_i2d_RSA_PUBKEY;
  ossl_d2i_DSA_PUBKEY_t ossl_d2i_DSA_PUBKEY;
  ossl_i2d_DSA_PUBKEY_t ossl_i2d_DSA_PUBKEY;
  ossl_d2i_EC_PUBKEY_t ossl_d2i_EC_PUBKEY;
  ossl_i2d_EC_PUBKEY_t ossl_i2d_EC_PUBKEY;
  ossl_X509_SIG_new_t ossl_X509_SIG_new;
  ossl_X509_SIG_free_t ossl_X509_SIG_free;
  ossl_d2i_X509_SIG_t ossl_d2i_X509_SIG;
  ossl_i2d_X509_SIG_t ossl_i2d_X509_SIG;
  ossl_X509_SIG_it_t ossl_X509_SIG_it;
  ossl_X509_SIG_get0_t ossl_X509_SIG_get0;
  ossl_X509_SIG_getm_t ossl_X509_SIG_getm;
  ossl_X509_REQ_INFO_new_t ossl_X509_REQ_INFO_new;
  ossl_X509_REQ_INFO_free_t ossl_X509_REQ_INFO_free;
  ossl_d2i_X509_REQ_INFO_t ossl_d2i_X509_REQ_INFO;
  ossl_i2d_X509_REQ_INFO_t ossl_i2d_X509_REQ_INFO;
  ossl_X509_REQ_INFO_it_t ossl_X509_REQ_INFO_it;
  ossl_X509_REQ_new_t ossl_X509_REQ_new;
  ossl_X509_REQ_free_t ossl_X509_REQ_free;
  ossl_d2i_X509_REQ_t ossl_d2i_X509_REQ;
  ossl_i2d_X509_REQ_t ossl_i2d_X509_REQ;
  ossl_X509_REQ_it_t ossl_X509_REQ_it;
  ossl_X509_REQ_new_ex_t ossl_X509_REQ_new_ex;
  ossl_X509_ATTRIBUTE_new_t ossl_X509_ATTRIBUTE_new;
  ossl_X509_ATTRIBUTE_free_t ossl_X509_ATTRIBUTE_free;
  ossl_d2i_X509_ATTRIBUTE_t ossl_d2i_X509_ATTRIBUTE;
  ossl_i2d_X509_ATTRIBUTE_t ossl_i2d_X509_ATTRIBUTE;
  ossl_X509_ATTRIBUTE_it_t ossl_X509_ATTRIBUTE_it;
  ossl_X509_ATTRIBUTE_create_t ossl_X509_ATTRIBUTE_create;
  ossl_X509_EXTENSION_new_t ossl_X509_EXTENSION_new;
  ossl_X509_EXTENSION_free_t ossl_X509_EXTENSION_free;
  ossl_d2i_X509_EXTENSION_t ossl_d2i_X509_EXTENSION;
  ossl_i2d_X509_EXTENSION_t ossl_i2d_X509_EXTENSION;
  ossl_X509_EXTENSION_it_t ossl_X509_EXTENSION_it;
  ossl_d2i_X509_EXTENSIONS_t ossl_d2i_X509_EXTENSIONS;
  ossl_i2d_X509_EXTENSIONS_t ossl_i2d_X509_EXTENSIONS;
  ossl_X509_EXTENSIONS_it_t ossl_X509_EXTENSIONS_it;
  ossl_X509_NAME_ENTRY_new_t ossl_X509_NAME_ENTRY_new;
  ossl_X509_NAME_ENTRY_free_t ossl_X509_NAME_ENTRY_free;
  ossl_d2i_X509_NAME_ENTRY_t ossl_d2i_X509_NAME_ENTRY;
  ossl_i2d_X509_NAME_ENTRY_t ossl_i2d_X509_NAME_ENTRY;
  ossl_X509_NAME_ENTRY_it_t ossl_X509_NAME_ENTRY_it;
  ossl_X509_NAME_new_t ossl_X509_NAME_new;
  ossl_X509_NAME_free_t ossl_X509_NAME_free;
  ossl_d2i_X509_NAME_t ossl_d2i_X509_NAME;
  ossl_i2d_X509_NAME_t ossl_i2d_X509_NAME;
  ossl_X509_NAME_it_t ossl_X509_NAME_it;
  ossl_X509_NAME_set_t ossl_X509_NAME_set;
  ossl_X509_CINF_new_t ossl_X509_CINF_new;
  ossl_X509_CINF_free_t ossl_X509_CINF_free;
  ossl_d2i_X509_CINF_t ossl_d2i_X509_CINF;
  ossl_i2d_X509_CINF_t ossl_i2d_X509_CINF;
  ossl_X509_CINF_it_t ossl_X509_CINF_it;
  ossl_X509_new_t ossl_X509_new;
  ossl_X509_free_t ossl_X509_free;
  ossl_d2i_X509_t ossl_d2i_X509;
  ossl_i2d_X509_t ossl_i2d_X509;
  ossl_X509_it_t ossl_X509_it;
  ossl_X509_new_ex_t ossl_X509_new_ex;
  ossl_X509_CERT_AUX_new_t ossl_X509_CERT_AUX_new;
  ossl_X509_CERT_AUX_free_t ossl_X509_CERT_AUX_free;
  ossl_d2i_X509_CERT_AUX_t ossl_d2i_X509_CERT_AUX;
  ossl_i2d_X509_CERT_AUX_t ossl_i2d_X509_CERT_AUX;
  ossl_X509_CERT_AUX_it_t ossl_X509_CERT_AUX_it;
  ossl_X509_set_ex_data_t ossl_X509_set_ex_data;
  ossl_X509_get_ex_data_t ossl_X509_get_ex_data;
  ossl_d2i_X509_AUX_t ossl_d2i_X509_AUX;
  ossl_i2d_X509_AUX_t ossl_i2d_X509_AUX;
  ossl_i2d_re_X509_tbs_t ossl_i2d_re_X509_tbs;
  ossl_X509_SIG_INFO_get_t ossl_X509_SIG_INFO_get;
  ossl_X509_SIG_INFO_set_t ossl_X509_SIG_INFO_set;
  ossl_X509_get_signature_info_t ossl_X509_get_signature_info;
  ossl_X509_get0_signature_t ossl_X509_get0_signature;
  ossl_X509_get_signature_nid_t ossl_X509_get_signature_nid;
  ossl_X509_set0_distinguishing_id_t ossl_X509_set0_distinguishing_id;
  ossl_X509_get0_distinguishing_id_t ossl_X509_get0_distinguishing_id;
  ossl_X509_REQ_set0_distinguishing_id_t ossl_X509_REQ_set0_distinguishing_id;
  ossl_X509_REQ_get0_distinguishing_id_t ossl_X509_REQ_get0_distinguishing_id;
  ossl_X509_alias_set1_t ossl_X509_alias_set1;
  ossl_X509_keyid_set1_t ossl_X509_keyid_set1;
  ossl_X509_alias_get0_t ossl_X509_alias_get0;
  ossl_X509_keyid_get0_t ossl_X509_keyid_get0;
  ossl_X509_REVOKED_new_t ossl_X509_REVOKED_new;
  ossl_X509_REVOKED_free_t ossl_X509_REVOKED_free;
  ossl_d2i_X509_REVOKED_t ossl_d2i_X509_REVOKED;
  ossl_i2d_X509_REVOKED_t ossl_i2d_X509_REVOKED;
  ossl_X509_REVOKED_it_t ossl_X509_REVOKED_it;
  ossl_X509_CRL_INFO_new_t ossl_X509_CRL_INFO_new;
  ossl_X509_CRL_INFO_free_t ossl_X509_CRL_INFO_free;
  ossl_d2i_X509_CRL_INFO_t ossl_d2i_X509_CRL_INFO;
  ossl_i2d_X509_CRL_INFO_t ossl_i2d_X509_CRL_INFO;
  ossl_X509_CRL_INFO_it_t ossl_X509_CRL_INFO_it;
  ossl_X509_CRL_new_t ossl_X509_CRL_new;
  ossl_X509_CRL_free_t ossl_X509_CRL_free;
  ossl_d2i_X509_CRL_t ossl_d2i_X509_CRL;
  ossl_i2d_X509_CRL_t ossl_i2d_X509_CRL;
  ossl_X509_CRL_it_t ossl_X509_CRL_it;
  ossl_X509_CRL_new_ex_t ossl_X509_CRL_new_ex;
  ossl_X509_CRL_add0_revoked_t ossl_X509_CRL_add0_revoked;
  ossl_X509_CRL_get0_by_serial_t ossl_X509_CRL_get0_by_serial;
  ossl_X509_CRL_get0_by_cert_t ossl_X509_CRL_get0_by_cert;
  ossl_X509_PKEY_new_t ossl_X509_PKEY_new;
  ossl_X509_PKEY_free_t ossl_X509_PKEY_free;
  ossl_NETSCAPE_SPKI_new_t ossl_NETSCAPE_SPKI_new;
  ossl_NETSCAPE_SPKI_free_t ossl_NETSCAPE_SPKI_free;
  ossl_d2i_NETSCAPE_SPKI_t ossl_d2i_NETSCAPE_SPKI;
  ossl_i2d_NETSCAPE_SPKI_t ossl_i2d_NETSCAPE_SPKI;
  ossl_NETSCAPE_SPKI_it_t ossl_NETSCAPE_SPKI_it;
  ossl_NETSCAPE_SPKAC_new_t ossl_NETSCAPE_SPKAC_new;
  ossl_NETSCAPE_SPKAC_free_t ossl_NETSCAPE_SPKAC_free;
  ossl_d2i_NETSCAPE_SPKAC_t ossl_d2i_NETSCAPE_SPKAC;
  ossl_i2d_NETSCAPE_SPKAC_t ossl_i2d_NETSCAPE_SPKAC;
  ossl_NETSCAPE_SPKAC_it_t ossl_NETSCAPE_SPKAC_it;
  ossl_NETSCAPE_CERT_SEQUENCE_new_t ossl_NETSCAPE_CERT_SEQUENCE_new;
  ossl_NETSCAPE_CERT_SEQUENCE_free_t ossl_NETSCAPE_CERT_SEQUENCE_free;
  ossl_d2i_NETSCAPE_CERT_SEQUENCE_t ossl_d2i_NETSCAPE_CERT_SEQUENCE;
  ossl_i2d_NETSCAPE_CERT_SEQUENCE_t ossl_i2d_NETSCAPE_CERT_SEQUENCE;
  ossl_NETSCAPE_CERT_SEQUENCE_it_t ossl_NETSCAPE_CERT_SEQUENCE_it;
  ossl_X509_INFO_new_t ossl_X509_INFO_new;
  ossl_X509_INFO_free_t ossl_X509_INFO_free;
  ossl_X509_NAME_oneline_t ossl_X509_NAME_oneline;
  ossl_ASN1_verify_t ossl_ASN1_verify;
  ossl_ASN1_digest_t ossl_ASN1_digest;
  ossl_ASN1_sign_t ossl_ASN1_sign;
  ossl_ASN1_item_digest_t ossl_ASN1_item_digest;
  ossl_ASN1_item_verify_t ossl_ASN1_item_verify;
  ossl_ASN1_item_verify_ctx_t ossl_ASN1_item_verify_ctx;
  ossl_ASN1_item_sign_t ossl_ASN1_item_sign;
  ossl_ASN1_item_sign_ctx_t ossl_ASN1_item_sign_ctx;
  ossl_X509_get_version_t ossl_X509_get_version;
  ossl_X509_set_version_t ossl_X509_set_version;
  ossl_X509_set_serialNumber_t ossl_X509_set_serialNumber;
  ossl_X509_get_serialNumber_t ossl_X509_get_serialNumber;
  ossl_X509_get0_serialNumber_t ossl_X509_get0_serialNumber;
  ossl_X509_set_issuer_name_t ossl_X509_set_issuer_name;
  ossl_X509_get_issuer_name_t ossl_X509_get_issuer_name;
  ossl_X509_set_subject_name_t ossl_X509_set_subject_name;
  ossl_X509_get_subject_name_t ossl_X509_get_subject_name;
  ossl_X509_get0_notBefore_t ossl_X509_get0_notBefore;
  ossl_X509_getm_notBefore_t ossl_X509_getm_notBefore;
  ossl_X509_set1_notBefore_t ossl_X509_set1_notBefore;
  ossl_X509_get0_notAfter_t ossl_X509_get0_notAfter;
  ossl_X509_getm_notAfter_t ossl_X509_getm_notAfter;
  ossl_X509_set1_notAfter_t ossl_X509_set1_notAfter;
  ossl_X509_set_pubkey_t ossl_X509_set_pubkey;
  ossl_X509_up_ref_t ossl_X509_up_ref;
  ossl_X509_get_signature_type_t ossl_X509_get_signature_type;
  ossl_X509_get_X509_PUBKEY_t ossl_X509_get_X509_PUBKEY;
  ossl_X509_get0_extensions_t ossl_X509_get0_extensions;
  ossl_X509_get0_uids_t ossl_X509_get0_uids;
  ossl_X509_get0_tbs_sigalg_t ossl_X509_get0_tbs_sigalg;
  ossl_X509_get0_pubkey_t ossl_X509_get0_pubkey;
  ossl_X509_get_pubkey_t ossl_X509_get_pubkey;
  ossl_X509_get0_pubkey_bitstr_t ossl_X509_get0_pubkey_bitstr;
  ossl_X509_REQ_get_version_t ossl_X509_REQ_get_version;
  ossl_X509_REQ_set_version_t ossl_X509_REQ_set_version;
  ossl_X509_REQ_get_subject_name_t ossl_X509_REQ_get_subject_name;
  ossl_X509_REQ_set_subject_name_t ossl_X509_REQ_set_subject_name;
  ossl_X509_REQ_get0_signature_t ossl_X509_REQ_get0_signature;
  ossl_X509_REQ_set0_signature_t ossl_X509_REQ_set0_signature;
  ossl_X509_REQ_set1_signature_algo_t ossl_X509_REQ_set1_signature_algo;
  ossl_X509_REQ_get_signature_nid_t ossl_X509_REQ_get_signature_nid;
  ossl_i2d_re_X509_REQ_tbs_t ossl_i2d_re_X509_REQ_tbs;
  ossl_X509_REQ_set_pubkey_t ossl_X509_REQ_set_pubkey;
  ossl_X509_REQ_get_pubkey_t ossl_X509_REQ_get_pubkey;
  ossl_X509_REQ_get0_pubkey_t ossl_X509_REQ_get0_pubkey;
  ossl_X509_REQ_get_X509_PUBKEY_t ossl_X509_REQ_get_X509_PUBKEY;
  ossl_X509_REQ_extension_nid_t ossl_X509_REQ_extension_nid;
  ossl_X509_REQ_get_extension_nids_t ossl_X509_REQ_get_extension_nids;
  ossl_X509_REQ_set_extension_nids_t ossl_X509_REQ_set_extension_nids;
  ossl_X509_REQ_get_extensions_t ossl_X509_REQ_get_extensions;
  ossl_X509_REQ_add_extensions_nid_t ossl_X509_REQ_add_extensions_nid;
  ossl_X509_REQ_add_extensions_t ossl_X509_REQ_add_extensions;
  ossl_X509_REQ_get_attr_count_t ossl_X509_REQ_get_attr_count;
  ossl_X509_REQ_get_attr_by_NID_t ossl_X509_REQ_get_attr_by_NID;
  ossl_X509_REQ_get_attr_by_OBJ_t ossl_X509_REQ_get_attr_by_OBJ;
  ossl_X509_REQ_get_attr_t ossl_X509_REQ_get_attr;
  ossl_X509_REQ_delete_attr_t ossl_X509_REQ_delete_attr;
  ossl_X509_REQ_add1_attr_t ossl_X509_REQ_add1_attr;
  ossl_X509_REQ_add1_attr_by_OBJ_t ossl_X509_REQ_add1_attr_by_OBJ;
  ossl_X509_REQ_add1_attr_by_NID_t ossl_X509_REQ_add1_attr_by_NID;
  ossl_X509_REQ_add1_attr_by_txt_t ossl_X509_REQ_add1_attr_by_txt;
  ossl_X509_CRL_set_version_t ossl_X509_CRL_set_version;
  ossl_X509_CRL_set_issuer_name_t ossl_X509_CRL_set_issuer_name;
  ossl_X509_CRL_set1_lastUpdate_t ossl_X509_CRL_set1_lastUpdate;
  ossl_X509_CRL_set1_nextUpdate_t ossl_X509_CRL_set1_nextUpdate;
  ossl_X509_CRL_sort_t ossl_X509_CRL_sort;
  ossl_X509_CRL_up_ref_t ossl_X509_CRL_up_ref;
  ossl_X509_CRL_get_version_t ossl_X509_CRL_get_version;
  ossl_X509_CRL_get0_lastUpdate_t ossl_X509_CRL_get0_lastUpdate;
  ossl_X509_CRL_get0_nextUpdate_t ossl_X509_CRL_get0_nextUpdate;
  ossl_X509_CRL_get_lastUpdate_t ossl_X509_CRL_get_lastUpdate;
  ossl_X509_CRL_get_nextUpdate_t ossl_X509_CRL_get_nextUpdate;
  ossl_X509_CRL_get_issuer_t ossl_X509_CRL_get_issuer;
  ossl_X509_CRL_get0_extensions_t ossl_X509_CRL_get0_extensions;
  ossl_X509_CRL_get_REVOKED_t ossl_X509_CRL_get_REVOKED;
  ossl_X509_CRL_get0_signature_t ossl_X509_CRL_get0_signature;
  ossl_X509_CRL_get_signature_nid_t ossl_X509_CRL_get_signature_nid;
  ossl_i2d_re_X509_CRL_tbs_t ossl_i2d_re_X509_CRL_tbs;
  ossl_X509_REVOKED_get0_serialNumber_t ossl_X509_REVOKED_get0_serialNumber;
  ossl_X509_REVOKED_set_serialNumber_t ossl_X509_REVOKED_set_serialNumber;
  ossl_X509_REVOKED_get0_revocationDate_t ossl_X509_REVOKED_get0_revocationDate;
  ossl_X509_REVOKED_set_revocationDate_t ossl_X509_REVOKED_set_revocationDate;
  ossl_X509_REVOKED_get0_extensions_t ossl_X509_REVOKED_get0_extensions;
  ossl_X509_CRL_diff_t ossl_X509_CRL_diff;
  ossl_X509_REQ_check_private_key_t ossl_X509_REQ_check_private_key;
  ossl_X509_check_private_key_t ossl_X509_check_private_key;
  ossl_X509_chain_check_suiteb_t ossl_X509_chain_check_suiteb;
  ossl_X509_CRL_check_suiteb_t ossl_X509_CRL_check_suiteb;
  ossl_X509_chain_up_ref_t ossl_X509_chain_up_ref;
  ossl_X509_issuer_and_serial_cmp_t ossl_X509_issuer_and_serial_cmp;
  ossl_X509_issuer_and_serial_hash_t ossl_X509_issuer_and_serial_hash;
  ossl_X509_issuer_name_cmp_t ossl_X509_issuer_name_cmp;
  ossl_X509_issuer_name_hash_t ossl_X509_issuer_name_hash;
  ossl_X509_subject_name_cmp_t ossl_X509_subject_name_cmp;
  ossl_X509_subject_name_hash_t ossl_X509_subject_name_hash;
  ossl_X509_issuer_name_hash_old_t ossl_X509_issuer_name_hash_old;
  ossl_X509_subject_name_hash_old_t ossl_X509_subject_name_hash_old;
  ossl_X509_add_cert_t ossl_X509_add_cert;
  ossl_X509_add_certs_t ossl_X509_add_certs;
  ossl_X509_cmp_t ossl_X509_cmp;
  ossl_X509_NAME_cmp_t ossl_X509_NAME_cmp;
  ossl_X509_certificate_type_t ossl_X509_certificate_type;
  ossl_X509_NAME_hash_ex_t ossl_X509_NAME_hash_ex;
  ossl_X509_NAME_hash_old_t ossl_X509_NAME_hash_old;
  ossl_X509_CRL_cmp_t ossl_X509_CRL_cmp;
  ossl_X509_CRL_match_t ossl_X509_CRL_match;
  ossl_X509_aux_print_t ossl_X509_aux_print;
  ossl_X509_print_ex_fp_t ossl_X509_print_ex_fp;
  ossl_X509_print_fp_t ossl_X509_print_fp;
  ossl_X509_CRL_print_fp_t ossl_X509_CRL_print_fp;
  ossl_X509_REQ_print_fp_t ossl_X509_REQ_print_fp;
  ossl_X509_NAME_print_ex_fp_t ossl_X509_NAME_print_ex_fp;
  ossl_X509_NAME_print_t ossl_X509_NAME_print;
  ossl_X509_NAME_print_ex_t ossl_X509_NAME_print_ex;
  ossl_X509_print_ex_t ossl_X509_print_ex;
  ossl_X509_print_t ossl_X509_print;
  ossl_X509_ocspid_print_t ossl_X509_ocspid_print;
  ossl_X509_CRL_print_ex_t ossl_X509_CRL_print_ex;
  ossl_X509_CRL_print_t ossl_X509_CRL_print;
  ossl_X509_REQ_print_ex_t ossl_X509_REQ_print_ex;
  ossl_X509_REQ_print_t ossl_X509_REQ_print;
  ossl_X509_NAME_entry_count_t ossl_X509_NAME_entry_count;
  ossl_X509_NAME_get_text_by_NID_t ossl_X509_NAME_get_text_by_NID;
  ossl_X509_NAME_get_text_by_OBJ_t ossl_X509_NAME_get_text_by_OBJ;
  ossl_X509_NAME_get_index_by_NID_t ossl_X509_NAME_get_index_by_NID;
  ossl_X509_NAME_get_index_by_OBJ_t ossl_X509_NAME_get_index_by_OBJ;
  ossl_X509_NAME_get_entry_t ossl_X509_NAME_get_entry;
  ossl_X509_NAME_delete_entry_t ossl_X509_NAME_delete_entry;
  ossl_X509_NAME_add_entry_t ossl_X509_NAME_add_entry;
  ossl_X509_NAME_add_entry_by_OBJ_t ossl_X509_NAME_add_entry_by_OBJ;
  ossl_X509_NAME_add_entry_by_NID_t ossl_X509_NAME_add_entry_by_NID;
  ossl_X509_NAME_ENTRY_create_by_txt_t ossl_X509_NAME_ENTRY_create_by_txt;
  ossl_X509_NAME_ENTRY_create_by_NID_t ossl_X509_NAME_ENTRY_create_by_NID;
  ossl_X509_NAME_add_entry_by_txt_t ossl_X509_NAME_add_entry_by_txt;
  ossl_X509_NAME_ENTRY_create_by_OBJ_t ossl_X509_NAME_ENTRY_create_by_OBJ;
  ossl_X509_NAME_ENTRY_set_object_t ossl_X509_NAME_ENTRY_set_object;
  ossl_X509_NAME_ENTRY_set_data_t ossl_X509_NAME_ENTRY_set_data;
  ossl_X509_NAME_ENTRY_get_object_t ossl_X509_NAME_ENTRY_get_object;
  ossl_X509_NAME_ENTRY_get_data_t ossl_X509_NAME_ENTRY_get_data;
  ossl_X509_NAME_ENTRY_set_t ossl_X509_NAME_ENTRY_set;
  ossl_X509_NAME_get0_der_t ossl_X509_NAME_get0_der;
  ossl_X509v3_get_ext_count_t ossl_X509v3_get_ext_count;
  ossl_X509v3_get_ext_by_NID_t ossl_X509v3_get_ext_by_NID;
  ossl_X509v3_get_ext_by_OBJ_t ossl_X509v3_get_ext_by_OBJ;
  ossl_X509v3_get_ext_by_critical_t ossl_X509v3_get_ext_by_critical;
  ossl_X509v3_get_ext_t ossl_X509v3_get_ext;
  ossl_X509v3_delete_ext_t ossl_X509v3_delete_ext;
  ossl_X509v3_add_ext_t ossl_X509v3_add_ext;
  ossl_X509_get_ext_count_t ossl_X509_get_ext_count;
  ossl_X509_get_ext_by_NID_t ossl_X509_get_ext_by_NID;
  ossl_X509_get_ext_by_OBJ_t ossl_X509_get_ext_by_OBJ;
  ossl_X509_get_ext_by_critical_t ossl_X509_get_ext_by_critical;
  ossl_X509_get_ext_t ossl_X509_get_ext;
  ossl_X509_delete_ext_t ossl_X509_delete_ext;
  ossl_X509_add_ext_t ossl_X509_add_ext;
  ossl_X509_get_ext_d2i_t ossl_X509_get_ext_d2i;
  ossl_X509_add1_ext_i2d_t ossl_X509_add1_ext_i2d;
  ossl_X509_CRL_get_ext_count_t ossl_X509_CRL_get_ext_count;
  ossl_X509_CRL_get_ext_by_NID_t ossl_X509_CRL_get_ext_by_NID;
  ossl_X509_CRL_get_ext_by_OBJ_t ossl_X509_CRL_get_ext_by_OBJ;
  ossl_X509_CRL_get_ext_by_critical_t ossl_X509_CRL_get_ext_by_critical;
  ossl_X509_CRL_get_ext_t ossl_X509_CRL_get_ext;
  ossl_X509_CRL_delete_ext_t ossl_X509_CRL_delete_ext;
  ossl_X509_CRL_add_ext_t ossl_X509_CRL_add_ext;
  ossl_X509_CRL_get_ext_d2i_t ossl_X509_CRL_get_ext_d2i;
  ossl_X509_CRL_add1_ext_i2d_t ossl_X509_CRL_add1_ext_i2d;
  ossl_X509_REVOKED_get_ext_count_t ossl_X509_REVOKED_get_ext_count;
  ossl_X509_REVOKED_get_ext_by_NID_t ossl_X509_REVOKED_get_ext_by_NID;
  ossl_X509_REVOKED_get_ext_by_OBJ_t ossl_X509_REVOKED_get_ext_by_OBJ;
  ossl_X509_REVOKED_get_ext_by_critical_t ossl_X509_REVOKED_get_ext_by_critical;
  ossl_X509_REVOKED_get_ext_t ossl_X509_REVOKED_get_ext;
  ossl_X509_REVOKED_delete_ext_t ossl_X509_REVOKED_delete_ext;
  ossl_X509_REVOKED_add_ext_t ossl_X509_REVOKED_add_ext;
  ossl_X509_REVOKED_get_ext_d2i_t ossl_X509_REVOKED_get_ext_d2i;
  ossl_X509_REVOKED_add1_ext_i2d_t ossl_X509_REVOKED_add1_ext_i2d;
  ossl_X509_EXTENSION_create_by_NID_t ossl_X509_EXTENSION_create_by_NID;
  ossl_X509_EXTENSION_create_by_OBJ_t ossl_X509_EXTENSION_create_by_OBJ;
  ossl_X509_EXTENSION_set_object_t ossl_X509_EXTENSION_set_object;
  ossl_X509_EXTENSION_set_critical_t ossl_X509_EXTENSION_set_critical;
  ossl_X509_EXTENSION_set_data_t ossl_X509_EXTENSION_set_data;
  ossl_X509_EXTENSION_get_object_t ossl_X509_EXTENSION_get_object;
  ossl_X509_EXTENSION_get_data_t ossl_X509_EXTENSION_get_data;
  ossl_X509_EXTENSION_get_critical_t ossl_X509_EXTENSION_get_critical;
  ossl_X509at_get_attr_count_t ossl_X509at_get_attr_count;
  ossl_X509at_get_attr_by_NID_t ossl_X509at_get_attr_by_NID;
  ossl_X509at_get_attr_by_OBJ_t ossl_X509at_get_attr_by_OBJ;
  ossl_X509at_get_attr_t ossl_X509at_get_attr;
  ossl_X509at_delete_attr_t ossl_X509at_delete_attr;
  ossl_X509at_add1_attr_t ossl_X509at_add1_attr;
  ossl_X509at_add1_attr_by_OBJ_t ossl_X509at_add1_attr_by_OBJ;
  ossl_X509at_add1_attr_by_NID_t ossl_X509at_add1_attr_by_NID;
  ossl_X509at_add1_attr_by_txt_t ossl_X509at_add1_attr_by_txt;
  ossl_X509at_get0_data_by_OBJ_t ossl_X509at_get0_data_by_OBJ;
  ossl_X509_ATTRIBUTE_create_by_NID_t ossl_X509_ATTRIBUTE_create_by_NID;
  ossl_X509_ATTRIBUTE_create_by_OBJ_t ossl_X509_ATTRIBUTE_create_by_OBJ;
  ossl_X509_ATTRIBUTE_create_by_txt_t ossl_X509_ATTRIBUTE_create_by_txt;
  ossl_X509_ATTRIBUTE_set1_object_t ossl_X509_ATTRIBUTE_set1_object;
  ossl_X509_ATTRIBUTE_set1_data_t ossl_X509_ATTRIBUTE_set1_data;
  ossl_X509_ATTRIBUTE_get0_data_t ossl_X509_ATTRIBUTE_get0_data;
  ossl_X509_ATTRIBUTE_count_t ossl_X509_ATTRIBUTE_count;
  ossl_X509_ATTRIBUTE_get0_object_t ossl_X509_ATTRIBUTE_get0_object;
  ossl_X509_ATTRIBUTE_get0_type_t ossl_X509_ATTRIBUTE_get0_type;
  ossl_EVP_PKEY_get_attr_count_t ossl_EVP_PKEY_get_attr_count;
  ossl_EVP_PKEY_get_attr_by_NID_t ossl_EVP_PKEY_get_attr_by_NID;
  ossl_EVP_PKEY_get_attr_by_OBJ_t ossl_EVP_PKEY_get_attr_by_OBJ;
  ossl_EVP_PKEY_get_attr_t ossl_EVP_PKEY_get_attr;
  ossl_EVP_PKEY_delete_attr_t ossl_EVP_PKEY_delete_attr;
  ossl_EVP_PKEY_add1_attr_t ossl_EVP_PKEY_add1_attr;
  ossl_EVP_PKEY_add1_attr_by_OBJ_t ossl_EVP_PKEY_add1_attr_by_OBJ;
  ossl_EVP_PKEY_add1_attr_by_NID_t ossl_EVP_PKEY_add1_attr_by_NID;
  ossl_EVP_PKEY_add1_attr_by_txt_t ossl_EVP_PKEY_add1_attr_by_txt;
  ossl_X509_find_by_issuer_and_serial_t ossl_X509_find_by_issuer_and_serial;
  ossl_X509_find_by_subject_t ossl_X509_find_by_subject;
  ossl_PBEPARAM_new_t ossl_PBEPARAM_new;
  ossl_PBEPARAM_free_t ossl_PBEPARAM_free;
  ossl_d2i_PBEPARAM_t ossl_d2i_PBEPARAM;
  ossl_i2d_PBEPARAM_t ossl_i2d_PBEPARAM;
  ossl_PBEPARAM_it_t ossl_PBEPARAM_it;
  ossl_PBE2PARAM_new_t ossl_PBE2PARAM_new;
  ossl_PBE2PARAM_free_t ossl_PBE2PARAM_free;
  ossl_d2i_PBE2PARAM_t ossl_d2i_PBE2PARAM;
  ossl_i2d_PBE2PARAM_t ossl_i2d_PBE2PARAM;
  ossl_PBE2PARAM_it_t ossl_PBE2PARAM_it;
  ossl_PBKDF2PARAM_new_t ossl_PBKDF2PARAM_new;
  ossl_PBKDF2PARAM_free_t ossl_PBKDF2PARAM_free;
  ossl_d2i_PBKDF2PARAM_t ossl_d2i_PBKDF2PARAM;
  ossl_i2d_PBKDF2PARAM_t ossl_i2d_PBKDF2PARAM;
  ossl_PBKDF2PARAM_it_t ossl_PBKDF2PARAM_it;
  ossl_SCRYPT_PARAMS_new_t ossl_SCRYPT_PARAMS_new;
  ossl_SCRYPT_PARAMS_free_t ossl_SCRYPT_PARAMS_free;
  ossl_d2i_SCRYPT_PARAMS_t ossl_d2i_SCRYPT_PARAMS;
  ossl_i2d_SCRYPT_PARAMS_t ossl_i2d_SCRYPT_PARAMS;
  ossl_SCRYPT_PARAMS_it_t ossl_SCRYPT_PARAMS_it;
  ossl_PKCS5_pbe_set0_algor_t ossl_PKCS5_pbe_set0_algor;
  ossl_PKCS5_pbe_set0_algor_ex_t ossl_PKCS5_pbe_set0_algor_ex;
  ossl_PKCS5_pbe_set_t ossl_PKCS5_pbe_set;
  ossl_PKCS5_pbe_set_ex_t ossl_PKCS5_pbe_set_ex;
  ossl_PKCS5_pbe2_set_t ossl_PKCS5_pbe2_set;
  ossl_PKCS5_pbe2_set_iv_t ossl_PKCS5_pbe2_set_iv;
  ossl_PKCS5_pbe2_set_iv_ex_t ossl_PKCS5_pbe2_set_iv_ex;
  ossl_PKCS5_pbe2_set_scrypt_t ossl_PKCS5_pbe2_set_scrypt;
  ossl_PKCS5_pbkdf2_set_t ossl_PKCS5_pbkdf2_set;
  ossl_PKCS5_pbkdf2_set_ex_t ossl_PKCS5_pbkdf2_set_ex;
  ossl_PKCS8_PRIV_KEY_INFO_new_t ossl_PKCS8_PRIV_KEY_INFO_new;
  ossl_PKCS8_PRIV_KEY_INFO_free_t ossl_PKCS8_PRIV_KEY_INFO_free;
  ossl_d2i_PKCS8_PRIV_KEY_INFO_t ossl_d2i_PKCS8_PRIV_KEY_INFO;
  ossl_i2d_PKCS8_PRIV_KEY_INFO_t ossl_i2d_PKCS8_PRIV_KEY_INFO;
  ossl_PKCS8_PRIV_KEY_INFO_it_t ossl_PKCS8_PRIV_KEY_INFO_it;
  ossl_EVP_PKCS82PKEY_t ossl_EVP_PKCS82PKEY;
  ossl_EVP_PKCS82PKEY_ex_t ossl_EVP_PKCS82PKEY_ex;
  ossl_EVP_PKEY2PKCS8_t ossl_EVP_PKEY2PKCS8;
  ossl_PKCS8_pkey_set0_t ossl_PKCS8_pkey_set0;
  ossl_PKCS8_pkey_get0_t ossl_PKCS8_pkey_get0;
  ossl_PKCS8_pkey_get0_attrs_t ossl_PKCS8_pkey_get0_attrs;
  ossl_PKCS8_pkey_add1_attr_t ossl_PKCS8_pkey_add1_attr;
  ossl_PKCS8_pkey_add1_attr_by_NID_t ossl_PKCS8_pkey_add1_attr_by_NID;
  ossl_PKCS8_pkey_add1_attr_by_OBJ_t ossl_PKCS8_pkey_add1_attr_by_OBJ;
  ossl_X509_PUBKEY_set0_param_t ossl_X509_PUBKEY_set0_param;
  ossl_X509_PUBKEY_get0_param_t ossl_X509_PUBKEY_get0_param;
  ossl_X509_PUBKEY_eq_t ossl_X509_PUBKEY_eq;
  ossl_PROXY_POLICY_new_t ossl_PROXY_POLICY_new;
  ossl_PROXY_POLICY_free_t ossl_PROXY_POLICY_free;
  ossl_d2i_PROXY_POLICY_t ossl_d2i_PROXY_POLICY;
  ossl_i2d_PROXY_POLICY_t ossl_i2d_PROXY_POLICY;
  ossl_PROXY_POLICY_it_t ossl_PROXY_POLICY_it;
  ossl_PROXY_CERT_INFO_EXTENSION_new_t ossl_PROXY_CERT_INFO_EXTENSION_new;
  ossl_PROXY_CERT_INFO_EXTENSION_free_t ossl_PROXY_CERT_INFO_EXTENSION_free;
  ossl_d2i_PROXY_CERT_INFO_EXTENSION_t ossl_d2i_PROXY_CERT_INFO_EXTENSION;
  ossl_i2d_PROXY_CERT_INFO_EXTENSION_t ossl_i2d_PROXY_CERT_INFO_EXTENSION;
  ossl_PROXY_CERT_INFO_EXTENSION_it_t ossl_PROXY_CERT_INFO_EXTENSION_it;
  ossl_BASIC_CONSTRAINTS_new_t ossl_BASIC_CONSTRAINTS_new;
  ossl_BASIC_CONSTRAINTS_free_t ossl_BASIC_CONSTRAINTS_free;
  ossl_d2i_BASIC_CONSTRAINTS_t ossl_d2i_BASIC_CONSTRAINTS;
  ossl_i2d_BASIC_CONSTRAINTS_t ossl_i2d_BASIC_CONSTRAINTS;
  ossl_BASIC_CONSTRAINTS_it_t ossl_BASIC_CONSTRAINTS_it;
  ossl_SXNET_new_t ossl_SXNET_new;
  ossl_SXNET_free_t ossl_SXNET_free;
  ossl_d2i_SXNET_t ossl_d2i_SXNET;
  ossl_i2d_SXNET_t ossl_i2d_SXNET;
  ossl_SXNET_it_t ossl_SXNET_it;
  ossl_SXNETID_new_t ossl_SXNETID_new;
  ossl_SXNETID_free_t ossl_SXNETID_free;
  ossl_d2i_SXNETID_t ossl_d2i_SXNETID;
  ossl_i2d_SXNETID_t ossl_i2d_SXNETID;
  ossl_SXNETID_it_t ossl_SXNETID_it;
  ossl_ISSUER_SIGN_TOOL_new_t ossl_ISSUER_SIGN_TOOL_new;
  ossl_ISSUER_SIGN_TOOL_free_t ossl_ISSUER_SIGN_TOOL_free;
  ossl_d2i_ISSUER_SIGN_TOOL_t ossl_d2i_ISSUER_SIGN_TOOL;
  ossl_i2d_ISSUER_SIGN_TOOL_t ossl_i2d_ISSUER_SIGN_TOOL;
  ossl_ISSUER_SIGN_TOOL_it_t ossl_ISSUER_SIGN_TOOL_it;
  ossl_SXNET_add_id_asc_t ossl_SXNET_add_id_asc;
  ossl_SXNET_add_id_ulong_t ossl_SXNET_add_id_ulong;
  ossl_SXNET_add_id_INTEGER_t ossl_SXNET_add_id_INTEGER;
  ossl_SXNET_get_id_asc_t ossl_SXNET_get_id_asc;
  ossl_SXNET_get_id_ulong_t ossl_SXNET_get_id_ulong;
  ossl_SXNET_get_id_INTEGER_t ossl_SXNET_get_id_INTEGER;
  ossl_AUTHORITY_KEYID_new_t ossl_AUTHORITY_KEYID_new;
  ossl_AUTHORITY_KEYID_free_t ossl_AUTHORITY_KEYID_free;
  ossl_d2i_AUTHORITY_KEYID_t ossl_d2i_AUTHORITY_KEYID;
  ossl_i2d_AUTHORITY_KEYID_t ossl_i2d_AUTHORITY_KEYID;
  ossl_AUTHORITY_KEYID_it_t ossl_AUTHORITY_KEYID_it;
  ossl_PKEY_USAGE_PERIOD_new_t ossl_PKEY_USAGE_PERIOD_new;
  ossl_PKEY_USAGE_PERIOD_free_t ossl_PKEY_USAGE_PERIOD_free;
  ossl_d2i_PKEY_USAGE_PERIOD_t ossl_d2i_PKEY_USAGE_PERIOD;
  ossl_i2d_PKEY_USAGE_PERIOD_t ossl_i2d_PKEY_USAGE_PERIOD;
  ossl_PKEY_USAGE_PERIOD_it_t ossl_PKEY_USAGE_PERIOD_it;
  ossl_GENERAL_NAME_new_t ossl_GENERAL_NAME_new;
  ossl_GENERAL_NAME_free_t ossl_GENERAL_NAME_free;
  ossl_d2i_GENERAL_NAME_t ossl_d2i_GENERAL_NAME;
  ossl_i2d_GENERAL_NAME_t ossl_i2d_GENERAL_NAME;
  ossl_GENERAL_NAME_it_t ossl_GENERAL_NAME_it;
  ossl_GENERAL_NAME_dup_t ossl_GENERAL_NAME_dup;
  ossl_GENERAL_NAME_cmp_t ossl_GENERAL_NAME_cmp;
  ossl_v2i_ASN1_BIT_STRING_t ossl_v2i_ASN1_BIT_STRING;
  ossl_i2v_ASN1_BIT_STRING_t ossl_i2v_ASN1_BIT_STRING;
  ossl_i2s_ASN1_IA5STRING_t ossl_i2s_ASN1_IA5STRING;
  ossl_s2i_ASN1_IA5STRING_t ossl_s2i_ASN1_IA5STRING;
  ossl_i2s_ASN1_UTF8STRING_t ossl_i2s_ASN1_UTF8STRING;
  ossl_s2i_ASN1_UTF8STRING_t ossl_s2i_ASN1_UTF8STRING;
  ossl_i2v_GENERAL_NAME_t ossl_i2v_GENERAL_NAME;
  ossl_GENERAL_NAME_print_t ossl_GENERAL_NAME_print;
  ossl_GENERAL_NAMES_new_t ossl_GENERAL_NAMES_new;
  ossl_GENERAL_NAMES_free_t ossl_GENERAL_NAMES_free;
  ossl_d2i_GENERAL_NAMES_t ossl_d2i_GENERAL_NAMES;
  ossl_i2d_GENERAL_NAMES_t ossl_i2d_GENERAL_NAMES;
  ossl_GENERAL_NAMES_it_t ossl_GENERAL_NAMES_it;
  ossl_i2v_GENERAL_NAMES_t ossl_i2v_GENERAL_NAMES;
  ossl_v2i_GENERAL_NAMES_t ossl_v2i_GENERAL_NAMES;
  ossl_OTHERNAME_new_t ossl_OTHERNAME_new;
  ossl_OTHERNAME_free_t ossl_OTHERNAME_free;
  ossl_d2i_OTHERNAME_t ossl_d2i_OTHERNAME;
  ossl_i2d_OTHERNAME_t ossl_i2d_OTHERNAME;
  ossl_OTHERNAME_it_t ossl_OTHERNAME_it;
  ossl_EDIPARTYNAME_new_t ossl_EDIPARTYNAME_new;
  ossl_EDIPARTYNAME_free_t ossl_EDIPARTYNAME_free;
  ossl_d2i_EDIPARTYNAME_t ossl_d2i_EDIPARTYNAME;
  ossl_i2d_EDIPARTYNAME_t ossl_i2d_EDIPARTYNAME;
  ossl_EDIPARTYNAME_it_t ossl_EDIPARTYNAME_it;
  ossl_OTHERNAME_cmp_t ossl_OTHERNAME_cmp;
  ossl_GENERAL_NAME_set0_value_t ossl_GENERAL_NAME_set0_value;
  ossl_GENERAL_NAME_get0_value_t ossl_GENERAL_NAME_get0_value;
  ossl_GENERAL_NAME_set0_othername_t ossl_GENERAL_NAME_set0_othername;
  ossl_GENERAL_NAME_get0_otherName_t ossl_GENERAL_NAME_get0_otherName;
  ossl_i2s_ASN1_OCTET_STRING_t ossl_i2s_ASN1_OCTET_STRING;
  ossl_s2i_ASN1_OCTET_STRING_t ossl_s2i_ASN1_OCTET_STRING;
  ossl_EXTENDED_KEY_USAGE_new_t ossl_EXTENDED_KEY_USAGE_new;
  ossl_EXTENDED_KEY_USAGE_free_t ossl_EXTENDED_KEY_USAGE_free;
  ossl_d2i_EXTENDED_KEY_USAGE_t ossl_d2i_EXTENDED_KEY_USAGE;
  ossl_i2d_EXTENDED_KEY_USAGE_t ossl_i2d_EXTENDED_KEY_USAGE;
  ossl_EXTENDED_KEY_USAGE_it_t ossl_EXTENDED_KEY_USAGE_it;
  ossl_i2a_ACCESS_DESCRIPTION_t ossl_i2a_ACCESS_DESCRIPTION;
  ossl_TLS_FEATURE_new_t ossl_TLS_FEATURE_new;
  ossl_TLS_FEATURE_free_t ossl_TLS_FEATURE_free;
  ossl_CERTIFICATEPOLICIES_new_t ossl_CERTIFICATEPOLICIES_new;
  ossl_CERTIFICATEPOLICIES_free_t ossl_CERTIFICATEPOLICIES_free;
  ossl_d2i_CERTIFICATEPOLICIES_t ossl_d2i_CERTIFICATEPOLICIES;
  ossl_i2d_CERTIFICATEPOLICIES_t ossl_i2d_CERTIFICATEPOLICIES;
  ossl_CERTIFICATEPOLICIES_it_t ossl_CERTIFICATEPOLICIES_it;
  ossl_POLICYINFO_new_t ossl_POLICYINFO_new;
  ossl_POLICYINFO_free_t ossl_POLICYINFO_free;
  ossl_d2i_POLICYINFO_t ossl_d2i_POLICYINFO;
  ossl_i2d_POLICYINFO_t ossl_i2d_POLICYINFO;
  ossl_POLICYINFO_it_t ossl_POLICYINFO_it;
  ossl_POLICYQUALINFO_new_t ossl_POLICYQUALINFO_new;
  ossl_POLICYQUALINFO_free_t ossl_POLICYQUALINFO_free;
  ossl_d2i_POLICYQUALINFO_t ossl_d2i_POLICYQUALINFO;
  ossl_i2d_POLICYQUALINFO_t ossl_i2d_POLICYQUALINFO;
  ossl_POLICYQUALINFO_it_t ossl_POLICYQUALINFO_it;
  ossl_USERNOTICE_new_t ossl_USERNOTICE_new;
  ossl_USERNOTICE_free_t ossl_USERNOTICE_free;
  ossl_d2i_USERNOTICE_t ossl_d2i_USERNOTICE;
  ossl_i2d_USERNOTICE_t ossl_i2d_USERNOTICE;
  ossl_USERNOTICE_it_t ossl_USERNOTICE_it;
  ossl_NOTICEREF_new_t ossl_NOTICEREF_new;
  ossl_NOTICEREF_free_t ossl_NOTICEREF_free;
  ossl_d2i_NOTICEREF_t ossl_d2i_NOTICEREF;
  ossl_i2d_NOTICEREF_t ossl_i2d_NOTICEREF;
  ossl_NOTICEREF_it_t ossl_NOTICEREF_it;
  ossl_CRL_DIST_POINTS_new_t ossl_CRL_DIST_POINTS_new;
  ossl_CRL_DIST_POINTS_free_t ossl_CRL_DIST_POINTS_free;
  ossl_d2i_CRL_DIST_POINTS_t ossl_d2i_CRL_DIST_POINTS;
  ossl_i2d_CRL_DIST_POINTS_t ossl_i2d_CRL_DIST_POINTS;
  ossl_CRL_DIST_POINTS_it_t ossl_CRL_DIST_POINTS_it;
  ossl_DIST_POINT_new_t ossl_DIST_POINT_new;
  ossl_DIST_POINT_free_t ossl_DIST_POINT_free;
  ossl_d2i_DIST_POINT_t ossl_d2i_DIST_POINT;
  ossl_i2d_DIST_POINT_t ossl_i2d_DIST_POINT;
  ossl_DIST_POINT_it_t ossl_DIST_POINT_it;
  ossl_DIST_POINT_NAME_new_t ossl_DIST_POINT_NAME_new;
  ossl_DIST_POINT_NAME_free_t ossl_DIST_POINT_NAME_free;
  ossl_d2i_DIST_POINT_NAME_t ossl_d2i_DIST_POINT_NAME;
  ossl_i2d_DIST_POINT_NAME_t ossl_i2d_DIST_POINT_NAME;
  ossl_DIST_POINT_NAME_it_t ossl_DIST_POINT_NAME_it;
  ossl_ISSUING_DIST_POINT_new_t ossl_ISSUING_DIST_POINT_new;
  ossl_ISSUING_DIST_POINT_free_t ossl_ISSUING_DIST_POINT_free;
  ossl_d2i_ISSUING_DIST_POINT_t ossl_d2i_ISSUING_DIST_POINT;
  ossl_i2d_ISSUING_DIST_POINT_t ossl_i2d_ISSUING_DIST_POINT;
  ossl_ISSUING_DIST_POINT_it_t ossl_ISSUING_DIST_POINT_it;
  ossl_DIST_POINT_set_dpname_t ossl_DIST_POINT_set_dpname;
  ossl_NAME_CONSTRAINTS_check_t ossl_NAME_CONSTRAINTS_check;
  ossl_NAME_CONSTRAINTS_check_CN_t ossl_NAME_CONSTRAINTS_check_CN;
  ossl_ACCESS_DESCRIPTION_new_t ossl_ACCESS_DESCRIPTION_new;
  ossl_ACCESS_DESCRIPTION_free_t ossl_ACCESS_DESCRIPTION_free;
  ossl_d2i_ACCESS_DESCRIPTION_t ossl_d2i_ACCESS_DESCRIPTION;
  ossl_i2d_ACCESS_DESCRIPTION_t ossl_i2d_ACCESS_DESCRIPTION;
  ossl_ACCESS_DESCRIPTION_it_t ossl_ACCESS_DESCRIPTION_it;
  ossl_AUTHORITY_INFO_ACCESS_new_t ossl_AUTHORITY_INFO_ACCESS_new;
  ossl_AUTHORITY_INFO_ACCESS_free_t ossl_AUTHORITY_INFO_ACCESS_free;
  ossl_d2i_AUTHORITY_INFO_ACCESS_t ossl_d2i_AUTHORITY_INFO_ACCESS;
  ossl_i2d_AUTHORITY_INFO_ACCESS_t ossl_i2d_AUTHORITY_INFO_ACCESS;
  ossl_AUTHORITY_INFO_ACCESS_it_t ossl_AUTHORITY_INFO_ACCESS_it;
  ossl_POLICY_MAPPING_it_t ossl_POLICY_MAPPING_it;
  ossl_POLICY_MAPPING_new_t ossl_POLICY_MAPPING_new;
  ossl_POLICY_MAPPING_free_t ossl_POLICY_MAPPING_free;
  ossl_POLICY_MAPPINGS_it_t ossl_POLICY_MAPPINGS_it;
  ossl_GENERAL_SUBTREE_it_t ossl_GENERAL_SUBTREE_it;
  ossl_GENERAL_SUBTREE_new_t ossl_GENERAL_SUBTREE_new;
  ossl_GENERAL_SUBTREE_free_t ossl_GENERAL_SUBTREE_free;
  ossl_NAME_CONSTRAINTS_it_t ossl_NAME_CONSTRAINTS_it;
  ossl_NAME_CONSTRAINTS_new_t ossl_NAME_CONSTRAINTS_new;
  ossl_NAME_CONSTRAINTS_free_t ossl_NAME_CONSTRAINTS_free;
  ossl_POLICY_CONSTRAINTS_new_t ossl_POLICY_CONSTRAINTS_new;
  ossl_POLICY_CONSTRAINTS_free_t ossl_POLICY_CONSTRAINTS_free;
  ossl_POLICY_CONSTRAINTS_it_t ossl_POLICY_CONSTRAINTS_it;
  ossl_a2i_GENERAL_NAME_t ossl_a2i_GENERAL_NAME;
  ossl_v2i_GENERAL_NAME_t ossl_v2i_GENERAL_NAME;
  ossl_v2i_GENERAL_NAME_ex_t ossl_v2i_GENERAL_NAME_ex;
  ossl_X509V3_conf_free_t ossl_X509V3_conf_free;
  ossl_X509V3_EXT_nconf_nid_t ossl_X509V3_EXT_nconf_nid;
  ossl_X509V3_EXT_nconf_t ossl_X509V3_EXT_nconf;
  ossl_X509V3_EXT_add_nconf_sk_t ossl_X509V3_EXT_add_nconf_sk;
  ossl_X509V3_EXT_add_nconf_t ossl_X509V3_EXT_add_nconf;
  ossl_X509V3_EXT_REQ_add_nconf_t ossl_X509V3_EXT_REQ_add_nconf;
  ossl_X509V3_EXT_CRL_add_nconf_t ossl_X509V3_EXT_CRL_add_nconf;
  ossl_X509V3_EXT_conf_nid_t ossl_X509V3_EXT_conf_nid;
  ossl_X509V3_EXT_conf_t ossl_X509V3_EXT_conf;
  ossl_X509V3_EXT_add_conf_t ossl_X509V3_EXT_add_conf;
  ossl_X509V3_EXT_REQ_add_conf_t ossl_X509V3_EXT_REQ_add_conf;
  ossl_X509V3_EXT_CRL_add_conf_t ossl_X509V3_EXT_CRL_add_conf;
  ossl_X509V3_add_value_bool_nf_t ossl_X509V3_add_value_bool_nf;
  ossl_X509V3_get_value_bool_t ossl_X509V3_get_value_bool;
  ossl_X509V3_get_value_int_t ossl_X509V3_get_value_int;
  ossl_X509V3_set_nconf_t ossl_X509V3_set_nconf;
  ossl_X509V3_set_conf_lhash_t ossl_X509V3_set_conf_lhash;
  ossl_X509V3_get_string_t ossl_X509V3_get_string;
  ossl_X509V3_get_section_t ossl_X509V3_get_section;
  ossl_X509V3_string_free_t ossl_X509V3_string_free;
  ossl_X509V3_section_free_t ossl_X509V3_section_free;
  ossl_X509V3_set_ctx_t ossl_X509V3_set_ctx;
  ossl_X509V3_set_issuer_pkey_t ossl_X509V3_set_issuer_pkey;
  ossl_X509V3_add_value_t ossl_X509V3_add_value;
  ossl_X509V3_add_value_uchar_t ossl_X509V3_add_value_uchar;
  ossl_X509V3_add_value_bool_t ossl_X509V3_add_value_bool;
  ossl_X509V3_add_value_int_t ossl_X509V3_add_value_int;
  ossl_i2s_ASN1_INTEGER_t ossl_i2s_ASN1_INTEGER;
  ossl_s2i_ASN1_INTEGER_t ossl_s2i_ASN1_INTEGER;
  ossl_i2s_ASN1_ENUMERATED_t ossl_i2s_ASN1_ENUMERATED;
  ossl_i2s_ASN1_ENUMERATED_TABLE_t ossl_i2s_ASN1_ENUMERATED_TABLE;
  ossl_X509V3_EXT_add_t ossl_X509V3_EXT_add;
  ossl_X509V3_EXT_add_list_t ossl_X509V3_EXT_add_list;
  ossl_X509V3_EXT_add_alias_t ossl_X509V3_EXT_add_alias;
  ossl_X509V3_EXT_cleanup_t ossl_X509V3_EXT_cleanup;
  ossl_X509V3_EXT_get_t ossl_X509V3_EXT_get;
  ossl_X509V3_EXT_get_nid_t ossl_X509V3_EXT_get_nid;
  ossl_X509V3_add_standard_extensions_t ossl_X509V3_add_standard_extensions;
  ossl_X509V3_parse_list_t ossl_X509V3_parse_list;
  ossl_X509V3_EXT_d2i_t ossl_X509V3_EXT_d2i;
  ossl_X509V3_get_d2i_t ossl_X509V3_get_d2i;
  ossl_X509V3_EXT_i2d_t ossl_X509V3_EXT_i2d;
  ossl_X509V3_add1_i2d_t ossl_X509V3_add1_i2d;
  ossl_X509V3_EXT_val_prn_t ossl_X509V3_EXT_val_prn;
  ossl_X509V3_EXT_print_t ossl_X509V3_EXT_print;
  ossl_X509V3_EXT_print_fp_t ossl_X509V3_EXT_print_fp;
  ossl_X509V3_extensions_print_t ossl_X509V3_extensions_print;
  ossl_X509_check_ca_t ossl_X509_check_ca;
  ossl_X509_check_purpose_t ossl_X509_check_purpose;
  ossl_X509_supported_extension_t ossl_X509_supported_extension;
  ossl_X509_PURPOSE_set_t ossl_X509_PURPOSE_set;
  ossl_X509_check_issued_t ossl_X509_check_issued;
  ossl_X509_check_akid_t ossl_X509_check_akid;
  ossl_X509_set_proxy_flag_t ossl_X509_set_proxy_flag;
  ossl_X509_set_proxy_pathlen_t ossl_X509_set_proxy_pathlen;
  ossl_X509_get_proxy_pathlen_t ossl_X509_get_proxy_pathlen;
  ossl_X509_get_extension_flags_t ossl_X509_get_extension_flags;
  ossl_X509_get_key_usage_t ossl_X509_get_key_usage;
  ossl_X509_get_extended_key_usage_t ossl_X509_get_extended_key_usage;
  ossl_X509_get0_subject_key_id_t ossl_X509_get0_subject_key_id;
  ossl_X509_get0_authority_key_id_t ossl_X509_get0_authority_key_id;
  ossl_X509_get0_authority_issuer_t ossl_X509_get0_authority_issuer;
  ossl_X509_get0_authority_serial_t ossl_X509_get0_authority_serial;
  ossl_X509_PURPOSE_get_count_t ossl_X509_PURPOSE_get_count;
  ossl_X509_PURPOSE_get0_t ossl_X509_PURPOSE_get0;
  ossl_X509_PURPOSE_get_by_sname_t ossl_X509_PURPOSE_get_by_sname;
  ossl_X509_PURPOSE_get_by_id_t ossl_X509_PURPOSE_get_by_id;
  ossl_X509_PURPOSE_add_t ossl_X509_PURPOSE_add;
  ossl_X509_PURPOSE_get0_name_t ossl_X509_PURPOSE_get0_name;
  ossl_X509_PURPOSE_get0_sname_t ossl_X509_PURPOSE_get0_sname;
  ossl_X509_PURPOSE_get_trust_t ossl_X509_PURPOSE_get_trust;
  ossl_X509_PURPOSE_cleanup_t ossl_X509_PURPOSE_cleanup;
  ossl_X509_PURPOSE_get_id_t ossl_X509_PURPOSE_get_id;
  ossl_X509_get1_email_t ossl_X509_get1_email;
  ossl_X509_REQ_get1_email_t ossl_X509_REQ_get1_email;
  ossl_X509_email_free_t ossl_X509_email_free;
  ossl_X509_get1_ocsp_t ossl_X509_get1_ocsp;
  ossl_X509_check_host_t ossl_X509_check_host;
  ossl_X509_check_email_t ossl_X509_check_email;
  ossl_X509_check_ip_t ossl_X509_check_ip;
  ossl_X509_check_ip_asc_t ossl_X509_check_ip_asc;
  ossl_a2i_IPADDRESS_t ossl_a2i_IPADDRESS;
  ossl_a2i_IPADDRESS_NC_t ossl_a2i_IPADDRESS_NC;
  ossl_X509V3_NAME_from_section_t ossl_X509V3_NAME_from_section;
  ossl_X509_POLICY_NODE_print_t ossl_X509_POLICY_NODE_print;
  ossl_ASRange_new_t ossl_ASRange_new;
  ossl_ASRange_free_t ossl_ASRange_free;
  ossl_d2i_ASRange_t ossl_d2i_ASRange;
  ossl_i2d_ASRange_t ossl_i2d_ASRange;
  ossl_ASRange_it_t ossl_ASRange_it;
  ossl_ASIdOrRange_new_t ossl_ASIdOrRange_new;
  ossl_ASIdOrRange_free_t ossl_ASIdOrRange_free;
  ossl_d2i_ASIdOrRange_t ossl_d2i_ASIdOrRange;
  ossl_i2d_ASIdOrRange_t ossl_i2d_ASIdOrRange;
  ossl_ASIdOrRange_it_t ossl_ASIdOrRange_it;
  ossl_ASIdentifierChoice_new_t ossl_ASIdentifierChoice_new;
  ossl_ASIdentifierChoice_free_t ossl_ASIdentifierChoice_free;
  ossl_d2i_ASIdentifierChoice_t ossl_d2i_ASIdentifierChoice;
  ossl_i2d_ASIdentifierChoice_t ossl_i2d_ASIdentifierChoice;
  ossl_ASIdentifierChoice_it_t ossl_ASIdentifierChoice_it;
  ossl_ASIdentifiers_new_t ossl_ASIdentifiers_new;
  ossl_ASIdentifiers_free_t ossl_ASIdentifiers_free;
  ossl_d2i_ASIdentifiers_t ossl_d2i_ASIdentifiers;
  ossl_i2d_ASIdentifiers_t ossl_i2d_ASIdentifiers;
  ossl_ASIdentifiers_it_t ossl_ASIdentifiers_it;
  ossl_IPAddressRange_new_t ossl_IPAddressRange_new;
  ossl_IPAddressRange_free_t ossl_IPAddressRange_free;
  ossl_d2i_IPAddressRange_t ossl_d2i_IPAddressRange;
  ossl_i2d_IPAddressRange_t ossl_i2d_IPAddressRange;
  ossl_IPAddressRange_it_t ossl_IPAddressRange_it;
  ossl_IPAddressOrRange_new_t ossl_IPAddressOrRange_new;
  ossl_IPAddressOrRange_free_t ossl_IPAddressOrRange_free;
  ossl_d2i_IPAddressOrRange_t ossl_d2i_IPAddressOrRange;
  ossl_i2d_IPAddressOrRange_t ossl_i2d_IPAddressOrRange;
  ossl_IPAddressOrRange_it_t ossl_IPAddressOrRange_it;
  ossl_IPAddressChoice_new_t ossl_IPAddressChoice_new;
  ossl_IPAddressChoice_free_t ossl_IPAddressChoice_free;
  ossl_d2i_IPAddressChoice_t ossl_d2i_IPAddressChoice;
  ossl_i2d_IPAddressChoice_t ossl_i2d_IPAddressChoice;
  ossl_IPAddressChoice_it_t ossl_IPAddressChoice_it;
  ossl_IPAddressFamily_new_t ossl_IPAddressFamily_new;
  ossl_IPAddressFamily_free_t ossl_IPAddressFamily_free;
  ossl_d2i_IPAddressFamily_t ossl_d2i_IPAddressFamily;
  ossl_i2d_IPAddressFamily_t ossl_i2d_IPAddressFamily;
  ossl_IPAddressFamily_it_t ossl_IPAddressFamily_it;
  ossl_X509v3_asid_add_inherit_t ossl_X509v3_asid_add_inherit;
  ossl_X509v3_asid_add_id_or_range_t ossl_X509v3_asid_add_id_or_range;
  ossl_X509v3_addr_add_inherit_t ossl_X509v3_addr_add_inherit;
  ossl_X509v3_addr_add_prefix_t ossl_X509v3_addr_add_prefix;
  ossl_X509v3_addr_add_range_t ossl_X509v3_addr_add_range;
  ossl_X509v3_addr_get_afi_t ossl_X509v3_addr_get_afi;
  ossl_X509v3_addr_get_range_t ossl_X509v3_addr_get_range;
  ossl_X509v3_asid_is_canonical_t ossl_X509v3_asid_is_canonical;
  ossl_X509v3_addr_is_canonical_t ossl_X509v3_addr_is_canonical;
  ossl_X509v3_asid_canonize_t ossl_X509v3_asid_canonize;
  ossl_X509v3_addr_canonize_t ossl_X509v3_addr_canonize;
  ossl_X509v3_asid_inherits_t ossl_X509v3_asid_inherits;
  ossl_X509v3_addr_inherits_t ossl_X509v3_addr_inherits;
  ossl_X509v3_asid_subset_t ossl_X509v3_asid_subset;
  ossl_X509v3_addr_subset_t ossl_X509v3_addr_subset;
  ossl_X509v3_asid_validate_path_t ossl_X509v3_asid_validate_path;
  ossl_X509v3_addr_validate_path_t ossl_X509v3_addr_validate_path;
  ossl_X509v3_asid_validate_resource_set_t ossl_X509v3_asid_validate_resource_set;
  ossl_X509v3_addr_validate_resource_set_t ossl_X509v3_addr_validate_resource_set;
  ossl_NAMING_AUTHORITY_new_t ossl_NAMING_AUTHORITY_new;
  ossl_NAMING_AUTHORITY_free_t ossl_NAMING_AUTHORITY_free;
  ossl_d2i_NAMING_AUTHORITY_t ossl_d2i_NAMING_AUTHORITY;
  ossl_i2d_NAMING_AUTHORITY_t ossl_i2d_NAMING_AUTHORITY;
  ossl_NAMING_AUTHORITY_it_t ossl_NAMING_AUTHORITY_it;
  ossl_PROFESSION_INFO_new_t ossl_PROFESSION_INFO_new;
  ossl_PROFESSION_INFO_free_t ossl_PROFESSION_INFO_free;
  ossl_d2i_PROFESSION_INFO_t ossl_d2i_PROFESSION_INFO;
  ossl_i2d_PROFESSION_INFO_t ossl_i2d_PROFESSION_INFO;
  ossl_PROFESSION_INFO_it_t ossl_PROFESSION_INFO_it;
  ossl_ADMISSIONS_new_t ossl_ADMISSIONS_new;
  ossl_ADMISSIONS_free_t ossl_ADMISSIONS_free;
  ossl_d2i_ADMISSIONS_t ossl_d2i_ADMISSIONS;
  ossl_i2d_ADMISSIONS_t ossl_i2d_ADMISSIONS;
  ossl_ADMISSIONS_it_t ossl_ADMISSIONS_it;
  ossl_ADMISSION_SYNTAX_new_t ossl_ADMISSION_SYNTAX_new;
  ossl_ADMISSION_SYNTAX_free_t ossl_ADMISSION_SYNTAX_free;
  ossl_d2i_ADMISSION_SYNTAX_t ossl_d2i_ADMISSION_SYNTAX;
  ossl_i2d_ADMISSION_SYNTAX_t ossl_i2d_ADMISSION_SYNTAX;
  ossl_ADMISSION_SYNTAX_it_t ossl_ADMISSION_SYNTAX_it;
  ossl_NAMING_AUTHORITY_get0_authorityId_t ossl_NAMING_AUTHORITY_get0_authorityId;
  ossl_NAMING_AUTHORITY_get0_authorityURL_t ossl_NAMING_AUTHORITY_get0_authorityURL;
  ossl_NAMING_AUTHORITY_get0_authorityText_t ossl_NAMING_AUTHORITY_get0_authorityText;
  ossl_NAMING_AUTHORITY_set0_authorityId_t ossl_NAMING_AUTHORITY_set0_authorityId;
  ossl_NAMING_AUTHORITY_set0_authorityURL_t ossl_NAMING_AUTHORITY_set0_authorityURL;
  ossl_NAMING_AUTHORITY_set0_authorityText_t ossl_NAMING_AUTHORITY_set0_authorityText;
  ossl_ADMISSION_SYNTAX_get0_admissionAuthority_t ossl_ADMISSION_SYNTAX_get0_admissionAuthority;
  ossl_ADMISSION_SYNTAX_set0_admissionAuthority_t ossl_ADMISSION_SYNTAX_set0_admissionAuthority;
  ossl_ADMISSION_SYNTAX_get0_contentsOfAdmissions_t ossl_ADMISSION_SYNTAX_get0_contentsOfAdmissions;
  ossl_ADMISSION_SYNTAX_set0_contentsOfAdmissions_t ossl_ADMISSION_SYNTAX_set0_contentsOfAdmissions;
  ossl_ADMISSIONS_get0_admissionAuthority_t ossl_ADMISSIONS_get0_admissionAuthority;
  ossl_ADMISSIONS_set0_admissionAuthority_t ossl_ADMISSIONS_set0_admissionAuthority;
  ossl_ADMISSIONS_get0_namingAuthority_t ossl_ADMISSIONS_get0_namingAuthority;
  ossl_ADMISSIONS_set0_namingAuthority_t ossl_ADMISSIONS_set0_namingAuthority;
  ossl_ADMISSIONS_get0_professionInfos_t ossl_ADMISSIONS_get0_professionInfos;
  ossl_ADMISSIONS_set0_professionInfos_t ossl_ADMISSIONS_set0_professionInfos;
  ossl_PROFESSION_INFO_get0_addProfessionInfo_t ossl_PROFESSION_INFO_get0_addProfessionInfo;
  ossl_PROFESSION_INFO_set0_addProfessionInfo_t ossl_PROFESSION_INFO_set0_addProfessionInfo;
  ossl_PROFESSION_INFO_get0_namingAuthority_t ossl_PROFESSION_INFO_get0_namingAuthority;
  ossl_PROFESSION_INFO_set0_namingAuthority_t ossl_PROFESSION_INFO_set0_namingAuthority;
  ossl_PROFESSION_INFO_get0_professionItems_t ossl_PROFESSION_INFO_get0_professionItems;
  ossl_PROFESSION_INFO_set0_professionItems_t ossl_PROFESSION_INFO_set0_professionItems;
  ossl_PROFESSION_INFO_get0_professionOIDs_t ossl_PROFESSION_INFO_get0_professionOIDs;
  ossl_PROFESSION_INFO_set0_professionOIDs_t ossl_PROFESSION_INFO_set0_professionOIDs;
  ossl_PROFESSION_INFO_get0_registrationNumber_t ossl_PROFESSION_INFO_get0_registrationNumber;
  ossl_PROFESSION_INFO_set0_registrationNumber_t ossl_PROFESSION_INFO_set0_registrationNumber;
  ossl_OSSL_CRMF_ENCRYPTEDVALUE_new_t ossl_OSSL_CRMF_ENCRYPTEDVALUE_new;
  ossl_OSSL_CRMF_ENCRYPTEDVALUE_free_t ossl_OSSL_CRMF_ENCRYPTEDVALUE_free;
  ossl_d2i_OSSL_CRMF_ENCRYPTEDVALUE_t ossl_d2i_OSSL_CRMF_ENCRYPTEDVALUE;
  ossl_i2d_OSSL_CRMF_ENCRYPTEDVALUE_t ossl_i2d_OSSL_CRMF_ENCRYPTEDVALUE;
  ossl_OSSL_CRMF_ENCRYPTEDVALUE_it_t ossl_OSSL_CRMF_ENCRYPTEDVALUE_it;
  ossl_OSSL_CRMF_MSG_new_t ossl_OSSL_CRMF_MSG_new;
  ossl_OSSL_CRMF_MSG_free_t ossl_OSSL_CRMF_MSG_free;
  ossl_d2i_OSSL_CRMF_MSG_t ossl_d2i_OSSL_CRMF_MSG;
  ossl_i2d_OSSL_CRMF_MSG_t ossl_i2d_OSSL_CRMF_MSG;
  ossl_OSSL_CRMF_MSG_it_t ossl_OSSL_CRMF_MSG_it;
  ossl_OSSL_CRMF_MSG_dup_t ossl_OSSL_CRMF_MSG_dup;
  ossl_OSSL_CRMF_PBMPARAMETER_new_t ossl_OSSL_CRMF_PBMPARAMETER_new;
  ossl_OSSL_CRMF_PBMPARAMETER_free_t ossl_OSSL_CRMF_PBMPARAMETER_free;
  ossl_d2i_OSSL_CRMF_PBMPARAMETER_t ossl_d2i_OSSL_CRMF_PBMPARAMETER;
  ossl_i2d_OSSL_CRMF_PBMPARAMETER_t ossl_i2d_OSSL_CRMF_PBMPARAMETER;
  ossl_OSSL_CRMF_PBMPARAMETER_it_t ossl_OSSL_CRMF_PBMPARAMETER_it;
  ossl_OSSL_CRMF_CERTID_new_t ossl_OSSL_CRMF_CERTID_new;
  ossl_OSSL_CRMF_CERTID_free_t ossl_OSSL_CRMF_CERTID_free;
  ossl_d2i_OSSL_CRMF_CERTID_t ossl_d2i_OSSL_CRMF_CERTID;
  ossl_i2d_OSSL_CRMF_CERTID_t ossl_i2d_OSSL_CRMF_CERTID;
  ossl_OSSL_CRMF_CERTID_it_t ossl_OSSL_CRMF_CERTID_it;
  ossl_OSSL_CRMF_CERTID_dup_t ossl_OSSL_CRMF_CERTID_dup;
  ossl_OSSL_CRMF_PKIPUBLICATIONINFO_new_t ossl_OSSL_CRMF_PKIPUBLICATIONINFO_new;
  ossl_OSSL_CRMF_PKIPUBLICATIONINFO_free_t ossl_OSSL_CRMF_PKIPUBLICATIONINFO_free;
  ossl_d2i_OSSL_CRMF_PKIPUBLICATIONINFO_t ossl_d2i_OSSL_CRMF_PKIPUBLICATIONINFO;
  ossl_i2d_OSSL_CRMF_PKIPUBLICATIONINFO_t ossl_i2d_OSSL_CRMF_PKIPUBLICATIONINFO;
  ossl_OSSL_CRMF_PKIPUBLICATIONINFO_it_t ossl_OSSL_CRMF_PKIPUBLICATIONINFO_it;
  ossl_OSSL_CRMF_SINGLEPUBINFO_new_t ossl_OSSL_CRMF_SINGLEPUBINFO_new;
  ossl_OSSL_CRMF_SINGLEPUBINFO_free_t ossl_OSSL_CRMF_SINGLEPUBINFO_free;
  ossl_d2i_OSSL_CRMF_SINGLEPUBINFO_t ossl_d2i_OSSL_CRMF_SINGLEPUBINFO;
  ossl_i2d_OSSL_CRMF_SINGLEPUBINFO_t ossl_i2d_OSSL_CRMF_SINGLEPUBINFO;
  ossl_OSSL_CRMF_SINGLEPUBINFO_it_t ossl_OSSL_CRMF_SINGLEPUBINFO_it;
  ossl_OSSL_CRMF_CERTTEMPLATE_new_t ossl_OSSL_CRMF_CERTTEMPLATE_new;
  ossl_OSSL_CRMF_CERTTEMPLATE_free_t ossl_OSSL_CRMF_CERTTEMPLATE_free;
  ossl_d2i_OSSL_CRMF_CERTTEMPLATE_t ossl_d2i_OSSL_CRMF_CERTTEMPLATE;
  ossl_i2d_OSSL_CRMF_CERTTEMPLATE_t ossl_i2d_OSSL_CRMF_CERTTEMPLATE;
  ossl_OSSL_CRMF_CERTTEMPLATE_it_t ossl_OSSL_CRMF_CERTTEMPLATE_it;
  ossl_OSSL_CRMF_MSGS_new_t ossl_OSSL_CRMF_MSGS_new;
  ossl_OSSL_CRMF_MSGS_free_t ossl_OSSL_CRMF_MSGS_free;
  ossl_d2i_OSSL_CRMF_MSGS_t ossl_d2i_OSSL_CRMF_MSGS;
  ossl_i2d_OSSL_CRMF_MSGS_t ossl_i2d_OSSL_CRMF_MSGS;
  ossl_OSSL_CRMF_MSGS_it_t ossl_OSSL_CRMF_MSGS_it;
  ossl_OSSL_CRMF_pbmp_new_t ossl_OSSL_CRMF_pbmp_new;
  ossl_OSSL_CRMF_pbm_new_t ossl_OSSL_CRMF_pbm_new;
  ossl_OSSL_CRMF_MSG_set1_regCtrl_regToken_t ossl_OSSL_CRMF_MSG_set1_regCtrl_regToken;
  ossl_OSSL_CRMF_MSG_get0_regCtrl_regToken_t ossl_OSSL_CRMF_MSG_get0_regCtrl_regToken;
  ossl_OSSL_CRMF_MSG_set1_regCtrl_authenticator_t ossl_OSSL_CRMF_MSG_set1_regCtrl_authenticator;
  ossl_OSSL_CRMF_MSG_get0_regCtrl_authenticator_t ossl_OSSL_CRMF_MSG_get0_regCtrl_authenticator;
  ossl_OSSL_CRMF_MSG_PKIPublicationInfo_push0_SinglePubInfo_t ossl_OSSL_CRMF_MSG_PKIPublicationInfo_push0_SinglePubInfo;
  ossl_OSSL_CRMF_MSG_set0_SinglePubInfo_t ossl_OSSL_CRMF_MSG_set0_SinglePubInfo;
  ossl_OSSL_CRMF_MSG_set_PKIPublicationInfo_action_t ossl_OSSL_CRMF_MSG_set_PKIPublicationInfo_action;
  ossl_OSSL_CRMF_MSG_set1_regCtrl_pkiPublicationInfo_t ossl_OSSL_CRMF_MSG_set1_regCtrl_pkiPublicationInfo;
  ossl_OSSL_CRMF_MSG_get0_regCtrl_pkiPublicationInfo_t ossl_OSSL_CRMF_MSG_get0_regCtrl_pkiPublicationInfo;
  ossl_OSSL_CRMF_MSG_set1_regCtrl_protocolEncrKey_t ossl_OSSL_CRMF_MSG_set1_regCtrl_protocolEncrKey;
  ossl_OSSL_CRMF_MSG_get0_regCtrl_protocolEncrKey_t ossl_OSSL_CRMF_MSG_get0_regCtrl_protocolEncrKey;
  ossl_OSSL_CRMF_MSG_set1_regCtrl_oldCertID_t ossl_OSSL_CRMF_MSG_set1_regCtrl_oldCertID;
  ossl_OSSL_CRMF_MSG_get0_regCtrl_oldCertID_t ossl_OSSL_CRMF_MSG_get0_regCtrl_oldCertID;
  ossl_OSSL_CRMF_CERTID_gen_t ossl_OSSL_CRMF_CERTID_gen;
  ossl_OSSL_CRMF_MSG_set1_regInfo_utf8Pairs_t ossl_OSSL_CRMF_MSG_set1_regInfo_utf8Pairs;
  ossl_OSSL_CRMF_MSG_get0_regInfo_utf8Pairs_t ossl_OSSL_CRMF_MSG_get0_regInfo_utf8Pairs;
  ossl_OSSL_CRMF_MSG_set1_regInfo_certReq_t ossl_OSSL_CRMF_MSG_set1_regInfo_certReq;
  ossl_OSSL_CRMF_MSG_get0_regInfo_certReq_t ossl_OSSL_CRMF_MSG_get0_regInfo_certReq;
  ossl_OSSL_CRMF_MSG_set0_validity_t ossl_OSSL_CRMF_MSG_set0_validity;
  ossl_OSSL_CRMF_MSG_set_certReqId_t ossl_OSSL_CRMF_MSG_set_certReqId;
  ossl_OSSL_CRMF_MSG_get_certReqId_t ossl_OSSL_CRMF_MSG_get_certReqId;
  ossl_OSSL_CRMF_MSG_set0_extensions_t ossl_OSSL_CRMF_MSG_set0_extensions;
  ossl_OSSL_CRMF_MSG_push0_extension_t ossl_OSSL_CRMF_MSG_push0_extension;
  ossl_OSSL_CRMF_MSG_create_popo_t ossl_OSSL_CRMF_MSG_create_popo;
  ossl_OSSL_CRMF_MSGS_verify_popo_t ossl_OSSL_CRMF_MSGS_verify_popo;
  ossl_OSSL_CRMF_MSG_get0_tmpl_t ossl_OSSL_CRMF_MSG_get0_tmpl;
  ossl_OSSL_CRMF_CERTTEMPLATE_get0_serialNumber_t ossl_OSSL_CRMF_CERTTEMPLATE_get0_serialNumber;
  ossl_OSSL_CRMF_CERTTEMPLATE_get0_subject_t ossl_OSSL_CRMF_CERTTEMPLATE_get0_subject;
  ossl_OSSL_CRMF_CERTTEMPLATE_get0_issuer_t ossl_OSSL_CRMF_CERTTEMPLATE_get0_issuer;
  ossl_OSSL_CRMF_CERTTEMPLATE_get0_extensions_t ossl_OSSL_CRMF_CERTTEMPLATE_get0_extensions;
  ossl_OSSL_CRMF_CERTID_get0_issuer_t ossl_OSSL_CRMF_CERTID_get0_issuer;
  ossl_OSSL_CRMF_CERTID_get0_serialNumber_t ossl_OSSL_CRMF_CERTID_get0_serialNumber;
  ossl_OSSL_CRMF_CERTTEMPLATE_fill_t ossl_OSSL_CRMF_CERTTEMPLATE_fill;
  ossl_OSSL_CRMF_ENCRYPTEDVALUE_get1_encCert_t ossl_OSSL_CRMF_ENCRYPTEDVALUE_get1_encCert;
  ossl_OSSL_trace_get_category_num_t ossl_OSSL_trace_get_category_num;
  ossl_OSSL_trace_get_category_name_t ossl_OSSL_trace_get_category_name;
  ossl_OSSL_trace_set_channel_t ossl_OSSL_trace_set_channel;
  ossl_OSSL_trace_set_prefix_t ossl_OSSL_trace_set_prefix;
  ossl_OSSL_trace_set_suffix_t ossl_OSSL_trace_set_suffix;
  ossl_OSSL_trace_set_callback_t ossl_OSSL_trace_set_callback;
  ossl_OSSL_trace_enabled_t ossl_OSSL_trace_enabled;
  ossl_OSSL_trace_begin_t ossl_OSSL_trace_begin;
  ossl_OSSL_trace_end_t ossl_OSSL_trace_end;
  ossl_OSSL_CMP_log_open_t ossl_OSSL_CMP_log_open;
  ossl_OSSL_CMP_log_close_t ossl_OSSL_CMP_log_close;
  ossl_OSSL_CMP_print_to_bio_t ossl_OSSL_CMP_print_to_bio;
  ossl_OSSL_CMP_print_errors_cb_t ossl_OSSL_CMP_print_errors_cb;
  ossl_OSSL_CMP_PKISTATUS_it_t ossl_OSSL_CMP_PKISTATUS_it;
  ossl_OSSL_CMP_PKIHEADER_new_t ossl_OSSL_CMP_PKIHEADER_new;
  ossl_OSSL_CMP_PKIHEADER_free_t ossl_OSSL_CMP_PKIHEADER_free;
  ossl_d2i_OSSL_CMP_PKIHEADER_t ossl_d2i_OSSL_CMP_PKIHEADER;
  ossl_i2d_OSSL_CMP_PKIHEADER_t ossl_i2d_OSSL_CMP_PKIHEADER;
  ossl_OSSL_CMP_PKIHEADER_it_t ossl_OSSL_CMP_PKIHEADER_it;
  ossl_OSSL_CMP_MSG_dup_t ossl_OSSL_CMP_MSG_dup;
  ossl_d2i_OSSL_CMP_MSG_t ossl_d2i_OSSL_CMP_MSG;
  ossl_i2d_OSSL_CMP_MSG_t ossl_i2d_OSSL_CMP_MSG;
  ossl_OSSL_CMP_MSG_it_t ossl_OSSL_CMP_MSG_it;
  ossl_OSSL_CMP_ITAV_dup_t ossl_OSSL_CMP_ITAV_dup;
  ossl_OSSL_CMP_PKISI_new_t ossl_OSSL_CMP_PKISI_new;
  ossl_OSSL_CMP_PKISI_free_t ossl_OSSL_CMP_PKISI_free;
  ossl_d2i_OSSL_CMP_PKISI_t ossl_d2i_OSSL_CMP_PKISI;
  ossl_i2d_OSSL_CMP_PKISI_t ossl_i2d_OSSL_CMP_PKISI;
  ossl_OSSL_CMP_PKISI_it_t ossl_OSSL_CMP_PKISI_it;
  ossl_OSSL_CMP_PKISI_dup_t ossl_OSSL_CMP_PKISI_dup;
  ossl_OSSL_CMP_ITAV_create_t ossl_OSSL_CMP_ITAV_create;
  ossl_OSSL_CMP_ITAV_set0_t ossl_OSSL_CMP_ITAV_set0;
  ossl_OSSL_CMP_ITAV_get0_type_t ossl_OSSL_CMP_ITAV_get0_type;
  ossl_OSSL_CMP_ITAV_get0_value_t ossl_OSSL_CMP_ITAV_get0_value;
  ossl_OSSL_CMP_ITAV_push0_stack_item_t ossl_OSSL_CMP_ITAV_push0_stack_item;
  ossl_OSSL_CMP_ITAV_free_t ossl_OSSL_CMP_ITAV_free;
  ossl_OSSL_CMP_MSG_free_t ossl_OSSL_CMP_MSG_free;
  ossl_OSSL_CMP_CTX_new_t ossl_OSSL_CMP_CTX_new;
  ossl_OSSL_CMP_CTX_free_t ossl_OSSL_CMP_CTX_free;
  ossl_OSSL_CMP_CTX_reinit_t ossl_OSSL_CMP_CTX_reinit;
  ossl_OSSL_CMP_CTX_set_option_t ossl_OSSL_CMP_CTX_set_option;
  ossl_OSSL_CMP_CTX_get_option_t ossl_OSSL_CMP_CTX_get_option;
  ossl_OSSL_CMP_CTX_set_log_cb_t ossl_OSSL_CMP_CTX_set_log_cb;
  ossl_OSSL_CMP_CTX_print_errors_t ossl_OSSL_CMP_CTX_print_errors;
  ossl_OSSL_CMP_CTX_set1_serverPath_t ossl_OSSL_CMP_CTX_set1_serverPath;
  ossl_OSSL_CMP_CTX_set1_server_t ossl_OSSL_CMP_CTX_set1_server;
  ossl_OSSL_CMP_CTX_set_serverPort_t ossl_OSSL_CMP_CTX_set_serverPort;
  ossl_OSSL_CMP_CTX_set1_proxy_t ossl_OSSL_CMP_CTX_set1_proxy;
  ossl_OSSL_CMP_CTX_set1_no_proxy_t ossl_OSSL_CMP_CTX_set1_no_proxy;
  ossl_OSSL_CMP_CTX_set_http_cb_t ossl_OSSL_CMP_CTX_set_http_cb;
  ossl_OSSL_CMP_CTX_set_http_cb_arg_t ossl_OSSL_CMP_CTX_set_http_cb_arg;
  ossl_OSSL_CMP_CTX_get_http_cb_arg_t ossl_OSSL_CMP_CTX_get_http_cb_arg;
  ossl_OSSL_CMP_CTX_set_transfer_cb_t ossl_OSSL_CMP_CTX_set_transfer_cb;
  ossl_OSSL_CMP_CTX_set_transfer_cb_arg_t ossl_OSSL_CMP_CTX_set_transfer_cb_arg;
  ossl_OSSL_CMP_CTX_get_transfer_cb_arg_t ossl_OSSL_CMP_CTX_get_transfer_cb_arg;
  ossl_OSSL_CMP_CTX_set1_srvCert_t ossl_OSSL_CMP_CTX_set1_srvCert;
  ossl_OSSL_CMP_CTX_set1_expected_sender_t ossl_OSSL_CMP_CTX_set1_expected_sender;
  ossl_OSSL_CMP_CTX_set0_trustedStore_t ossl_OSSL_CMP_CTX_set0_trustedStore;
  ossl_OSSL_CMP_CTX_get0_trustedStore_t ossl_OSSL_CMP_CTX_get0_trustedStore;
  ossl_OSSL_CMP_CTX_set1_untrusted_t ossl_OSSL_CMP_CTX_set1_untrusted;
  ossl_OSSL_CMP_CTX_get0_untrusted_t ossl_OSSL_CMP_CTX_get0_untrusted;
  ossl_OSSL_CMP_CTX_set1_cert_t ossl_OSSL_CMP_CTX_set1_cert;
  ossl_OSSL_CMP_CTX_build_cert_chain_t ossl_OSSL_CMP_CTX_build_cert_chain;
  ossl_OSSL_CMP_CTX_set1_pkey_t ossl_OSSL_CMP_CTX_set1_pkey;
  ossl_OSSL_CMP_CTX_set1_referenceValue_t ossl_OSSL_CMP_CTX_set1_referenceValue;
  ossl_OSSL_CMP_CTX_set1_secretValue_t ossl_OSSL_CMP_CTX_set1_secretValue;
  ossl_OSSL_CMP_CTX_set1_recipient_t ossl_OSSL_CMP_CTX_set1_recipient;
  ossl_OSSL_CMP_CTX_push0_geninfo_ITAV_t ossl_OSSL_CMP_CTX_push0_geninfo_ITAV;
  ossl_OSSL_CMP_CTX_reset_geninfo_ITAVs_t ossl_OSSL_CMP_CTX_reset_geninfo_ITAVs;
  ossl_OSSL_CMP_CTX_set1_extraCertsOut_t ossl_OSSL_CMP_CTX_set1_extraCertsOut;
  ossl_OSSL_CMP_CTX_set0_newPkey_t ossl_OSSL_CMP_CTX_set0_newPkey;
  ossl_OSSL_CMP_CTX_get0_newPkey_t ossl_OSSL_CMP_CTX_get0_newPkey;
  ossl_OSSL_CMP_CTX_set1_issuer_t ossl_OSSL_CMP_CTX_set1_issuer;
  ossl_OSSL_CMP_CTX_set1_subjectName_t ossl_OSSL_CMP_CTX_set1_subjectName;
  ossl_OSSL_CMP_CTX_push1_subjectAltName_t ossl_OSSL_CMP_CTX_push1_subjectAltName;
  ossl_OSSL_CMP_CTX_set0_reqExtensions_t ossl_OSSL_CMP_CTX_set0_reqExtensions;
  ossl_OSSL_CMP_CTX_reqExtensions_have_SAN_t ossl_OSSL_CMP_CTX_reqExtensions_have_SAN;
  ossl_OSSL_CMP_CTX_push0_policy_t ossl_OSSL_CMP_CTX_push0_policy;
  ossl_OSSL_CMP_CTX_set1_oldCert_t ossl_OSSL_CMP_CTX_set1_oldCert;
  ossl_OSSL_CMP_CTX_set1_p10CSR_t ossl_OSSL_CMP_CTX_set1_p10CSR;
  ossl_OSSL_CMP_CTX_push0_genm_ITAV_t ossl_OSSL_CMP_CTX_push0_genm_ITAV;
  ossl_OSSL_CMP_certConf_cb_t ossl_OSSL_CMP_certConf_cb;
  ossl_OSSL_CMP_CTX_set_certConf_cb_t ossl_OSSL_CMP_CTX_set_certConf_cb;
  ossl_OSSL_CMP_CTX_set_certConf_cb_arg_t ossl_OSSL_CMP_CTX_set_certConf_cb_arg;
  ossl_OSSL_CMP_CTX_get_certConf_cb_arg_t ossl_OSSL_CMP_CTX_get_certConf_cb_arg;
  ossl_OSSL_CMP_CTX_get_status_t ossl_OSSL_CMP_CTX_get_status;
  ossl_OSSL_CMP_CTX_get0_statusString_t ossl_OSSL_CMP_CTX_get0_statusString;
  ossl_OSSL_CMP_CTX_get_failInfoCode_t ossl_OSSL_CMP_CTX_get_failInfoCode;
  ossl_OSSL_CMP_CTX_get0_newCert_t ossl_OSSL_CMP_CTX_get0_newCert;
  ossl_OSSL_CMP_CTX_get1_newChain_t ossl_OSSL_CMP_CTX_get1_newChain;
  ossl_OSSL_CMP_CTX_get1_caPubs_t ossl_OSSL_CMP_CTX_get1_caPubs;
  ossl_OSSL_CMP_CTX_get1_extraCertsIn_t ossl_OSSL_CMP_CTX_get1_extraCertsIn;
  ossl_OSSL_CMP_CTX_set1_transactionID_t ossl_OSSL_CMP_CTX_set1_transactionID;
  ossl_OSSL_CMP_CTX_set1_senderNonce_t ossl_OSSL_CMP_CTX_set1_senderNonce;
  ossl_OSSL_CMP_CTX_snprint_PKIStatus_t ossl_OSSL_CMP_CTX_snprint_PKIStatus;
  ossl_OSSL_CMP_snprint_PKIStatusInfo_t ossl_OSSL_CMP_snprint_PKIStatusInfo;
  ossl_OSSL_CMP_STATUSINFO_new_t ossl_OSSL_CMP_STATUSINFO_new;
  ossl_OSSL_CMP_HDR_get0_transactionID_t ossl_OSSL_CMP_HDR_get0_transactionID;
  ossl_OSSL_CMP_HDR_get0_recipNonce_t ossl_OSSL_CMP_HDR_get0_recipNonce;
  ossl_OSSL_CMP_MSG_get0_header_t ossl_OSSL_CMP_MSG_get0_header;
  ossl_OSSL_CMP_MSG_get_bodytype_t ossl_OSSL_CMP_MSG_get_bodytype;
  ossl_OSSL_CMP_MSG_update_transactionID_t ossl_OSSL_CMP_MSG_update_transactionID;
  ossl_OSSL_CMP_MSG_update_recipNonce_t ossl_OSSL_CMP_MSG_update_recipNonce;
  ossl_OSSL_CMP_CTX_setup_CRM_t ossl_OSSL_CMP_CTX_setup_CRM;
  ossl_OSSL_CMP_MSG_read_t ossl_OSSL_CMP_MSG_read;
  ossl_OSSL_CMP_MSG_write_t ossl_OSSL_CMP_MSG_write;
  ossl_d2i_OSSL_CMP_MSG_bio_t ossl_d2i_OSSL_CMP_MSG_bio;
  ossl_i2d_OSSL_CMP_MSG_bio_t ossl_i2d_OSSL_CMP_MSG_bio;
  ossl_OSSL_CMP_validate_msg_t ossl_OSSL_CMP_validate_msg;
  ossl_OSSL_CMP_validate_cert_path_t ossl_OSSL_CMP_validate_cert_path;
  ossl_OSSL_CMP_MSG_http_perform_t ossl_OSSL_CMP_MSG_http_perform;
  ossl_OSSL_CMP_SRV_process_request_t ossl_OSSL_CMP_SRV_process_request;
  ossl_OSSL_CMP_CTX_server_perform_t ossl_OSSL_CMP_CTX_server_perform;
  ossl_OSSL_CMP_SRV_CTX_new_t ossl_OSSL_CMP_SRV_CTX_new;
  ossl_OSSL_CMP_SRV_CTX_free_t ossl_OSSL_CMP_SRV_CTX_free;
  ossl_OSSL_CMP_SRV_CTX_init_t ossl_OSSL_CMP_SRV_CTX_init;
  ossl_OSSL_CMP_SRV_CTX_get0_cmp_ctx_t ossl_OSSL_CMP_SRV_CTX_get0_cmp_ctx;
  ossl_OSSL_CMP_SRV_CTX_get0_custom_ctx_t ossl_OSSL_CMP_SRV_CTX_get0_custom_ctx;
  ossl_OSSL_CMP_SRV_CTX_set_send_unprotected_errors_t ossl_OSSL_CMP_SRV_CTX_set_send_unprotected_errors;
  ossl_OSSL_CMP_SRV_CTX_set_accept_unprotected_t ossl_OSSL_CMP_SRV_CTX_set_accept_unprotected;
  ossl_OSSL_CMP_SRV_CTX_set_accept_raverified_t ossl_OSSL_CMP_SRV_CTX_set_accept_raverified;
  ossl_OSSL_CMP_SRV_CTX_set_grant_implicit_confirm_t ossl_OSSL_CMP_SRV_CTX_set_grant_implicit_confirm;
  ossl_OSSL_CMP_exec_certreq_t ossl_OSSL_CMP_exec_certreq;
  ossl_OSSL_CMP_try_certreq_t ossl_OSSL_CMP_try_certreq;
  ossl_OSSL_CMP_exec_RR_ses_t ossl_OSSL_CMP_exec_RR_ses;
  ossl_OSSL_CMP_exec_GENM_ses_t ossl_OSSL_CMP_exec_GENM_ses;
  ossl_CMS_ContentInfo_new_t ossl_CMS_ContentInfo_new;
  ossl_CMS_ContentInfo_free_t ossl_CMS_ContentInfo_free;
  ossl_d2i_CMS_ContentInfo_t ossl_d2i_CMS_ContentInfo;
  ossl_i2d_CMS_ContentInfo_t ossl_i2d_CMS_ContentInfo;
  ossl_CMS_ContentInfo_it_t ossl_CMS_ContentInfo_it;
  ossl_CMS_ReceiptRequest_new_t ossl_CMS_ReceiptRequest_new;
  ossl_CMS_ReceiptRequest_free_t ossl_CMS_ReceiptRequest_free;
  ossl_d2i_CMS_ReceiptRequest_t ossl_d2i_CMS_ReceiptRequest;
  ossl_i2d_CMS_ReceiptRequest_t ossl_i2d_CMS_ReceiptRequest;
  ossl_CMS_ReceiptRequest_it_t ossl_CMS_ReceiptRequest_it;
  ossl_CMS_ContentInfo_print_ctx_t ossl_CMS_ContentInfo_print_ctx;
  ossl_CMS_ContentInfo_new_ex_t ossl_CMS_ContentInfo_new_ex;
  ossl_CMS_get0_type_t ossl_CMS_get0_type;
  ossl_CMS_dataInit_t ossl_CMS_dataInit;
  ossl_CMS_dataFinal_t ossl_CMS_dataFinal;
  ossl_CMS_get0_content_t ossl_CMS_get0_content;
  ossl_CMS_is_detached_t ossl_CMS_is_detached;
  ossl_CMS_set_detached_t ossl_CMS_set_detached;
  ossl_CMS_stream_t ossl_CMS_stream;
  ossl_d2i_CMS_bio_t ossl_d2i_CMS_bio;
  ossl_i2d_CMS_bio_t ossl_i2d_CMS_bio;
  ossl_BIO_new_CMS_t ossl_BIO_new_CMS;
  ossl_i2d_CMS_bio_stream_t ossl_i2d_CMS_bio_stream;
  ossl_PEM_write_bio_CMS_stream_t ossl_PEM_write_bio_CMS_stream;
  ossl_SMIME_read_CMS_t ossl_SMIME_read_CMS;
  ossl_SMIME_read_CMS_ex_t ossl_SMIME_read_CMS_ex;
  ossl_SMIME_write_CMS_t ossl_SMIME_write_CMS;
  ossl_CMS_final_t ossl_CMS_final;
  ossl_CMS_sign_t ossl_CMS_sign;
  ossl_CMS_sign_ex_t ossl_CMS_sign_ex;
  ossl_CMS_sign_receipt_t ossl_CMS_sign_receipt;
  ossl_CMS_data_t ossl_CMS_data;
  ossl_CMS_data_create_t ossl_CMS_data_create;
  ossl_CMS_data_create_ex_t ossl_CMS_data_create_ex;
  ossl_CMS_digest_verify_t ossl_CMS_digest_verify;
  ossl_CMS_digest_create_t ossl_CMS_digest_create;
  ossl_CMS_digest_create_ex_t ossl_CMS_digest_create_ex;
  ossl_CMS_EncryptedData_decrypt_t ossl_CMS_EncryptedData_decrypt;
  ossl_CMS_EncryptedData_encrypt_t ossl_CMS_EncryptedData_encrypt;
  ossl_CMS_EncryptedData_encrypt_ex_t ossl_CMS_EncryptedData_encrypt_ex;
  ossl_CMS_EncryptedData_set1_key_t ossl_CMS_EncryptedData_set1_key;
  ossl_CMS_verify_t ossl_CMS_verify;
  ossl_CMS_verify_receipt_t ossl_CMS_verify_receipt;
  ossl_CMS_get0_signers_t ossl_CMS_get0_signers;
  ossl_CMS_encrypt_t ossl_CMS_encrypt;
  ossl_CMS_encrypt_ex_t ossl_CMS_encrypt_ex;
  ossl_CMS_decrypt_t ossl_CMS_decrypt;
  ossl_CMS_decrypt_set1_pkey_t ossl_CMS_decrypt_set1_pkey;
  ossl_CMS_decrypt_set1_pkey_and_peer_t ossl_CMS_decrypt_set1_pkey_and_peer;
  ossl_CMS_decrypt_set1_key_t ossl_CMS_decrypt_set1_key;
  ossl_CMS_decrypt_set1_password_t ossl_CMS_decrypt_set1_password;
  ossl_CMS_get0_RecipientInfos_t ossl_CMS_get0_RecipientInfos;
  ossl_CMS_RecipientInfo_type_t ossl_CMS_RecipientInfo_type;
  ossl_CMS_RecipientInfo_get0_pkey_ctx_t ossl_CMS_RecipientInfo_get0_pkey_ctx;
  ossl_CMS_AuthEnvelopedData_create_t ossl_CMS_AuthEnvelopedData_create;
  ossl_CMS_AuthEnvelopedData_create_ex_t ossl_CMS_AuthEnvelopedData_create_ex;
  ossl_CMS_EnvelopedData_create_t ossl_CMS_EnvelopedData_create;
  ossl_CMS_EnvelopedData_create_ex_t ossl_CMS_EnvelopedData_create_ex;
  ossl_CMS_add1_recipient_cert_t ossl_CMS_add1_recipient_cert;
  ossl_CMS_add1_recipient_t ossl_CMS_add1_recipient;
  ossl_CMS_RecipientInfo_set0_pkey_t ossl_CMS_RecipientInfo_set0_pkey;
  ossl_CMS_RecipientInfo_ktri_cert_cmp_t ossl_CMS_RecipientInfo_ktri_cert_cmp;
  ossl_CMS_RecipientInfo_ktri_get0_algs_t ossl_CMS_RecipientInfo_ktri_get0_algs;
  ossl_CMS_RecipientInfo_ktri_get0_signer_id_t ossl_CMS_RecipientInfo_ktri_get0_signer_id;
  ossl_CMS_add0_recipient_key_t ossl_CMS_add0_recipient_key;
  ossl_CMS_RecipientInfo_kekri_get0_id_t ossl_CMS_RecipientInfo_kekri_get0_id;
  ossl_CMS_RecipientInfo_set0_key_t ossl_CMS_RecipientInfo_set0_key;
  ossl_CMS_RecipientInfo_kekri_id_cmp_t ossl_CMS_RecipientInfo_kekri_id_cmp;
  ossl_CMS_RecipientInfo_set0_password_t ossl_CMS_RecipientInfo_set0_password;
  ossl_CMS_add0_recipient_password_t ossl_CMS_add0_recipient_password;
  ossl_CMS_RecipientInfo_decrypt_t ossl_CMS_RecipientInfo_decrypt;
  ossl_CMS_RecipientInfo_encrypt_t ossl_CMS_RecipientInfo_encrypt;
  ossl_CMS_uncompress_t ossl_CMS_uncompress;
  ossl_CMS_compress_t ossl_CMS_compress;
  ossl_CMS_set1_eContentType_t ossl_CMS_set1_eContentType;
  ossl_CMS_get0_eContentType_t ossl_CMS_get0_eContentType;
  ossl_CMS_add0_CertificateChoices_t ossl_CMS_add0_CertificateChoices;
  ossl_CMS_add0_cert_t ossl_CMS_add0_cert;
  ossl_CMS_add1_cert_t ossl_CMS_add1_cert;
  ossl_CMS_get1_certs_t ossl_CMS_get1_certs;
  ossl_CMS_add0_RevocationInfoChoice_t ossl_CMS_add0_RevocationInfoChoice;
  ossl_CMS_add0_crl_t ossl_CMS_add0_crl;
  ossl_CMS_add1_crl_t ossl_CMS_add1_crl;
  ossl_CMS_get1_crls_t ossl_CMS_get1_crls;
  ossl_CMS_SignedData_init_t ossl_CMS_SignedData_init;
  ossl_CMS_add1_signer_t ossl_CMS_add1_signer;
  ossl_CMS_SignerInfo_get0_pkey_ctx_t ossl_CMS_SignerInfo_get0_pkey_ctx;
  ossl_CMS_SignerInfo_get0_md_ctx_t ossl_CMS_SignerInfo_get0_md_ctx;
  ossl_CMS_get0_SignerInfos_t ossl_CMS_get0_SignerInfos;
  ossl_CMS_SignerInfo_set1_signer_cert_t ossl_CMS_SignerInfo_set1_signer_cert;
  ossl_CMS_SignerInfo_get0_signer_id_t ossl_CMS_SignerInfo_get0_signer_id;
  ossl_CMS_SignerInfo_cert_cmp_t ossl_CMS_SignerInfo_cert_cmp;
  ossl_CMS_set1_signers_certs_t ossl_CMS_set1_signers_certs;
  ossl_CMS_SignerInfo_get0_algs_t ossl_CMS_SignerInfo_get0_algs;
  ossl_CMS_SignerInfo_get0_signature_t ossl_CMS_SignerInfo_get0_signature;
  ossl_CMS_SignerInfo_sign_t ossl_CMS_SignerInfo_sign;
  ossl_CMS_SignerInfo_verify_t ossl_CMS_SignerInfo_verify;
  ossl_CMS_SignerInfo_verify_content_t ossl_CMS_SignerInfo_verify_content;
  ossl_CMS_add_smimecap_t ossl_CMS_add_smimecap;
  ossl_CMS_add_simple_smimecap_t ossl_CMS_add_simple_smimecap;
  ossl_CMS_add_standard_smimecap_t ossl_CMS_add_standard_smimecap;
  ossl_CMS_signed_get_attr_count_t ossl_CMS_signed_get_attr_count;
  ossl_CMS_signed_get_attr_by_NID_t ossl_CMS_signed_get_attr_by_NID;
  ossl_CMS_signed_get_attr_by_OBJ_t ossl_CMS_signed_get_attr_by_OBJ;
  ossl_CMS_signed_get_attr_t ossl_CMS_signed_get_attr;
  ossl_CMS_signed_delete_attr_t ossl_CMS_signed_delete_attr;
  ossl_CMS_signed_add1_attr_t ossl_CMS_signed_add1_attr;
  ossl_CMS_signed_add1_attr_by_OBJ_t ossl_CMS_signed_add1_attr_by_OBJ;
  ossl_CMS_signed_add1_attr_by_NID_t ossl_CMS_signed_add1_attr_by_NID;
  ossl_CMS_signed_add1_attr_by_txt_t ossl_CMS_signed_add1_attr_by_txt;
  ossl_CMS_signed_get0_data_by_OBJ_t ossl_CMS_signed_get0_data_by_OBJ;
  ossl_CMS_unsigned_get_attr_count_t ossl_CMS_unsigned_get_attr_count;
  ossl_CMS_unsigned_get_attr_by_NID_t ossl_CMS_unsigned_get_attr_by_NID;
  ossl_CMS_unsigned_get_attr_by_OBJ_t ossl_CMS_unsigned_get_attr_by_OBJ;
  ossl_CMS_unsigned_get_attr_t ossl_CMS_unsigned_get_attr;
  ossl_CMS_unsigned_delete_attr_t ossl_CMS_unsigned_delete_attr;
  ossl_CMS_unsigned_add1_attr_t ossl_CMS_unsigned_add1_attr;
  ossl_CMS_unsigned_add1_attr_by_OBJ_t ossl_CMS_unsigned_add1_attr_by_OBJ;
  ossl_CMS_unsigned_add1_attr_by_NID_t ossl_CMS_unsigned_add1_attr_by_NID;
  ossl_CMS_unsigned_add1_attr_by_txt_t ossl_CMS_unsigned_add1_attr_by_txt;
  ossl_CMS_unsigned_get0_data_by_OBJ_t ossl_CMS_unsigned_get0_data_by_OBJ;
  ossl_CMS_get1_ReceiptRequest_t ossl_CMS_get1_ReceiptRequest;
  ossl_CMS_ReceiptRequest_create0_t ossl_CMS_ReceiptRequest_create0;
  ossl_CMS_ReceiptRequest_create0_ex_t ossl_CMS_ReceiptRequest_create0_ex;
  ossl_CMS_add1_ReceiptRequest_t ossl_CMS_add1_ReceiptRequest;
  ossl_CMS_ReceiptRequest_get0_values_t ossl_CMS_ReceiptRequest_get0_values;
  ossl_CMS_RecipientInfo_kari_get0_alg_t ossl_CMS_RecipientInfo_kari_get0_alg;
  ossl_CMS_RecipientInfo_kari_get0_reks_t ossl_CMS_RecipientInfo_kari_get0_reks;
  ossl_CMS_RecipientInfo_kari_get0_orig_id_t ossl_CMS_RecipientInfo_kari_get0_orig_id;
  ossl_CMS_RecipientInfo_kari_orig_id_cmp_t ossl_CMS_RecipientInfo_kari_orig_id_cmp;
  ossl_CMS_RecipientEncryptedKey_get0_id_t ossl_CMS_RecipientEncryptedKey_get0_id;
  ossl_CMS_RecipientEncryptedKey_cert_cmp_t ossl_CMS_RecipientEncryptedKey_cert_cmp;
  ossl_CMS_RecipientInfo_kari_set0_pkey_t ossl_CMS_RecipientInfo_kari_set0_pkey;
  ossl_CMS_RecipientInfo_kari_set0_pkey_and_peer_t ossl_CMS_RecipientInfo_kari_set0_pkey_and_peer;
  ossl_CMS_RecipientInfo_kari_get0_ctx_t ossl_CMS_RecipientInfo_kari_get0_ctx;
  ossl_CMS_RecipientInfo_kari_decrypt_t ossl_CMS_RecipientInfo_kari_decrypt;
  ossl_CMS_SharedInfo_encode_t ossl_CMS_SharedInfo_encode;
  ossl_COMP_CTX_new_t ossl_COMP_CTX_new;
  ossl_COMP_CTX_get_method_t ossl_COMP_CTX_get_method;
  ossl_COMP_CTX_get_type_t ossl_COMP_CTX_get_type;
  ossl_COMP_get_type_t ossl_COMP_get_type;
  ossl_COMP_get_name_t ossl_COMP_get_name;
  ossl_COMP_CTX_free_t ossl_COMP_CTX_free;
  ossl_COMP_compress_block_t ossl_COMP_compress_block;
  ossl_COMP_expand_block_t ossl_COMP_expand_block;
  ossl_COMP_zlib_t ossl_COMP_zlib;
  ossl__CONF_new_section_t ossl__CONF_new_section;
  ossl__CONF_get_section_t ossl__CONF_get_section;
  ossl__CONF_get_section_values_t ossl__CONF_get_section_values;
  ossl__CONF_add_string_t ossl__CONF_add_string;
  ossl__CONF_get_string_t ossl__CONF_get_string;
  ossl__CONF_get_number_t ossl__CONF_get_number;
  ossl__CONF_new_data_t ossl__CONF_new_data;
  ossl__CONF_free_data_t ossl__CONF_free_data;
  ossl_CT_POLICY_EVAL_CTX_new_ex_t ossl_CT_POLICY_EVAL_CTX_new_ex;
  ossl_CT_POLICY_EVAL_CTX_new_t ossl_CT_POLICY_EVAL_CTX_new;
  ossl_CT_POLICY_EVAL_CTX_free_t ossl_CT_POLICY_EVAL_CTX_free;
  ossl_CT_POLICY_EVAL_CTX_get0_cert_t ossl_CT_POLICY_EVAL_CTX_get0_cert;
  ossl_CT_POLICY_EVAL_CTX_set1_cert_t ossl_CT_POLICY_EVAL_CTX_set1_cert;
  ossl_CT_POLICY_EVAL_CTX_get0_issuer_t ossl_CT_POLICY_EVAL_CTX_get0_issuer;
  ossl_CT_POLICY_EVAL_CTX_set1_issuer_t ossl_CT_POLICY_EVAL_CTX_set1_issuer;
  ossl_CT_POLICY_EVAL_CTX_get0_log_store_t ossl_CT_POLICY_EVAL_CTX_get0_log_store;
  ossl_CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE_t ossl_CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE;
  ossl_CT_POLICY_EVAL_CTX_get_time_t ossl_CT_POLICY_EVAL_CTX_get_time;
  ossl_CT_POLICY_EVAL_CTX_set_time_t ossl_CT_POLICY_EVAL_CTX_set_time;
  ossl_SCT_new_t ossl_SCT_new;
  ossl_SCT_new_from_base64_t ossl_SCT_new_from_base64;
  ossl_SCT_free_t ossl_SCT_free;
  ossl_SCT_LIST_free_t ossl_SCT_LIST_free;
  ossl_SCT_get_version_t ossl_SCT_get_version;
  ossl_SCT_set_version_t ossl_SCT_set_version;
  ossl_SCT_get_log_entry_type_t ossl_SCT_get_log_entry_type;
  ossl_SCT_set_log_entry_type_t ossl_SCT_set_log_entry_type;
  ossl_SCT_get0_log_id_t ossl_SCT_get0_log_id;
  ossl_SCT_set0_log_id_t ossl_SCT_set0_log_id;
  ossl_SCT_set1_log_id_t ossl_SCT_set1_log_id;
  ossl_SCT_get_timestamp_t ossl_SCT_get_timestamp;
  ossl_SCT_set_timestamp_t ossl_SCT_set_timestamp;
  ossl_SCT_get_signature_nid_t ossl_SCT_get_signature_nid;
  ossl_SCT_set_signature_nid_t ossl_SCT_set_signature_nid;
  ossl_SCT_get0_extensions_t ossl_SCT_get0_extensions;
  ossl_SCT_set0_extensions_t ossl_SCT_set0_extensions;
  ossl_SCT_set1_extensions_t ossl_SCT_set1_extensions;
  ossl_SCT_get0_signature_t ossl_SCT_get0_signature;
  ossl_SCT_set0_signature_t ossl_SCT_set0_signature;
  ossl_SCT_set1_signature_t ossl_SCT_set1_signature;
  ossl_SCT_get_source_t ossl_SCT_get_source;
  ossl_SCT_set_source_t ossl_SCT_set_source;
  ossl_SCT_validation_status_string_t ossl_SCT_validation_status_string;
  ossl_SCT_print_t ossl_SCT_print;
  ossl_SCT_LIST_print_t ossl_SCT_LIST_print;
  ossl_SCT_get_validation_status_t ossl_SCT_get_validation_status;
  ossl_SCT_validate_t ossl_SCT_validate;
  ossl_SCT_LIST_validate_t ossl_SCT_LIST_validate;
  ossl_i2o_SCT_LIST_t ossl_i2o_SCT_LIST;
  ossl_o2i_SCT_LIST_t ossl_o2i_SCT_LIST;
  ossl_i2d_SCT_LIST_t ossl_i2d_SCT_LIST;
  ossl_d2i_SCT_LIST_t ossl_d2i_SCT_LIST;
  ossl_i2o_SCT_t ossl_i2o_SCT;
  ossl_o2i_SCT_t ossl_o2i_SCT;
  ossl_CTLOG_new_ex_t ossl_CTLOG_new_ex;
  ossl_CTLOG_new_t ossl_CTLOG_new;
  ossl_CTLOG_new_from_base64_ex_t ossl_CTLOG_new_from_base64_ex;
  ossl_CTLOG_new_from_base64_t ossl_CTLOG_new_from_base64;
  ossl_CTLOG_free_t ossl_CTLOG_free;
  ossl_CTLOG_get0_name_t ossl_CTLOG_get0_name;
  ossl_CTLOG_get0_log_id_t ossl_CTLOG_get0_log_id;
  ossl_CTLOG_get0_public_key_t ossl_CTLOG_get0_public_key;
  ossl_CTLOG_STORE_new_ex_t ossl_CTLOG_STORE_new_ex;
  ossl_CTLOG_STORE_new_t ossl_CTLOG_STORE_new;
  ossl_CTLOG_STORE_free_t ossl_CTLOG_STORE_free;
  ossl_CTLOG_STORE_get0_log_by_id_t ossl_CTLOG_STORE_get0_log_by_id;
  ossl_CTLOG_STORE_load_file_t ossl_CTLOG_STORE_load_file;
  ossl_CTLOG_STORE_load_default_file_t ossl_CTLOG_STORE_load_default_file;
  ossl_OSSL_DECODER_fetch_t ossl_OSSL_DECODER_fetch;
  ossl_OSSL_DECODER_up_ref_t ossl_OSSL_DECODER_up_ref;
  ossl_OSSL_DECODER_free_t ossl_OSSL_DECODER_free;
  ossl_OSSL_DECODER_get0_provider_t ossl_OSSL_DECODER_get0_provider;
  ossl_OSSL_DECODER_get0_properties_t ossl_OSSL_DECODER_get0_properties;
  ossl_OSSL_DECODER_get0_name_t ossl_OSSL_DECODER_get0_name;
  ossl_OSSL_DECODER_get0_description_t ossl_OSSL_DECODER_get0_description;
  ossl_OSSL_DECODER_is_a_t ossl_OSSL_DECODER_is_a;
  ossl_OSSL_DECODER_do_all_provided_t ossl_OSSL_DECODER_do_all_provided;
  ossl_OSSL_DECODER_names_do_all_t ossl_OSSL_DECODER_names_do_all;
  ossl_OSSL_DECODER_gettable_params_t ossl_OSSL_DECODER_gettable_params;
  ossl_OSSL_DECODER_get_params_t ossl_OSSL_DECODER_get_params;
  ossl_OSSL_DECODER_settable_ctx_params_t ossl_OSSL_DECODER_settable_ctx_params;
  ossl_OSSL_DECODER_CTX_new_t ossl_OSSL_DECODER_CTX_new;
  ossl_OSSL_DECODER_CTX_set_params_t ossl_OSSL_DECODER_CTX_set_params;
  ossl_OSSL_DECODER_CTX_free_t ossl_OSSL_DECODER_CTX_free;
  ossl_OSSL_DECODER_CTX_set_passphrase_t ossl_OSSL_DECODER_CTX_set_passphrase;
  ossl_OSSL_DECODER_CTX_set_pem_password_cb_t ossl_OSSL_DECODER_CTX_set_pem_password_cb;
  ossl_OSSL_DECODER_CTX_set_passphrase_cb_t ossl_OSSL_DECODER_CTX_set_passphrase_cb;
  ossl_OSSL_DECODER_CTX_set_passphrase_ui_t ossl_OSSL_DECODER_CTX_set_passphrase_ui;
  ossl_OSSL_DECODER_CTX_set_selection_t ossl_OSSL_DECODER_CTX_set_selection;
  ossl_OSSL_DECODER_CTX_set_input_type_t ossl_OSSL_DECODER_CTX_set_input_type;
  ossl_OSSL_DECODER_CTX_set_input_structure_t ossl_OSSL_DECODER_CTX_set_input_structure;
  ossl_OSSL_DECODER_CTX_add_decoder_t ossl_OSSL_DECODER_CTX_add_decoder;
  ossl_OSSL_DECODER_CTX_add_extra_t ossl_OSSL_DECODER_CTX_add_extra;
  ossl_OSSL_DECODER_CTX_get_num_decoders_t ossl_OSSL_DECODER_CTX_get_num_decoders;
  ossl_OSSL_DECODER_INSTANCE_get_decoder_t ossl_OSSL_DECODER_INSTANCE_get_decoder;
  ossl_OSSL_DECODER_INSTANCE_get_decoder_ctx_t ossl_OSSL_DECODER_INSTANCE_get_decoder_ctx;
  ossl_OSSL_DECODER_INSTANCE_get_input_type_t ossl_OSSL_DECODER_INSTANCE_get_input_type;
  ossl_OSSL_DECODER_INSTANCE_get_input_structure_t ossl_OSSL_DECODER_INSTANCE_get_input_structure;
  ossl_OSSL_DECODER_CTX_set_construct_t ossl_OSSL_DECODER_CTX_set_construct;
  ossl_OSSL_DECODER_CTX_set_construct_data_t ossl_OSSL_DECODER_CTX_set_construct_data;
  ossl_OSSL_DECODER_CTX_set_cleanup_t ossl_OSSL_DECODER_CTX_set_cleanup;
  ossl_OSSL_DECODER_CTX_get_construct_t ossl_OSSL_DECODER_CTX_get_construct;
  ossl_OSSL_DECODER_CTX_get_construct_data_t ossl_OSSL_DECODER_CTX_get_construct_data;
  ossl_OSSL_DECODER_CTX_get_cleanup_t ossl_OSSL_DECODER_CTX_get_cleanup;
  ossl_OSSL_DECODER_export_t ossl_OSSL_DECODER_export;
  ossl_OSSL_DECODER_from_bio_t ossl_OSSL_DECODER_from_bio;
  ossl_OSSL_DECODER_from_fp_t ossl_OSSL_DECODER_from_fp;
  ossl_OSSL_DECODER_from_data_t ossl_OSSL_DECODER_from_data;
  ossl_OSSL_DECODER_CTX_new_for_pkey_t ossl_OSSL_DECODER_CTX_new_for_pkey;
  ossl_DES_options_t ossl_DES_options;
  ossl_DES_ecb3_encrypt_t ossl_DES_ecb3_encrypt;
  ossl_DES_cbc_cksum_t ossl_DES_cbc_cksum;
  ossl_DES_cbc_encrypt_t ossl_DES_cbc_encrypt;
  ossl_DES_ncbc_encrypt_t ossl_DES_ncbc_encrypt;
  ossl_DES_xcbc_encrypt_t ossl_DES_xcbc_encrypt;
  ossl_DES_cfb_encrypt_t ossl_DES_cfb_encrypt;
  ossl_DES_ecb_encrypt_t ossl_DES_ecb_encrypt;
  ossl_DES_encrypt1_t ossl_DES_encrypt1;
  ossl_DES_encrypt2_t ossl_DES_encrypt2;
  ossl_DES_encrypt3_t ossl_DES_encrypt3;
  ossl_DES_decrypt3_t ossl_DES_decrypt3;
  ossl_DES_ede3_cbc_encrypt_t ossl_DES_ede3_cbc_encrypt;
  ossl_DES_ede3_cfb64_encrypt_t ossl_DES_ede3_cfb64_encrypt;
  ossl_DES_ede3_cfb_encrypt_t ossl_DES_ede3_cfb_encrypt;
  ossl_DES_ede3_ofb64_encrypt_t ossl_DES_ede3_ofb64_encrypt;
  ossl_DES_fcrypt_t ossl_DES_fcrypt;
  ossl_DES_crypt_t ossl_DES_crypt;
  ossl_DES_ofb_encrypt_t ossl_DES_ofb_encrypt;
  ossl_DES_pcbc_encrypt_t ossl_DES_pcbc_encrypt;
  ossl_DES_quad_cksum_t ossl_DES_quad_cksum;
  ossl_DES_random_key_t ossl_DES_random_key;
  ossl_DES_set_odd_parity_t ossl_DES_set_odd_parity;
  ossl_DES_check_key_parity_t ossl_DES_check_key_parity;
  ossl_DES_is_weak_key_t ossl_DES_is_weak_key;
  ossl_DES_set_key_t ossl_DES_set_key;
  ossl_DES_key_sched_t ossl_DES_key_sched;
  ossl_DES_set_key_checked_t ossl_DES_set_key_checked;
  ossl_DES_set_key_unchecked_t ossl_DES_set_key_unchecked;
  ossl_DES_string_to_key_t ossl_DES_string_to_key;
  ossl_DES_string_to_2keys_t ossl_DES_string_to_2keys;
  ossl_DES_cfb64_encrypt_t ossl_DES_cfb64_encrypt;
  ossl_DES_ofb64_encrypt_t ossl_DES_ofb64_encrypt;
  ossl__openssl_ebcdic2ascii_t ossl__openssl_ebcdic2ascii;
  ossl__openssl_ascii2ebcdic_t ossl__openssl_ascii2ebcdic;
  ossl_OSSL_ENCODER_fetch_t ossl_OSSL_ENCODER_fetch;
  ossl_OSSL_ENCODER_up_ref_t ossl_OSSL_ENCODER_up_ref;
  ossl_OSSL_ENCODER_free_t ossl_OSSL_ENCODER_free;
  ossl_OSSL_ENCODER_get0_provider_t ossl_OSSL_ENCODER_get0_provider;
  ossl_OSSL_ENCODER_get0_properties_t ossl_OSSL_ENCODER_get0_properties;
  ossl_OSSL_ENCODER_get0_name_t ossl_OSSL_ENCODER_get0_name;
  ossl_OSSL_ENCODER_get0_description_t ossl_OSSL_ENCODER_get0_description;
  ossl_OSSL_ENCODER_is_a_t ossl_OSSL_ENCODER_is_a;
  ossl_OSSL_ENCODER_do_all_provided_t ossl_OSSL_ENCODER_do_all_provided;
  ossl_OSSL_ENCODER_names_do_all_t ossl_OSSL_ENCODER_names_do_all;
  ossl_OSSL_ENCODER_gettable_params_t ossl_OSSL_ENCODER_gettable_params;
  ossl_OSSL_ENCODER_get_params_t ossl_OSSL_ENCODER_get_params;
  ossl_OSSL_ENCODER_settable_ctx_params_t ossl_OSSL_ENCODER_settable_ctx_params;
  ossl_OSSL_ENCODER_CTX_new_t ossl_OSSL_ENCODER_CTX_new;
  ossl_OSSL_ENCODER_CTX_set_params_t ossl_OSSL_ENCODER_CTX_set_params;
  ossl_OSSL_ENCODER_CTX_free_t ossl_OSSL_ENCODER_CTX_free;
  ossl_OSSL_ENCODER_CTX_set_passphrase_t ossl_OSSL_ENCODER_CTX_set_passphrase;
  ossl_OSSL_ENCODER_CTX_set_pem_password_cb_t ossl_OSSL_ENCODER_CTX_set_pem_password_cb;
  ossl_OSSL_ENCODER_CTX_set_passphrase_cb_t ossl_OSSL_ENCODER_CTX_set_passphrase_cb;
  ossl_OSSL_ENCODER_CTX_set_passphrase_ui_t ossl_OSSL_ENCODER_CTX_set_passphrase_ui;
  ossl_OSSL_ENCODER_CTX_set_cipher_t ossl_OSSL_ENCODER_CTX_set_cipher;
  ossl_OSSL_ENCODER_CTX_set_selection_t ossl_OSSL_ENCODER_CTX_set_selection;
  ossl_OSSL_ENCODER_CTX_set_output_type_t ossl_OSSL_ENCODER_CTX_set_output_type;
  ossl_OSSL_ENCODER_CTX_set_output_structure_t ossl_OSSL_ENCODER_CTX_set_output_structure;
  ossl_OSSL_ENCODER_CTX_add_encoder_t ossl_OSSL_ENCODER_CTX_add_encoder;
  ossl_OSSL_ENCODER_CTX_add_extra_t ossl_OSSL_ENCODER_CTX_add_extra;
  ossl_OSSL_ENCODER_CTX_get_num_encoders_t ossl_OSSL_ENCODER_CTX_get_num_encoders;
  ossl_OSSL_ENCODER_INSTANCE_get_encoder_t ossl_OSSL_ENCODER_INSTANCE_get_encoder;
  ossl_OSSL_ENCODER_INSTANCE_get_encoder_ctx_t ossl_OSSL_ENCODER_INSTANCE_get_encoder_ctx;
  ossl_OSSL_ENCODER_INSTANCE_get_output_type_t ossl_OSSL_ENCODER_INSTANCE_get_output_type;
  ossl_OSSL_ENCODER_INSTANCE_get_output_structure_t ossl_OSSL_ENCODER_INSTANCE_get_output_structure;
  ossl_OSSL_ENCODER_CTX_set_construct_t ossl_OSSL_ENCODER_CTX_set_construct;
  ossl_OSSL_ENCODER_CTX_set_construct_data_t ossl_OSSL_ENCODER_CTX_set_construct_data;
  ossl_OSSL_ENCODER_CTX_set_cleanup_t ossl_OSSL_ENCODER_CTX_set_cleanup;
  ossl_OSSL_ENCODER_to_bio_t ossl_OSSL_ENCODER_to_bio;
  ossl_OSSL_ENCODER_to_fp_t ossl_OSSL_ENCODER_to_fp;
  ossl_OSSL_ENCODER_to_data_t ossl_OSSL_ENCODER_to_data;
  ossl_OSSL_ENCODER_CTX_new_for_pkey_t ossl_OSSL_ENCODER_CTX_new_for_pkey;
  ossl_RAND_set_rand_method_t ossl_RAND_set_rand_method;
  ossl_RAND_get_rand_method_t ossl_RAND_get_rand_method;
  ossl_RAND_set_rand_engine_t ossl_RAND_set_rand_engine;
  ossl_RAND_OpenSSL_t ossl_RAND_OpenSSL;
  ossl_RAND_bytes_t ossl_RAND_bytes;
  ossl_RAND_priv_bytes_t ossl_RAND_priv_bytes;
  ossl_RAND_priv_bytes_ex_t ossl_RAND_priv_bytes_ex;
  ossl_RAND_bytes_ex_t ossl_RAND_bytes_ex;
  ossl_RAND_pseudo_bytes_t ossl_RAND_pseudo_bytes;
  ossl_RAND_get0_primary_t ossl_RAND_get0_primary;
  ossl_RAND_get0_public_t ossl_RAND_get0_public;
  ossl_RAND_get0_private_t ossl_RAND_get0_private;
  ossl_RAND_set_DRBG_type_t ossl_RAND_set_DRBG_type;
  ossl_RAND_set_seed_source_type_t ossl_RAND_set_seed_source_type;
  ossl_RAND_seed_t ossl_RAND_seed;
  ossl_RAND_keep_random_devices_open_t ossl_RAND_keep_random_devices_open;
  ossl_RAND_add_t ossl_RAND_add;
  ossl_RAND_load_file_t ossl_RAND_load_file;
  ossl_RAND_write_file_t ossl_RAND_write_file;
  ossl_RAND_file_name_t ossl_RAND_file_name;
  ossl_RAND_status_t ossl_RAND_status;
  ossl_RAND_poll_t ossl_RAND_poll;
  ossl_PEM_get_EVP_CIPHER_INFO_t ossl_PEM_get_EVP_CIPHER_INFO;
  ossl_PEM_do_header_t ossl_PEM_do_header;
  ossl_PEM_read_bio_t ossl_PEM_read_bio;
  ossl_PEM_read_bio_ex_t ossl_PEM_read_bio_ex;
  ossl_PEM_bytes_read_bio_secmem_t ossl_PEM_bytes_read_bio_secmem;
  ossl_PEM_write_bio_t ossl_PEM_write_bio;
  ossl_PEM_bytes_read_bio_t ossl_PEM_bytes_read_bio;
  ossl_PEM_ASN1_read_bio_t ossl_PEM_ASN1_read_bio;
  ossl_PEM_ASN1_write_bio_t ossl_PEM_ASN1_write_bio;
  ossl_PEM_X509_INFO_read_bio_t ossl_PEM_X509_INFO_read_bio;
  ossl_PEM_X509_INFO_read_bio_ex_t ossl_PEM_X509_INFO_read_bio_ex;
  ossl_PEM_X509_INFO_write_bio_t ossl_PEM_X509_INFO_write_bio;
  ossl_PEM_read_t ossl_PEM_read;
  ossl_PEM_write_t ossl_PEM_write;
  ossl_PEM_ASN1_read_t ossl_PEM_ASN1_read;
  ossl_PEM_ASN1_write_t ossl_PEM_ASN1_write;
  ossl_PEM_X509_INFO_read_t ossl_PEM_X509_INFO_read;
  ossl_PEM_X509_INFO_read_ex_t ossl_PEM_X509_INFO_read_ex;
  ossl_PEM_SignInit_t ossl_PEM_SignInit;
  ossl_PEM_SignUpdate_t ossl_PEM_SignUpdate;
  ossl_PEM_SignFinal_t ossl_PEM_SignFinal;
  ossl_PEM_def_callback_t ossl_PEM_def_callback;
  ossl_PEM_proc_type_t ossl_PEM_proc_type;
  ossl_PEM_dek_info_t ossl_PEM_dek_info;
  ossl_PEM_read_bio_X509_t ossl_PEM_read_bio_X509;
  ossl_PEM_read_X509_t ossl_PEM_read_X509;
  ossl_PEM_write_bio_X509_t ossl_PEM_write_bio_X509;
  ossl_PEM_write_X509_t ossl_PEM_write_X509;
  ossl_PEM_read_bio_X509_AUX_t ossl_PEM_read_bio_X509_AUX;
  ossl_PEM_read_X509_AUX_t ossl_PEM_read_X509_AUX;
  ossl_PEM_write_bio_X509_AUX_t ossl_PEM_write_bio_X509_AUX;
  ossl_PEM_write_X509_AUX_t ossl_PEM_write_X509_AUX;
  ossl_PEM_read_bio_X509_REQ_t ossl_PEM_read_bio_X509_REQ;
  ossl_PEM_read_X509_REQ_t ossl_PEM_read_X509_REQ;
  ossl_PEM_write_bio_X509_REQ_t ossl_PEM_write_bio_X509_REQ;
  ossl_PEM_write_X509_REQ_t ossl_PEM_write_X509_REQ;
  ossl_PEM_write_bio_X509_REQ_NEW_t ossl_PEM_write_bio_X509_REQ_NEW;
  ossl_PEM_write_X509_REQ_NEW_t ossl_PEM_write_X509_REQ_NEW;
  ossl_PEM_read_bio_X509_CRL_t ossl_PEM_read_bio_X509_CRL;
  ossl_PEM_read_X509_CRL_t ossl_PEM_read_X509_CRL;
  ossl_PEM_write_bio_X509_CRL_t ossl_PEM_write_bio_X509_CRL;
  ossl_PEM_write_X509_CRL_t ossl_PEM_write_X509_CRL;
  ossl_PEM_read_bio_X509_PUBKEY_t ossl_PEM_read_bio_X509_PUBKEY;
  ossl_PEM_read_X509_PUBKEY_t ossl_PEM_read_X509_PUBKEY;
  ossl_PEM_write_bio_X509_PUBKEY_t ossl_PEM_write_bio_X509_PUBKEY;
  ossl_PEM_write_X509_PUBKEY_t ossl_PEM_write_X509_PUBKEY;
  ossl_PEM_read_bio_PKCS7_t ossl_PEM_read_bio_PKCS7;
  ossl_PEM_read_PKCS7_t ossl_PEM_read_PKCS7;
  ossl_PEM_write_bio_PKCS7_t ossl_PEM_write_bio_PKCS7;
  ossl_PEM_write_PKCS7_t ossl_PEM_write_PKCS7;
  ossl_PEM_read_bio_NETSCAPE_CERT_SEQUENCE_t ossl_PEM_read_bio_NETSCAPE_CERT_SEQUENCE;
  ossl_PEM_read_NETSCAPE_CERT_SEQUENCE_t ossl_PEM_read_NETSCAPE_CERT_SEQUENCE;
  ossl_PEM_write_bio_NETSCAPE_CERT_SEQUENCE_t ossl_PEM_write_bio_NETSCAPE_CERT_SEQUENCE;
  ossl_PEM_write_NETSCAPE_CERT_SEQUENCE_t ossl_PEM_write_NETSCAPE_CERT_SEQUENCE;
  ossl_PEM_read_bio_PKCS8_t ossl_PEM_read_bio_PKCS8;
  ossl_PEM_read_PKCS8_t ossl_PEM_read_PKCS8;
  ossl_PEM_write_bio_PKCS8_t ossl_PEM_write_bio_PKCS8;
  ossl_PEM_write_PKCS8_t ossl_PEM_write_PKCS8;
  ossl_PEM_read_bio_PKCS8_PRIV_KEY_INFO_t ossl_PEM_read_bio_PKCS8_PRIV_KEY_INFO;
  ossl_PEM_read_PKCS8_PRIV_KEY_INFO_t ossl_PEM_read_PKCS8_PRIV_KEY_INFO;
  ossl_PEM_write_bio_PKCS8_PRIV_KEY_INFO_t ossl_PEM_write_bio_PKCS8_PRIV_KEY_INFO;
  ossl_PEM_write_PKCS8_PRIV_KEY_INFO_t ossl_PEM_write_PKCS8_PRIV_KEY_INFO;
  ossl_PEM_read_bio_RSAPrivateKey_t ossl_PEM_read_bio_RSAPrivateKey;
  ossl_PEM_read_RSAPrivateKey_t ossl_PEM_read_RSAPrivateKey;
  ossl_PEM_write_bio_RSAPrivateKey_t ossl_PEM_write_bio_RSAPrivateKey;
  ossl_PEM_write_RSAPrivateKey_t ossl_PEM_write_RSAPrivateKey;
  ossl_PEM_read_bio_RSAPublicKey_t ossl_PEM_read_bio_RSAPublicKey;
  ossl_PEM_read_RSAPublicKey_t ossl_PEM_read_RSAPublicKey;
  ossl_PEM_write_bio_RSAPublicKey_t ossl_PEM_write_bio_RSAPublicKey;
  ossl_PEM_write_RSAPublicKey_t ossl_PEM_write_RSAPublicKey;
  ossl_PEM_read_bio_RSA_PUBKEY_t ossl_PEM_read_bio_RSA_PUBKEY;
  ossl_PEM_read_RSA_PUBKEY_t ossl_PEM_read_RSA_PUBKEY;
  ossl_PEM_write_bio_RSA_PUBKEY_t ossl_PEM_write_bio_RSA_PUBKEY;
  ossl_PEM_write_RSA_PUBKEY_t ossl_PEM_write_RSA_PUBKEY;
  ossl_PEM_read_bio_DSAPrivateKey_t ossl_PEM_read_bio_DSAPrivateKey;
  ossl_PEM_read_DSAPrivateKey_t ossl_PEM_read_DSAPrivateKey;
  ossl_PEM_write_bio_DSAPrivateKey_t ossl_PEM_write_bio_DSAPrivateKey;
  ossl_PEM_write_DSAPrivateKey_t ossl_PEM_write_DSAPrivateKey;
  ossl_PEM_read_bio_DSA_PUBKEY_t ossl_PEM_read_bio_DSA_PUBKEY;
  ossl_PEM_read_DSA_PUBKEY_t ossl_PEM_read_DSA_PUBKEY;
  ossl_PEM_write_bio_DSA_PUBKEY_t ossl_PEM_write_bio_DSA_PUBKEY;
  ossl_PEM_write_DSA_PUBKEY_t ossl_PEM_write_DSA_PUBKEY;
  ossl_PEM_read_bio_DSAparams_t ossl_PEM_read_bio_DSAparams;
  ossl_PEM_read_DSAparams_t ossl_PEM_read_DSAparams;
  ossl_PEM_write_bio_DSAparams_t ossl_PEM_write_bio_DSAparams;
  ossl_PEM_write_DSAparams_t ossl_PEM_write_DSAparams;
  ossl_PEM_read_bio_ECPKParameters_t ossl_PEM_read_bio_ECPKParameters;
  ossl_PEM_read_ECPKParameters_t ossl_PEM_read_ECPKParameters;
  ossl_PEM_write_bio_ECPKParameters_t ossl_PEM_write_bio_ECPKParameters;
  ossl_PEM_write_ECPKParameters_t ossl_PEM_write_ECPKParameters;
  ossl_PEM_read_bio_ECPrivateKey_t ossl_PEM_read_bio_ECPrivateKey;
  ossl_PEM_read_ECPrivateKey_t ossl_PEM_read_ECPrivateKey;
  ossl_PEM_write_bio_ECPrivateKey_t ossl_PEM_write_bio_ECPrivateKey;
  ossl_PEM_write_ECPrivateKey_t ossl_PEM_write_ECPrivateKey;
  ossl_PEM_read_bio_EC_PUBKEY_t ossl_PEM_read_bio_EC_PUBKEY;
  ossl_PEM_read_EC_PUBKEY_t ossl_PEM_read_EC_PUBKEY;
  ossl_PEM_write_bio_EC_PUBKEY_t ossl_PEM_write_bio_EC_PUBKEY;
  ossl_PEM_write_EC_PUBKEY_t ossl_PEM_write_EC_PUBKEY;
  ossl_PEM_read_bio_DHparams_t ossl_PEM_read_bio_DHparams;
  ossl_PEM_read_DHparams_t ossl_PEM_read_DHparams;
  ossl_PEM_write_bio_DHparams_t ossl_PEM_write_bio_DHparams;
  ossl_PEM_write_DHparams_t ossl_PEM_write_DHparams;
  ossl_PEM_write_bio_DHxparams_t ossl_PEM_write_bio_DHxparams;
  ossl_PEM_write_DHxparams_t ossl_PEM_write_DHxparams;
  ossl_PEM_read_bio_PrivateKey_t ossl_PEM_read_bio_PrivateKey;
  ossl_PEM_read_bio_PrivateKey_ex_t ossl_PEM_read_bio_PrivateKey_ex;
  ossl_PEM_read_PrivateKey_t ossl_PEM_read_PrivateKey;
  ossl_PEM_read_PrivateKey_ex_t ossl_PEM_read_PrivateKey_ex;
  ossl_PEM_write_bio_PrivateKey_t ossl_PEM_write_bio_PrivateKey;
  ossl_PEM_write_bio_PrivateKey_ex_t ossl_PEM_write_bio_PrivateKey_ex;
  ossl_PEM_write_PrivateKey_t ossl_PEM_write_PrivateKey;
  ossl_PEM_write_PrivateKey_ex_t ossl_PEM_write_PrivateKey_ex;
  ossl_PEM_read_bio_PUBKEY_t ossl_PEM_read_bio_PUBKEY;
  ossl_PEM_read_bio_PUBKEY_ex_t ossl_PEM_read_bio_PUBKEY_ex;
  ossl_PEM_read_PUBKEY_t ossl_PEM_read_PUBKEY;
  ossl_PEM_read_PUBKEY_ex_t ossl_PEM_read_PUBKEY_ex;
  ossl_PEM_write_bio_PUBKEY_t ossl_PEM_write_bio_PUBKEY;
  ossl_PEM_write_bio_PUBKEY_ex_t ossl_PEM_write_bio_PUBKEY_ex;
  ossl_PEM_write_PUBKEY_t ossl_PEM_write_PUBKEY;
  ossl_PEM_write_PUBKEY_ex_t ossl_PEM_write_PUBKEY_ex;
  ossl_PEM_write_bio_PrivateKey_traditional_t ossl_PEM_write_bio_PrivateKey_traditional;
  ossl_PEM_write_bio_PKCS8PrivateKey_nid_t ossl_PEM_write_bio_PKCS8PrivateKey_nid;
  ossl_PEM_write_bio_PKCS8PrivateKey_t ossl_PEM_write_bio_PKCS8PrivateKey;
  ossl_i2d_PKCS8PrivateKey_bio_t ossl_i2d_PKCS8PrivateKey_bio;
  ossl_i2d_PKCS8PrivateKey_nid_bio_t ossl_i2d_PKCS8PrivateKey_nid_bio;
  ossl_d2i_PKCS8PrivateKey_bio_t ossl_d2i_PKCS8PrivateKey_bio;
  ossl_i2d_PKCS8PrivateKey_fp_t ossl_i2d_PKCS8PrivateKey_fp;
  ossl_i2d_PKCS8PrivateKey_nid_fp_t ossl_i2d_PKCS8PrivateKey_nid_fp;
  ossl_PEM_write_PKCS8PrivateKey_nid_t ossl_PEM_write_PKCS8PrivateKey_nid;
  ossl_d2i_PKCS8PrivateKey_fp_t ossl_d2i_PKCS8PrivateKey_fp;
  ossl_PEM_write_PKCS8PrivateKey_t ossl_PEM_write_PKCS8PrivateKey;
  ossl_PEM_read_bio_Parameters_ex_t ossl_PEM_read_bio_Parameters_ex;
  ossl_PEM_read_bio_Parameters_t ossl_PEM_read_bio_Parameters;
  ossl_PEM_write_bio_Parameters_t ossl_PEM_write_bio_Parameters;
  ossl_b2i_PrivateKey_t ossl_b2i_PrivateKey;
  ossl_b2i_PublicKey_t ossl_b2i_PublicKey;
  ossl_b2i_PrivateKey_bio_t ossl_b2i_PrivateKey_bio;
  ossl_b2i_PublicKey_bio_t ossl_b2i_PublicKey_bio;
  ossl_i2b_PrivateKey_bio_t ossl_i2b_PrivateKey_bio;
  ossl_i2b_PublicKey_bio_t ossl_i2b_PublicKey_bio;
  ossl_b2i_PVK_bio_t ossl_b2i_PVK_bio;
  ossl_b2i_PVK_bio_ex_t ossl_b2i_PVK_bio_ex;
  ossl_i2b_PVK_bio_t ossl_i2b_PVK_bio;
  ossl_i2b_PVK_bio_ex_t ossl_i2b_PVK_bio_ex;
  ossl_UI_new_t ossl_UI_new;
  ossl_UI_new_method_t ossl_UI_new_method;
  ossl_UI_free_t ossl_UI_free;
  ossl_UI_add_input_string_t ossl_UI_add_input_string;
  ossl_UI_dup_input_string_t ossl_UI_dup_input_string;
  ossl_UI_add_verify_string_t ossl_UI_add_verify_string;
  ossl_UI_dup_verify_string_t ossl_UI_dup_verify_string;
  ossl_UI_add_input_boolean_t ossl_UI_add_input_boolean;
  ossl_UI_dup_input_boolean_t ossl_UI_dup_input_boolean;
  ossl_UI_add_info_string_t ossl_UI_add_info_string;
  ossl_UI_dup_info_string_t ossl_UI_dup_info_string;
  ossl_UI_add_error_string_t ossl_UI_add_error_string;
  ossl_UI_dup_error_string_t ossl_UI_dup_error_string;
  ossl_UI_construct_prompt_t ossl_UI_construct_prompt;
  ossl_UI_add_user_data_t ossl_UI_add_user_data;
  ossl_UI_dup_user_data_t ossl_UI_dup_user_data;
  ossl_UI_get0_user_data_t ossl_UI_get0_user_data;
  ossl_UI_get0_result_t ossl_UI_get0_result;
  ossl_UI_get_result_length_t ossl_UI_get_result_length;
  ossl_UI_process_t ossl_UI_process;
  ossl_UI_ctrl_t ossl_UI_ctrl;
  ossl_UI_set_ex_data_t ossl_UI_set_ex_data;
  ossl_UI_get_ex_data_t ossl_UI_get_ex_data;
  ossl_UI_set_default_method_t ossl_UI_set_default_method;
  ossl_UI_get_default_method_t ossl_UI_get_default_method;
  ossl_UI_get_method_t ossl_UI_get_method;
  ossl_UI_set_method_t ossl_UI_set_method;
  ossl_UI_OpenSSL_t ossl_UI_OpenSSL;
  ossl_UI_null_t ossl_UI_null;
  ossl_UI_create_method_t ossl_UI_create_method;
  ossl_UI_destroy_method_t ossl_UI_destroy_method;
  ossl_UI_method_set_opener_t ossl_UI_method_set_opener;
  ossl_UI_method_set_writer_t ossl_UI_method_set_writer;
  ossl_UI_method_set_flusher_t ossl_UI_method_set_flusher;
  ossl_UI_method_set_reader_t ossl_UI_method_set_reader;
  ossl_UI_method_set_closer_t ossl_UI_method_set_closer;
  ossl_UI_method_set_data_duplicator_t ossl_UI_method_set_data_duplicator;
  ossl_UI_method_set_prompt_constructor_t ossl_UI_method_set_prompt_constructor;
  ossl_UI_method_set_ex_data_t ossl_UI_method_set_ex_data;
  ossl_UI_method_get_opener_t ossl_UI_method_get_opener;
  ossl_UI_method_get_writer_t ossl_UI_method_get_writer;
  ossl_UI_method_get_flusher_t ossl_UI_method_get_flusher;
  ossl_UI_method_get_reader_t ossl_UI_method_get_reader;
  ossl_UI_method_get_closer_t ossl_UI_method_get_closer;
  ossl_UI_method_get_prompt_constructor_t ossl_UI_method_get_prompt_constructor;
  ossl_UI_method_get_data_duplicator_t ossl_UI_method_get_data_duplicator;
  ossl_UI_method_get_data_destructor_t ossl_UI_method_get_data_destructor;
  ossl_UI_method_get_ex_data_t ossl_UI_method_get_ex_data;
  ossl_UI_get_string_type_t ossl_UI_get_string_type;
  ossl_UI_get_input_flags_t ossl_UI_get_input_flags;
  ossl_UI_get0_output_string_t ossl_UI_get0_output_string;
  ossl_UI_get0_action_string_t ossl_UI_get0_action_string;
  ossl_UI_get0_result_string_t ossl_UI_get0_result_string;
  ossl_UI_get_result_string_length_t ossl_UI_get_result_string_length;
  ossl_UI_get0_test_string_t ossl_UI_get0_test_string;
  ossl_UI_get_result_minsize_t ossl_UI_get_result_minsize;
  ossl_UI_get_result_maxsize_t ossl_UI_get_result_maxsize;
  ossl_UI_set_result_t ossl_UI_set_result;
  ossl_UI_set_result_ex_t ossl_UI_set_result_ex;
  ossl_UI_UTIL_read_pw_string_t ossl_UI_UTIL_read_pw_string;
  ossl_UI_UTIL_read_pw_t ossl_UI_UTIL_read_pw;
  ossl_UI_UTIL_wrap_read_pem_callback_t ossl_UI_UTIL_wrap_read_pem_callback;
  ossl_ERR_new_t ossl_ERR_new;
  ossl_ERR_set_debug_t ossl_ERR_set_debug;
  ossl_ERR_set_error_t ossl_ERR_set_error;
  ossl_ERR_vset_error_t ossl_ERR_vset_error;
  ossl_ERR_set_error_data_t ossl_ERR_set_error_data;
  ossl_ERR_get_error_t ossl_ERR_get_error;
  ossl_ERR_get_error_all_t ossl_ERR_get_error_all;
  ossl_ERR_get_error_line_t ossl_ERR_get_error_line;
  ossl_ERR_get_error_line_data_t ossl_ERR_get_error_line_data;
  ossl_ERR_peek_error_t ossl_ERR_peek_error;
  ossl_ERR_peek_error_line_t ossl_ERR_peek_error_line;
  ossl_ERR_peek_error_func_t ossl_ERR_peek_error_func;
  ossl_ERR_peek_error_data_t ossl_ERR_peek_error_data;
  ossl_ERR_peek_error_all_t ossl_ERR_peek_error_all;
  ossl_ERR_peek_error_line_data_t ossl_ERR_peek_error_line_data;
  ossl_ERR_peek_last_error_t ossl_ERR_peek_last_error;
  ossl_ERR_peek_last_error_line_t ossl_ERR_peek_last_error_line;
  ossl_ERR_peek_last_error_func_t ossl_ERR_peek_last_error_func;
  ossl_ERR_peek_last_error_data_t ossl_ERR_peek_last_error_data;
  ossl_ERR_peek_last_error_all_t ossl_ERR_peek_last_error_all;
  ossl_ERR_peek_last_error_line_data_t ossl_ERR_peek_last_error_line_data;
  ossl_ERR_clear_error_t ossl_ERR_clear_error;
  ossl_ERR_error_string_t ossl_ERR_error_string;
  ossl_ERR_error_string_n_t ossl_ERR_error_string_n;
  ossl_ERR_lib_error_string_t ossl_ERR_lib_error_string;
  ossl_ERR_func_error_string_t ossl_ERR_func_error_string;
  ossl_ERR_reason_error_string_t ossl_ERR_reason_error_string;
  ossl_ERR_print_errors_cb_t ossl_ERR_print_errors_cb;
  ossl_ERR_print_errors_fp_t ossl_ERR_print_errors_fp;
  ossl_ERR_print_errors_t ossl_ERR_print_errors;
  ossl_ERR_add_error_data_t ossl_ERR_add_error_data;
  ossl_ERR_add_error_vdata_t ossl_ERR_add_error_vdata;
  ossl_ERR_add_error_txt_t ossl_ERR_add_error_txt;
  ossl_ERR_add_error_mem_bio_t ossl_ERR_add_error_mem_bio;
  ossl_ERR_load_strings_t ossl_ERR_load_strings;
  ossl_ERR_load_strings_const_t ossl_ERR_load_strings_const;
  ossl_ERR_unload_strings_t ossl_ERR_unload_strings;
  ossl_ERR_remove_thread_state_t ossl_ERR_remove_thread_state;
  ossl_ERR_remove_state_t ossl_ERR_remove_state;
  ossl_ERR_get_state_t ossl_ERR_get_state;
  ossl_ERR_get_next_error_library_t ossl_ERR_get_next_error_library;
  ossl_ERR_set_mark_t ossl_ERR_set_mark;
  ossl_ERR_pop_to_mark_t ossl_ERR_pop_to_mark;
  ossl_ERR_clear_last_mark_t ossl_ERR_clear_last_mark;
  ossl_ENGINE_get_first_t ossl_ENGINE_get_first;
  ossl_ENGINE_get_last_t ossl_ENGINE_get_last;
  ossl_ENGINE_get_next_t ossl_ENGINE_get_next;
  ossl_ENGINE_get_prev_t ossl_ENGINE_get_prev;
  ossl_ENGINE_add_t ossl_ENGINE_add;
  ossl_ENGINE_remove_t ossl_ENGINE_remove;
  ossl_ENGINE_by_id_t ossl_ENGINE_by_id;
  ossl_ENGINE_load_builtin_engines_t ossl_ENGINE_load_builtin_engines;
  ossl_ENGINE_get_table_flags_t ossl_ENGINE_get_table_flags;
  ossl_ENGINE_set_table_flags_t ossl_ENGINE_set_table_flags;
  ossl_ENGINE_register_RSA_t ossl_ENGINE_register_RSA;
  ossl_ENGINE_unregister_RSA_t ossl_ENGINE_unregister_RSA;
  ossl_ENGINE_register_all_RSA_t ossl_ENGINE_register_all_RSA;
  ossl_ENGINE_register_DSA_t ossl_ENGINE_register_DSA;
  ossl_ENGINE_unregister_DSA_t ossl_ENGINE_unregister_DSA;
  ossl_ENGINE_register_all_DSA_t ossl_ENGINE_register_all_DSA;
  ossl_ENGINE_register_EC_t ossl_ENGINE_register_EC;
  ossl_ENGINE_unregister_EC_t ossl_ENGINE_unregister_EC;
  ossl_ENGINE_register_all_EC_t ossl_ENGINE_register_all_EC;
  ossl_ENGINE_register_DH_t ossl_ENGINE_register_DH;
  ossl_ENGINE_unregister_DH_t ossl_ENGINE_unregister_DH;
  ossl_ENGINE_register_all_DH_t ossl_ENGINE_register_all_DH;
  ossl_ENGINE_register_RAND_t ossl_ENGINE_register_RAND;
  ossl_ENGINE_unregister_RAND_t ossl_ENGINE_unregister_RAND;
  ossl_ENGINE_register_all_RAND_t ossl_ENGINE_register_all_RAND;
  ossl_ENGINE_register_ciphers_t ossl_ENGINE_register_ciphers;
  ossl_ENGINE_unregister_ciphers_t ossl_ENGINE_unregister_ciphers;
  ossl_ENGINE_register_all_ciphers_t ossl_ENGINE_register_all_ciphers;
  ossl_ENGINE_register_digests_t ossl_ENGINE_register_digests;
  ossl_ENGINE_unregister_digests_t ossl_ENGINE_unregister_digests;
  ossl_ENGINE_register_all_digests_t ossl_ENGINE_register_all_digests;
  ossl_ENGINE_register_pkey_meths_t ossl_ENGINE_register_pkey_meths;
  ossl_ENGINE_unregister_pkey_meths_t ossl_ENGINE_unregister_pkey_meths;
  ossl_ENGINE_register_all_pkey_meths_t ossl_ENGINE_register_all_pkey_meths;
  ossl_ENGINE_register_pkey_asn1_meths_t ossl_ENGINE_register_pkey_asn1_meths;
  ossl_ENGINE_unregister_pkey_asn1_meths_t ossl_ENGINE_unregister_pkey_asn1_meths;
  ossl_ENGINE_register_all_pkey_asn1_meths_t ossl_ENGINE_register_all_pkey_asn1_meths;
  ossl_ENGINE_register_complete_t ossl_ENGINE_register_complete;
  ossl_ENGINE_register_all_complete_t ossl_ENGINE_register_all_complete;
  ossl_ENGINE_ctrl_t ossl_ENGINE_ctrl;
  ossl_ENGINE_cmd_is_executable_t ossl_ENGINE_cmd_is_executable;
  ossl_ENGINE_ctrl_cmd_t ossl_ENGINE_ctrl_cmd;
  ossl_ENGINE_ctrl_cmd_string_t ossl_ENGINE_ctrl_cmd_string;
  ossl_ENGINE_new_t ossl_ENGINE_new;
  ossl_ENGINE_free_t ossl_ENGINE_free;
  ossl_ENGINE_up_ref_t ossl_ENGINE_up_ref;
  ossl_ENGINE_set_id_t ossl_ENGINE_set_id;
  ossl_ENGINE_set_name_t ossl_ENGINE_set_name;
  ossl_ENGINE_set_RSA_t ossl_ENGINE_set_RSA;
  ossl_ENGINE_set_DSA_t ossl_ENGINE_set_DSA;
  ossl_ENGINE_set_EC_t ossl_ENGINE_set_EC;
  ossl_ENGINE_set_DH_t ossl_ENGINE_set_DH;
  ossl_ENGINE_set_RAND_t ossl_ENGINE_set_RAND;
  ossl_ENGINE_set_destroy_function_t ossl_ENGINE_set_destroy_function;
  ossl_ENGINE_set_init_function_t ossl_ENGINE_set_init_function;
  ossl_ENGINE_set_finish_function_t ossl_ENGINE_set_finish_function;
  ossl_ENGINE_set_ctrl_function_t ossl_ENGINE_set_ctrl_function;
  ossl_ENGINE_set_load_privkey_function_t ossl_ENGINE_set_load_privkey_function;
  ossl_ENGINE_set_load_pubkey_function_t ossl_ENGINE_set_load_pubkey_function;
  ossl_ENGINE_set_load_ssl_client_cert_function_t ossl_ENGINE_set_load_ssl_client_cert_function;
  ossl_ENGINE_set_ciphers_t ossl_ENGINE_set_ciphers;
  ossl_ENGINE_set_digests_t ossl_ENGINE_set_digests;
  ossl_ENGINE_set_pkey_meths_t ossl_ENGINE_set_pkey_meths;
  ossl_ENGINE_set_pkey_asn1_meths_t ossl_ENGINE_set_pkey_asn1_meths;
  ossl_ENGINE_set_flags_t ossl_ENGINE_set_flags;
  ossl_ENGINE_set_cmd_defns_t ossl_ENGINE_set_cmd_defns;
  ossl_ENGINE_set_ex_data_t ossl_ENGINE_set_ex_data;
  ossl_ENGINE_get_ex_data_t ossl_ENGINE_get_ex_data;
  ossl_ENGINE_get_id_t ossl_ENGINE_get_id;
  ossl_ENGINE_get_name_t ossl_ENGINE_get_name;
  ossl_ENGINE_get_RSA_t ossl_ENGINE_get_RSA;
  ossl_ENGINE_get_DSA_t ossl_ENGINE_get_DSA;
  ossl_ENGINE_get_EC_t ossl_ENGINE_get_EC;
  ossl_ENGINE_get_DH_t ossl_ENGINE_get_DH;
  ossl_ENGINE_get_RAND_t ossl_ENGINE_get_RAND;
  ossl_ENGINE_get_destroy_function_t ossl_ENGINE_get_destroy_function;
  ossl_ENGINE_get_init_function_t ossl_ENGINE_get_init_function;
  ossl_ENGINE_get_finish_function_t ossl_ENGINE_get_finish_function;
  ossl_ENGINE_get_ctrl_function_t ossl_ENGINE_get_ctrl_function;
  ossl_ENGINE_get_load_privkey_function_t ossl_ENGINE_get_load_privkey_function;
  ossl_ENGINE_get_load_pubkey_function_t ossl_ENGINE_get_load_pubkey_function;
  ossl_ENGINE_get_ssl_client_cert_function_t ossl_ENGINE_get_ssl_client_cert_function;
  ossl_ENGINE_get_ciphers_t ossl_ENGINE_get_ciphers;
  ossl_ENGINE_get_digests_t ossl_ENGINE_get_digests;
  ossl_ENGINE_get_pkey_meths_t ossl_ENGINE_get_pkey_meths;
  ossl_ENGINE_get_pkey_asn1_meths_t ossl_ENGINE_get_pkey_asn1_meths;
  ossl_ENGINE_get_cipher_t ossl_ENGINE_get_cipher;
  ossl_ENGINE_get_digest_t ossl_ENGINE_get_digest;
  ossl_ENGINE_get_pkey_meth_t ossl_ENGINE_get_pkey_meth;
  ossl_ENGINE_get_pkey_asn1_meth_t ossl_ENGINE_get_pkey_asn1_meth;
  ossl_ENGINE_get_pkey_asn1_meth_str_t ossl_ENGINE_get_pkey_asn1_meth_str;
  ossl_ENGINE_pkey_asn1_find_str_t ossl_ENGINE_pkey_asn1_find_str;
  ossl_ENGINE_get_cmd_defns_t ossl_ENGINE_get_cmd_defns;
  ossl_ENGINE_get_flags_t ossl_ENGINE_get_flags;
  ossl_ENGINE_init_t ossl_ENGINE_init;
  ossl_ENGINE_finish_t ossl_ENGINE_finish;
  ossl_ENGINE_load_private_key_t ossl_ENGINE_load_private_key;
  ossl_ENGINE_load_public_key_t ossl_ENGINE_load_public_key;
  ossl_ENGINE_load_ssl_client_cert_t ossl_ENGINE_load_ssl_client_cert;
  ossl_ENGINE_get_default_RSA_t ossl_ENGINE_get_default_RSA;
  ossl_ENGINE_get_default_DSA_t ossl_ENGINE_get_default_DSA;
  ossl_ENGINE_get_default_EC_t ossl_ENGINE_get_default_EC;
  ossl_ENGINE_get_default_DH_t ossl_ENGINE_get_default_DH;
  ossl_ENGINE_get_default_RAND_t ossl_ENGINE_get_default_RAND;
  ossl_ENGINE_get_cipher_engine_t ossl_ENGINE_get_cipher_engine;
  ossl_ENGINE_get_digest_engine_t ossl_ENGINE_get_digest_engine;
  ossl_ENGINE_get_pkey_meth_engine_t ossl_ENGINE_get_pkey_meth_engine;
  ossl_ENGINE_get_pkey_asn1_meth_engine_t ossl_ENGINE_get_pkey_asn1_meth_engine;
  ossl_ENGINE_set_default_RSA_t ossl_ENGINE_set_default_RSA;
  ossl_ENGINE_set_default_string_t ossl_ENGINE_set_default_string;
  ossl_ENGINE_set_default_DSA_t ossl_ENGINE_set_default_DSA;
  ossl_ENGINE_set_default_EC_t ossl_ENGINE_set_default_EC;
  ossl_ENGINE_set_default_DH_t ossl_ENGINE_set_default_DH;
  ossl_ENGINE_set_default_RAND_t ossl_ENGINE_set_default_RAND;
  ossl_ENGINE_set_default_ciphers_t ossl_ENGINE_set_default_ciphers;
  ossl_ENGINE_set_default_digests_t ossl_ENGINE_set_default_digests;
  ossl_ENGINE_set_default_pkey_meths_t ossl_ENGINE_set_default_pkey_meths;
  ossl_ENGINE_set_default_pkey_asn1_meths_t ossl_ENGINE_set_default_pkey_asn1_meths;
  ossl_ENGINE_set_default_t ossl_ENGINE_set_default;
  ossl_ENGINE_add_conf_module_t ossl_ENGINE_add_conf_module;
  ossl_ENGINE_get_static_state_t ossl_ENGINE_get_static_state;
  ossl_ESS_ISSUER_SERIAL_new_t ossl_ESS_ISSUER_SERIAL_new;
  ossl_ESS_ISSUER_SERIAL_free_t ossl_ESS_ISSUER_SERIAL_free;
  ossl_d2i_ESS_ISSUER_SERIAL_t ossl_d2i_ESS_ISSUER_SERIAL;
  ossl_i2d_ESS_ISSUER_SERIAL_t ossl_i2d_ESS_ISSUER_SERIAL;
  ossl_ESS_ISSUER_SERIAL_dup_t ossl_ESS_ISSUER_SERIAL_dup;
  ossl_ESS_CERT_ID_new_t ossl_ESS_CERT_ID_new;
  ossl_ESS_CERT_ID_free_t ossl_ESS_CERT_ID_free;
  ossl_d2i_ESS_CERT_ID_t ossl_d2i_ESS_CERT_ID;
  ossl_i2d_ESS_CERT_ID_t ossl_i2d_ESS_CERT_ID;
  ossl_ESS_CERT_ID_dup_t ossl_ESS_CERT_ID_dup;
  ossl_ESS_SIGNING_CERT_new_t ossl_ESS_SIGNING_CERT_new;
  ossl_ESS_SIGNING_CERT_free_t ossl_ESS_SIGNING_CERT_free;
  ossl_d2i_ESS_SIGNING_CERT_t ossl_d2i_ESS_SIGNING_CERT;
  ossl_i2d_ESS_SIGNING_CERT_t ossl_i2d_ESS_SIGNING_CERT;
  ossl_ESS_SIGNING_CERT_it_t ossl_ESS_SIGNING_CERT_it;
  ossl_ESS_SIGNING_CERT_dup_t ossl_ESS_SIGNING_CERT_dup;
  ossl_ESS_CERT_ID_V2_new_t ossl_ESS_CERT_ID_V2_new;
  ossl_ESS_CERT_ID_V2_free_t ossl_ESS_CERT_ID_V2_free;
  ossl_d2i_ESS_CERT_ID_V2_t ossl_d2i_ESS_CERT_ID_V2;
  ossl_i2d_ESS_CERT_ID_V2_t ossl_i2d_ESS_CERT_ID_V2;
  ossl_ESS_CERT_ID_V2_dup_t ossl_ESS_CERT_ID_V2_dup;
  ossl_ESS_SIGNING_CERT_V2_new_t ossl_ESS_SIGNING_CERT_V2_new;
  ossl_ESS_SIGNING_CERT_V2_free_t ossl_ESS_SIGNING_CERT_V2_free;
  ossl_d2i_ESS_SIGNING_CERT_V2_t ossl_d2i_ESS_SIGNING_CERT_V2;
  ossl_i2d_ESS_SIGNING_CERT_V2_t ossl_i2d_ESS_SIGNING_CERT_V2;
  ossl_ESS_SIGNING_CERT_V2_it_t ossl_ESS_SIGNING_CERT_V2_it;
  ossl_ESS_SIGNING_CERT_V2_dup_t ossl_ESS_SIGNING_CERT_V2_dup;
  ossl_OSSL_ESS_signing_cert_new_init_t ossl_OSSL_ESS_signing_cert_new_init;
  ossl_OSSL_ESS_signing_cert_v2_new_init_t ossl_OSSL_ESS_signing_cert_v2_new_init;
  ossl_OSSL_ESS_check_signing_certs_t ossl_OSSL_ESS_check_signing_certs;
  ossl_HMAC_size_t ossl_HMAC_size;
  ossl_HMAC_CTX_new_t ossl_HMAC_CTX_new;
  ossl_HMAC_CTX_reset_t ossl_HMAC_CTX_reset;
  ossl_HMAC_CTX_free_t ossl_HMAC_CTX_free;
  ossl_HMAC_Init_t ossl_HMAC_Init;
  ossl_HMAC_Init_ex_t ossl_HMAC_Init_ex;
  ossl_HMAC_Update_t ossl_HMAC_Update;
  ossl_HMAC_Final_t ossl_HMAC_Final;
  ossl_HMAC_CTX_copy_t ossl_HMAC_CTX_copy;
  ossl_HMAC_CTX_set_flags_t ossl_HMAC_CTX_set_flags;
  ossl_HMAC_CTX_get_md_t ossl_HMAC_CTX_get_md;
  ossl_HMAC_t ossl_HMAC;
  ossl_IDEA_options_t ossl_IDEA_options;
  ossl_IDEA_ecb_encrypt_t ossl_IDEA_ecb_encrypt;
  ossl_IDEA_set_encrypt_key_t ossl_IDEA_set_encrypt_key;
  ossl_IDEA_set_decrypt_key_t ossl_IDEA_set_decrypt_key;
  ossl_IDEA_cbc_encrypt_t ossl_IDEA_cbc_encrypt;
  ossl_IDEA_cfb64_encrypt_t ossl_IDEA_cfb64_encrypt;
  ossl_IDEA_ofb64_encrypt_t ossl_IDEA_ofb64_encrypt;
  ossl_IDEA_encrypt_t ossl_IDEA_encrypt;
  ossl_EVP_KDF_up_ref_t ossl_EVP_KDF_up_ref;
  ossl_EVP_KDF_free_t ossl_EVP_KDF_free;
  ossl_EVP_KDF_fetch_t ossl_EVP_KDF_fetch;
  ossl_EVP_KDF_CTX_new_t ossl_EVP_KDF_CTX_new;
  ossl_EVP_KDF_CTX_free_t ossl_EVP_KDF_CTX_free;
  ossl_EVP_KDF_CTX_dup_t ossl_EVP_KDF_CTX_dup;
  ossl_EVP_KDF_get0_description_t ossl_EVP_KDF_get0_description;
  ossl_EVP_KDF_is_a_t ossl_EVP_KDF_is_a;
  ossl_EVP_KDF_get0_name_t ossl_EVP_KDF_get0_name;
  ossl_EVP_KDF_get0_provider_t ossl_EVP_KDF_get0_provider;
  ossl_EVP_KDF_CTX_kdf_t ossl_EVP_KDF_CTX_kdf;
  ossl_EVP_KDF_CTX_reset_t ossl_EVP_KDF_CTX_reset;
  ossl_EVP_KDF_CTX_get_kdf_size_t ossl_EVP_KDF_CTX_get_kdf_size;
  ossl_EVP_KDF_derive_t ossl_EVP_KDF_derive;
  ossl_EVP_KDF_get_params_t ossl_EVP_KDF_get_params;
  ossl_EVP_KDF_CTX_get_params_t ossl_EVP_KDF_CTX_get_params;
  ossl_EVP_KDF_CTX_set_params_t ossl_EVP_KDF_CTX_set_params;
  ossl_EVP_KDF_gettable_params_t ossl_EVP_KDF_gettable_params;
  ossl_EVP_KDF_gettable_ctx_params_t ossl_EVP_KDF_gettable_ctx_params;
  ossl_EVP_KDF_settable_ctx_params_t ossl_EVP_KDF_settable_ctx_params;
  ossl_EVP_KDF_CTX_gettable_params_t ossl_EVP_KDF_CTX_gettable_params;
  ossl_EVP_KDF_CTX_settable_params_t ossl_EVP_KDF_CTX_settable_params;
  ossl_EVP_KDF_do_all_provided_t ossl_EVP_KDF_do_all_provided;
  ossl_EVP_KDF_names_do_all_t ossl_EVP_KDF_names_do_all;
  ossl_EVP_PKEY_CTX_set_tls1_prf_md_t ossl_EVP_PKEY_CTX_set_tls1_prf_md;
  ossl_EVP_PKEY_CTX_set1_tls1_prf_secret_t ossl_EVP_PKEY_CTX_set1_tls1_prf_secret;
  ossl_EVP_PKEY_CTX_add1_tls1_prf_seed_t ossl_EVP_PKEY_CTX_add1_tls1_prf_seed;
  ossl_EVP_PKEY_CTX_set_hkdf_md_t ossl_EVP_PKEY_CTX_set_hkdf_md;
  ossl_EVP_PKEY_CTX_set1_hkdf_salt_t ossl_EVP_PKEY_CTX_set1_hkdf_salt;
  ossl_EVP_PKEY_CTX_set1_hkdf_key_t ossl_EVP_PKEY_CTX_set1_hkdf_key;
  ossl_EVP_PKEY_CTX_add1_hkdf_info_t ossl_EVP_PKEY_CTX_add1_hkdf_info;
  ossl_EVP_PKEY_CTX_set_hkdf_mode_t ossl_EVP_PKEY_CTX_set_hkdf_mode;
  ossl_EVP_PKEY_CTX_set1_pbe_pass_t ossl_EVP_PKEY_CTX_set1_pbe_pass;
  ossl_EVP_PKEY_CTX_set1_scrypt_salt_t ossl_EVP_PKEY_CTX_set1_scrypt_salt;
  ossl_EVP_PKEY_CTX_set_scrypt_N_t ossl_EVP_PKEY_CTX_set_scrypt_N;
  ossl_EVP_PKEY_CTX_set_scrypt_r_t ossl_EVP_PKEY_CTX_set_scrypt_r;
  ossl_EVP_PKEY_CTX_set_scrypt_p_t ossl_EVP_PKEY_CTX_set_scrypt_p;
  ossl_EVP_PKEY_CTX_set_scrypt_maxmem_bytes_t ossl_EVP_PKEY_CTX_set_scrypt_maxmem_bytes;
  ossl_MD4_Init_t ossl_MD4_Init;
  ossl_MD4_Update_t ossl_MD4_Update;
  ossl_MD4_Final_t ossl_MD4_Final;
  ossl_MD4_t ossl_MD4;
  ossl_MD4_Transform_t ossl_MD4_Transform;
  ossl_MD5_Init_t ossl_MD5_Init;
  ossl_MD5_Update_t ossl_MD5_Update;
  ossl_MD5_Final_t ossl_MD5_Final;
  ossl_MD5_t ossl_MD5;
  ossl_MD5_Transform_t ossl_MD5_Transform;
  ossl_MDC2_Init_t ossl_MDC2_Init;
  ossl_MDC2_Update_t ossl_MDC2_Update;
  ossl_MDC2_Final_t ossl_MDC2_Final;
  ossl_MDC2_t ossl_MDC2;
  ossl_CRYPTO_cbc128_encrypt_t ossl_CRYPTO_cbc128_encrypt;
  ossl_CRYPTO_cbc128_decrypt_t ossl_CRYPTO_cbc128_decrypt;
  ossl_CRYPTO_ctr128_encrypt_t ossl_CRYPTO_ctr128_encrypt;
  ossl_CRYPTO_ctr128_encrypt_ctr32_t ossl_CRYPTO_ctr128_encrypt_ctr32;
  ossl_CRYPTO_ofb128_encrypt_t ossl_CRYPTO_ofb128_encrypt;
  ossl_CRYPTO_cfb128_encrypt_t ossl_CRYPTO_cfb128_encrypt;
  ossl_CRYPTO_cfb128_8_encrypt_t ossl_CRYPTO_cfb128_8_encrypt;
  ossl_CRYPTO_cfb128_1_encrypt_t ossl_CRYPTO_cfb128_1_encrypt;
  ossl_CRYPTO_cts128_encrypt_block_t ossl_CRYPTO_cts128_encrypt_block;
  ossl_CRYPTO_cts128_encrypt_t ossl_CRYPTO_cts128_encrypt;
  ossl_CRYPTO_cts128_decrypt_block_t ossl_CRYPTO_cts128_decrypt_block;
  ossl_CRYPTO_cts128_decrypt_t ossl_CRYPTO_cts128_decrypt;
  ossl_CRYPTO_nistcts128_encrypt_block_t ossl_CRYPTO_nistcts128_encrypt_block;
  ossl_CRYPTO_nistcts128_encrypt_t ossl_CRYPTO_nistcts128_encrypt;
  ossl_CRYPTO_nistcts128_decrypt_block_t ossl_CRYPTO_nistcts128_decrypt_block;
  ossl_CRYPTO_nistcts128_decrypt_t ossl_CRYPTO_nistcts128_decrypt;
  ossl_CRYPTO_gcm128_new_t ossl_CRYPTO_gcm128_new;
  ossl_CRYPTO_gcm128_init_t ossl_CRYPTO_gcm128_init;
  ossl_CRYPTO_gcm128_setiv_t ossl_CRYPTO_gcm128_setiv;
  ossl_CRYPTO_gcm128_aad_t ossl_CRYPTO_gcm128_aad;
  ossl_CRYPTO_gcm128_encrypt_t ossl_CRYPTO_gcm128_encrypt;
  ossl_CRYPTO_gcm128_decrypt_t ossl_CRYPTO_gcm128_decrypt;
  ossl_CRYPTO_gcm128_encrypt_ctr32_t ossl_CRYPTO_gcm128_encrypt_ctr32;
  ossl_CRYPTO_gcm128_decrypt_ctr32_t ossl_CRYPTO_gcm128_decrypt_ctr32;
  ossl_CRYPTO_gcm128_finish_t ossl_CRYPTO_gcm128_finish;
  ossl_CRYPTO_gcm128_tag_t ossl_CRYPTO_gcm128_tag;
  ossl_CRYPTO_gcm128_release_t ossl_CRYPTO_gcm128_release;
  ossl_CRYPTO_ccm128_init_t ossl_CRYPTO_ccm128_init;
  ossl_CRYPTO_ccm128_setiv_t ossl_CRYPTO_ccm128_setiv;
  ossl_CRYPTO_ccm128_aad_t ossl_CRYPTO_ccm128_aad;
  ossl_CRYPTO_ccm128_encrypt_t ossl_CRYPTO_ccm128_encrypt;
  ossl_CRYPTO_ccm128_decrypt_t ossl_CRYPTO_ccm128_decrypt;
  ossl_CRYPTO_ccm128_encrypt_ccm64_t ossl_CRYPTO_ccm128_encrypt_ccm64;
  ossl_CRYPTO_ccm128_decrypt_ccm64_t ossl_CRYPTO_ccm128_decrypt_ccm64;
  ossl_CRYPTO_ccm128_tag_t ossl_CRYPTO_ccm128_tag;
  ossl_CRYPTO_xts128_encrypt_t ossl_CRYPTO_xts128_encrypt;
  ossl_CRYPTO_128_wrap_t ossl_CRYPTO_128_wrap;
  ossl_CRYPTO_128_unwrap_t ossl_CRYPTO_128_unwrap;
  ossl_CRYPTO_128_wrap_pad_t ossl_CRYPTO_128_wrap_pad;
  ossl_CRYPTO_128_unwrap_pad_t ossl_CRYPTO_128_unwrap_pad;
  ossl_CRYPTO_ocb128_new_t ossl_CRYPTO_ocb128_new;
  ossl_CRYPTO_ocb128_init_t ossl_CRYPTO_ocb128_init;
  ossl_CRYPTO_ocb128_copy_ctx_t ossl_CRYPTO_ocb128_copy_ctx;
  ossl_CRYPTO_ocb128_setiv_t ossl_CRYPTO_ocb128_setiv;
  ossl_CRYPTO_ocb128_aad_t ossl_CRYPTO_ocb128_aad;
  ossl_CRYPTO_ocb128_encrypt_t ossl_CRYPTO_ocb128_encrypt;
  ossl_CRYPTO_ocb128_decrypt_t ossl_CRYPTO_ocb128_decrypt;
  ossl_CRYPTO_ocb128_finish_t ossl_CRYPTO_ocb128_finish;
  ossl_CRYPTO_ocb128_tag_t ossl_CRYPTO_ocb128_tag;
  ossl_CRYPTO_ocb128_cleanup_t ossl_CRYPTO_ocb128_cleanup;
  ossl_OCSP_CERTID_dup_t ossl_OCSP_CERTID_dup;
  ossl_OCSP_sendreq_new_t ossl_OCSP_sendreq_new;
  ossl_OCSP_sendreq_bio_t ossl_OCSP_sendreq_bio;
  ossl_OCSP_cert_to_id_t ossl_OCSP_cert_to_id;
  ossl_OCSP_cert_id_new_t ossl_OCSP_cert_id_new;
  ossl_OCSP_request_add0_id_t ossl_OCSP_request_add0_id;
  ossl_OCSP_request_add1_nonce_t ossl_OCSP_request_add1_nonce;
  ossl_OCSP_basic_add1_nonce_t ossl_OCSP_basic_add1_nonce;
  ossl_OCSP_check_nonce_t ossl_OCSP_check_nonce;
  ossl_OCSP_copy_nonce_t ossl_OCSP_copy_nonce;
  ossl_OCSP_request_set1_name_t ossl_OCSP_request_set1_name;
  ossl_OCSP_request_add1_cert_t ossl_OCSP_request_add1_cert;
  ossl_OCSP_request_sign_t ossl_OCSP_request_sign;
  ossl_OCSP_response_status_t ossl_OCSP_response_status;
  ossl_OCSP_response_get1_basic_t ossl_OCSP_response_get1_basic;
  ossl_OCSP_resp_get0_signature_t ossl_OCSP_resp_get0_signature;
  ossl_OCSP_resp_get0_tbs_sigalg_t ossl_OCSP_resp_get0_tbs_sigalg;
  ossl_OCSP_resp_get0_respdata_t ossl_OCSP_resp_get0_respdata;
  ossl_OCSP_resp_get0_signer_t ossl_OCSP_resp_get0_signer;
  ossl_OCSP_resp_count_t ossl_OCSP_resp_count;
  ossl_OCSP_resp_get0_t ossl_OCSP_resp_get0;
  ossl_OCSP_resp_get0_produced_at_t ossl_OCSP_resp_get0_produced_at;
  ossl_OCSP_resp_get0_certs_t ossl_OCSP_resp_get0_certs;
  ossl_OCSP_resp_get0_id_t ossl_OCSP_resp_get0_id;
  ossl_OCSP_resp_get1_id_t ossl_OCSP_resp_get1_id;
  ossl_OCSP_resp_find_t ossl_OCSP_resp_find;
  ossl_OCSP_single_get0_status_t ossl_OCSP_single_get0_status;
  ossl_OCSP_resp_find_status_t ossl_OCSP_resp_find_status;
  ossl_OCSP_check_validity_t ossl_OCSP_check_validity;
  ossl_OCSP_request_verify_t ossl_OCSP_request_verify;
  ossl_OCSP_id_issuer_cmp_t ossl_OCSP_id_issuer_cmp;
  ossl_OCSP_id_cmp_t ossl_OCSP_id_cmp;
  ossl_OCSP_request_onereq_count_t ossl_OCSP_request_onereq_count;
  ossl_OCSP_request_onereq_get0_t ossl_OCSP_request_onereq_get0;
  ossl_OCSP_onereq_get0_id_t ossl_OCSP_onereq_get0_id;
  ossl_OCSP_id_get0_info_t ossl_OCSP_id_get0_info;
  ossl_OCSP_request_is_signed_t ossl_OCSP_request_is_signed;
  ossl_OCSP_response_create_t ossl_OCSP_response_create;
  ossl_OCSP_basic_add1_status_t ossl_OCSP_basic_add1_status;
  ossl_OCSP_basic_add1_cert_t ossl_OCSP_basic_add1_cert;
  ossl_OCSP_basic_sign_t ossl_OCSP_basic_sign;
  ossl_OCSP_basic_sign_ctx_t ossl_OCSP_basic_sign_ctx;
  ossl_OCSP_RESPID_set_by_name_t ossl_OCSP_RESPID_set_by_name;
  ossl_OCSP_RESPID_set_by_key_ex_t ossl_OCSP_RESPID_set_by_key_ex;
  ossl_OCSP_RESPID_set_by_key_t ossl_OCSP_RESPID_set_by_key;
  ossl_OCSP_RESPID_match_ex_t ossl_OCSP_RESPID_match_ex;
  ossl_OCSP_RESPID_match_t ossl_OCSP_RESPID_match;
  ossl_OCSP_crlID_new_t ossl_OCSP_crlID_new;
  ossl_OCSP_accept_responses_new_t ossl_OCSP_accept_responses_new;
  ossl_OCSP_archive_cutoff_new_t ossl_OCSP_archive_cutoff_new;
  ossl_OCSP_url_svcloc_new_t ossl_OCSP_url_svcloc_new;
  ossl_OCSP_REQUEST_get_ext_count_t ossl_OCSP_REQUEST_get_ext_count;
  ossl_OCSP_REQUEST_get_ext_by_NID_t ossl_OCSP_REQUEST_get_ext_by_NID;
  ossl_OCSP_REQUEST_get_ext_by_OBJ_t ossl_OCSP_REQUEST_get_ext_by_OBJ;
  ossl_OCSP_REQUEST_get_ext_by_critical_t ossl_OCSP_REQUEST_get_ext_by_critical;
  ossl_OCSP_REQUEST_get_ext_t ossl_OCSP_REQUEST_get_ext;
  ossl_OCSP_REQUEST_delete_ext_t ossl_OCSP_REQUEST_delete_ext;
  ossl_OCSP_REQUEST_get1_ext_d2i_t ossl_OCSP_REQUEST_get1_ext_d2i;
  ossl_OCSP_REQUEST_add1_ext_i2d_t ossl_OCSP_REQUEST_add1_ext_i2d;
  ossl_OCSP_REQUEST_add_ext_t ossl_OCSP_REQUEST_add_ext;
  ossl_OCSP_ONEREQ_get_ext_count_t ossl_OCSP_ONEREQ_get_ext_count;
  ossl_OCSP_ONEREQ_get_ext_by_NID_t ossl_OCSP_ONEREQ_get_ext_by_NID;
  ossl_OCSP_ONEREQ_get_ext_by_OBJ_t ossl_OCSP_ONEREQ_get_ext_by_OBJ;
  ossl_OCSP_ONEREQ_get_ext_by_critical_t ossl_OCSP_ONEREQ_get_ext_by_critical;
  ossl_OCSP_ONEREQ_get_ext_t ossl_OCSP_ONEREQ_get_ext;
  ossl_OCSP_ONEREQ_delete_ext_t ossl_OCSP_ONEREQ_delete_ext;
  ossl_OCSP_ONEREQ_get1_ext_d2i_t ossl_OCSP_ONEREQ_get1_ext_d2i;
  ossl_OCSP_ONEREQ_add1_ext_i2d_t ossl_OCSP_ONEREQ_add1_ext_i2d;
  ossl_OCSP_ONEREQ_add_ext_t ossl_OCSP_ONEREQ_add_ext;
  ossl_OCSP_BASICRESP_get_ext_count_t ossl_OCSP_BASICRESP_get_ext_count;
  ossl_OCSP_BASICRESP_get_ext_by_NID_t ossl_OCSP_BASICRESP_get_ext_by_NID;
  ossl_OCSP_BASICRESP_get_ext_by_OBJ_t ossl_OCSP_BASICRESP_get_ext_by_OBJ;
  ossl_OCSP_BASICRESP_get_ext_by_critical_t ossl_OCSP_BASICRESP_get_ext_by_critical;
  ossl_OCSP_BASICRESP_get_ext_t ossl_OCSP_BASICRESP_get_ext;
  ossl_OCSP_BASICRESP_delete_ext_t ossl_OCSP_BASICRESP_delete_ext;
  ossl_OCSP_BASICRESP_get1_ext_d2i_t ossl_OCSP_BASICRESP_get1_ext_d2i;
  ossl_OCSP_BASICRESP_add1_ext_i2d_t ossl_OCSP_BASICRESP_add1_ext_i2d;
  ossl_OCSP_BASICRESP_add_ext_t ossl_OCSP_BASICRESP_add_ext;
  ossl_OCSP_SINGLERESP_get_ext_count_t ossl_OCSP_SINGLERESP_get_ext_count;
  ossl_OCSP_SINGLERESP_get_ext_by_NID_t ossl_OCSP_SINGLERESP_get_ext_by_NID;
  ossl_OCSP_SINGLERESP_get_ext_by_OBJ_t ossl_OCSP_SINGLERESP_get_ext_by_OBJ;
  ossl_OCSP_SINGLERESP_get_ext_by_critical_t ossl_OCSP_SINGLERESP_get_ext_by_critical;
  ossl_OCSP_SINGLERESP_get_ext_t ossl_OCSP_SINGLERESP_get_ext;
  ossl_OCSP_SINGLERESP_delete_ext_t ossl_OCSP_SINGLERESP_delete_ext;
  ossl_OCSP_SINGLERESP_get1_ext_d2i_t ossl_OCSP_SINGLERESP_get1_ext_d2i;
  ossl_OCSP_SINGLERESP_add1_ext_i2d_t ossl_OCSP_SINGLERESP_add1_ext_i2d;
  ossl_OCSP_SINGLERESP_add_ext_t ossl_OCSP_SINGLERESP_add_ext;
  ossl_OCSP_SINGLERESP_get0_id_t ossl_OCSP_SINGLERESP_get0_id;
  ossl_OCSP_SINGLERESP_new_t ossl_OCSP_SINGLERESP_new;
  ossl_OCSP_SINGLERESP_free_t ossl_OCSP_SINGLERESP_free;
  ossl_d2i_OCSP_SINGLERESP_t ossl_d2i_OCSP_SINGLERESP;
  ossl_i2d_OCSP_SINGLERESP_t ossl_i2d_OCSP_SINGLERESP;
  ossl_OCSP_SINGLERESP_it_t ossl_OCSP_SINGLERESP_it;
  ossl_OCSP_CERTSTATUS_new_t ossl_OCSP_CERTSTATUS_new;
  ossl_OCSP_CERTSTATUS_free_t ossl_OCSP_CERTSTATUS_free;
  ossl_d2i_OCSP_CERTSTATUS_t ossl_d2i_OCSP_CERTSTATUS;
  ossl_i2d_OCSP_CERTSTATUS_t ossl_i2d_OCSP_CERTSTATUS;
  ossl_OCSP_CERTSTATUS_it_t ossl_OCSP_CERTSTATUS_it;
  ossl_OCSP_REVOKEDINFO_new_t ossl_OCSP_REVOKEDINFO_new;
  ossl_OCSP_REVOKEDINFO_free_t ossl_OCSP_REVOKEDINFO_free;
  ossl_d2i_OCSP_REVOKEDINFO_t ossl_d2i_OCSP_REVOKEDINFO;
  ossl_i2d_OCSP_REVOKEDINFO_t ossl_i2d_OCSP_REVOKEDINFO;
  ossl_OCSP_REVOKEDINFO_it_t ossl_OCSP_REVOKEDINFO_it;
  ossl_OCSP_BASICRESP_new_t ossl_OCSP_BASICRESP_new;
  ossl_OCSP_BASICRESP_free_t ossl_OCSP_BASICRESP_free;
  ossl_d2i_OCSP_BASICRESP_t ossl_d2i_OCSP_BASICRESP;
  ossl_i2d_OCSP_BASICRESP_t ossl_i2d_OCSP_BASICRESP;
  ossl_OCSP_BASICRESP_it_t ossl_OCSP_BASICRESP_it;
  ossl_OCSP_RESPDATA_new_t ossl_OCSP_RESPDATA_new;
  ossl_OCSP_RESPDATA_free_t ossl_OCSP_RESPDATA_free;
  ossl_d2i_OCSP_RESPDATA_t ossl_d2i_OCSP_RESPDATA;
  ossl_i2d_OCSP_RESPDATA_t ossl_i2d_OCSP_RESPDATA;
  ossl_OCSP_RESPDATA_it_t ossl_OCSP_RESPDATA_it;
  ossl_OCSP_RESPID_new_t ossl_OCSP_RESPID_new;
  ossl_OCSP_RESPID_free_t ossl_OCSP_RESPID_free;
  ossl_d2i_OCSP_RESPID_t ossl_d2i_OCSP_RESPID;
  ossl_i2d_OCSP_RESPID_t ossl_i2d_OCSP_RESPID;
  ossl_OCSP_RESPID_it_t ossl_OCSP_RESPID_it;
  ossl_OCSP_RESPONSE_new_t ossl_OCSP_RESPONSE_new;
  ossl_OCSP_RESPONSE_free_t ossl_OCSP_RESPONSE_free;
  ossl_d2i_OCSP_RESPONSE_t ossl_d2i_OCSP_RESPONSE;
  ossl_i2d_OCSP_RESPONSE_t ossl_i2d_OCSP_RESPONSE;
  ossl_OCSP_RESPONSE_it_t ossl_OCSP_RESPONSE_it;
  ossl_OCSP_RESPBYTES_new_t ossl_OCSP_RESPBYTES_new;
  ossl_OCSP_RESPBYTES_free_t ossl_OCSP_RESPBYTES_free;
  ossl_d2i_OCSP_RESPBYTES_t ossl_d2i_OCSP_RESPBYTES;
  ossl_i2d_OCSP_RESPBYTES_t ossl_i2d_OCSP_RESPBYTES;
  ossl_OCSP_RESPBYTES_it_t ossl_OCSP_RESPBYTES_it;
  ossl_OCSP_ONEREQ_new_t ossl_OCSP_ONEREQ_new;
  ossl_OCSP_ONEREQ_free_t ossl_OCSP_ONEREQ_free;
  ossl_d2i_OCSP_ONEREQ_t ossl_d2i_OCSP_ONEREQ;
  ossl_i2d_OCSP_ONEREQ_t ossl_i2d_OCSP_ONEREQ;
  ossl_OCSP_ONEREQ_it_t ossl_OCSP_ONEREQ_it;
  ossl_OCSP_CERTID_new_t ossl_OCSP_CERTID_new;
  ossl_OCSP_CERTID_free_t ossl_OCSP_CERTID_free;
  ossl_d2i_OCSP_CERTID_t ossl_d2i_OCSP_CERTID;
  ossl_i2d_OCSP_CERTID_t ossl_i2d_OCSP_CERTID;
  ossl_OCSP_CERTID_it_t ossl_OCSP_CERTID_it;
  ossl_OCSP_REQUEST_new_t ossl_OCSP_REQUEST_new;
  ossl_OCSP_REQUEST_free_t ossl_OCSP_REQUEST_free;
  ossl_d2i_OCSP_REQUEST_t ossl_d2i_OCSP_REQUEST;
  ossl_i2d_OCSP_REQUEST_t ossl_i2d_OCSP_REQUEST;
  ossl_OCSP_REQUEST_it_t ossl_OCSP_REQUEST_it;
  ossl_OCSP_SIGNATURE_new_t ossl_OCSP_SIGNATURE_new;
  ossl_OCSP_SIGNATURE_free_t ossl_OCSP_SIGNATURE_free;
  ossl_d2i_OCSP_SIGNATURE_t ossl_d2i_OCSP_SIGNATURE;
  ossl_i2d_OCSP_SIGNATURE_t ossl_i2d_OCSP_SIGNATURE;
  ossl_OCSP_SIGNATURE_it_t ossl_OCSP_SIGNATURE_it;
  ossl_OCSP_REQINFO_new_t ossl_OCSP_REQINFO_new;
  ossl_OCSP_REQINFO_free_t ossl_OCSP_REQINFO_free;
  ossl_d2i_OCSP_REQINFO_t ossl_d2i_OCSP_REQINFO;
  ossl_i2d_OCSP_REQINFO_t ossl_i2d_OCSP_REQINFO;
  ossl_OCSP_REQINFO_it_t ossl_OCSP_REQINFO_it;
  ossl_OCSP_CRLID_new_t ossl_OCSP_CRLID_new;
  ossl_OCSP_CRLID_free_t ossl_OCSP_CRLID_free;
  ossl_d2i_OCSP_CRLID_t ossl_d2i_OCSP_CRLID;
  ossl_i2d_OCSP_CRLID_t ossl_i2d_OCSP_CRLID;
  ossl_OCSP_CRLID_it_t ossl_OCSP_CRLID_it;
  ossl_OCSP_SERVICELOC_new_t ossl_OCSP_SERVICELOC_new;
  ossl_OCSP_SERVICELOC_free_t ossl_OCSP_SERVICELOC_free;
  ossl_d2i_OCSP_SERVICELOC_t ossl_d2i_OCSP_SERVICELOC;
  ossl_i2d_OCSP_SERVICELOC_t ossl_i2d_OCSP_SERVICELOC;
  ossl_OCSP_SERVICELOC_it_t ossl_OCSP_SERVICELOC_it;
  ossl_OCSP_response_status_str_t ossl_OCSP_response_status_str;
  ossl_OCSP_cert_status_str_t ossl_OCSP_cert_status_str;
  ossl_OCSP_crl_reason_str_t ossl_OCSP_crl_reason_str;
  ossl_OCSP_REQUEST_print_t ossl_OCSP_REQUEST_print;
  ossl_OCSP_RESPONSE_print_t ossl_OCSP_RESPONSE_print;
  ossl_OCSP_basic_verify_t ossl_OCSP_basic_verify;
  ossl_OSSL_PARAM_BLD_new_t ossl_OSSL_PARAM_BLD_new;
  ossl_OSSL_PARAM_BLD_to_param_t ossl_OSSL_PARAM_BLD_to_param;
  ossl_OSSL_PARAM_BLD_free_t ossl_OSSL_PARAM_BLD_free;
  ossl_OSSL_PARAM_BLD_push_int_t ossl_OSSL_PARAM_BLD_push_int;
  ossl_OSSL_PARAM_BLD_push_uint_t ossl_OSSL_PARAM_BLD_push_uint;
  ossl_OSSL_PARAM_BLD_push_long_t ossl_OSSL_PARAM_BLD_push_long;
  ossl_OSSL_PARAM_BLD_push_ulong_t ossl_OSSL_PARAM_BLD_push_ulong;
  ossl_OSSL_PARAM_BLD_push_int32_t ossl_OSSL_PARAM_BLD_push_int32;
  ossl_OSSL_PARAM_BLD_push_uint32_t ossl_OSSL_PARAM_BLD_push_uint32;
  ossl_OSSL_PARAM_BLD_push_int64_t ossl_OSSL_PARAM_BLD_push_int64;
  ossl_OSSL_PARAM_BLD_push_uint64_t ossl_OSSL_PARAM_BLD_push_uint64;
  ossl_OSSL_PARAM_BLD_push_size_t_t ossl_OSSL_PARAM_BLD_push_size_t;
  ossl_OSSL_PARAM_BLD_push_time_t_t ossl_OSSL_PARAM_BLD_push_time_t;
  ossl_OSSL_PARAM_BLD_push_double_t ossl_OSSL_PARAM_BLD_push_double;
  ossl_OSSL_PARAM_BLD_push_BN_t ossl_OSSL_PARAM_BLD_push_BN;
  ossl_OSSL_PARAM_BLD_push_BN_pad_t ossl_OSSL_PARAM_BLD_push_BN_pad;
  ossl_OSSL_PARAM_BLD_push_utf8_string_t ossl_OSSL_PARAM_BLD_push_utf8_string;
  ossl_OSSL_PARAM_BLD_push_utf8_ptr_t ossl_OSSL_PARAM_BLD_push_utf8_ptr;
  ossl_OSSL_PARAM_BLD_push_octet_string_t ossl_OSSL_PARAM_BLD_push_octet_string;
  ossl_OSSL_PARAM_BLD_push_octet_ptr_t ossl_OSSL_PARAM_BLD_push_octet_ptr;
  ossl_PKCS12_get_attr_t ossl_PKCS12_get_attr;
  ossl_PKCS8_get_attr_t ossl_PKCS8_get_attr;
  ossl_PKCS12_mac_present_t ossl_PKCS12_mac_present;
  ossl_PKCS12_get0_mac_t ossl_PKCS12_get0_mac;
  ossl_PKCS12_SAFEBAG_get0_attr_t ossl_PKCS12_SAFEBAG_get0_attr;
  ossl_PKCS12_SAFEBAG_get0_type_t ossl_PKCS12_SAFEBAG_get0_type;
  ossl_PKCS12_SAFEBAG_get_nid_t ossl_PKCS12_SAFEBAG_get_nid;
  ossl_PKCS12_SAFEBAG_get_bag_nid_t ossl_PKCS12_SAFEBAG_get_bag_nid;
  ossl_PKCS12_SAFEBAG_get0_bag_obj_t ossl_PKCS12_SAFEBAG_get0_bag_obj;
  ossl_PKCS12_SAFEBAG_get0_bag_type_t ossl_PKCS12_SAFEBAG_get0_bag_type;
  ossl_PKCS12_SAFEBAG_get1_cert_t ossl_PKCS12_SAFEBAG_get1_cert;
  ossl_PKCS12_SAFEBAG_get1_crl_t ossl_PKCS12_SAFEBAG_get1_crl;
  ossl_PKCS12_SAFEBAG_get0_safes_t ossl_PKCS12_SAFEBAG_get0_safes;
  ossl_PKCS12_SAFEBAG_get0_p8inf_t ossl_PKCS12_SAFEBAG_get0_p8inf;
  ossl_PKCS12_SAFEBAG_get0_pkcs8_t ossl_PKCS12_SAFEBAG_get0_pkcs8;
  ossl_PKCS12_SAFEBAG_create_cert_t ossl_PKCS12_SAFEBAG_create_cert;
  ossl_PKCS12_SAFEBAG_create_crl_t ossl_PKCS12_SAFEBAG_create_crl;
  ossl_PKCS12_SAFEBAG_create_secret_t ossl_PKCS12_SAFEBAG_create_secret;
  ossl_PKCS12_SAFEBAG_create0_p8inf_t ossl_PKCS12_SAFEBAG_create0_p8inf;
  ossl_PKCS12_SAFEBAG_create0_pkcs8_t ossl_PKCS12_SAFEBAG_create0_pkcs8;
  ossl_PKCS12_SAFEBAG_create_pkcs8_encrypt_t ossl_PKCS12_SAFEBAG_create_pkcs8_encrypt;
  ossl_PKCS12_SAFEBAG_create_pkcs8_encrypt_ex_t ossl_PKCS12_SAFEBAG_create_pkcs8_encrypt_ex;
  ossl_PKCS12_item_pack_safebag_t ossl_PKCS12_item_pack_safebag;
  ossl_PKCS8_decrypt_t ossl_PKCS8_decrypt;
  ossl_PKCS8_decrypt_ex_t ossl_PKCS8_decrypt_ex;
  ossl_PKCS12_decrypt_skey_t ossl_PKCS12_decrypt_skey;
  ossl_PKCS12_decrypt_skey_ex_t ossl_PKCS12_decrypt_skey_ex;
  ossl_PKCS8_encrypt_t ossl_PKCS8_encrypt;
  ossl_PKCS8_encrypt_ex_t ossl_PKCS8_encrypt_ex;
  ossl_PKCS8_set0_pbe_t ossl_PKCS8_set0_pbe;
  ossl_PKCS8_set0_pbe_ex_t ossl_PKCS8_set0_pbe_ex;
  ossl_PKCS12_pack_p7data_t ossl_PKCS12_pack_p7data;
  ossl_PKCS12_unpack_p7data_t ossl_PKCS12_unpack_p7data;
  ossl_PKCS12_pack_p7encdata_t ossl_PKCS12_pack_p7encdata;
  ossl_PKCS12_pack_p7encdata_ex_t ossl_PKCS12_pack_p7encdata_ex;
  ossl_PKCS12_unpack_p7encdata_t ossl_PKCS12_unpack_p7encdata;
  ossl_PKCS12_pack_authsafes_t ossl_PKCS12_pack_authsafes;
  ossl_PKCS12_unpack_authsafes_t ossl_PKCS12_unpack_authsafes;
  ossl_PKCS12_add_localkeyid_t ossl_PKCS12_add_localkeyid;
  ossl_PKCS12_add_friendlyname_asc_t ossl_PKCS12_add_friendlyname_asc;
  ossl_PKCS12_add_friendlyname_utf8_t ossl_PKCS12_add_friendlyname_utf8;
  ossl_PKCS12_add_CSPName_asc_t ossl_PKCS12_add_CSPName_asc;
  ossl_PKCS12_add_friendlyname_uni_t ossl_PKCS12_add_friendlyname_uni;
  ossl_PKCS12_add1_attr_by_NID_t ossl_PKCS12_add1_attr_by_NID;
  ossl_PKCS12_add1_attr_by_txt_t ossl_PKCS12_add1_attr_by_txt;
  ossl_PKCS8_add_keyusage_t ossl_PKCS8_add_keyusage;
  ossl_PKCS12_get_attr_gen_t ossl_PKCS12_get_attr_gen;
  ossl_PKCS12_get_friendlyname_t ossl_PKCS12_get_friendlyname;
  ossl_PKCS12_SAFEBAG_get0_attrs_t ossl_PKCS12_SAFEBAG_get0_attrs;
  ossl_PKCS12_pbe_crypt_t ossl_PKCS12_pbe_crypt;
  ossl_PKCS12_pbe_crypt_ex_t ossl_PKCS12_pbe_crypt_ex;
  ossl_PKCS12_item_decrypt_d2i_t ossl_PKCS12_item_decrypt_d2i;
  ossl_PKCS12_item_decrypt_d2i_ex_t ossl_PKCS12_item_decrypt_d2i_ex;
  ossl_PKCS12_item_i2d_encrypt_t ossl_PKCS12_item_i2d_encrypt;
  ossl_PKCS12_item_i2d_encrypt_ex_t ossl_PKCS12_item_i2d_encrypt_ex;
  ossl_PKCS12_init_t ossl_PKCS12_init;
  ossl_PKCS12_init_ex_t ossl_PKCS12_init_ex;
  ossl_PKCS12_key_gen_asc_t ossl_PKCS12_key_gen_asc;
  ossl_PKCS12_key_gen_asc_ex_t ossl_PKCS12_key_gen_asc_ex;
  ossl_PKCS12_key_gen_uni_t ossl_PKCS12_key_gen_uni;
  ossl_PKCS12_key_gen_uni_ex_t ossl_PKCS12_key_gen_uni_ex;
  ossl_PKCS12_key_gen_utf8_t ossl_PKCS12_key_gen_utf8;
  ossl_PKCS12_key_gen_utf8_ex_t ossl_PKCS12_key_gen_utf8_ex;
  ossl_PKCS12_PBE_keyivgen_t ossl_PKCS12_PBE_keyivgen;
  ossl_PKCS12_PBE_keyivgen_ex_t ossl_PKCS12_PBE_keyivgen_ex;
  ossl_PKCS12_gen_mac_t ossl_PKCS12_gen_mac;
  ossl_PKCS12_verify_mac_t ossl_PKCS12_verify_mac;
  ossl_PKCS12_set_mac_t ossl_PKCS12_set_mac;
  ossl_PKCS12_setup_mac_t ossl_PKCS12_setup_mac;
  ossl_OPENSSL_asc2uni_t ossl_OPENSSL_asc2uni;
  ossl_OPENSSL_uni2asc_t ossl_OPENSSL_uni2asc;
  ossl_OPENSSL_utf82uni_t ossl_OPENSSL_utf82uni;
  ossl_OPENSSL_uni2utf8_t ossl_OPENSSL_uni2utf8;
  ossl_PKCS12_new_t ossl_PKCS12_new;
  ossl_PKCS12_free_t ossl_PKCS12_free;
  ossl_d2i_PKCS12_t ossl_d2i_PKCS12;
  ossl_i2d_PKCS12_t ossl_i2d_PKCS12;
  ossl_PKCS12_it_t ossl_PKCS12_it;
  ossl_PKCS12_MAC_DATA_new_t ossl_PKCS12_MAC_DATA_new;
  ossl_PKCS12_MAC_DATA_free_t ossl_PKCS12_MAC_DATA_free;
  ossl_d2i_PKCS12_MAC_DATA_t ossl_d2i_PKCS12_MAC_DATA;
  ossl_i2d_PKCS12_MAC_DATA_t ossl_i2d_PKCS12_MAC_DATA;
  ossl_PKCS12_MAC_DATA_it_t ossl_PKCS12_MAC_DATA_it;
  ossl_PKCS12_SAFEBAG_new_t ossl_PKCS12_SAFEBAG_new;
  ossl_PKCS12_SAFEBAG_free_t ossl_PKCS12_SAFEBAG_free;
  ossl_d2i_PKCS12_SAFEBAG_t ossl_d2i_PKCS12_SAFEBAG;
  ossl_i2d_PKCS12_SAFEBAG_t ossl_i2d_PKCS12_SAFEBAG;
  ossl_PKCS12_SAFEBAG_it_t ossl_PKCS12_SAFEBAG_it;
  ossl_PKCS12_BAGS_new_t ossl_PKCS12_BAGS_new;
  ossl_PKCS12_BAGS_free_t ossl_PKCS12_BAGS_free;
  ossl_d2i_PKCS12_BAGS_t ossl_d2i_PKCS12_BAGS;
  ossl_i2d_PKCS12_BAGS_t ossl_i2d_PKCS12_BAGS;
  ossl_PKCS12_BAGS_it_t ossl_PKCS12_BAGS_it;
  ossl_PKCS12_SAFEBAGS_it_t ossl_PKCS12_SAFEBAGS_it;
  ossl_PKCS12_AUTHSAFES_it_t ossl_PKCS12_AUTHSAFES_it;
  ossl_PKCS12_PBE_add_t ossl_PKCS12_PBE_add;
  ossl_PKCS12_parse_t ossl_PKCS12_parse;
  ossl_PKCS12_create_t ossl_PKCS12_create;
  ossl_PKCS12_create_ex_t ossl_PKCS12_create_ex;
  ossl_PKCS12_add_cert_t ossl_PKCS12_add_cert;
  ossl_PKCS12_add_key_t ossl_PKCS12_add_key;
  ossl_PKCS12_add_key_ex_t ossl_PKCS12_add_key_ex;
  ossl_PKCS12_add_secret_t ossl_PKCS12_add_secret;
  ossl_PKCS12_add_safe_t ossl_PKCS12_add_safe;
  ossl_PKCS12_add_safe_ex_t ossl_PKCS12_add_safe_ex;
  ossl_PKCS12_add_safes_t ossl_PKCS12_add_safes;
  ossl_PKCS12_add_safes_ex_t ossl_PKCS12_add_safes_ex;
  ossl_i2d_PKCS12_bio_t ossl_i2d_PKCS12_bio;
  ossl_i2d_PKCS12_fp_t ossl_i2d_PKCS12_fp;
  ossl_d2i_PKCS12_bio_t ossl_d2i_PKCS12_bio;
  ossl_d2i_PKCS12_fp_t ossl_d2i_PKCS12_fp;
  ossl_PKCS12_newpass_t ossl_PKCS12_newpass;
  ossl_OSSL_PROVIDER_set_default_search_path_t ossl_OSSL_PROVIDER_set_default_search_path;
  ossl_OSSL_PROVIDER_load_t ossl_OSSL_PROVIDER_load;
  ossl_OSSL_PROVIDER_try_load_t ossl_OSSL_PROVIDER_try_load;
  ossl_OSSL_PROVIDER_unload_t ossl_OSSL_PROVIDER_unload;
  ossl_OSSL_PROVIDER_available_t ossl_OSSL_PROVIDER_available;
  ossl_OSSL_PROVIDER_do_all_t ossl_OSSL_PROVIDER_do_all;
  ossl_OSSL_PROVIDER_gettable_params_t ossl_OSSL_PROVIDER_gettable_params;
  ossl_OSSL_PROVIDER_get_params_t ossl_OSSL_PROVIDER_get_params;
  ossl_OSSL_PROVIDER_self_test_t ossl_OSSL_PROVIDER_self_test;
  ossl_OSSL_PROVIDER_get_capabilities_t ossl_OSSL_PROVIDER_get_capabilities;
  ossl_OSSL_PROVIDER_query_operation_t ossl_OSSL_PROVIDER_query_operation;
  ossl_OSSL_PROVIDER_unquery_operation_t ossl_OSSL_PROVIDER_unquery_operation;
  ossl_OSSL_PROVIDER_get0_provider_ctx_t ossl_OSSL_PROVIDER_get0_provider_ctx;
  ossl_OSSL_PROVIDER_get0_dispatch_t ossl_OSSL_PROVIDER_get0_dispatch;
  ossl_OSSL_PROVIDER_add_builtin_t ossl_OSSL_PROVIDER_add_builtin;
  ossl_OSSL_PROVIDER_get0_name_t ossl_OSSL_PROVIDER_get0_name;
  ossl_RC2_set_key_t ossl_RC2_set_key;
  ossl_RC2_ecb_encrypt_t ossl_RC2_ecb_encrypt;
  ossl_RC2_encrypt_t ossl_RC2_encrypt;
  ossl_RC2_decrypt_t ossl_RC2_decrypt;
  ossl_RC2_cbc_encrypt_t ossl_RC2_cbc_encrypt;
  ossl_RC2_cfb64_encrypt_t ossl_RC2_cfb64_encrypt;
  ossl_RC2_ofb64_encrypt_t ossl_RC2_ofb64_encrypt;
  ossl_RC4_options_t ossl_RC4_options;
  ossl_RC4_set_key_t ossl_RC4_set_key;
  ossl_RC4_t ossl_RC4;
  ossl_RIPEMD160_Init_t ossl_RIPEMD160_Init;
  ossl_RIPEMD160_Update_t ossl_RIPEMD160_Update;
  ossl_RIPEMD160_Final_t ossl_RIPEMD160_Final;
  ossl_RIPEMD160_t ossl_RIPEMD160;
  ossl_RIPEMD160_Transform_t ossl_RIPEMD160_Transform;
  ossl_SEED_set_key_t ossl_SEED_set_key;
  ossl_SEED_encrypt_t ossl_SEED_encrypt;
  ossl_SEED_decrypt_t ossl_SEED_decrypt;
  ossl_SEED_ecb_encrypt_t ossl_SEED_ecb_encrypt;
  ossl_SEED_cbc_encrypt_t ossl_SEED_cbc_encrypt;
  ossl_SEED_cfb128_encrypt_t ossl_SEED_cfb128_encrypt;
  ossl_SEED_ofb128_encrypt_t ossl_SEED_ofb128_encrypt;
  ossl_OSSL_SELF_TEST_set_callback_t ossl_OSSL_SELF_TEST_set_callback;
  ossl_OSSL_SELF_TEST_get_callback_t ossl_OSSL_SELF_TEST_get_callback;
  ossl_OSSL_SELF_TEST_new_t ossl_OSSL_SELF_TEST_new;
  ossl_OSSL_SELF_TEST_free_t ossl_OSSL_SELF_TEST_free;
  ossl_OSSL_SELF_TEST_onbegin_t ossl_OSSL_SELF_TEST_onbegin;
  ossl_OSSL_SELF_TEST_oncorrupt_byte_t ossl_OSSL_SELF_TEST_oncorrupt_byte;
  ossl_OSSL_SELF_TEST_onend_t ossl_OSSL_SELF_TEST_onend;
  ossl_SRP_user_pwd_new_t ossl_SRP_user_pwd_new;
  ossl_SRP_user_pwd_free_t ossl_SRP_user_pwd_free;
  ossl_SRP_user_pwd_set_gN_t ossl_SRP_user_pwd_set_gN;
  ossl_SRP_user_pwd_set1_ids_t ossl_SRP_user_pwd_set1_ids;
  ossl_SRP_user_pwd_set0_sv_t ossl_SRP_user_pwd_set0_sv;
  ossl_SRP_VBASE_new_t ossl_SRP_VBASE_new;
  ossl_SRP_VBASE_free_t ossl_SRP_VBASE_free;
  ossl_SRP_VBASE_init_t ossl_SRP_VBASE_init;
  ossl_SRP_VBASE_add0_user_t ossl_SRP_VBASE_add0_user;
  ossl_SRP_VBASE_get1_by_user_t ossl_SRP_VBASE_get1_by_user;
  ossl_SRP_create_verifier_ex_t ossl_SRP_create_verifier_ex;
  ossl_SRP_create_verifier_t ossl_SRP_create_verifier;
  ossl_SRP_create_verifier_BN_ex_t ossl_SRP_create_verifier_BN_ex;
  ossl_SRP_create_verifier_BN_t ossl_SRP_create_verifier_BN;
  ossl_SRP_check_known_gN_param_t ossl_SRP_check_known_gN_param;
  ossl_SRP_get_default_gN_t ossl_SRP_get_default_gN;
  ossl_SRP_Calc_server_key_t ossl_SRP_Calc_server_key;
  ossl_SRP_Calc_B_ex_t ossl_SRP_Calc_B_ex;
  ossl_SRP_Calc_B_t ossl_SRP_Calc_B;
  ossl_SRP_Verify_A_mod_N_t ossl_SRP_Verify_A_mod_N;
  ossl_SRP_Calc_u_ex_t ossl_SRP_Calc_u_ex;
  ossl_SRP_Calc_u_t ossl_SRP_Calc_u;
  ossl_SRP_Calc_x_ex_t ossl_SRP_Calc_x_ex;
  ossl_SRP_Calc_x_t ossl_SRP_Calc_x;
  ossl_SRP_Calc_A_t ossl_SRP_Calc_A;
  ossl_SRP_Calc_client_key_ex_t ossl_SRP_Calc_client_key_ex;
  ossl_SRP_Calc_client_key_t ossl_SRP_Calc_client_key;
  ossl_SRP_Verify_B_mod_N_t ossl_SRP_Verify_B_mod_N;
  ossl_SRP_VBASE_get_by_user_t ossl_SRP_VBASE_get_by_user;
  ossl_ERR_load_SSL_strings_t ossl_ERR_load_SSL_strings;
  ossl_SSL_CTX_get_options_t ossl_SSL_CTX_get_options;
  ossl_SSL_get_options_t ossl_SSL_get_options;
  ossl_SSL_CTX_clear_options_t ossl_SSL_CTX_clear_options;
  ossl_SSL_clear_options_t ossl_SSL_clear_options;
  ossl_SSL_CTX_set_options_t ossl_SSL_CTX_set_options;
  ossl_SSL_set_options_t ossl_SSL_set_options;
  ossl_SSL_CTX_set_msg_callback_t ossl_SSL_CTX_set_msg_callback;
  ossl_SSL_set_msg_callback_t ossl_SSL_set_msg_callback;
  ossl_SSL_SRP_CTX_init_t ossl_SSL_SRP_CTX_init;
  ossl_SSL_CTX_SRP_CTX_init_t ossl_SSL_CTX_SRP_CTX_init;
  ossl_SSL_SRP_CTX_free_t ossl_SSL_SRP_CTX_free;
  ossl_SSL_CTX_SRP_CTX_free_t ossl_SSL_CTX_SRP_CTX_free;
  ossl_SSL_srp_server_param_with_username_t ossl_SSL_srp_server_param_with_username;
  ossl_SRP_Calc_A_param_t ossl_SRP_Calc_A_param;
  ossl_SSL_CTX_sessions_t ossl_SSL_CTX_sessions;
  ossl_SSL_CTX_sess_set_new_cb_t ossl_SSL_CTX_sess_set_new_cb;
  ossl_SSL_CTX_sess_get_new_cb_t ossl_SSL_CTX_sess_get_new_cb;
  ossl_SSL_CTX_sess_set_remove_cb_t ossl_SSL_CTX_sess_set_remove_cb;
  ossl_SSL_CTX_sess_get_remove_cb_t ossl_SSL_CTX_sess_get_remove_cb;
  ossl_SSL_CTX_sess_set_get_cb_t ossl_SSL_CTX_sess_set_get_cb;
  ossl_SSL_CTX_sess_get_get_cb_t ossl_SSL_CTX_sess_get_get_cb;
  ossl_SSL_CTX_set_info_callback_t ossl_SSL_CTX_set_info_callback;
  ossl_SSL_CTX_get_info_callback_t ossl_SSL_CTX_get_info_callback;
  ossl_SSL_CTX_set_client_cert_cb_t ossl_SSL_CTX_set_client_cert_cb;
  ossl_SSL_CTX_get_client_cert_cb_t ossl_SSL_CTX_get_client_cert_cb;
  ossl_SSL_CTX_set_client_cert_engine_t ossl_SSL_CTX_set_client_cert_engine;
  ossl_SSL_CTX_set_cookie_generate_cb_t ossl_SSL_CTX_set_cookie_generate_cb;
  ossl_SSL_CTX_set_cookie_verify_cb_t ossl_SSL_CTX_set_cookie_verify_cb;
  ossl_SSL_CTX_set_stateless_cookie_generate_cb_t ossl_SSL_CTX_set_stateless_cookie_generate_cb;
  ossl_SSL_CTX_set_stateless_cookie_verify_cb_t ossl_SSL_CTX_set_stateless_cookie_verify_cb;
  ossl_SSL_CTX_set_next_protos_advertised_cb_t ossl_SSL_CTX_set_next_protos_advertised_cb;
  ossl_SSL_CTX_set_next_proto_select_cb_t ossl_SSL_CTX_set_next_proto_select_cb;
  ossl_SSL_get0_next_proto_negotiated_t ossl_SSL_get0_next_proto_negotiated;
  ossl_SSL_select_next_proto_t ossl_SSL_select_next_proto;
  ossl_SSL_CTX_set_alpn_protos_t ossl_SSL_CTX_set_alpn_protos;
  ossl_SSL_set_alpn_protos_t ossl_SSL_set_alpn_protos;
  ossl_SSL_CTX_set_alpn_select_cb_t ossl_SSL_CTX_set_alpn_select_cb;
  ossl_SSL_get0_alpn_selected_t ossl_SSL_get0_alpn_selected;
  ossl_SSL_CTX_set_psk_client_callback_t ossl_SSL_CTX_set_psk_client_callback;
  ossl_SSL_set_psk_client_callback_t ossl_SSL_set_psk_client_callback;
  ossl_SSL_CTX_set_psk_server_callback_t ossl_SSL_CTX_set_psk_server_callback;
  ossl_SSL_set_psk_server_callback_t ossl_SSL_set_psk_server_callback;
  ossl_SSL_CTX_use_psk_identity_hint_t ossl_SSL_CTX_use_psk_identity_hint;
  ossl_SSL_use_psk_identity_hint_t ossl_SSL_use_psk_identity_hint;
  ossl_SSL_get_psk_identity_hint_t ossl_SSL_get_psk_identity_hint;
  ossl_SSL_get_psk_identity_t ossl_SSL_get_psk_identity;
  ossl_SSL_set_psk_find_session_callback_t ossl_SSL_set_psk_find_session_callback;
  ossl_SSL_CTX_set_psk_find_session_callback_t ossl_SSL_CTX_set_psk_find_session_callback;
  ossl_SSL_set_psk_use_session_callback_t ossl_SSL_set_psk_use_session_callback;
  ossl_SSL_CTX_set_psk_use_session_callback_t ossl_SSL_CTX_set_psk_use_session_callback;
  ossl_SSL_CTX_has_client_custom_ext_t ossl_SSL_CTX_has_client_custom_ext;
  ossl_SSL_CTX_add_client_custom_ext_t ossl_SSL_CTX_add_client_custom_ext;
  ossl_SSL_CTX_add_server_custom_ext_t ossl_SSL_CTX_add_server_custom_ext;
  ossl_SSL_CTX_add_custom_ext_t ossl_SSL_CTX_add_custom_ext;
  ossl_SSL_extension_supported_t ossl_SSL_extension_supported;
  ossl_SSL_CTX_set_keylog_callback_t ossl_SSL_CTX_set_keylog_callback;
  ossl_SSL_CTX_get_keylog_callback_t ossl_SSL_CTX_get_keylog_callback;
  ossl_SSL_CTX_set_max_early_data_t ossl_SSL_CTX_set_max_early_data;
  ossl_SSL_CTX_get_max_early_data_t ossl_SSL_CTX_get_max_early_data;
  ossl_SSL_set_max_early_data_t ossl_SSL_set_max_early_data;
  ossl_SSL_get_max_early_data_t ossl_SSL_get_max_early_data;
  ossl_SSL_CTX_set_recv_max_early_data_t ossl_SSL_CTX_set_recv_max_early_data;
  ossl_SSL_CTX_get_recv_max_early_data_t ossl_SSL_CTX_get_recv_max_early_data;
  ossl_SSL_set_recv_max_early_data_t ossl_SSL_set_recv_max_early_data;
  ossl_SSL_get_recv_max_early_data_t ossl_SSL_get_recv_max_early_data;
  ossl_SSL_CTX_set_tlsext_max_fragment_length_t ossl_SSL_CTX_set_tlsext_max_fragment_length;
  ossl_SSL_set_tlsext_max_fragment_length_t ossl_SSL_set_tlsext_max_fragment_length;
  ossl_SSL_get_servername_t ossl_SSL_get_servername;
  ossl_SSL_get_servername_type_t ossl_SSL_get_servername_type;
  ossl_SSL_export_keying_material_t ossl_SSL_export_keying_material;
  ossl_SSL_export_keying_material_early_t ossl_SSL_export_keying_material_early;
  ossl_SSL_get_peer_signature_type_nid_t ossl_SSL_get_peer_signature_type_nid;
  ossl_SSL_get_signature_type_nid_t ossl_SSL_get_signature_type_nid;
  ossl_SSL_get_sigalgs_t ossl_SSL_get_sigalgs;
  ossl_SSL_get_shared_sigalgs_t ossl_SSL_get_shared_sigalgs;
  ossl_SSL_check_chain_t ossl_SSL_check_chain;
  ossl_SSL_CTX_set_tlsext_ticket_key_evp_cb_t ossl_SSL_CTX_set_tlsext_ticket_key_evp_cb;
  ossl_SSL_set_debug_t ossl_SSL_set_debug;
  ossl_SSL_in_init_t ossl_SSL_in_init;
  ossl_SSL_in_before_t ossl_SSL_in_before;
  ossl_SSL_is_init_finished_t ossl_SSL_is_init_finished;
  ossl_SSL_get_finished_t ossl_SSL_get_finished;
  ossl_SSL_get_peer_finished_t ossl_SSL_get_peer_finished;
  ossl_PEM_read_bio_SSL_SESSION_t ossl_PEM_read_bio_SSL_SESSION;
  ossl_PEM_read_SSL_SESSION_t ossl_PEM_read_SSL_SESSION;
  ossl_PEM_write_bio_SSL_SESSION_t ossl_PEM_write_bio_SSL_SESSION;
  ossl_PEM_write_SSL_SESSION_t ossl_PEM_write_SSL_SESSION;
  ossl_SSL_group_to_name_t ossl_SSL_group_to_name;
  ossl_SSL_set0_tmp_dh_pkey_t ossl_SSL_set0_tmp_dh_pkey;
  ossl_SSL_CTX_set0_tmp_dh_pkey_t ossl_SSL_CTX_set0_tmp_dh_pkey;
  ossl_BIO_f_ssl_t ossl_BIO_f_ssl;
  ossl_BIO_new_ssl_t ossl_BIO_new_ssl;
  ossl_BIO_new_ssl_connect_t ossl_BIO_new_ssl_connect;
  ossl_BIO_new_buffer_ssl_connect_t ossl_BIO_new_buffer_ssl_connect;
  ossl_BIO_ssl_copy_session_id_t ossl_BIO_ssl_copy_session_id;
  ossl_BIO_ssl_shutdown_t ossl_BIO_ssl_shutdown;
  ossl_SSL_CTX_set_cipher_list_t ossl_SSL_CTX_set_cipher_list;
  ossl_SSL_CTX_new_t ossl_SSL_CTX_new;
  ossl_SSL_CTX_new_ex_t ossl_SSL_CTX_new_ex;
  ossl_SSL_CTX_up_ref_t ossl_SSL_CTX_up_ref;
  ossl_SSL_CTX_free_t ossl_SSL_CTX_free;
  ossl_SSL_CTX_set_timeout_t ossl_SSL_CTX_set_timeout;
  ossl_SSL_CTX_get_timeout_t ossl_SSL_CTX_get_timeout;
  ossl_SSL_CTX_get_cert_store_t ossl_SSL_CTX_get_cert_store;
  ossl_SSL_CTX_set_cert_store_t ossl_SSL_CTX_set_cert_store;
  ossl_SSL_CTX_set1_cert_store_t ossl_SSL_CTX_set1_cert_store;
  ossl_SSL_want_t ossl_SSL_want;
  ossl_SSL_clear_t ossl_SSL_clear;
  ossl_SSL_CTX_flush_sessions_t ossl_SSL_CTX_flush_sessions;
  ossl_SSL_get_current_cipher_t ossl_SSL_get_current_cipher;
  ossl_SSL_get_pending_cipher_t ossl_SSL_get_pending_cipher;
  ossl_SSL_CIPHER_get_bits_t ossl_SSL_CIPHER_get_bits;
  ossl_SSL_CIPHER_get_version_t ossl_SSL_CIPHER_get_version;
  ossl_SSL_CIPHER_get_name_t ossl_SSL_CIPHER_get_name;
  ossl_SSL_CIPHER_standard_name_t ossl_SSL_CIPHER_standard_name;
  ossl_OPENSSL_cipher_name_t ossl_OPENSSL_cipher_name;
  ossl_SSL_CIPHER_get_id_t ossl_SSL_CIPHER_get_id;
  ossl_SSL_CIPHER_get_protocol_id_t ossl_SSL_CIPHER_get_protocol_id;
  ossl_SSL_CIPHER_get_kx_nid_t ossl_SSL_CIPHER_get_kx_nid;
  ossl_SSL_CIPHER_get_auth_nid_t ossl_SSL_CIPHER_get_auth_nid;
  ossl_SSL_CIPHER_get_handshake_digest_t ossl_SSL_CIPHER_get_handshake_digest;
  ossl_SSL_CIPHER_is_aead_t ossl_SSL_CIPHER_is_aead;
  ossl_SSL_get_fd_t ossl_SSL_get_fd;
  ossl_SSL_get_rfd_t ossl_SSL_get_rfd;
  ossl_SSL_get_wfd_t ossl_SSL_get_wfd;
  ossl_SSL_get_cipher_list_t ossl_SSL_get_cipher_list;
  ossl_SSL_get_shared_ciphers_t ossl_SSL_get_shared_ciphers;
  ossl_SSL_get_read_ahead_t ossl_SSL_get_read_ahead;
  ossl_SSL_pending_t ossl_SSL_pending;
  ossl_SSL_has_pending_t ossl_SSL_has_pending;
  ossl_SSL_set_fd_t ossl_SSL_set_fd;
  ossl_SSL_set_rfd_t ossl_SSL_set_rfd;
  ossl_SSL_set_wfd_t ossl_SSL_set_wfd;
  ossl_SSL_set0_rbio_t ossl_SSL_set0_rbio;
  ossl_SSL_set0_wbio_t ossl_SSL_set0_wbio;
  ossl_SSL_set_bio_t ossl_SSL_set_bio;
  ossl_SSL_get_rbio_t ossl_SSL_get_rbio;
  ossl_SSL_get_wbio_t ossl_SSL_get_wbio;
  ossl_SSL_set_cipher_list_t ossl_SSL_set_cipher_list;
  ossl_SSL_CTX_set_ciphersuites_t ossl_SSL_CTX_set_ciphersuites;
  ossl_SSL_set_ciphersuites_t ossl_SSL_set_ciphersuites;
  ossl_SSL_set_read_ahead_t ossl_SSL_set_read_ahead;
  ossl_SSL_get_verify_mode_t ossl_SSL_get_verify_mode;
  ossl_SSL_get_verify_depth_t ossl_SSL_get_verify_depth;
  ossl_SSL_get_verify_callback_t ossl_SSL_get_verify_callback;
  ossl_SSL_set_verify_t ossl_SSL_set_verify;
  ossl_SSL_set_verify_depth_t ossl_SSL_set_verify_depth;
  ossl_SSL_set_cert_cb_t ossl_SSL_set_cert_cb;
  ossl_SSL_use_RSAPrivateKey_t ossl_SSL_use_RSAPrivateKey;
  ossl_SSL_use_RSAPrivateKey_ASN1_t ossl_SSL_use_RSAPrivateKey_ASN1;
  ossl_SSL_use_PrivateKey_t ossl_SSL_use_PrivateKey;
  ossl_SSL_use_PrivateKey_ASN1_t ossl_SSL_use_PrivateKey_ASN1;
  ossl_SSL_use_certificate_t ossl_SSL_use_certificate;
  ossl_SSL_use_certificate_ASN1_t ossl_SSL_use_certificate_ASN1;
  ossl_SSL_use_cert_and_key_t ossl_SSL_use_cert_and_key;
  ossl_SSL_CTX_use_serverinfo_t ossl_SSL_CTX_use_serverinfo;
  ossl_SSL_CTX_use_serverinfo_ex_t ossl_SSL_CTX_use_serverinfo_ex;
  ossl_SSL_CTX_use_serverinfo_file_t ossl_SSL_CTX_use_serverinfo_file;
  ossl_SSL_use_RSAPrivateKey_file_t ossl_SSL_use_RSAPrivateKey_file;
  ossl_SSL_use_PrivateKey_file_t ossl_SSL_use_PrivateKey_file;
  ossl_SSL_use_certificate_file_t ossl_SSL_use_certificate_file;
  ossl_SSL_CTX_use_RSAPrivateKey_file_t ossl_SSL_CTX_use_RSAPrivateKey_file;
  ossl_SSL_CTX_use_PrivateKey_file_t ossl_SSL_CTX_use_PrivateKey_file;
  ossl_SSL_CTX_use_certificate_file_t ossl_SSL_CTX_use_certificate_file;
  ossl_SSL_CTX_use_certificate_chain_file_t ossl_SSL_CTX_use_certificate_chain_file;
  ossl_SSL_use_certificate_chain_file_t ossl_SSL_use_certificate_chain_file;
  ossl_SSL_load_client_CA_file_t ossl_SSL_load_client_CA_file;
  ossl_SSL_load_client_CA_file_ex_t ossl_SSL_load_client_CA_file_ex;
  ossl_SSL_add_file_cert_subjects_to_stack_t ossl_SSL_add_file_cert_subjects_to_stack;
  ossl_SSL_add_dir_cert_subjects_to_stack_t ossl_SSL_add_dir_cert_subjects_to_stack;
  ossl_SSL_add_store_cert_subjects_to_stack_t ossl_SSL_add_store_cert_subjects_to_stack;
  ossl_SSL_state_string_t ossl_SSL_state_string;
  ossl_SSL_rstate_string_t ossl_SSL_rstate_string;
  ossl_SSL_state_string_long_t ossl_SSL_state_string_long;
  ossl_SSL_rstate_string_long_t ossl_SSL_rstate_string_long;
  ossl_SSL_SESSION_get_time_t ossl_SSL_SESSION_get_time;
  ossl_SSL_SESSION_set_time_t ossl_SSL_SESSION_set_time;
  ossl_SSL_SESSION_get_timeout_t ossl_SSL_SESSION_get_timeout;
  ossl_SSL_SESSION_set_timeout_t ossl_SSL_SESSION_set_timeout;
  ossl_SSL_SESSION_get_protocol_version_t ossl_SSL_SESSION_get_protocol_version;
  ossl_SSL_SESSION_set_protocol_version_t ossl_SSL_SESSION_set_protocol_version;
  ossl_SSL_SESSION_get0_hostname_t ossl_SSL_SESSION_get0_hostname;
  ossl_SSL_SESSION_set1_hostname_t ossl_SSL_SESSION_set1_hostname;
  ossl_SSL_SESSION_get0_alpn_selected_t ossl_SSL_SESSION_get0_alpn_selected;
  ossl_SSL_SESSION_set1_alpn_selected_t ossl_SSL_SESSION_set1_alpn_selected;
  ossl_SSL_SESSION_get0_cipher_t ossl_SSL_SESSION_get0_cipher;
  ossl_SSL_SESSION_set_cipher_t ossl_SSL_SESSION_set_cipher;
  ossl_SSL_SESSION_has_ticket_t ossl_SSL_SESSION_has_ticket;
  ossl_SSL_SESSION_get_ticket_lifetime_hint_t ossl_SSL_SESSION_get_ticket_lifetime_hint;
  ossl_SSL_SESSION_get0_ticket_t ossl_SSL_SESSION_get0_ticket;
  ossl_SSL_SESSION_get_max_early_data_t ossl_SSL_SESSION_get_max_early_data;
  ossl_SSL_SESSION_set_max_early_data_t ossl_SSL_SESSION_set_max_early_data;
  ossl_SSL_copy_session_id_t ossl_SSL_copy_session_id;
  ossl_SSL_SESSION_get0_peer_t ossl_SSL_SESSION_get0_peer;
  ossl_SSL_SESSION_set1_id_context_t ossl_SSL_SESSION_set1_id_context;
  ossl_SSL_SESSION_set1_id_t ossl_SSL_SESSION_set1_id;
  ossl_SSL_SESSION_is_resumable_t ossl_SSL_SESSION_is_resumable;
  ossl_SSL_SESSION_new_t ossl_SSL_SESSION_new;
  ossl_SSL_SESSION_dup_t ossl_SSL_SESSION_dup;
  ossl_SSL_SESSION_get_id_t ossl_SSL_SESSION_get_id;
  ossl_SSL_SESSION_get0_id_context_t ossl_SSL_SESSION_get0_id_context;
  ossl_SSL_SESSION_get_compress_id_t ossl_SSL_SESSION_get_compress_id;
  ossl_SSL_SESSION_print_fp_t ossl_SSL_SESSION_print_fp;
  ossl_SSL_SESSION_print_t ossl_SSL_SESSION_print;
  ossl_SSL_SESSION_print_keylog_t ossl_SSL_SESSION_print_keylog;
  ossl_SSL_SESSION_up_ref_t ossl_SSL_SESSION_up_ref;
  ossl_SSL_SESSION_free_t ossl_SSL_SESSION_free;
  ossl_i2d_SSL_SESSION_t ossl_i2d_SSL_SESSION;
  ossl_SSL_set_session_t ossl_SSL_set_session;
  ossl_SSL_CTX_add_session_t ossl_SSL_CTX_add_session;
  ossl_SSL_CTX_remove_session_t ossl_SSL_CTX_remove_session;
  ossl_SSL_CTX_set_generate_session_id_t ossl_SSL_CTX_set_generate_session_id;
  ossl_SSL_set_generate_session_id_t ossl_SSL_set_generate_session_id;
  ossl_SSL_has_matching_session_id_t ossl_SSL_has_matching_session_id;
  ossl_d2i_SSL_SESSION_t ossl_d2i_SSL_SESSION;
  ossl_SSL_get0_peer_certificate_t ossl_SSL_get0_peer_certificate;
  ossl_SSL_get1_peer_certificate_t ossl_SSL_get1_peer_certificate;
  ossl_SSL_get_peer_cert_chain_t ossl_SSL_get_peer_cert_chain;
  ossl_SSL_CTX_get_verify_mode_t ossl_SSL_CTX_get_verify_mode;
  ossl_SSL_CTX_get_verify_depth_t ossl_SSL_CTX_get_verify_depth;
  ossl_SSL_CTX_get_verify_callback_t ossl_SSL_CTX_get_verify_callback;
  ossl_SSL_CTX_set_verify_t ossl_SSL_CTX_set_verify;
  ossl_SSL_CTX_set_verify_depth_t ossl_SSL_CTX_set_verify_depth;
  ossl_SSL_CTX_set_cert_verify_callback_t ossl_SSL_CTX_set_cert_verify_callback;
  ossl_SSL_CTX_set_cert_cb_t ossl_SSL_CTX_set_cert_cb;
  ossl_SSL_CTX_use_RSAPrivateKey_t ossl_SSL_CTX_use_RSAPrivateKey;
  ossl_SSL_CTX_use_RSAPrivateKey_ASN1_t ossl_SSL_CTX_use_RSAPrivateKey_ASN1;
  ossl_SSL_CTX_use_PrivateKey_t ossl_SSL_CTX_use_PrivateKey;
  ossl_SSL_CTX_use_PrivateKey_ASN1_t ossl_SSL_CTX_use_PrivateKey_ASN1;
  ossl_SSL_CTX_use_certificate_t ossl_SSL_CTX_use_certificate;
  ossl_SSL_CTX_use_certificate_ASN1_t ossl_SSL_CTX_use_certificate_ASN1;
  ossl_SSL_CTX_use_cert_and_key_t ossl_SSL_CTX_use_cert_and_key;
  ossl_SSL_CTX_set_default_passwd_cb_t ossl_SSL_CTX_set_default_passwd_cb;
  ossl_SSL_CTX_set_default_passwd_cb_userdata_t ossl_SSL_CTX_set_default_passwd_cb_userdata;
  ossl_SSL_CTX_get_default_passwd_cb_t ossl_SSL_CTX_get_default_passwd_cb;
  ossl_SSL_CTX_get_default_passwd_cb_userdata_t ossl_SSL_CTX_get_default_passwd_cb_userdata;
  ossl_SSL_set_default_passwd_cb_t ossl_SSL_set_default_passwd_cb;
  ossl_SSL_set_default_passwd_cb_userdata_t ossl_SSL_set_default_passwd_cb_userdata;
  ossl_SSL_get_default_passwd_cb_t ossl_SSL_get_default_passwd_cb;
  ossl_SSL_get_default_passwd_cb_userdata_t ossl_SSL_get_default_passwd_cb_userdata;
  ossl_SSL_CTX_check_private_key_t ossl_SSL_CTX_check_private_key;
  ossl_SSL_check_private_key_t ossl_SSL_check_private_key;
  ossl_SSL_CTX_set_session_id_context_t ossl_SSL_CTX_set_session_id_context;
  ossl_SSL_new_t ossl_SSL_new;
  ossl_SSL_up_ref_t ossl_SSL_up_ref;
  ossl_SSL_is_dtls_t ossl_SSL_is_dtls;
  ossl_SSL_set_session_id_context_t ossl_SSL_set_session_id_context;
  ossl_SSL_CTX_set_purpose_t ossl_SSL_CTX_set_purpose;
  ossl_SSL_set_purpose_t ossl_SSL_set_purpose;
  ossl_SSL_CTX_set_trust_t ossl_SSL_CTX_set_trust;
  ossl_SSL_set_trust_t ossl_SSL_set_trust;
  ossl_SSL_set1_host_t ossl_SSL_set1_host;
  ossl_SSL_add1_host_t ossl_SSL_add1_host;
  ossl_SSL_get0_peername_t ossl_SSL_get0_peername;
  ossl_SSL_set_hostflags_t ossl_SSL_set_hostflags;
  ossl_SSL_CTX_dane_enable_t ossl_SSL_CTX_dane_enable;
  ossl_SSL_CTX_dane_mtype_set_t ossl_SSL_CTX_dane_mtype_set;
  ossl_SSL_dane_enable_t ossl_SSL_dane_enable;
  ossl_SSL_dane_tlsa_add_t ossl_SSL_dane_tlsa_add;
  ossl_SSL_get0_dane_authority_t ossl_SSL_get0_dane_authority;
  ossl_SSL_get0_dane_tlsa_t ossl_SSL_get0_dane_tlsa;
  ossl_SSL_get0_dane_t ossl_SSL_get0_dane;
  ossl_SSL_CTX_dane_set_flags_t ossl_SSL_CTX_dane_set_flags;
  ossl_SSL_CTX_dane_clear_flags_t ossl_SSL_CTX_dane_clear_flags;
  ossl_SSL_dane_set_flags_t ossl_SSL_dane_set_flags;
  ossl_SSL_dane_clear_flags_t ossl_SSL_dane_clear_flags;
  ossl_SSL_CTX_set1_param_t ossl_SSL_CTX_set1_param;
  ossl_SSL_set1_param_t ossl_SSL_set1_param;
  ossl_SSL_CTX_get0_param_t ossl_SSL_CTX_get0_param;
  ossl_SSL_get0_param_t ossl_SSL_get0_param;
  ossl_SSL_CTX_set_srp_username_t ossl_SSL_CTX_set_srp_username;
  ossl_SSL_CTX_set_srp_password_t ossl_SSL_CTX_set_srp_password;
  ossl_SSL_CTX_set_srp_strength_t ossl_SSL_CTX_set_srp_strength;
  ossl_SSL_CTX_set_srp_client_pwd_callback_t ossl_SSL_CTX_set_srp_client_pwd_callback;
  ossl_SSL_CTX_set_srp_verify_param_callback_t ossl_SSL_CTX_set_srp_verify_param_callback;
  ossl_SSL_CTX_set_srp_username_callback_t ossl_SSL_CTX_set_srp_username_callback;
  ossl_SSL_CTX_set_srp_cb_arg_t ossl_SSL_CTX_set_srp_cb_arg;
  ossl_SSL_set_srp_server_param_t ossl_SSL_set_srp_server_param;
  ossl_SSL_set_srp_server_param_pw_t ossl_SSL_set_srp_server_param_pw;
  ossl_SSL_get_srp_g_t ossl_SSL_get_srp_g;
  ossl_SSL_get_srp_N_t ossl_SSL_get_srp_N;
  ossl_SSL_get_srp_username_t ossl_SSL_get_srp_username;
  ossl_SSL_get_srp_userinfo_t ossl_SSL_get_srp_userinfo;
  ossl_SSL_CTX_set_client_hello_cb_t ossl_SSL_CTX_set_client_hello_cb;
  ossl_SSL_client_hello_isv2_t ossl_SSL_client_hello_isv2;
  ossl_SSL_client_hello_get0_legacy_version_t ossl_SSL_client_hello_get0_legacy_version;
  ossl_SSL_client_hello_get0_random_t ossl_SSL_client_hello_get0_random;
  ossl_SSL_client_hello_get0_session_id_t ossl_SSL_client_hello_get0_session_id;
  ossl_SSL_client_hello_get0_ciphers_t ossl_SSL_client_hello_get0_ciphers;
  ossl_SSL_client_hello_get0_compression_methods_t ossl_SSL_client_hello_get0_compression_methods;
  ossl_SSL_client_hello_get1_extensions_present_t ossl_SSL_client_hello_get1_extensions_present;
  ossl_SSL_client_hello_get0_ext_t ossl_SSL_client_hello_get0_ext;
  ossl_SSL_certs_clear_t ossl_SSL_certs_clear;
  ossl_SSL_free_t ossl_SSL_free;
  ossl_SSL_waiting_for_async_t ossl_SSL_waiting_for_async;
  ossl_SSL_get_all_async_fds_t ossl_SSL_get_all_async_fds;
  ossl_SSL_get_changed_async_fds_t ossl_SSL_get_changed_async_fds;
  ossl_SSL_CTX_set_async_callback_t ossl_SSL_CTX_set_async_callback;
  ossl_SSL_CTX_set_async_callback_arg_t ossl_SSL_CTX_set_async_callback_arg;
  ossl_SSL_set_async_callback_t ossl_SSL_set_async_callback;
  ossl_SSL_set_async_callback_arg_t ossl_SSL_set_async_callback_arg;
  ossl_SSL_get_async_status_t ossl_SSL_get_async_status;
  ossl_SSL_accept_t ossl_SSL_accept;
  ossl_SSL_stateless_t ossl_SSL_stateless;
  ossl_SSL_connect_t ossl_SSL_connect;
  ossl_SSL_read_t ossl_SSL_read;
  ossl_SSL_read_ex_t ossl_SSL_read_ex;
  ossl_SSL_read_early_data_t ossl_SSL_read_early_data;
  ossl_SSL_peek_t ossl_SSL_peek;
  ossl_SSL_peek_ex_t ossl_SSL_peek_ex;
  ossl_SSL_sendfile_t ossl_SSL_sendfile;
  ossl_SSL_write_t ossl_SSL_write;
  ossl_SSL_write_ex_t ossl_SSL_write_ex;
  ossl_SSL_write_early_data_t ossl_SSL_write_early_data;
  ossl_SSL_ctrl_t ossl_SSL_ctrl;
  ossl_SSL_callback_ctrl_t ossl_SSL_callback_ctrl;
  ossl_SSL_CTX_ctrl_t ossl_SSL_CTX_ctrl;
  ossl_SSL_CTX_callback_ctrl_t ossl_SSL_CTX_callback_ctrl;
  ossl_SSL_get_early_data_status_t ossl_SSL_get_early_data_status;
  ossl_SSL_get_error_t ossl_SSL_get_error;
  ossl_SSL_get_version_t ossl_SSL_get_version;
  ossl_SSL_CTX_set_ssl_version_t ossl_SSL_CTX_set_ssl_version;
  ossl_TLS_method_t ossl_TLS_method;
  ossl_TLS_server_method_t ossl_TLS_server_method;
  ossl_TLS_client_method_t ossl_TLS_client_method;
  ossl_TLSv1_method_t ossl_TLSv1_method;
  ossl_TLSv1_server_method_t ossl_TLSv1_server_method;
  ossl_TLSv1_client_method_t ossl_TLSv1_client_method;
  ossl_TLSv1_1_method_t ossl_TLSv1_1_method;
  ossl_TLSv1_1_server_method_t ossl_TLSv1_1_server_method;
  ossl_TLSv1_1_client_method_t ossl_TLSv1_1_client_method;
  ossl_TLSv1_2_method_t ossl_TLSv1_2_method;
  ossl_TLSv1_2_server_method_t ossl_TLSv1_2_server_method;
  ossl_TLSv1_2_client_method_t ossl_TLSv1_2_client_method;
  ossl_DTLSv1_method_t ossl_DTLSv1_method;
  ossl_DTLSv1_server_method_t ossl_DTLSv1_server_method;
  ossl_DTLSv1_client_method_t ossl_DTLSv1_client_method;
  ossl_DTLSv1_2_method_t ossl_DTLSv1_2_method;
  ossl_DTLSv1_2_server_method_t ossl_DTLSv1_2_server_method;
  ossl_DTLSv1_2_client_method_t ossl_DTLSv1_2_client_method;
  ossl_DTLS_method_t ossl_DTLS_method;
  ossl_DTLS_server_method_t ossl_DTLS_server_method;
  ossl_DTLS_client_method_t ossl_DTLS_client_method;
  ossl_DTLS_get_data_mtu_t ossl_DTLS_get_data_mtu;
  ossl_SSL_get_ciphers_t ossl_SSL_get_ciphers;
  ossl_SSL_CTX_get_ciphers_t ossl_SSL_CTX_get_ciphers;
  ossl_SSL_get_client_ciphers_t ossl_SSL_get_client_ciphers;
  ossl_SSL_get1_supported_ciphers_t ossl_SSL_get1_supported_ciphers;
  ossl_SSL_do_handshake_t ossl_SSL_do_handshake;
  ossl_SSL_key_update_t ossl_SSL_key_update;
  ossl_SSL_get_key_update_type_t ossl_SSL_get_key_update_type;
  ossl_SSL_renegotiate_t ossl_SSL_renegotiate;
  ossl_SSL_renegotiate_abbreviated_t ossl_SSL_renegotiate_abbreviated;
  ossl_SSL_renegotiate_pending_t ossl_SSL_renegotiate_pending;
  ossl_SSL_new_session_ticket_t ossl_SSL_new_session_ticket;
  ossl_SSL_shutdown_t ossl_SSL_shutdown;
  ossl_SSL_verify_client_post_handshake_t ossl_SSL_verify_client_post_handshake;
  ossl_SSL_CTX_set_post_handshake_auth_t ossl_SSL_CTX_set_post_handshake_auth;
  ossl_SSL_set_post_handshake_auth_t ossl_SSL_set_post_handshake_auth;
  ossl_SSL_CTX_get_ssl_method_t ossl_SSL_CTX_get_ssl_method;
  ossl_SSL_get_ssl_method_t ossl_SSL_get_ssl_method;
  ossl_SSL_set_ssl_method_t ossl_SSL_set_ssl_method;
  ossl_SSL_alert_type_string_long_t ossl_SSL_alert_type_string_long;
  ossl_SSL_alert_type_string_t ossl_SSL_alert_type_string;
  ossl_SSL_alert_desc_string_long_t ossl_SSL_alert_desc_string_long;
  ossl_SSL_alert_desc_string_t ossl_SSL_alert_desc_string;
  ossl_SSL_set0_CA_list_t ossl_SSL_set0_CA_list;
  ossl_SSL_CTX_set0_CA_list_t ossl_SSL_CTX_set0_CA_list;
  ossl_SSL_get0_CA_list_t ossl_SSL_get0_CA_list;
  ossl_SSL_CTX_get0_CA_list_t ossl_SSL_CTX_get0_CA_list;
  ossl_SSL_add1_to_CA_list_t ossl_SSL_add1_to_CA_list;
  ossl_SSL_CTX_add1_to_CA_list_t ossl_SSL_CTX_add1_to_CA_list;
  ossl_SSL_get0_peer_CA_list_t ossl_SSL_get0_peer_CA_list;
  ossl_SSL_set_client_CA_list_t ossl_SSL_set_client_CA_list;
  ossl_SSL_CTX_set_client_CA_list_t ossl_SSL_CTX_set_client_CA_list;
  ossl_SSL_get_client_CA_list_t ossl_SSL_get_client_CA_list;
  ossl_SSL_CTX_get_client_CA_list_t ossl_SSL_CTX_get_client_CA_list;
  ossl_SSL_add_client_CA_t ossl_SSL_add_client_CA;
  ossl_SSL_CTX_add_client_CA_t ossl_SSL_CTX_add_client_CA;
  ossl_SSL_set_connect_state_t ossl_SSL_set_connect_state;
  ossl_SSL_set_accept_state_t ossl_SSL_set_accept_state;
  ossl_SSL_get_default_timeout_t ossl_SSL_get_default_timeout;
  ossl_SSL_CIPHER_description_t ossl_SSL_CIPHER_description;
  ossl_SSL_dup_CA_list_t ossl_SSL_dup_CA_list;
  ossl_SSL_dup_t ossl_SSL_dup;
  ossl_SSL_get_certificate_t ossl_SSL_get_certificate;
  ossl_SSL_get_privatekey_t ossl_SSL_get_privatekey;
  ossl_SSL_CTX_get0_certificate_t ossl_SSL_CTX_get0_certificate;
  ossl_SSL_CTX_get0_privatekey_t ossl_SSL_CTX_get0_privatekey;
  ossl_SSL_CTX_set_quiet_shutdown_t ossl_SSL_CTX_set_quiet_shutdown;
  ossl_SSL_CTX_get_quiet_shutdown_t ossl_SSL_CTX_get_quiet_shutdown;
  ossl_SSL_set_quiet_shutdown_t ossl_SSL_set_quiet_shutdown;
  ossl_SSL_get_quiet_shutdown_t ossl_SSL_get_quiet_shutdown;
  ossl_SSL_set_shutdown_t ossl_SSL_set_shutdown;
  ossl_SSL_get_shutdown_t ossl_SSL_get_shutdown;
  ossl_SSL_version_t ossl_SSL_version;
  ossl_SSL_client_version_t ossl_SSL_client_version;
  ossl_SSL_CTX_set_default_verify_paths_t ossl_SSL_CTX_set_default_verify_paths;
  ossl_SSL_CTX_set_default_verify_dir_t ossl_SSL_CTX_set_default_verify_dir;
  ossl_SSL_CTX_set_default_verify_file_t ossl_SSL_CTX_set_default_verify_file;
  ossl_SSL_CTX_set_default_verify_store_t ossl_SSL_CTX_set_default_verify_store;
  ossl_SSL_CTX_load_verify_file_t ossl_SSL_CTX_load_verify_file;
  ossl_SSL_CTX_load_verify_dir_t ossl_SSL_CTX_load_verify_dir;
  ossl_SSL_CTX_load_verify_store_t ossl_SSL_CTX_load_verify_store;
  ossl_SSL_CTX_load_verify_locations_t ossl_SSL_CTX_load_verify_locations;
  ossl_SSL_get_session_t ossl_SSL_get_session;
  ossl_SSL_get1_session_t ossl_SSL_get1_session;
  ossl_SSL_get_SSL_CTX_t ossl_SSL_get_SSL_CTX;
  ossl_SSL_set_SSL_CTX_t ossl_SSL_set_SSL_CTX;
  ossl_SSL_set_info_callback_t ossl_SSL_set_info_callback;
  ossl_SSL_get_info_callback_t ossl_SSL_get_info_callback;
  ossl_SSL_get_state_t ossl_SSL_get_state;
  ossl_SSL_set_verify_result_t ossl_SSL_set_verify_result;
  ossl_SSL_get_verify_result_t ossl_SSL_get_verify_result;
  ossl_SSL_get0_verified_chain_t ossl_SSL_get0_verified_chain;
  ossl_SSL_get_client_random_t ossl_SSL_get_client_random;
  ossl_SSL_get_server_random_t ossl_SSL_get_server_random;
  ossl_SSL_SESSION_get_master_key_t ossl_SSL_SESSION_get_master_key;
  ossl_SSL_SESSION_set1_master_key_t ossl_SSL_SESSION_set1_master_key;
  ossl_SSL_SESSION_get_max_fragment_length_t ossl_SSL_SESSION_get_max_fragment_length;
  ossl_SSL_set_ex_data_t ossl_SSL_set_ex_data;
  ossl_SSL_get_ex_data_t ossl_SSL_get_ex_data;
  ossl_SSL_SESSION_set_ex_data_t ossl_SSL_SESSION_set_ex_data;
  ossl_SSL_SESSION_get_ex_data_t ossl_SSL_SESSION_get_ex_data;
  ossl_SSL_CTX_set_ex_data_t ossl_SSL_CTX_set_ex_data;
  ossl_SSL_CTX_get_ex_data_t ossl_SSL_CTX_get_ex_data;
  ossl_SSL_get_ex_data_X509_STORE_CTX_idx_t ossl_SSL_get_ex_data_X509_STORE_CTX_idx;
  ossl_SSL_CTX_set_default_read_buffer_len_t ossl_SSL_CTX_set_default_read_buffer_len;
  ossl_SSL_set_default_read_buffer_len_t ossl_SSL_set_default_read_buffer_len;
  ossl_SSL_CTX_set_tmp_dh_callback_t ossl_SSL_CTX_set_tmp_dh_callback;
  ossl_SSL_set_tmp_dh_callback_t ossl_SSL_set_tmp_dh_callback;
  ossl_SSL_get_current_compression_t ossl_SSL_get_current_compression;
  ossl_SSL_get_current_expansion_t ossl_SSL_get_current_expansion;
  ossl_SSL_COMP_get_name_t ossl_SSL_COMP_get_name;
  ossl_SSL_COMP_get0_name_t ossl_SSL_COMP_get0_name;
  ossl_SSL_COMP_get_id_t ossl_SSL_COMP_get_id;
  ossl_SSL_COMP_get_compression_methods_t ossl_SSL_COMP_get_compression_methods;
  ossl_SSL_COMP_set0_compression_methods_t ossl_SSL_COMP_set0_compression_methods;
  ossl_SSL_COMP_add_compression_method_t ossl_SSL_COMP_add_compression_method;
  ossl_SSL_CIPHER_find_t ossl_SSL_CIPHER_find;
  ossl_SSL_CIPHER_get_cipher_nid_t ossl_SSL_CIPHER_get_cipher_nid;
  ossl_SSL_CIPHER_get_digest_nid_t ossl_SSL_CIPHER_get_digest_nid;
  ossl_SSL_bytes_to_cipher_list_t ossl_SSL_bytes_to_cipher_list;
  ossl_SSL_set_session_ticket_ext_t ossl_SSL_set_session_ticket_ext;
  ossl_SSL_set_session_ticket_ext_cb_t ossl_SSL_set_session_ticket_ext_cb;
  ossl_SSL_set_session_secret_cb_t ossl_SSL_set_session_secret_cb;
  ossl_SSL_CTX_set_not_resumable_session_callback_t ossl_SSL_CTX_set_not_resumable_session_callback;
  ossl_SSL_set_not_resumable_session_callback_t ossl_SSL_set_not_resumable_session_callback;
  ossl_SSL_CTX_set_record_padding_callback_t ossl_SSL_CTX_set_record_padding_callback;
  ossl_SSL_CTX_set_record_padding_callback_arg_t ossl_SSL_CTX_set_record_padding_callback_arg;
  ossl_SSL_CTX_get_record_padding_callback_arg_t ossl_SSL_CTX_get_record_padding_callback_arg;
  ossl_SSL_CTX_set_block_padding_t ossl_SSL_CTX_set_block_padding;
  ossl_SSL_set_record_padding_callback_t ossl_SSL_set_record_padding_callback;
  ossl_SSL_set_record_padding_callback_arg_t ossl_SSL_set_record_padding_callback_arg;
  ossl_SSL_get_record_padding_callback_arg_t ossl_SSL_get_record_padding_callback_arg;
  ossl_SSL_set_block_padding_t ossl_SSL_set_block_padding;
  ossl_SSL_set_num_tickets_t ossl_SSL_set_num_tickets;
  ossl_SSL_get_num_tickets_t ossl_SSL_get_num_tickets;
  ossl_SSL_CTX_set_num_tickets_t ossl_SSL_CTX_set_num_tickets;
  ossl_SSL_CTX_get_num_tickets_t ossl_SSL_CTX_get_num_tickets;
  ossl_SSL_session_reused_t ossl_SSL_session_reused;
  ossl_SSL_is_server_t ossl_SSL_is_server;
  ossl_SSL_CONF_CTX_new_t ossl_SSL_CONF_CTX_new;
  ossl_SSL_CONF_CTX_finish_t ossl_SSL_CONF_CTX_finish;
  ossl_SSL_CONF_CTX_free_t ossl_SSL_CONF_CTX_free;
  ossl_SSL_CONF_CTX_set_flags_t ossl_SSL_CONF_CTX_set_flags;
  ossl_SSL_CONF_CTX_clear_flags_t ossl_SSL_CONF_CTX_clear_flags;
  ossl_SSL_CONF_CTX_set1_prefix_t ossl_SSL_CONF_CTX_set1_prefix;
  ossl_SSL_CONF_CTX_set_ssl_t ossl_SSL_CONF_CTX_set_ssl;
  ossl_SSL_CONF_CTX_set_ssl_ctx_t ossl_SSL_CONF_CTX_set_ssl_ctx;
  ossl_SSL_CONF_cmd_t ossl_SSL_CONF_cmd;
  ossl_SSL_CONF_cmd_argv_t ossl_SSL_CONF_cmd_argv;
  ossl_SSL_CONF_cmd_value_type_t ossl_SSL_CONF_cmd_value_type;
  ossl_SSL_add_ssl_module_t ossl_SSL_add_ssl_module;
  ossl_SSL_config_t ossl_SSL_config;
  ossl_SSL_CTX_config_t ossl_SSL_CTX_config;
  ossl_SSL_trace_t ossl_SSL_trace;
  ossl_DTLSv1_listen_t ossl_DTLSv1_listen;
  ossl_SSL_set_ct_validation_callback_t ossl_SSL_set_ct_validation_callback;
  ossl_SSL_CTX_set_ct_validation_callback_t ossl_SSL_CTX_set_ct_validation_callback;
  ossl_SSL_enable_ct_t ossl_SSL_enable_ct;
  ossl_SSL_CTX_enable_ct_t ossl_SSL_CTX_enable_ct;
  ossl_SSL_ct_is_enabled_t ossl_SSL_ct_is_enabled;
  ossl_SSL_CTX_ct_is_enabled_t ossl_SSL_CTX_ct_is_enabled;
  ossl_SSL_get0_peer_scts_t ossl_SSL_get0_peer_scts;
  ossl_SSL_CTX_set_default_ctlog_list_file_t ossl_SSL_CTX_set_default_ctlog_list_file;
  ossl_SSL_CTX_set_ctlog_list_file_t ossl_SSL_CTX_set_ctlog_list_file;
  ossl_SSL_CTX_set0_ctlog_store_t ossl_SSL_CTX_set0_ctlog_store;
  ossl_SSL_CTX_get0_ctlog_store_t ossl_SSL_CTX_get0_ctlog_store;
  ossl_SSL_set_security_level_t ossl_SSL_set_security_level;
  ossl_SSL_get_security_level_t ossl_SSL_get_security_level;
  ossl_SSL_set_security_callback_t ossl_SSL_set_security_callback;
  ossl_SSL_get_security_callback_t ossl_SSL_get_security_callback;
  ossl_SSL_set0_security_ex_data_t ossl_SSL_set0_security_ex_data;
  ossl_SSL_get0_security_ex_data_t ossl_SSL_get0_security_ex_data;
  ossl_SSL_CTX_set_security_level_t ossl_SSL_CTX_set_security_level;
  ossl_SSL_CTX_get_security_level_t ossl_SSL_CTX_get_security_level;
  ossl_SSL_CTX_set_security_callback_t ossl_SSL_CTX_set_security_callback;
  ossl_SSL_CTX_get_security_callback_t ossl_SSL_CTX_get_security_callback;
  ossl_SSL_CTX_set0_security_ex_data_t ossl_SSL_CTX_set0_security_ex_data;
  ossl_SSL_CTX_get0_security_ex_data_t ossl_SSL_CTX_get0_security_ex_data;
  ossl_OPENSSL_init_ssl_t ossl_OPENSSL_init_ssl;
  ossl_SSL_free_buffers_t ossl_SSL_free_buffers;
  ossl_SSL_alloc_buffers_t ossl_SSL_alloc_buffers;
  ossl_SSL_CTX_set_session_ticket_cb_t ossl_SSL_CTX_set_session_ticket_cb;
  ossl_SSL_SESSION_set1_ticket_appdata_t ossl_SSL_SESSION_set1_ticket_appdata;
  ossl_SSL_SESSION_get0_ticket_appdata_t ossl_SSL_SESSION_get0_ticket_appdata;
  ossl_DTLS_set_timer_cb_t ossl_DTLS_set_timer_cb;
  ossl_SSL_CTX_set_allow_early_data_cb_t ossl_SSL_CTX_set_allow_early_data_cb;
  ossl_SSL_set_allow_early_data_cb_t ossl_SSL_set_allow_early_data_cb;
  ossl_OSSL_default_cipher_list_t ossl_OSSL_default_cipher_list;
  ossl_OSSL_default_ciphersuites_t ossl_OSSL_default_ciphersuites;
  ossl_SSL_CTX_set_tlsext_use_srtp_t ossl_SSL_CTX_set_tlsext_use_srtp;
  ossl_SSL_set_tlsext_use_srtp_t ossl_SSL_set_tlsext_use_srtp;
  ossl_SSL_get_srtp_profiles_t ossl_SSL_get_srtp_profiles;
  ossl_SSL_get_selected_srtp_profile_t ossl_SSL_get_selected_srtp_profile;
  ossl_OSSL_STORE_open_t ossl_OSSL_STORE_open;
  ossl_OSSL_STORE_open_ex_t ossl_OSSL_STORE_open_ex;
  ossl_OSSL_STORE_ctrl_t ossl_OSSL_STORE_ctrl;
  ossl_OSSL_STORE_vctrl_t ossl_OSSL_STORE_vctrl;
  ossl_OSSL_STORE_load_t ossl_OSSL_STORE_load;
  ossl_OSSL_STORE_eof_t ossl_OSSL_STORE_eof;
  ossl_OSSL_STORE_error_t ossl_OSSL_STORE_error;
  ossl_OSSL_STORE_close_t ossl_OSSL_STORE_close;
  ossl_OSSL_STORE_attach_t ossl_OSSL_STORE_attach;
  ossl_OSSL_STORE_INFO_new_t ossl_OSSL_STORE_INFO_new;
  ossl_OSSL_STORE_INFO_new_NAME_t ossl_OSSL_STORE_INFO_new_NAME;
  ossl_OSSL_STORE_INFO_set0_NAME_description_t ossl_OSSL_STORE_INFO_set0_NAME_description;
  ossl_OSSL_STORE_INFO_new_PARAMS_t ossl_OSSL_STORE_INFO_new_PARAMS;
  ossl_OSSL_STORE_INFO_new_PUBKEY_t ossl_OSSL_STORE_INFO_new_PUBKEY;
  ossl_OSSL_STORE_INFO_new_PKEY_t ossl_OSSL_STORE_INFO_new_PKEY;
  ossl_OSSL_STORE_INFO_new_CERT_t ossl_OSSL_STORE_INFO_new_CERT;
  ossl_OSSL_STORE_INFO_new_CRL_t ossl_OSSL_STORE_INFO_new_CRL;
  ossl_OSSL_STORE_INFO_get_type_t ossl_OSSL_STORE_INFO_get_type;
  ossl_OSSL_STORE_INFO_get0_data_t ossl_OSSL_STORE_INFO_get0_data;
  ossl_OSSL_STORE_INFO_get0_NAME_t ossl_OSSL_STORE_INFO_get0_NAME;
  ossl_OSSL_STORE_INFO_get1_NAME_t ossl_OSSL_STORE_INFO_get1_NAME;
  ossl_OSSL_STORE_INFO_get0_NAME_description_t ossl_OSSL_STORE_INFO_get0_NAME_description;
  ossl_OSSL_STORE_INFO_get1_NAME_description_t ossl_OSSL_STORE_INFO_get1_NAME_description;
  ossl_OSSL_STORE_INFO_get0_PARAMS_t ossl_OSSL_STORE_INFO_get0_PARAMS;
  ossl_OSSL_STORE_INFO_get1_PARAMS_t ossl_OSSL_STORE_INFO_get1_PARAMS;
  ossl_OSSL_STORE_INFO_get0_PUBKEY_t ossl_OSSL_STORE_INFO_get0_PUBKEY;
  ossl_OSSL_STORE_INFO_get1_PUBKEY_t ossl_OSSL_STORE_INFO_get1_PUBKEY;
  ossl_OSSL_STORE_INFO_get0_PKEY_t ossl_OSSL_STORE_INFO_get0_PKEY;
  ossl_OSSL_STORE_INFO_get1_PKEY_t ossl_OSSL_STORE_INFO_get1_PKEY;
  ossl_OSSL_STORE_INFO_get0_CERT_t ossl_OSSL_STORE_INFO_get0_CERT;
  ossl_OSSL_STORE_INFO_get1_CERT_t ossl_OSSL_STORE_INFO_get1_CERT;
  ossl_OSSL_STORE_INFO_get0_CRL_t ossl_OSSL_STORE_INFO_get0_CRL;
  ossl_OSSL_STORE_INFO_get1_CRL_t ossl_OSSL_STORE_INFO_get1_CRL;
  ossl_OSSL_STORE_INFO_type_string_t ossl_OSSL_STORE_INFO_type_string;
  ossl_OSSL_STORE_INFO_free_t ossl_OSSL_STORE_INFO_free;
  ossl_OSSL_STORE_supports_search_t ossl_OSSL_STORE_supports_search;
  ossl_OSSL_STORE_SEARCH_by_name_t ossl_OSSL_STORE_SEARCH_by_name;
  ossl_OSSL_STORE_SEARCH_by_issuer_serial_t ossl_OSSL_STORE_SEARCH_by_issuer_serial;
  ossl_OSSL_STORE_SEARCH_by_key_fingerprint_t ossl_OSSL_STORE_SEARCH_by_key_fingerprint;
  ossl_OSSL_STORE_SEARCH_by_alias_t ossl_OSSL_STORE_SEARCH_by_alias;
  ossl_OSSL_STORE_SEARCH_free_t ossl_OSSL_STORE_SEARCH_free;
  ossl_OSSL_STORE_SEARCH_get_type_t ossl_OSSL_STORE_SEARCH_get_type;
  ossl_OSSL_STORE_SEARCH_get0_name_t ossl_OSSL_STORE_SEARCH_get0_name;
  ossl_OSSL_STORE_SEARCH_get0_serial_t ossl_OSSL_STORE_SEARCH_get0_serial;
  ossl_OSSL_STORE_SEARCH_get0_bytes_t ossl_OSSL_STORE_SEARCH_get0_bytes;
  ossl_OSSL_STORE_SEARCH_get0_string_t ossl_OSSL_STORE_SEARCH_get0_string;
  ossl_OSSL_STORE_SEARCH_get0_digest_t ossl_OSSL_STORE_SEARCH_get0_digest;
  ossl_OSSL_STORE_expect_t ossl_OSSL_STORE_expect;
  ossl_OSSL_STORE_find_t ossl_OSSL_STORE_find;
  ossl_OSSL_STORE_LOADER_fetch_t ossl_OSSL_STORE_LOADER_fetch;
  ossl_OSSL_STORE_LOADER_up_ref_t ossl_OSSL_STORE_LOADER_up_ref;
  ossl_OSSL_STORE_LOADER_free_t ossl_OSSL_STORE_LOADER_free;
  ossl_OSSL_STORE_LOADER_get0_provider_t ossl_OSSL_STORE_LOADER_get0_provider;
  ossl_OSSL_STORE_LOADER_get0_properties_t ossl_OSSL_STORE_LOADER_get0_properties;
  ossl_OSSL_STORE_LOADER_get0_description_t ossl_OSSL_STORE_LOADER_get0_description;
  ossl_OSSL_STORE_LOADER_is_a_t ossl_OSSL_STORE_LOADER_is_a;
  ossl_OSSL_STORE_LOADER_do_all_provided_t ossl_OSSL_STORE_LOADER_do_all_provided;
  ossl_OSSL_STORE_LOADER_names_do_all_t ossl_OSSL_STORE_LOADER_names_do_all;
  ossl_OSSL_STORE_LOADER_new_t ossl_OSSL_STORE_LOADER_new;
  ossl_OSSL_STORE_LOADER_set_open_t ossl_OSSL_STORE_LOADER_set_open;
  ossl_OSSL_STORE_LOADER_set_open_ex_t ossl_OSSL_STORE_LOADER_set_open_ex;
  ossl_OSSL_STORE_LOADER_set_attach_t ossl_OSSL_STORE_LOADER_set_attach;
  ossl_OSSL_STORE_LOADER_set_ctrl_t ossl_OSSL_STORE_LOADER_set_ctrl;
  ossl_OSSL_STORE_LOADER_set_expect_t ossl_OSSL_STORE_LOADER_set_expect;
  ossl_OSSL_STORE_LOADER_set_find_t ossl_OSSL_STORE_LOADER_set_find;
  ossl_OSSL_STORE_LOADER_set_load_t ossl_OSSL_STORE_LOADER_set_load;
  ossl_OSSL_STORE_LOADER_set_eof_t ossl_OSSL_STORE_LOADER_set_eof;
  ossl_OSSL_STORE_LOADER_set_error_t ossl_OSSL_STORE_LOADER_set_error;
  ossl_OSSL_STORE_LOADER_set_close_t ossl_OSSL_STORE_LOADER_set_close;
  ossl_OSSL_STORE_LOADER_get0_engine_t ossl_OSSL_STORE_LOADER_get0_engine;
  ossl_OSSL_STORE_LOADER_get0_scheme_t ossl_OSSL_STORE_LOADER_get0_scheme;
  ossl_OSSL_STORE_register_loader_t ossl_OSSL_STORE_register_loader;
  ossl_OSSL_STORE_unregister_loader_t ossl_OSSL_STORE_unregister_loader;
  ossl_OSSL_STORE_do_all_loaders_t ossl_OSSL_STORE_do_all_loaders;
  ossl_TS_REQ_new_t ossl_TS_REQ_new;
  ossl_TS_REQ_free_t ossl_TS_REQ_free;
  ossl_d2i_TS_REQ_t ossl_d2i_TS_REQ;
  ossl_i2d_TS_REQ_t ossl_i2d_TS_REQ;
  ossl_TS_REQ_dup_t ossl_TS_REQ_dup;
  ossl_d2i_TS_REQ_fp_t ossl_d2i_TS_REQ_fp;
  ossl_i2d_TS_REQ_fp_t ossl_i2d_TS_REQ_fp;
  ossl_d2i_TS_REQ_bio_t ossl_d2i_TS_REQ_bio;
  ossl_i2d_TS_REQ_bio_t ossl_i2d_TS_REQ_bio;
  ossl_TS_MSG_IMPRINT_new_t ossl_TS_MSG_IMPRINT_new;
  ossl_TS_MSG_IMPRINT_free_t ossl_TS_MSG_IMPRINT_free;
  ossl_d2i_TS_MSG_IMPRINT_t ossl_d2i_TS_MSG_IMPRINT;
  ossl_i2d_TS_MSG_IMPRINT_t ossl_i2d_TS_MSG_IMPRINT;
  ossl_TS_MSG_IMPRINT_dup_t ossl_TS_MSG_IMPRINT_dup;
  ossl_d2i_TS_MSG_IMPRINT_fp_t ossl_d2i_TS_MSG_IMPRINT_fp;
  ossl_i2d_TS_MSG_IMPRINT_fp_t ossl_i2d_TS_MSG_IMPRINT_fp;
  ossl_d2i_TS_MSG_IMPRINT_bio_t ossl_d2i_TS_MSG_IMPRINT_bio;
  ossl_i2d_TS_MSG_IMPRINT_bio_t ossl_i2d_TS_MSG_IMPRINT_bio;
  ossl_TS_RESP_new_t ossl_TS_RESP_new;
  ossl_TS_RESP_free_t ossl_TS_RESP_free;
  ossl_d2i_TS_RESP_t ossl_d2i_TS_RESP;
  ossl_i2d_TS_RESP_t ossl_i2d_TS_RESP;
  ossl_TS_RESP_dup_t ossl_TS_RESP_dup;
  ossl_d2i_TS_RESP_fp_t ossl_d2i_TS_RESP_fp;
  ossl_i2d_TS_RESP_fp_t ossl_i2d_TS_RESP_fp;
  ossl_d2i_TS_RESP_bio_t ossl_d2i_TS_RESP_bio;
  ossl_i2d_TS_RESP_bio_t ossl_i2d_TS_RESP_bio;
  ossl_TS_STATUS_INFO_new_t ossl_TS_STATUS_INFO_new;
  ossl_TS_STATUS_INFO_free_t ossl_TS_STATUS_INFO_free;
  ossl_d2i_TS_STATUS_INFO_t ossl_d2i_TS_STATUS_INFO;
  ossl_i2d_TS_STATUS_INFO_t ossl_i2d_TS_STATUS_INFO;
  ossl_TS_STATUS_INFO_dup_t ossl_TS_STATUS_INFO_dup;
  ossl_TS_TST_INFO_new_t ossl_TS_TST_INFO_new;
  ossl_TS_TST_INFO_free_t ossl_TS_TST_INFO_free;
  ossl_d2i_TS_TST_INFO_t ossl_d2i_TS_TST_INFO;
  ossl_i2d_TS_TST_INFO_t ossl_i2d_TS_TST_INFO;
  ossl_TS_TST_INFO_dup_t ossl_TS_TST_INFO_dup;
  ossl_PKCS7_to_TS_TST_INFO_t ossl_PKCS7_to_TS_TST_INFO;
  ossl_d2i_TS_TST_INFO_fp_t ossl_d2i_TS_TST_INFO_fp;
  ossl_i2d_TS_TST_INFO_fp_t ossl_i2d_TS_TST_INFO_fp;
  ossl_d2i_TS_TST_INFO_bio_t ossl_d2i_TS_TST_INFO_bio;
  ossl_i2d_TS_TST_INFO_bio_t ossl_i2d_TS_TST_INFO_bio;
  ossl_TS_ACCURACY_new_t ossl_TS_ACCURACY_new;
  ossl_TS_ACCURACY_free_t ossl_TS_ACCURACY_free;
  ossl_d2i_TS_ACCURACY_t ossl_d2i_TS_ACCURACY;
  ossl_i2d_TS_ACCURACY_t ossl_i2d_TS_ACCURACY;
  ossl_TS_ACCURACY_dup_t ossl_TS_ACCURACY_dup;
  ossl_TS_REQ_set_version_t ossl_TS_REQ_set_version;
  ossl_TS_REQ_get_version_t ossl_TS_REQ_get_version;
  ossl_TS_STATUS_INFO_set_status_t ossl_TS_STATUS_INFO_set_status;
  ossl_TS_STATUS_INFO_get0_status_t ossl_TS_STATUS_INFO_get0_status;
  ossl_TS_STATUS_INFO_get0_text_t ossl_TS_STATUS_INFO_get0_text;
  ossl_TS_STATUS_INFO_get0_failure_info_t ossl_TS_STATUS_INFO_get0_failure_info;
  ossl_TS_REQ_set_msg_imprint_t ossl_TS_REQ_set_msg_imprint;
  ossl_TS_REQ_get_msg_imprint_t ossl_TS_REQ_get_msg_imprint;
  ossl_TS_MSG_IMPRINT_set_algo_t ossl_TS_MSG_IMPRINT_set_algo;
  ossl_TS_MSG_IMPRINT_get_algo_t ossl_TS_MSG_IMPRINT_get_algo;
  ossl_TS_MSG_IMPRINT_set_msg_t ossl_TS_MSG_IMPRINT_set_msg;
  ossl_TS_MSG_IMPRINT_get_msg_t ossl_TS_MSG_IMPRINT_get_msg;
  ossl_TS_REQ_set_policy_id_t ossl_TS_REQ_set_policy_id;
  ossl_TS_REQ_get_policy_id_t ossl_TS_REQ_get_policy_id;
  ossl_TS_REQ_set_nonce_t ossl_TS_REQ_set_nonce;
  ossl_TS_REQ_get_nonce_t ossl_TS_REQ_get_nonce;
  ossl_TS_REQ_set_cert_req_t ossl_TS_REQ_set_cert_req;
  ossl_TS_REQ_get_cert_req_t ossl_TS_REQ_get_cert_req;
  ossl_TS_REQ_get_exts_t ossl_TS_REQ_get_exts;
  ossl_TS_REQ_ext_free_t ossl_TS_REQ_ext_free;
  ossl_TS_REQ_get_ext_count_t ossl_TS_REQ_get_ext_count;
  ossl_TS_REQ_get_ext_by_NID_t ossl_TS_REQ_get_ext_by_NID;
  ossl_TS_REQ_get_ext_by_OBJ_t ossl_TS_REQ_get_ext_by_OBJ;
  ossl_TS_REQ_get_ext_by_critical_t ossl_TS_REQ_get_ext_by_critical;
  ossl_TS_REQ_get_ext_t ossl_TS_REQ_get_ext;
  ossl_TS_REQ_delete_ext_t ossl_TS_REQ_delete_ext;
  ossl_TS_REQ_add_ext_t ossl_TS_REQ_add_ext;
  ossl_TS_REQ_get_ext_d2i_t ossl_TS_REQ_get_ext_d2i;
  ossl_TS_REQ_print_bio_t ossl_TS_REQ_print_bio;
  ossl_TS_RESP_set_status_info_t ossl_TS_RESP_set_status_info;
  ossl_TS_RESP_get_status_info_t ossl_TS_RESP_get_status_info;
  ossl_TS_RESP_set_tst_info_t ossl_TS_RESP_set_tst_info;
  ossl_TS_RESP_get_token_t ossl_TS_RESP_get_token;
  ossl_TS_RESP_get_tst_info_t ossl_TS_RESP_get_tst_info;
  ossl_TS_TST_INFO_set_version_t ossl_TS_TST_INFO_set_version;
  ossl_TS_TST_INFO_get_version_t ossl_TS_TST_INFO_get_version;
  ossl_TS_TST_INFO_set_policy_id_t ossl_TS_TST_INFO_set_policy_id;
  ossl_TS_TST_INFO_get_policy_id_t ossl_TS_TST_INFO_get_policy_id;
  ossl_TS_TST_INFO_set_msg_imprint_t ossl_TS_TST_INFO_set_msg_imprint;
  ossl_TS_TST_INFO_get_msg_imprint_t ossl_TS_TST_INFO_get_msg_imprint;
  ossl_TS_TST_INFO_set_serial_t ossl_TS_TST_INFO_set_serial;
  ossl_TS_TST_INFO_get_serial_t ossl_TS_TST_INFO_get_serial;
  ossl_TS_TST_INFO_set_time_t ossl_TS_TST_INFO_set_time;
  ossl_TS_TST_INFO_get_time_t ossl_TS_TST_INFO_get_time;
  ossl_TS_TST_INFO_set_accuracy_t ossl_TS_TST_INFO_set_accuracy;
  ossl_TS_TST_INFO_get_accuracy_t ossl_TS_TST_INFO_get_accuracy;
  ossl_TS_ACCURACY_set_seconds_t ossl_TS_ACCURACY_set_seconds;
  ossl_TS_ACCURACY_get_seconds_t ossl_TS_ACCURACY_get_seconds;
  ossl_TS_ACCURACY_set_millis_t ossl_TS_ACCURACY_set_millis;
  ossl_TS_ACCURACY_get_millis_t ossl_TS_ACCURACY_get_millis;
  ossl_TS_ACCURACY_set_micros_t ossl_TS_ACCURACY_set_micros;
  ossl_TS_ACCURACY_get_micros_t ossl_TS_ACCURACY_get_micros;
  ossl_TS_TST_INFO_set_ordering_t ossl_TS_TST_INFO_set_ordering;
  ossl_TS_TST_INFO_get_ordering_t ossl_TS_TST_INFO_get_ordering;
  ossl_TS_TST_INFO_set_nonce_t ossl_TS_TST_INFO_set_nonce;
  ossl_TS_TST_INFO_get_nonce_t ossl_TS_TST_INFO_get_nonce;
  ossl_TS_TST_INFO_set_tsa_t ossl_TS_TST_INFO_set_tsa;
  ossl_TS_TST_INFO_get_tsa_t ossl_TS_TST_INFO_get_tsa;
  ossl_TS_TST_INFO_get_exts_t ossl_TS_TST_INFO_get_exts;
  ossl_TS_TST_INFO_ext_free_t ossl_TS_TST_INFO_ext_free;
  ossl_TS_TST_INFO_get_ext_count_t ossl_TS_TST_INFO_get_ext_count;
  ossl_TS_TST_INFO_get_ext_by_NID_t ossl_TS_TST_INFO_get_ext_by_NID;
  ossl_TS_TST_INFO_get_ext_by_OBJ_t ossl_TS_TST_INFO_get_ext_by_OBJ;
  ossl_TS_TST_INFO_get_ext_by_critical_t ossl_TS_TST_INFO_get_ext_by_critical;
  ossl_TS_TST_INFO_get_ext_t ossl_TS_TST_INFO_get_ext;
  ossl_TS_TST_INFO_delete_ext_t ossl_TS_TST_INFO_delete_ext;
  ossl_TS_TST_INFO_add_ext_t ossl_TS_TST_INFO_add_ext;
  ossl_TS_TST_INFO_get_ext_d2i_t ossl_TS_TST_INFO_get_ext_d2i;
  ossl_TS_RESP_CTX_new_t ossl_TS_RESP_CTX_new;
  ossl_TS_RESP_CTX_new_ex_t ossl_TS_RESP_CTX_new_ex;
  ossl_TS_RESP_CTX_free_t ossl_TS_RESP_CTX_free;
  ossl_TS_RESP_CTX_set_signer_cert_t ossl_TS_RESP_CTX_set_signer_cert;
  ossl_TS_RESP_CTX_set_signer_key_t ossl_TS_RESP_CTX_set_signer_key;
  ossl_TS_RESP_CTX_set_signer_digest_t ossl_TS_RESP_CTX_set_signer_digest;
  ossl_TS_RESP_CTX_set_ess_cert_id_digest_t ossl_TS_RESP_CTX_set_ess_cert_id_digest;
  ossl_TS_RESP_CTX_set_def_policy_t ossl_TS_RESP_CTX_set_def_policy;
  ossl_TS_RESP_CTX_set_certs_t ossl_TS_RESP_CTX_set_certs;
  ossl_TS_RESP_CTX_add_policy_t ossl_TS_RESP_CTX_add_policy;
  ossl_TS_RESP_CTX_add_md_t ossl_TS_RESP_CTX_add_md;
  ossl_TS_RESP_CTX_set_accuracy_t ossl_TS_RESP_CTX_set_accuracy;
  ossl_TS_RESP_CTX_set_clock_precision_digits_t ossl_TS_RESP_CTX_set_clock_precision_digits;
  ossl_TS_RESP_CTX_add_flags_t ossl_TS_RESP_CTX_add_flags;
  ossl_TS_RESP_CTX_set_serial_cb_t ossl_TS_RESP_CTX_set_serial_cb;
  ossl_TS_RESP_CTX_set_time_cb_t ossl_TS_RESP_CTX_set_time_cb;
  ossl_TS_RESP_CTX_set_extension_cb_t ossl_TS_RESP_CTX_set_extension_cb;
  ossl_TS_RESP_CTX_set_status_info_t ossl_TS_RESP_CTX_set_status_info;
  ossl_TS_RESP_CTX_set_status_info_cond_t ossl_TS_RESP_CTX_set_status_info_cond;
  ossl_TS_RESP_CTX_add_failure_info_t ossl_TS_RESP_CTX_add_failure_info;
  ossl_TS_RESP_CTX_get_request_t ossl_TS_RESP_CTX_get_request;
  ossl_TS_RESP_CTX_get_tst_info_t ossl_TS_RESP_CTX_get_tst_info;
  ossl_TS_RESP_create_response_t ossl_TS_RESP_create_response;
  ossl_TS_RESP_verify_signature_t ossl_TS_RESP_verify_signature;
  ossl_TS_RESP_verify_response_t ossl_TS_RESP_verify_response;
  ossl_TS_RESP_verify_token_t ossl_TS_RESP_verify_token;
  ossl_TS_VERIFY_CTX_new_t ossl_TS_VERIFY_CTX_new;
  ossl_TS_VERIFY_CTX_init_t ossl_TS_VERIFY_CTX_init;
  ossl_TS_VERIFY_CTX_free_t ossl_TS_VERIFY_CTX_free;
  ossl_TS_VERIFY_CTX_cleanup_t ossl_TS_VERIFY_CTX_cleanup;
  ossl_TS_VERIFY_CTX_set_flags_t ossl_TS_VERIFY_CTX_set_flags;
  ossl_TS_VERIFY_CTX_add_flags_t ossl_TS_VERIFY_CTX_add_flags;
  ossl_TS_VERIFY_CTX_set_data_t ossl_TS_VERIFY_CTX_set_data;
  ossl_TS_VERIFY_CTX_set_imprint_t ossl_TS_VERIFY_CTX_set_imprint;
  ossl_TS_VERIFY_CTX_set_store_t ossl_TS_VERIFY_CTX_set_store;
  ossl_TS_VERIFY_CTX_set_certs_t ossl_TS_VERIFY_CTX_set_certs;
  ossl_TS_REQ_to_TS_VERIFY_CTX_t ossl_TS_REQ_to_TS_VERIFY_CTX;
  ossl_TS_RESP_print_bio_t ossl_TS_RESP_print_bio;
  ossl_TS_STATUS_INFO_print_bio_t ossl_TS_STATUS_INFO_print_bio;
  ossl_TS_TST_INFO_print_bio_t ossl_TS_TST_INFO_print_bio;
  ossl_TS_ASN1_INTEGER_print_bio_t ossl_TS_ASN1_INTEGER_print_bio;
  ossl_TS_OBJ_print_bio_t ossl_TS_OBJ_print_bio;
  ossl_TS_ext_print_bio_t ossl_TS_ext_print_bio;
  ossl_TS_X509_ALGOR_print_bio_t ossl_TS_X509_ALGOR_print_bio;
  ossl_TS_MSG_IMPRINT_print_bio_t ossl_TS_MSG_IMPRINT_print_bio;
  ossl_TS_CONF_load_cert_t ossl_TS_CONF_load_cert;
  ossl_TS_CONF_load_certs_t ossl_TS_CONF_load_certs;
  ossl_TS_CONF_load_key_t ossl_TS_CONF_load_key;
  ossl_TS_CONF_get_tsa_section_t ossl_TS_CONF_get_tsa_section;
  ossl_TS_CONF_set_serial_t ossl_TS_CONF_set_serial;
  ossl_TS_CONF_set_crypto_device_t ossl_TS_CONF_set_crypto_device;
  ossl_TS_CONF_set_default_engine_t ossl_TS_CONF_set_default_engine;
  ossl_TS_CONF_set_signer_cert_t ossl_TS_CONF_set_signer_cert;
  ossl_TS_CONF_set_certs_t ossl_TS_CONF_set_certs;
  ossl_TS_CONF_set_signer_key_t ossl_TS_CONF_set_signer_key;
  ossl_TS_CONF_set_signer_digest_t ossl_TS_CONF_set_signer_digest;
  ossl_TS_CONF_set_def_policy_t ossl_TS_CONF_set_def_policy;
  ossl_TS_CONF_set_policies_t ossl_TS_CONF_set_policies;
  ossl_TS_CONF_set_digests_t ossl_TS_CONF_set_digests;
  ossl_TS_CONF_set_accuracy_t ossl_TS_CONF_set_accuracy;
  ossl_TS_CONF_set_clock_precision_digits_t ossl_TS_CONF_set_clock_precision_digits;
  ossl_TS_CONF_set_ordering_t ossl_TS_CONF_set_ordering;
  ossl_TS_CONF_set_tsa_name_t ossl_TS_CONF_set_tsa_name;
  ossl_TS_CONF_set_ess_cert_id_chain_t ossl_TS_CONF_set_ess_cert_id_chain;
  ossl_TS_CONF_set_ess_cert_id_digest_t ossl_TS_CONF_set_ess_cert_id_digest;
  ossl_TXT_DB_read_t ossl_TXT_DB_read;
  ossl_TXT_DB_write_t ossl_TXT_DB_write;
  ossl_TXT_DB_create_index_t ossl_TXT_DB_create_index;
  ossl_TXT_DB_free_t ossl_TXT_DB_free;
  ossl_TXT_DB_get_by_index_t ossl_TXT_DB_get_by_index;
  ossl_TXT_DB_insert_t ossl_TXT_DB_insert;
  ossl_WHIRLPOOL_Init_t ossl_WHIRLPOOL_Init;
  ossl_WHIRLPOOL_Update_t ossl_WHIRLPOOL_Update;
  ossl_WHIRLPOOL_BitUpdate_t ossl_WHIRLPOOL_BitUpdate;
  ossl_WHIRLPOOL_Final_t ossl_WHIRLPOOL_Final;
  ossl_WHIRLPOOL_t ossl_WHIRLPOOL;
};

extern struct ossl_functions ossl;

#endif
