/*
 * WARNING: do not edit!
 * Generated by Makefile from ../../../openssl/source/include/openssl/pkcs12.h.in
 *
 * Copyright 1999-2021 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



#ifndef ossl_OPENSSL_PKCS12_H
# define ossl_OPENSSL_PKCS12_H
# pragma once

# include "ossl/openssl/macros.h"
# ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
#  define ossl_HEADER_PKCS12_H
# endif

# include "ossl/openssl/bio.h"
# include "ossl/openssl/core.h"
# include "ossl/openssl/x509.h"
# include "ossl/openssl/pkcs12err.h"

#ifdef __cplusplus
extern "C" {
#endif

# define ossl_PKCS12_KEY_ID   1
# define ossl_PKCS12_IV_ID    2
# define ossl_PKCS12_MAC_ID   3

/* Default iteration count */
# ifndef ossl_PKCS12_DEFAULT_ITER
#  define ossl_PKCS12_DEFAULT_ITER     ossl_PKCS5_DEFAULT_ITER
# endif

# define ossl_PKCS12_MAC_KEY_LENGTH 20

# define ossl_PKCS12_SALT_LEN 8

/* It's not clear if these are actually needed... */
# define ossl_PKCS12_key_gen ossl_PKCS12_key_gen_utf8
# define ossl_PKCS12_add_friendlyname ossl_PKCS12_add_friendlyname_utf8

/* MS key usage constants */

# define ossl_KEY_EX  0x10
# define ossl_KEY_SIG 0x80

typedef struct ossl_PKCS12_MAC_DATA_st ossl_PKCS12_MAC_DATA;

typedef struct ossl_PKCS12_st ossl_PKCS12;

typedef struct ossl_PKCS12_SAFEBAG_st ossl_PKCS12_SAFEBAG;

ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_PKCS12_SAFEBAG, ossl_PKCS12_SAFEBAG, ossl_PKCS12_SAFEBAG)
#define ossl_sk_PKCS12_SAFEBAG_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_PKCS12_SAFEBAG_sk_type(sk))
#define ossl_sk_PKCS12_SAFEBAG_value(sk, idx) ((ossl_PKCS12_SAFEBAG *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_PKCS12_SAFEBAG_sk_type(sk), (idx)))
#define ossl_sk_PKCS12_SAFEBAG_new(cmp) ((ossl_STACK_OF(ossl_PKCS12_SAFEBAG) *)ossl_OPENSSL_sk_new(ossl_ossl_check_PKCS12_SAFEBAG_compfunc_type(cmp)))
#define ossl_sk_PKCS12_SAFEBAG_new_null() ((ossl_STACK_OF(ossl_PKCS12_SAFEBAG) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_PKCS12_SAFEBAG_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_PKCS12_SAFEBAG) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_PKCS12_SAFEBAG_compfunc_type(cmp), (n)))
#define ossl_sk_PKCS12_SAFEBAG_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_PKCS12_SAFEBAG_sk_type(sk), (n))
#define ossl_sk_PKCS12_SAFEBAG_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_PKCS12_SAFEBAG_sk_type(sk))
#define ossl_sk_PKCS12_SAFEBAG_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_PKCS12_SAFEBAG_sk_type(sk))
#define ossl_sk_PKCS12_SAFEBAG_delete(sk, i) ((ossl_PKCS12_SAFEBAG *)ossl_OPENSSL_sk_delete(ossl_ossl_check_PKCS12_SAFEBAG_sk_type(sk), (i)))
#define ossl_sk_PKCS12_SAFEBAG_delete_ptr(sk, ptr) ((ossl_PKCS12_SAFEBAG *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_PKCS12_SAFEBAG_sk_type(sk), ossl_ossl_check_PKCS12_SAFEBAG_type(ptr)))
#define ossl_sk_PKCS12_SAFEBAG_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_PKCS12_SAFEBAG_sk_type(sk), ossl_ossl_check_PKCS12_SAFEBAG_type(ptr))
#define ossl_sk_PKCS12_SAFEBAG_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_PKCS12_SAFEBAG_sk_type(sk), ossl_ossl_check_PKCS12_SAFEBAG_type(ptr))
#define ossl_sk_PKCS12_SAFEBAG_pop(sk) ((ossl_PKCS12_SAFEBAG *)ossl_OPENSSL_sk_pop(ossl_ossl_check_PKCS12_SAFEBAG_sk_type(sk)))
#define ossl_sk_PKCS12_SAFEBAG_shift(sk) ((ossl_PKCS12_SAFEBAG *)ossl_OPENSSL_sk_shift(ossl_ossl_check_PKCS12_SAFEBAG_sk_type(sk)))
#define ossl_sk_PKCS12_SAFEBAG_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_PKCS12_SAFEBAG_sk_type(sk),ossl_ossl_check_PKCS12_SAFEBAG_freefunc_type(freefunc))
#define ossl_sk_PKCS12_SAFEBAG_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_PKCS12_SAFEBAG_sk_type(sk), ossl_ossl_check_PKCS12_SAFEBAG_type(ptr), (idx))
#define ossl_sk_PKCS12_SAFEBAG_set(sk, idx, ptr) ((ossl_PKCS12_SAFEBAG *)ossl_OPENSSL_sk_set(ossl_ossl_check_PKCS12_SAFEBAG_sk_type(sk), (idx), ossl_ossl_check_PKCS12_SAFEBAG_type(ptr)))
#define ossl_sk_PKCS12_SAFEBAG_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_PKCS12_SAFEBAG_sk_type(sk), ossl_ossl_check_PKCS12_SAFEBAG_type(ptr))
#define ossl_sk_PKCS12_SAFEBAG_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_PKCS12_SAFEBAG_sk_type(sk), ossl_ossl_check_PKCS12_SAFEBAG_type(ptr))
#define ossl_sk_PKCS12_SAFEBAG_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_PKCS12_SAFEBAG_sk_type(sk), ossl_ossl_check_PKCS12_SAFEBAG_type(ptr), pnum)
#define ossl_sk_PKCS12_SAFEBAG_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_PKCS12_SAFEBAG_sk_type(sk))
#define ossl_sk_PKCS12_SAFEBAG_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_PKCS12_SAFEBAG_sk_type(sk))
#define ossl_sk_PKCS12_SAFEBAG_dup(sk) ((ossl_STACK_OF(ossl_PKCS12_SAFEBAG) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_PKCS12_SAFEBAG_sk_type(sk)))
#define ossl_sk_PKCS12_SAFEBAG_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_PKCS12_SAFEBAG) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_PKCS12_SAFEBAG_sk_type(sk), ossl_ossl_check_PKCS12_SAFEBAG_copyfunc_type(copyfunc), ossl_ossl_check_PKCS12_SAFEBAG_freefunc_type(freefunc)))
#define ossl_sk_PKCS12_SAFEBAG_set_cmp_func(sk, cmp) ((ossl_sk_PKCS12_SAFEBAG_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_PKCS12_SAFEBAG_sk_type(sk), ossl_ossl_check_PKCS12_SAFEBAG_compfunc_type(cmp)))


typedef struct ossl_pkcs12_bag_st ossl_PKCS12_BAGS;

# define ossl_PKCS12_ERROR    0
# define ossl_PKCS12_OK       1

/* Compatibility macros */

#ifndef ossl_OPENSSL_NO_DEPRECATED_1_1_0

# define ossl_M_PKCS12_bag_type ossl_PKCS12_bag_type
# define ossl_M_PKCS12_cert_bag_type ossl_PKCS12_cert_bag_type
# define ossl_M_PKCS12_crl_bag_type ossl_PKCS12_cert_bag_type

# define ossl_PKCS12_certbag2x509 ossl_PKCS12_SAFEBAG_get1_cert
# define ossl_PKCS12_certbag2scrl ossl_PKCS12_SAFEBAG_get1_crl
# define ossl_PKCS12_bag_type ossl_PKCS12_SAFEBAG_get_nid
# define ossl_PKCS12_cert_bag_type ossl_PKCS12_SAFEBAG_get_bag_nid
# define ossl_PKCS12_x5092certbag ossl_PKCS12_SAFEBAG_create_cert
# define ossl_PKCS12_x509crl2certbag ossl_PKCS12_SAFEBAG_create_crl
# define ossl_PKCS12_MAKE_KEYBAG ossl_PKCS12_SAFEBAG_create0_p8inf
# define ossl_PKCS12_MAKE_SHKEYBAG ossl_PKCS12_SAFEBAG_create_pkcs8_encrypt

#endif
#ifndef ossl_OPENSSL_NO_DEPRECATED_1_1_0
ossl_OSSL_DEPRECATEDIN_1_1_0 ossl_ASN1_TYPE *ossl_PKCS12_get_attr(const ossl_PKCS12_SAFEBAG *bag,
                                                   int attr_nid);
#endif

ossl_ASN1_TYPE *ossl_PKCS8_get_attr(ossl_PKCS8_PRIV_KEY_INFO *p8, int attr_nid);
int ossl_PKCS12_mac_present(const ossl_PKCS12 *p12);
void ossl_PKCS12_get0_mac(const ossl_ASN1_OCTET_STRING **pmac,
                     const ossl_X509_ALGOR **pmacalg,
                     const ossl_ASN1_OCTET_STRING **psalt,
                     const ossl_ASN1_INTEGER **piter,
                     const ossl_PKCS12 *p12);

const ossl_ASN1_TYPE *ossl_PKCS12_SAFEBAG_get0_attr(const ossl_PKCS12_SAFEBAG *bag,
                                          int attr_nid);
const ossl_ASN1_OBJECT *ossl_PKCS12_SAFEBAG_get0_type(const ossl_PKCS12_SAFEBAG *bag);
int ossl_PKCS12_SAFEBAG_get_nid(const ossl_PKCS12_SAFEBAG *bag);
int ossl_PKCS12_SAFEBAG_get_bag_nid(const ossl_PKCS12_SAFEBAG *bag);
const ossl_ASN1_TYPE *ossl_PKCS12_SAFEBAG_get0_bag_obj(const ossl_PKCS12_SAFEBAG *bag);
const ossl_ASN1_OBJECT *ossl_PKCS12_SAFEBAG_get0_bag_type(const ossl_PKCS12_SAFEBAG *bag);

ossl_X509 *ossl_PKCS12_SAFEBAG_get1_cert(const ossl_PKCS12_SAFEBAG *bag);
ossl_X509_CRL *ossl_PKCS12_SAFEBAG_get1_crl(const ossl_PKCS12_SAFEBAG *bag);
const ossl_STACK_OF(ossl_PKCS12_SAFEBAG) *
ossl_PKCS12_SAFEBAG_get0_safes(const ossl_PKCS12_SAFEBAG *bag);
const ossl_PKCS8_PRIV_KEY_INFO *ossl_PKCS12_SAFEBAG_get0_p8inf(const ossl_PKCS12_SAFEBAG *bag);
const ossl_X509_SIG *ossl_PKCS12_SAFEBAG_get0_pkcs8(const ossl_PKCS12_SAFEBAG *bag);

ossl_PKCS12_SAFEBAG *ossl_PKCS12_SAFEBAG_create_cert(ossl_X509 *x509);
ossl_PKCS12_SAFEBAG *ossl_PKCS12_SAFEBAG_create_crl(ossl_X509_CRL *crl);
ossl_PKCS12_SAFEBAG *ossl_PKCS12_SAFEBAG_create_secret(int type, int vtype, const unsigned char *value, int len);
ossl_PKCS12_SAFEBAG *ossl_PKCS12_SAFEBAG_create0_p8inf(ossl_PKCS8_PRIV_KEY_INFO *p8);
ossl_PKCS12_SAFEBAG *ossl_PKCS12_SAFEBAG_create0_pkcs8(ossl_X509_SIG *p8);
ossl_PKCS12_SAFEBAG *ossl_PKCS12_SAFEBAG_create_pkcs8_encrypt(int pbe_nid,
                                                    const char *pass,
                                                    int passlen,
                                                    unsigned char *salt,
                                                    int saltlen, int iter,
                                                    ossl_PKCS8_PRIV_KEY_INFO *p8inf);
ossl_PKCS12_SAFEBAG *ossl_PKCS12_SAFEBAG_create_pkcs8_encrypt_ex(int pbe_nid,
                                                       const char *pass,
                                                       int passlen,
                                                       unsigned char *salt,
                                                       int saltlen, int iter,
                                                       ossl_PKCS8_PRIV_KEY_INFO *p8inf,
                                                       ossl_OSSL_LIB_CTX *ctx,
                                                       const char *propq);

ossl_PKCS12_SAFEBAG *ossl_PKCS12_item_pack_safebag(void *obj, const ossl_ASN1_ITEM *it,
                                         int nid1, int nid2);
ossl_PKCS8_PRIV_KEY_INFO *ossl_PKCS8_decrypt(const ossl_X509_SIG *p8, const char *pass,
                                   int passlen);
ossl_PKCS8_PRIV_KEY_INFO *ossl_PKCS8_decrypt_ex(const ossl_X509_SIG *p8, const char *pass,
                                      int passlen, ossl_OSSL_LIB_CTX *ctx,
                                      const char *propq);
ossl_PKCS8_PRIV_KEY_INFO *ossl_PKCS12_decrypt_skey(const ossl_PKCS12_SAFEBAG *bag,
                                         const char *pass, int passlen);
ossl_PKCS8_PRIV_KEY_INFO *ossl_PKCS12_decrypt_skey_ex(const ossl_PKCS12_SAFEBAG *bag,
                                            const char *pass, int passlen,
                                            ossl_OSSL_LIB_CTX *ctx,
                                            const char *propq);
ossl_X509_SIG *ossl_PKCS8_encrypt(int pbe_nid, const ossl_EVP_CIPHER *cipher,
                        const char *pass, int passlen, unsigned char *salt,
                        int saltlen, int iter, ossl_PKCS8_PRIV_KEY_INFO *p8);
ossl_X509_SIG *ossl_PKCS8_encrypt_ex(int pbe_nid, const ossl_EVP_CIPHER *cipher,
                           const char *pass, int passlen, unsigned char *salt,
                           int saltlen, int iter, ossl_PKCS8_PRIV_KEY_INFO *p8,
                           ossl_OSSL_LIB_CTX *ctx, const char *propq);
ossl_X509_SIG *ossl_PKCS8_set0_pbe(const char *pass, int passlen,
                        ossl_PKCS8_PRIV_KEY_INFO *p8inf, ossl_X509_ALGOR *pbe);
ossl_X509_SIG *ossl_PKCS8_set0_pbe_ex(const char *pass, int passlen,
                            ossl_PKCS8_PRIV_KEY_INFO *p8inf, ossl_X509_ALGOR *pbe,
                            ossl_OSSL_LIB_CTX *ctx, const char *propq);
ossl_PKCS7 *ossl_PKCS12_pack_p7data(ossl_STACK_OF(ossl_PKCS12_SAFEBAG) *sk);
ossl_STACK_OF(ossl_PKCS12_SAFEBAG) *ossl_PKCS12_unpack_p7data(ossl_PKCS7 *p7);
ossl_PKCS7 *ossl_PKCS12_pack_p7encdata(int pbe_nid, const char *pass, int passlen,
                             unsigned char *salt, int saltlen, int iter,
                             ossl_STACK_OF(ossl_PKCS12_SAFEBAG) *bags);
ossl_PKCS7 *ossl_PKCS12_pack_p7encdata_ex(int pbe_nid, const char *pass, int passlen,
                                unsigned char *salt, int saltlen, int iter,
                                ossl_STACK_OF(ossl_PKCS12_SAFEBAG) *bags,
                                ossl_OSSL_LIB_CTX *ctx, const char *propq);

ossl_STACK_OF(ossl_PKCS12_SAFEBAG) *ossl_PKCS12_unpack_p7encdata(ossl_PKCS7 *p7, const char *pass,
                                                  int passlen);

int ossl_PKCS12_pack_authsafes(ossl_PKCS12 *p12, ossl_STACK_OF(ossl_PKCS7) *safes);
ossl_STACK_OF(ossl_PKCS7) *ossl_PKCS12_unpack_authsafes(const ossl_PKCS12 *p12);

int ossl_PKCS12_add_localkeyid(ossl_PKCS12_SAFEBAG *bag, unsigned char *name,
                          int namelen);
int ossl_PKCS12_add_friendlyname_asc(ossl_PKCS12_SAFEBAG *bag, const char *name,
                                int namelen);
int ossl_PKCS12_add_friendlyname_utf8(ossl_PKCS12_SAFEBAG *bag, const char *name,
                                 int namelen);
int ossl_PKCS12_add_CSPName_asc(ossl_PKCS12_SAFEBAG *bag, const char *name,
                           int namelen);
int ossl_PKCS12_add_friendlyname_uni(ossl_PKCS12_SAFEBAG *bag,
                                const unsigned char *name, int namelen);
int ossl_PKCS12_add1_attr_by_NID(ossl_PKCS12_SAFEBAG *bag, int nid, int type,
                            const unsigned char *bytes, int len);
int ossl_PKCS12_add1_attr_by_txt(ossl_PKCS12_SAFEBAG *bag, const char *attrname, int type,
                            const unsigned char *bytes, int len);
int ossl_PKCS8_add_keyusage(ossl_PKCS8_PRIV_KEY_INFO *p8, int usage);
ossl_ASN1_TYPE *ossl_PKCS12_get_attr_gen(const ossl_STACK_OF(ossl_X509_ATTRIBUTE) *attrs,
                               int attr_nid);
char *ossl_PKCS12_get_friendlyname(ossl_PKCS12_SAFEBAG *bag);
const ossl_STACK_OF(ossl_X509_ATTRIBUTE) *
ossl_PKCS12_SAFEBAG_get0_attrs(const ossl_PKCS12_SAFEBAG *bag);
unsigned char *ossl_PKCS12_pbe_crypt(const ossl_X509_ALGOR *algor,
                                const char *pass, int passlen,
                                const unsigned char *in, int inlen,
                                unsigned char **data, int *datalen,
                                int en_de);
unsigned char *ossl_PKCS12_pbe_crypt_ex(const ossl_X509_ALGOR *algor,
                                   const char *pass, int passlen,
                                   const unsigned char *in, int inlen,
                                   unsigned char **data, int *datalen,
                                   int en_de, ossl_OSSL_LIB_CTX *libctx,
                                   const char *propq);
void *ossl_PKCS12_item_decrypt_d2i(const ossl_X509_ALGOR *algor, const ossl_ASN1_ITEM *it,
                              const char *pass, int passlen,
                              const ossl_ASN1_OCTET_STRING *oct, int zbuf);
void *ossl_PKCS12_item_decrypt_d2i_ex(const ossl_X509_ALGOR *algor, const ossl_ASN1_ITEM *it,
                                 const char *pass, int passlen,
                                 const ossl_ASN1_OCTET_STRING *oct, int zbuf,
                                 ossl_OSSL_LIB_CTX *libctx, 
                                 const char *propq);
ossl_ASN1_OCTET_STRING *ossl_PKCS12_item_i2d_encrypt(ossl_X509_ALGOR *algor,
                                           const ossl_ASN1_ITEM *it,
                                           const char *pass, int passlen,
                                           void *obj, int zbuf);
ossl_ASN1_OCTET_STRING *ossl_PKCS12_item_i2d_encrypt_ex(ossl_X509_ALGOR *algor,
                                              const ossl_ASN1_ITEM *it,
                                              const char *pass, int passlen,
                                              void *obj, int zbuf,
                                              ossl_OSSL_LIB_CTX *ctx,
                                              const char *propq);
ossl_PKCS12 *ossl_PKCS12_init(int mode);
ossl_PKCS12 *ossl_PKCS12_init_ex(int mode, ossl_OSSL_LIB_CTX *ctx, const char *propq);

int ossl_PKCS12_key_gen_asc(const char *pass, int passlen, unsigned char *salt,
                       int saltlen, int id, int iter, int n,
                       unsigned char *out, const ossl_EVP_MD *md_type);
int ossl_PKCS12_key_gen_asc_ex(const char *pass, int passlen, unsigned char *salt,
                          int saltlen, int id, int iter, int n,
                          unsigned char *out, const ossl_EVP_MD *md_type,
                          ossl_OSSL_LIB_CTX *ctx, const char *propq);
int ossl_PKCS12_key_gen_uni(unsigned char *pass, int passlen, unsigned char *salt,
                       int saltlen, int id, int iter, int n,
                       unsigned char *out, const ossl_EVP_MD *md_type);
int ossl_PKCS12_key_gen_uni_ex(unsigned char *pass, int passlen, unsigned char *salt,
                          int saltlen, int id, int iter, int n,
                          unsigned char *out, const ossl_EVP_MD *md_type,
                          ossl_OSSL_LIB_CTX *ctx, const char *propq);
int ossl_PKCS12_key_gen_utf8(const char *pass, int passlen, unsigned char *salt,
                        int saltlen, int id, int iter, int n,
                        unsigned char *out, const ossl_EVP_MD *md_type);
int ossl_PKCS12_key_gen_utf8_ex(const char *pass, int passlen, unsigned char *salt,
                           int saltlen, int id, int iter, int n,
                           unsigned char *out, const ossl_EVP_MD *md_type,
                           ossl_OSSL_LIB_CTX *ctx, const char *propq);

int ossl_PKCS12_PBE_keyivgen(ossl_EVP_CIPHER_CTX *ctx, const char *pass, int passlen,
                        ossl_ASN1_TYPE *param, const ossl_EVP_CIPHER *cipher,
                        const ossl_EVP_MD *md_type, int en_de);
int ossl_PKCS12_PBE_keyivgen_ex(ossl_EVP_CIPHER_CTX *ctx, const char *pass, int passlen,
                           ossl_ASN1_TYPE *param, const ossl_EVP_CIPHER *cipher,
                           const ossl_EVP_MD *md_type, int en_de,
                           ossl_OSSL_LIB_CTX *libctx, const char *propq);
int ossl_PKCS12_gen_mac(ossl_PKCS12 *p12, const char *pass, int passlen,
                   unsigned char *mac, unsigned int *maclen);
int ossl_PKCS12_verify_mac(ossl_PKCS12 *p12, const char *pass, int passlen);
int ossl_PKCS12_set_mac(ossl_PKCS12 *p12, const char *pass, int passlen,
                   unsigned char *salt, int saltlen, int iter,
                   const ossl_EVP_MD *md_type);
int ossl_PKCS12_setup_mac(ossl_PKCS12 *p12, int iter, unsigned char *salt,
                     int saltlen, const ossl_EVP_MD *md_type);
unsigned char *ossl_OPENSSL_asc2uni(const char *asc, int asclen,
                               unsigned char **uni, int *unilen);
char *ossl_OPENSSL_uni2asc(const unsigned char *uni, int unilen);
unsigned char *ossl_OPENSSL_utf82uni(const char *asc, int asclen,
                                unsigned char **uni, int *unilen);
char *ossl_OPENSSL_uni2utf8(const unsigned char *uni, int unilen);

ossl_DECLARE_ASN1_FUNCTIONS(ossl_PKCS12)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_PKCS12_MAC_DATA)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_PKCS12_SAFEBAG)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_PKCS12_BAGS)

ossl_DECLARE_ASN1_ITEM(PKCS12_SAFEBAGS)
ossl_DECLARE_ASN1_ITEM(PKCS12_AUTHSAFES)

void ossl_PKCS12_PBE_add(void);
int ossl_PKCS12_parse(ossl_PKCS12 *p12, const char *pass, ossl_EVP_PKEY **pkey, ossl_X509 **cert,
                 ossl_STACK_OF(ossl_X509) **ca);
ossl_PKCS12 *ossl_PKCS12_create(const char *pass, const char *name, ossl_EVP_PKEY *pkey,
                      ossl_X509 *cert, ossl_STACK_OF(ossl_X509) *ca, int nid_key, int nid_cert,
                      int iter, int mac_iter, int keytype);
ossl_PKCS12 *ossl_PKCS12_create_ex(const char *pass, const char *name, ossl_EVP_PKEY *pkey,
                         ossl_X509 *cert, ossl_STACK_OF(ossl_X509) *ca, int nid_key, int nid_cert,
                         int iter, int mac_iter, int keytype,
                         ossl_OSSL_LIB_CTX *ctx, const char *propq);

ossl_PKCS12_SAFEBAG *ossl_PKCS12_add_cert(ossl_STACK_OF(ossl_PKCS12_SAFEBAG) **pbags, ossl_X509 *cert);
ossl_PKCS12_SAFEBAG *ossl_PKCS12_add_key(ossl_STACK_OF(ossl_PKCS12_SAFEBAG) **pbags,
                               ossl_EVP_PKEY *key, int key_usage, int iter,
                               int key_nid, const char *pass);
ossl_PKCS12_SAFEBAG *ossl_PKCS12_add_key_ex(ossl_STACK_OF(ossl_PKCS12_SAFEBAG) **pbags,
                                  ossl_EVP_PKEY *key, int key_usage, int iter,
                                  int key_nid, const char *pass,
                                  ossl_OSSL_LIB_CTX *ctx, const char *propq);

ossl_PKCS12_SAFEBAG *ossl_PKCS12_add_secret(ossl_STACK_OF(ossl_PKCS12_SAFEBAG) **pbags,
                                  int nid_type, const unsigned char *value, int len);
int ossl_PKCS12_add_safe(ossl_STACK_OF(ossl_PKCS7) **psafes, ossl_STACK_OF(ossl_PKCS12_SAFEBAG) *bags,
                    int safe_nid, int iter, const char *pass);
int ossl_PKCS12_add_safe_ex(ossl_STACK_OF(ossl_PKCS7) **psafes, ossl_STACK_OF(ossl_PKCS12_SAFEBAG) *bags,
                       int safe_nid, int iter, const char *pass,
                       ossl_OSSL_LIB_CTX *ctx, const char *propq);

ossl_PKCS12 *ossl_PKCS12_add_safes(ossl_STACK_OF(ossl_PKCS7) *safes, int p7_nid);
ossl_PKCS12 *ossl_PKCS12_add_safes_ex(ossl_STACK_OF(ossl_PKCS7) *safes, int p7_nid,
                            ossl_OSSL_LIB_CTX *ctx, const char *propq);

int ossl_i2d_PKCS12_bio(ossl_BIO *bp, const ossl_PKCS12 *p12);
# ifndef ossl_OPENSSL_NO_STDIO
int ossl_i2d_PKCS12_fp(FILE *fp, const ossl_PKCS12 *p12);
# endif
ossl_PKCS12 *ossl_d2i_PKCS12_bio(ossl_BIO *bp, ossl_PKCS12 **p12);
# ifndef ossl_OPENSSL_NO_STDIO
ossl_PKCS12 *ossl_d2i_PKCS12_fp(FILE *fp, ossl_PKCS12 **p12);
# endif
int ossl_PKCS12_newpass(ossl_PKCS12 *p12, const char *oldpass, const char *newpass);

# ifdef  __cplusplus
}
# endif
#endif
