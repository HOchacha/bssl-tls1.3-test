/*
 * WARNING: do not edit!
 * Generated by Makefile from ../../../openssl/source/include/openssl/pkcs7.h.in
 *
 * Copyright 1995-2023 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



#ifndef ossl_OPENSSL_PKCS7_H
# define ossl_OPENSSL_PKCS7_H
# pragma once

# include "ossl/openssl/macros.h"
# ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
#  define ossl_HEADER_PKCS7_H
# endif

# include "ossl/openssl/asn1.h"
# include "ossl/openssl/bio.h"
# include "ossl/openssl/e_os2.h"

# include "ossl/openssl/symhacks.h"
# include "ossl/openssl/types.h"
# include "ossl/openssl/pkcs7err.h"

#ifdef  __cplusplus
extern "C" {
#endif


/*-
Encryption_ID           DES-CBC
Digest_ID               ossl_MD5
Digest_Encryption_ID    rsaEncryption
Key_Encryption_ID       rsaEncryption
*/

typedef struct ossl_PKCS7_CTX_st {
    ossl_OSSL_LIB_CTX *libctx;
    char *propq;
} ossl_PKCS7_CTX;

typedef struct ossl_pkcs7_issuer_and_serial_st {
    ossl_X509_NAME *issuer;
    ossl_ASN1_INTEGER *serial;
} ossl_PKCS7_ISSUER_AND_SERIAL;

typedef struct ossl_pkcs7_signer_info_st {
    ossl_ASN1_INTEGER *version;      /* version 1 */
    ossl_PKCS7_ISSUER_AND_SERIAL *issuer_and_serial;
    ossl_X509_ALGOR *digest_alg;
    ossl_STACK_OF(ossl_X509_ATTRIBUTE) *auth_attr; /* [ 0 ] */
    ossl_X509_ALGOR *digest_enc_alg; /* confusing name, actually used for signing */
    ossl_ASN1_OCTET_STRING *enc_digest; /* confusing name, actually signature */
    ossl_STACK_OF(ossl_X509_ATTRIBUTE) *unauth_attr; /* [ 1 ] */
    /* The private key to sign with */
    ossl_EVP_PKEY *pkey;
    const ossl_PKCS7_CTX *ctx;
} ossl_PKCS7_SIGNER_INFO;
ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_PKCS7_SIGNER_INFO, ossl_PKCS7_SIGNER_INFO, ossl_PKCS7_SIGNER_INFO)
#define ossl_sk_PKCS7_SIGNER_INFO_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_PKCS7_SIGNER_INFO_sk_type(sk))
#define ossl_sk_PKCS7_SIGNER_INFO_value(sk, idx) ((ossl_PKCS7_SIGNER_INFO *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_PKCS7_SIGNER_INFO_sk_type(sk), (idx)))
#define ossl_sk_PKCS7_SIGNER_INFO_new(cmp) ((ossl_STACK_OF(ossl_PKCS7_SIGNER_INFO) *)ossl_OPENSSL_sk_new(ossl_ossl_check_PKCS7_SIGNER_INFO_compfunc_type(cmp)))
#define ossl_sk_PKCS7_SIGNER_INFO_new_null() ((ossl_STACK_OF(ossl_PKCS7_SIGNER_INFO) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_PKCS7_SIGNER_INFO_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_PKCS7_SIGNER_INFO) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_PKCS7_SIGNER_INFO_compfunc_type(cmp), (n)))
#define ossl_sk_PKCS7_SIGNER_INFO_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_PKCS7_SIGNER_INFO_sk_type(sk), (n))
#define ossl_sk_PKCS7_SIGNER_INFO_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_PKCS7_SIGNER_INFO_sk_type(sk))
#define ossl_sk_PKCS7_SIGNER_INFO_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_PKCS7_SIGNER_INFO_sk_type(sk))
#define ossl_sk_PKCS7_SIGNER_INFO_delete(sk, i) ((ossl_PKCS7_SIGNER_INFO *)ossl_OPENSSL_sk_delete(ossl_ossl_check_PKCS7_SIGNER_INFO_sk_type(sk), (i)))
#define ossl_sk_PKCS7_SIGNER_INFO_delete_ptr(sk, ptr) ((ossl_PKCS7_SIGNER_INFO *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_PKCS7_SIGNER_INFO_sk_type(sk), ossl_ossl_check_PKCS7_SIGNER_INFO_type(ptr)))
#define ossl_sk_PKCS7_SIGNER_INFO_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_PKCS7_SIGNER_INFO_sk_type(sk), ossl_ossl_check_PKCS7_SIGNER_INFO_type(ptr))
#define ossl_sk_PKCS7_SIGNER_INFO_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_PKCS7_SIGNER_INFO_sk_type(sk), ossl_ossl_check_PKCS7_SIGNER_INFO_type(ptr))
#define ossl_sk_PKCS7_SIGNER_INFO_pop(sk) ((ossl_PKCS7_SIGNER_INFO *)ossl_OPENSSL_sk_pop(ossl_ossl_check_PKCS7_SIGNER_INFO_sk_type(sk)))
#define ossl_sk_PKCS7_SIGNER_INFO_shift(sk) ((ossl_PKCS7_SIGNER_INFO *)ossl_OPENSSL_sk_shift(ossl_ossl_check_PKCS7_SIGNER_INFO_sk_type(sk)))
#define ossl_sk_PKCS7_SIGNER_INFO_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_PKCS7_SIGNER_INFO_sk_type(sk),ossl_ossl_check_PKCS7_SIGNER_INFO_freefunc_type(freefunc))
#define ossl_sk_PKCS7_SIGNER_INFO_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_PKCS7_SIGNER_INFO_sk_type(sk), ossl_ossl_check_PKCS7_SIGNER_INFO_type(ptr), (idx))
#define ossl_sk_PKCS7_SIGNER_INFO_set(sk, idx, ptr) ((ossl_PKCS7_SIGNER_INFO *)ossl_OPENSSL_sk_set(ossl_ossl_check_PKCS7_SIGNER_INFO_sk_type(sk), (idx), ossl_ossl_check_PKCS7_SIGNER_INFO_type(ptr)))
#define ossl_sk_PKCS7_SIGNER_INFO_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_PKCS7_SIGNER_INFO_sk_type(sk), ossl_ossl_check_PKCS7_SIGNER_INFO_type(ptr))
#define ossl_sk_PKCS7_SIGNER_INFO_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_PKCS7_SIGNER_INFO_sk_type(sk), ossl_ossl_check_PKCS7_SIGNER_INFO_type(ptr))
#define ossl_sk_PKCS7_SIGNER_INFO_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_PKCS7_SIGNER_INFO_sk_type(sk), ossl_ossl_check_PKCS7_SIGNER_INFO_type(ptr), pnum)
#define ossl_sk_PKCS7_SIGNER_INFO_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_PKCS7_SIGNER_INFO_sk_type(sk))
#define ossl_sk_PKCS7_SIGNER_INFO_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_PKCS7_SIGNER_INFO_sk_type(sk))
#define ossl_sk_PKCS7_SIGNER_INFO_dup(sk) ((ossl_STACK_OF(ossl_PKCS7_SIGNER_INFO) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_PKCS7_SIGNER_INFO_sk_type(sk)))
#define ossl_sk_PKCS7_SIGNER_INFO_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_PKCS7_SIGNER_INFO) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_PKCS7_SIGNER_INFO_sk_type(sk), ossl_ossl_check_PKCS7_SIGNER_INFO_copyfunc_type(copyfunc), ossl_ossl_check_PKCS7_SIGNER_INFO_freefunc_type(freefunc)))
#define ossl_sk_PKCS7_SIGNER_INFO_set_cmp_func(sk, cmp) ((ossl_sk_PKCS7_SIGNER_INFO_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_PKCS7_SIGNER_INFO_sk_type(sk), ossl_ossl_check_PKCS7_SIGNER_INFO_compfunc_type(cmp)))


typedef struct ossl_pkcs7_recip_info_st {
    ossl_ASN1_INTEGER *version;      /* version 0 */
    ossl_PKCS7_ISSUER_AND_SERIAL *issuer_and_serial;
    ossl_X509_ALGOR *key_enc_algor;
    ossl_ASN1_OCTET_STRING *enc_key;
    ossl_X509 *cert;                 /* get the pub-key from this */
    const ossl_PKCS7_CTX *ctx;
} ossl_PKCS7_RECIP_INFO;
ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_PKCS7_RECIP_INFO, ossl_PKCS7_RECIP_INFO, ossl_PKCS7_RECIP_INFO)
#define ossl_sk_PKCS7_RECIP_INFO_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_PKCS7_RECIP_INFO_sk_type(sk))
#define ossl_sk_PKCS7_RECIP_INFO_value(sk, idx) ((ossl_PKCS7_RECIP_INFO *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_PKCS7_RECIP_INFO_sk_type(sk), (idx)))
#define ossl_sk_PKCS7_RECIP_INFO_new(cmp) ((ossl_STACK_OF(ossl_PKCS7_RECIP_INFO) *)ossl_OPENSSL_sk_new(ossl_ossl_check_PKCS7_RECIP_INFO_compfunc_type(cmp)))
#define ossl_sk_PKCS7_RECIP_INFO_new_null() ((ossl_STACK_OF(ossl_PKCS7_RECIP_INFO) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_PKCS7_RECIP_INFO_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_PKCS7_RECIP_INFO) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_PKCS7_RECIP_INFO_compfunc_type(cmp), (n)))
#define ossl_sk_PKCS7_RECIP_INFO_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_PKCS7_RECIP_INFO_sk_type(sk), (n))
#define ossl_sk_PKCS7_RECIP_INFO_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_PKCS7_RECIP_INFO_sk_type(sk))
#define ossl_sk_PKCS7_RECIP_INFO_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_PKCS7_RECIP_INFO_sk_type(sk))
#define ossl_sk_PKCS7_RECIP_INFO_delete(sk, i) ((ossl_PKCS7_RECIP_INFO *)ossl_OPENSSL_sk_delete(ossl_ossl_check_PKCS7_RECIP_INFO_sk_type(sk), (i)))
#define ossl_sk_PKCS7_RECIP_INFO_delete_ptr(sk, ptr) ((ossl_PKCS7_RECIP_INFO *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_PKCS7_RECIP_INFO_sk_type(sk), ossl_ossl_check_PKCS7_RECIP_INFO_type(ptr)))
#define ossl_sk_PKCS7_RECIP_INFO_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_PKCS7_RECIP_INFO_sk_type(sk), ossl_ossl_check_PKCS7_RECIP_INFO_type(ptr))
#define ossl_sk_PKCS7_RECIP_INFO_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_PKCS7_RECIP_INFO_sk_type(sk), ossl_ossl_check_PKCS7_RECIP_INFO_type(ptr))
#define ossl_sk_PKCS7_RECIP_INFO_pop(sk) ((ossl_PKCS7_RECIP_INFO *)ossl_OPENSSL_sk_pop(ossl_ossl_check_PKCS7_RECIP_INFO_sk_type(sk)))
#define ossl_sk_PKCS7_RECIP_INFO_shift(sk) ((ossl_PKCS7_RECIP_INFO *)ossl_OPENSSL_sk_shift(ossl_ossl_check_PKCS7_RECIP_INFO_sk_type(sk)))
#define ossl_sk_PKCS7_RECIP_INFO_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_PKCS7_RECIP_INFO_sk_type(sk),ossl_ossl_check_PKCS7_RECIP_INFO_freefunc_type(freefunc))
#define ossl_sk_PKCS7_RECIP_INFO_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_PKCS7_RECIP_INFO_sk_type(sk), ossl_ossl_check_PKCS7_RECIP_INFO_type(ptr), (idx))
#define ossl_sk_PKCS7_RECIP_INFO_set(sk, idx, ptr) ((ossl_PKCS7_RECIP_INFO *)ossl_OPENSSL_sk_set(ossl_ossl_check_PKCS7_RECIP_INFO_sk_type(sk), (idx), ossl_ossl_check_PKCS7_RECIP_INFO_type(ptr)))
#define ossl_sk_PKCS7_RECIP_INFO_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_PKCS7_RECIP_INFO_sk_type(sk), ossl_ossl_check_PKCS7_RECIP_INFO_type(ptr))
#define ossl_sk_PKCS7_RECIP_INFO_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_PKCS7_RECIP_INFO_sk_type(sk), ossl_ossl_check_PKCS7_RECIP_INFO_type(ptr))
#define ossl_sk_PKCS7_RECIP_INFO_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_PKCS7_RECIP_INFO_sk_type(sk), ossl_ossl_check_PKCS7_RECIP_INFO_type(ptr), pnum)
#define ossl_sk_PKCS7_RECIP_INFO_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_PKCS7_RECIP_INFO_sk_type(sk))
#define ossl_sk_PKCS7_RECIP_INFO_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_PKCS7_RECIP_INFO_sk_type(sk))
#define ossl_sk_PKCS7_RECIP_INFO_dup(sk) ((ossl_STACK_OF(ossl_PKCS7_RECIP_INFO) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_PKCS7_RECIP_INFO_sk_type(sk)))
#define ossl_sk_PKCS7_RECIP_INFO_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_PKCS7_RECIP_INFO) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_PKCS7_RECIP_INFO_sk_type(sk), ossl_ossl_check_PKCS7_RECIP_INFO_copyfunc_type(copyfunc), ossl_ossl_check_PKCS7_RECIP_INFO_freefunc_type(freefunc)))
#define ossl_sk_PKCS7_RECIP_INFO_set_cmp_func(sk, cmp) ((ossl_sk_PKCS7_RECIP_INFO_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_PKCS7_RECIP_INFO_sk_type(sk), ossl_ossl_check_PKCS7_RECIP_INFO_compfunc_type(cmp)))



typedef struct ossl_pkcs7_signed_st {
    ossl_ASN1_INTEGER *version;      /* version 1 */
    ossl_STACK_OF(ossl_X509_ALGOR) *md_algs; /* md used */
    ossl_STACK_OF(ossl_X509) *cert;       /* [ 0 ] */
    ossl_STACK_OF(ossl_X509_CRL) *crl;    /* [ 1 ] */
    ossl_STACK_OF(ossl_PKCS7_SIGNER_INFO) *signer_info;
    struct ossl_pkcs7_st *contents;
} ossl_PKCS7_SIGNED;
/*
 * The above structure is very very similar to ossl_PKCS7_SIGN_ENVELOPE. How about
 * merging the two
 */

typedef struct ossl_pkcs7_enc_content_st {
    ossl_ASN1_OBJECT *content_type;
    ossl_X509_ALGOR *algorithm;
    ossl_ASN1_OCTET_STRING *enc_data; /* [ 0 ] */
    const ossl_EVP_CIPHER *cipher;
    const ossl_PKCS7_CTX *ctx;
} ossl_PKCS7_ENC_CONTENT;

typedef struct ossl_pkcs7_enveloped_st {
    ossl_ASN1_INTEGER *version;      /* version 0 */
    ossl_STACK_OF(ossl_PKCS7_RECIP_INFO) *recipientinfo;
    ossl_PKCS7_ENC_CONTENT *enc_data;
} ossl_PKCS7_ENVELOPE;

typedef struct ossl_pkcs7_signedandenveloped_st {
    ossl_ASN1_INTEGER *version;      /* version 1 */
    ossl_STACK_OF(ossl_X509_ALGOR) *md_algs; /* md used */
    ossl_STACK_OF(ossl_X509) *cert;       /* [ 0 ] */
    ossl_STACK_OF(ossl_X509_CRL) *crl;    /* [ 1 ] */
    ossl_STACK_OF(ossl_PKCS7_SIGNER_INFO) *signer_info;
    ossl_PKCS7_ENC_CONTENT *enc_data;
    ossl_STACK_OF(ossl_PKCS7_RECIP_INFO) *recipientinfo;
} ossl_PKCS7_SIGN_ENVELOPE;

typedef struct ossl_pkcs7_digest_st {
    ossl_ASN1_INTEGER *version;      /* version 0 */
    ossl_X509_ALGOR *md;             /* md used */
    struct ossl_pkcs7_st *contents;
    ossl_ASN1_OCTET_STRING *digest;
} ossl_PKCS7_DIGEST;

typedef struct ossl_pkcs7_encrypted_st {
    ossl_ASN1_INTEGER *version;      /* version 0 */
    ossl_PKCS7_ENC_CONTENT *enc_data;
} ossl_PKCS7_ENCRYPT;

typedef struct ossl_pkcs7_st {
    /*
     * The following is non NULL if it contains ASN1 encoding of this
     * structure
     */
    unsigned char *asn1;
    long length;
# define ossl_PKCS7_S_HEADER  0
# define ossl_PKCS7_S_BODY    1
# define ossl_PKCS7_S_TAIL    2
    int state;                  /* used during processing */
    int detached;
    ossl_ASN1_OBJECT *type;
    /* content as defined by the type */
    /*
     * all encryption/message digests are applied to the 'contents', leaving
     * out the 'type' field.
     */
    union {
        char *ptr;
        /* ossl_NID_pkcs7_data */
        ossl_ASN1_OCTET_STRING *data;
        /* ossl_NID_pkcs7_signed */
        ossl_PKCS7_SIGNED *sign;
        /* ossl_NID_pkcs7_enveloped */
        ossl_PKCS7_ENVELOPE *enveloped;
        /* ossl_NID_pkcs7_signedAndEnveloped */
        ossl_PKCS7_SIGN_ENVELOPE *signed_and_enveloped;
        /* ossl_NID_pkcs7_digest */
        ossl_PKCS7_DIGEST *digest;
        /* ossl_NID_pkcs7_encrypted */
        ossl_PKCS7_ENCRYPT *encrypted;
        /* Anything else */
        ossl_ASN1_TYPE *other;
    } d;
    ossl_PKCS7_CTX ctx;
} ossl_PKCS7;
ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_PKCS7, ossl_PKCS7, ossl_PKCS7)
#define ossl_sk_PKCS7_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_PKCS7_sk_type(sk))
#define ossl_sk_PKCS7_value(sk, idx) ((ossl_PKCS7 *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_PKCS7_sk_type(sk), (idx)))
#define ossl_sk_PKCS7_new(cmp) ((ossl_STACK_OF(ossl_PKCS7) *)ossl_OPENSSL_sk_new(ossl_ossl_check_PKCS7_compfunc_type(cmp)))
#define ossl_sk_PKCS7_new_null() ((ossl_STACK_OF(ossl_PKCS7) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_PKCS7_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_PKCS7) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_PKCS7_compfunc_type(cmp), (n)))
#define ossl_sk_PKCS7_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_PKCS7_sk_type(sk), (n))
#define ossl_sk_PKCS7_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_PKCS7_sk_type(sk))
#define ossl_sk_PKCS7_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_PKCS7_sk_type(sk))
#define ossl_sk_PKCS7_delete(sk, i) ((ossl_PKCS7 *)ossl_OPENSSL_sk_delete(ossl_ossl_check_PKCS7_sk_type(sk), (i)))
#define ossl_sk_PKCS7_delete_ptr(sk, ptr) ((ossl_PKCS7 *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_PKCS7_sk_type(sk), ossl_ossl_check_PKCS7_type(ptr)))
#define ossl_sk_PKCS7_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_PKCS7_sk_type(sk), ossl_ossl_check_PKCS7_type(ptr))
#define ossl_sk_PKCS7_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_PKCS7_sk_type(sk), ossl_ossl_check_PKCS7_type(ptr))
#define ossl_sk_PKCS7_pop(sk) ((ossl_PKCS7 *)ossl_OPENSSL_sk_pop(ossl_ossl_check_PKCS7_sk_type(sk)))
#define ossl_sk_PKCS7_shift(sk) ((ossl_PKCS7 *)ossl_OPENSSL_sk_shift(ossl_ossl_check_PKCS7_sk_type(sk)))
#define ossl_sk_PKCS7_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_PKCS7_sk_type(sk),ossl_ossl_check_PKCS7_freefunc_type(freefunc))
#define ossl_sk_PKCS7_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_PKCS7_sk_type(sk), ossl_ossl_check_PKCS7_type(ptr), (idx))
#define ossl_sk_PKCS7_set(sk, idx, ptr) ((ossl_PKCS7 *)ossl_OPENSSL_sk_set(ossl_ossl_check_PKCS7_sk_type(sk), (idx), ossl_ossl_check_PKCS7_type(ptr)))
#define ossl_sk_PKCS7_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_PKCS7_sk_type(sk), ossl_ossl_check_PKCS7_type(ptr))
#define ossl_sk_PKCS7_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_PKCS7_sk_type(sk), ossl_ossl_check_PKCS7_type(ptr))
#define ossl_sk_PKCS7_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_PKCS7_sk_type(sk), ossl_ossl_check_PKCS7_type(ptr), pnum)
#define ossl_sk_PKCS7_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_PKCS7_sk_type(sk))
#define ossl_sk_PKCS7_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_PKCS7_sk_type(sk))
#define ossl_sk_PKCS7_dup(sk) ((ossl_STACK_OF(ossl_PKCS7) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_PKCS7_sk_type(sk)))
#define ossl_sk_PKCS7_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_PKCS7) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_PKCS7_sk_type(sk), ossl_ossl_check_PKCS7_copyfunc_type(copyfunc), ossl_ossl_check_PKCS7_freefunc_type(freefunc)))
#define ossl_sk_PKCS7_set_cmp_func(sk, cmp) ((ossl_sk_PKCS7_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_PKCS7_sk_type(sk), ossl_ossl_check_PKCS7_compfunc_type(cmp)))



# define ossl_PKCS7_OP_SET_DETACHED_SIGNATURE 1
# define ossl_PKCS7_OP_GET_DETACHED_SIGNATURE 2

# define ossl_PKCS7_get_signed_attributes(si) ((si)->auth_attr)
# define ossl_PKCS7_get_attributes(si)        ((si)->unauth_attr)

# define ossl_PKCS7_type_is_signed(a) (ossl_OBJ_obj2nid((a)->type) == ossl_NID_pkcs7_signed)
# define ossl_PKCS7_type_is_encrypted(a) (ossl_OBJ_obj2nid((a)->type) == ossl_NID_pkcs7_encrypted)
# define ossl_PKCS7_type_is_enveloped(a) (ossl_OBJ_obj2nid((a)->type) == ossl_NID_pkcs7_enveloped)
# define ossl_PKCS7_type_is_signedAndEnveloped(a) \
                (ossl_OBJ_obj2nid((a)->type) == ossl_NID_pkcs7_signedAndEnveloped)
# define ossl_PKCS7_type_is_data(a)   (ossl_OBJ_obj2nid((a)->type) == ossl_NID_pkcs7_data)
# define ossl_PKCS7_type_is_digest(a)   (ossl_OBJ_obj2nid((a)->type) == ossl_NID_pkcs7_digest)

# define ossl_PKCS7_set_detached(p,v) \
                ossl_PKCS7_ctrl(p,ossl_PKCS7_OP_SET_DETACHED_SIGNATURE,v,NULL)
# define ossl_PKCS7_get_detached(p) \
                ossl_PKCS7_ctrl(p,ossl_PKCS7_OP_GET_DETACHED_SIGNATURE,0,NULL)

# define ossl_PKCS7_is_detached(p7) (ossl_PKCS7_type_is_signed(p7) && ossl_PKCS7_get_detached(p7))

/* S/MIME related flags */

# define ossl_PKCS7_TEXT              0x1
# define ossl_PKCS7_NOCERTS           0x2
# define ossl_PKCS7_NOSIGS            0x4
# define ossl_PKCS7_NOCHAIN           0x8
# define ossl_PKCS7_NOINTERN          0x10
# define ossl_PKCS7_NOVERIFY          0x20
# define ossl_PKCS7_DETACHED          0x40
# define ossl_PKCS7_BINARY            0x80
# define ossl_PKCS7_NOATTR            0x100
# define ossl_PKCS7_NOSMIMECAP        0x200
# define ossl_PKCS7_NOOLDMIMETYPE     0x400
# define ossl_PKCS7_CRLFEOL           0x800
# define ossl_PKCS7_STREAM            0x1000
# define ossl_PKCS7_NOCRL             0x2000
# define ossl_PKCS7_PARTIAL           0x4000
# define ossl_PKCS7_REUSE_DIGEST      0x8000
# define ossl_PKCS7_NO_DUAL_CONTENT   0x10000

/* Flags: for compatibility with older code */

# define ossl_SMIME_TEXT      ossl_PKCS7_TEXT
# define ossl_SMIME_NOCERTS   ossl_PKCS7_NOCERTS
# define ossl_SMIME_NOSIGS    ossl_PKCS7_NOSIGS
# define ossl_SMIME_NOCHAIN   ossl_PKCS7_NOCHAIN
# define ossl_SMIME_NOINTERN  ossl_PKCS7_NOINTERN
# define ossl_SMIME_NOVERIFY  ossl_PKCS7_NOVERIFY
# define ossl_SMIME_DETACHED  ossl_PKCS7_DETACHED
# define ossl_SMIME_BINARY    ossl_PKCS7_BINARY
# define ossl_SMIME_NOATTR    ossl_PKCS7_NOATTR

/* CRLF ASCII canonicalisation */
# define ossl_SMIME_ASCIICRLF         0x80000

ossl_DECLARE_ASN1_FUNCTIONS(ossl_PKCS7_ISSUER_AND_SERIAL)

int ossl_PKCS7_ISSUER_AND_SERIAL_digest(ossl_PKCS7_ISSUER_AND_SERIAL *data,
                                   const ossl_EVP_MD *type, unsigned char *md,
                                   unsigned int *len);
# ifndef ossl_OPENSSL_NO_STDIO
ossl_PKCS7 *ossl_d2i_PKCS7_fp(FILE *fp, ossl_PKCS7 **p7);
int ossl_i2d_PKCS7_fp(FILE *fp, const ossl_PKCS7 *p7);
# endif
ossl_DECLARE_ASN1_DUP_FUNCTION(ossl_PKCS7)
ossl_PKCS7 *ossl_d2i_PKCS7_bio(ossl_BIO *bp, ossl_PKCS7 **p7);
int ossl_i2d_PKCS7_bio(ossl_BIO *bp, const ossl_PKCS7 *p7);
int ossl_i2d_PKCS7_bio_stream(ossl_BIO *out, ossl_PKCS7 *p7, ossl_BIO *in, int flags);
int ossl_PEM_write_bio_PKCS7_stream(ossl_BIO *out, ossl_PKCS7 *p7, ossl_BIO *in, int flags);

ossl_DECLARE_ASN1_FUNCTIONS(ossl_PKCS7_SIGNER_INFO)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_PKCS7_RECIP_INFO)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_PKCS7_SIGNED)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_PKCS7_ENC_CONTENT)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_PKCS7_ENVELOPE)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_PKCS7_SIGN_ENVELOPE)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_PKCS7_DIGEST)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_PKCS7_ENCRYPT)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_PKCS7)
ossl_PKCS7 *ossl_PKCS7_new_ex(ossl_OSSL_LIB_CTX *libctx, const char *propq);

ossl_DECLARE_ASN1_ITEM(ossl_PKCS7_ATTR_SIGN)
ossl_DECLARE_ASN1_ITEM(ossl_PKCS7_ATTR_VERIFY)

ossl_DECLARE_ASN1_NDEF_FUNCTION(ossl_PKCS7)
ossl_DECLARE_ASN1_PRINT_FUNCTION(ossl_PKCS7)

long ossl_PKCS7_ctrl(ossl_PKCS7 *p7, int cmd, long larg, char *parg);

int ossl_PKCS7_type_is_other(ossl_PKCS7 *p7);
int ossl_PKCS7_set_type(ossl_PKCS7 *p7, int type);
int ossl_PKCS7_set0_type_other(ossl_PKCS7 *p7, int type, ossl_ASN1_TYPE *other);
int ossl_PKCS7_set_content(ossl_PKCS7 *p7, ossl_PKCS7 *p7_data);
int ossl_PKCS7_SIGNER_INFO_set(ossl_PKCS7_SIGNER_INFO *p7i, ossl_X509 *x509, ossl_EVP_PKEY *pkey,
                          const ossl_EVP_MD *dgst);
int ossl_PKCS7_SIGNER_INFO_sign(ossl_PKCS7_SIGNER_INFO *si);
int ossl_PKCS7_add_signer(ossl_PKCS7 *p7, ossl_PKCS7_SIGNER_INFO *p7i);
int ossl_PKCS7_add_certificate(ossl_PKCS7 *p7, ossl_X509 *x509);
int ossl_PKCS7_add_crl(ossl_PKCS7 *p7, ossl_X509_CRL *x509);
int ossl_PKCS7_content_new(ossl_PKCS7 *p7, int nid);
int ossl_PKCS7_dataVerify(ossl_X509_STORE *cert_store, ossl_X509_STORE_CTX *ctx,
                     ossl_BIO *bio, ossl_PKCS7 *p7, ossl_PKCS7_SIGNER_INFO *si);
int ossl_PKCS7_signatureVerify(ossl_BIO *bio, ossl_PKCS7 *p7, ossl_PKCS7_SIGNER_INFO *si,
                          ossl_X509 *x509);

ossl_BIO *ossl_PKCS7_dataInit(ossl_PKCS7 *p7, ossl_BIO *bio);
int ossl_PKCS7_dataFinal(ossl_PKCS7 *p7, ossl_BIO *bio);
ossl_BIO *ossl_PKCS7_dataDecode(ossl_PKCS7 *p7, ossl_EVP_PKEY *pkey, ossl_BIO *in_bio, ossl_X509 *pcert);

ossl_PKCS7_SIGNER_INFO *ossl_PKCS7_add_signature(ossl_PKCS7 *p7, ossl_X509 *x509,
                                       ossl_EVP_PKEY *pkey, const ossl_EVP_MD *dgst);
ossl_X509 *ossl_PKCS7_cert_from_signer_info(ossl_PKCS7 *p7, ossl_PKCS7_SIGNER_INFO *si);
int ossl_PKCS7_set_digest(ossl_PKCS7 *p7, const ossl_EVP_MD *md);
ossl_STACK_OF(ossl_PKCS7_SIGNER_INFO) *ossl_PKCS7_get_signer_info(ossl_PKCS7 *p7);

ossl_PKCS7_RECIP_INFO *ossl_PKCS7_add_recipient(ossl_PKCS7 *p7, ossl_X509 *x509);
void ossl_PKCS7_SIGNER_INFO_get0_algs(ossl_PKCS7_SIGNER_INFO *si, ossl_EVP_PKEY **pk,
                                 ossl_X509_ALGOR **pdig, ossl_X509_ALGOR **psig);
void ossl_PKCS7_RECIP_INFO_get0_alg(ossl_PKCS7_RECIP_INFO *ri, ossl_X509_ALGOR **penc);
int ossl_PKCS7_add_recipient_info(ossl_PKCS7 *p7, ossl_PKCS7_RECIP_INFO *ri);
int ossl_PKCS7_RECIP_INFO_set(ossl_PKCS7_RECIP_INFO *p7i, ossl_X509 *x509);
int ossl_PKCS7_set_cipher(ossl_PKCS7 *p7, const ossl_EVP_CIPHER *cipher);
int ossl_PKCS7_stream(unsigned char ***boundary, ossl_PKCS7 *p7);

ossl_PKCS7_ISSUER_AND_SERIAL *ossl_PKCS7_get_issuer_and_serial(ossl_PKCS7 *p7, int idx);
ossl_ASN1_OCTET_STRING *ossl_PKCS7_get_octet_string(ossl_PKCS7 *p7);
ossl_ASN1_OCTET_STRING *ossl_PKCS7_digest_from_attributes(ossl_STACK_OF(ossl_X509_ATTRIBUTE) *sk);
int ossl_PKCS7_add_signed_attribute(ossl_PKCS7_SIGNER_INFO *p7si, int nid, int type,
                               void *data);
int ossl_PKCS7_add_attribute(ossl_PKCS7_SIGNER_INFO *p7si, int nid, int atrtype,
                        void *value);
ossl_ASN1_TYPE *ossl_PKCS7_get_attribute(const ossl_PKCS7_SIGNER_INFO *si, int nid);
ossl_ASN1_TYPE *ossl_PKCS7_get_signed_attribute(const ossl_PKCS7_SIGNER_INFO *si, int nid);
int ossl_PKCS7_set_signed_attributes(ossl_PKCS7_SIGNER_INFO *p7si,
                                ossl_STACK_OF(ossl_X509_ATTRIBUTE) *sk);
int ossl_PKCS7_set_attributes(ossl_PKCS7_SIGNER_INFO *p7si,
                         ossl_STACK_OF(ossl_X509_ATTRIBUTE) *sk);

ossl_PKCS7 *ossl_PKCS7_sign(ossl_X509 *signcert, ossl_EVP_PKEY *pkey, ossl_STACK_OF(ossl_X509) *certs,
                  ossl_BIO *data, int flags);
ossl_PKCS7 *ossl_PKCS7_sign_ex(ossl_X509 *signcert, ossl_EVP_PKEY *pkey, ossl_STACK_OF(ossl_X509) *certs,
                     ossl_BIO *data, int flags, ossl_OSSL_LIB_CTX *libctx,
                     const char *propq);

ossl_PKCS7_SIGNER_INFO *ossl_PKCS7_sign_add_signer(ossl_PKCS7 *p7,
                                         ossl_X509 *signcert, ossl_EVP_PKEY *pkey,
                                         const ossl_EVP_MD *md, int flags);

int ossl_PKCS7_final(ossl_PKCS7 *p7, ossl_BIO *data, int flags);
int ossl_PKCS7_verify(ossl_PKCS7 *p7, ossl_STACK_OF(ossl_X509) *certs, ossl_X509_STORE *store,
                 ossl_BIO *indata, ossl_BIO *out, int flags);
ossl_STACK_OF(ossl_X509) *ossl_PKCS7_get0_signers(ossl_PKCS7 *p7, ossl_STACK_OF(ossl_X509) *certs,
                                   int flags);
ossl_PKCS7 *ossl_PKCS7_encrypt(ossl_STACK_OF(ossl_X509) *certs, ossl_BIO *in, const ossl_EVP_CIPHER *cipher,
                     int flags);
ossl_PKCS7 *ossl_PKCS7_encrypt_ex(ossl_STACK_OF(ossl_X509) *certs, ossl_BIO *in,
                        const ossl_EVP_CIPHER *cipher, int flags,
                        ossl_OSSL_LIB_CTX *libctx, const char *propq);
int ossl_PKCS7_decrypt(ossl_PKCS7 *p7, ossl_EVP_PKEY *pkey, ossl_X509 *cert, ossl_BIO *data,
                  int flags);

int ossl_PKCS7_add_attrib_smimecap(ossl_PKCS7_SIGNER_INFO *si,
                              ossl_STACK_OF(ossl_X509_ALGOR) *cap);
ossl_STACK_OF(ossl_X509_ALGOR) *ossl_PKCS7_get_smimecap(ossl_PKCS7_SIGNER_INFO *si);
int ossl_PKCS7_simple_smimecap(ossl_STACK_OF(ossl_X509_ALGOR) *sk, int nid, int arg);

int ossl_PKCS7_add_attrib_content_type(ossl_PKCS7_SIGNER_INFO *si, ossl_ASN1_OBJECT *coid);
int ossl_PKCS7_add0_attrib_signing_time(ossl_PKCS7_SIGNER_INFO *si, ossl_ASN1_TIME *t);
int ossl_PKCS7_add1_attrib_digest(ossl_PKCS7_SIGNER_INFO *si,
                             const unsigned char *md, int mdlen);

int ossl_SMIME_write_PKCS7(ossl_BIO *bio, ossl_PKCS7 *p7, ossl_BIO *data, int flags);
ossl_PKCS7 *ossl_SMIME_read_PKCS7_ex(ossl_BIO *bio, ossl_BIO **bcont, ossl_PKCS7 **p7);
ossl_PKCS7 *ossl_SMIME_read_PKCS7(ossl_BIO *bio, ossl_BIO **bcont);

ossl_BIO *ossl_BIO_new_PKCS7(ossl_BIO *out, ossl_PKCS7 *p7);

# ifdef  __cplusplus
}
# endif
#endif
