/*
 * WARNING: do not edit!
 * Generated by Makefile from ../../../openssl/source/include/openssl/x509v3.h.in
 *
 * Copyright 1999-2023 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



#ifndef ossl_OPENSSL_X509V3_H
# define ossl_OPENSSL_X509V3_H
# pragma once

# include "ossl/openssl/macros.h"
# ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
#  define ossl_HEADER_X509V3_H
# endif

# include "ossl/openssl/bio.h"
# include "ossl/openssl/x509.h"
# include "ossl/openssl/conf.h"
# include "ossl/openssl/x509v3err.h"

#ifdef __cplusplus
extern "C" {
#endif

/* Forward reference */
struct ossl_v3_ext_method;
struct ossl_v3_ext_ctx;

/* Useful typedefs */

typedef void *(*ossl_X509V3_EXT_NEW)(void);
typedef void (*ossl_X509V3_EXT_FREE) (void *);
typedef void *(*ossl_X509V3_EXT_D2I)(void *, const unsigned char **, long);
typedef int (*ossl_X509V3_EXT_I2D) (const void *, unsigned char **);
typedef ossl_STACK_OF(ossl_CONF_VALUE) *
    (*ossl_X509V3_EXT_I2V) (const struct ossl_v3_ext_method *method, void *ext,
                       ossl_STACK_OF(ossl_CONF_VALUE) *extlist);
typedef void *(*ossl_X509V3_EXT_V2I)(const struct ossl_v3_ext_method *method,
                                struct ossl_v3_ext_ctx *ctx,
                                ossl_STACK_OF(ossl_CONF_VALUE) *values);
typedef char *(*ossl_X509V3_EXT_I2S)(const struct ossl_v3_ext_method *method,
                                void *ext);
typedef void *(*ossl_X509V3_EXT_S2I)(const struct ossl_v3_ext_method *method,
                                struct ossl_v3_ext_ctx *ctx, const char *str);
typedef int (*ossl_X509V3_EXT_I2R) (const struct ossl_v3_ext_method *method, void *ext,
                               ossl_BIO *out, int indent);
typedef void *(*ossl_X509V3_EXT_R2I)(const struct ossl_v3_ext_method *method,
                                struct ossl_v3_ext_ctx *ctx, const char *str);

/* V3 extension structure */

struct ossl_v3_ext_method {
    int ext_nid;
    int ext_flags;
/* If this is set the following four fields are ignored */
    ossl_ASN1_ITEM_EXP *it;
/* Old style ASN1 calls */
    ossl_X509V3_EXT_NEW ext_new;
    ossl_X509V3_EXT_FREE ext_free;
    ossl_X509V3_EXT_D2I d2i;
    ossl_X509V3_EXT_I2D i2d;
/* The following pair is used for string extensions */
    ossl_X509V3_EXT_I2S i2s;
    ossl_X509V3_EXT_S2I s2i;
/* The following pair is used for multi-valued extensions */
    ossl_X509V3_EXT_I2V i2v;
    ossl_X509V3_EXT_V2I v2i;
/* The following are used for raw extensions */
    ossl_X509V3_EXT_I2R i2r;
    ossl_X509V3_EXT_R2I r2i;
    void *usr_data;             /* Any extension specific data */
};

typedef struct ossl_X509V3_CONF_METHOD_st {
    char *(*get_string) (void *db, const char *section, const char *value);
    ossl_STACK_OF(ossl_CONF_VALUE) *(*get_section) (void *db, const char *section);
    void (*free_string) (void *db, char *string);
    void (*free_section) (void *db, ossl_STACK_OF(ossl_CONF_VALUE) *section);
} ossl_X509V3_CONF_METHOD;

/* Context specific info for producing ossl_X509 v3 extensions*/
struct ossl_v3_ext_ctx {
# define ossl_X509V3_CTX_TEST 0x1
# ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
#  define ossl_CTX_TEST ossl_X509V3_CTX_TEST
# endif
# define ossl_X509V3_CTX_REPLACE 0x2
    int flags;
    ossl_X509 *issuer_cert;
    ossl_X509 *subject_cert;
    ossl_X509_REQ *subject_req;
    ossl_X509_CRL *crl;
    ossl_X509V3_CONF_METHOD *db_meth;
    void *db;
    ossl_EVP_PKEY *issuer_pkey;
/* Maybe more here */
};

typedef struct ossl_v3_ext_method ossl_X509V3_EXT_METHOD;

ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_X509V3_EXT_METHOD, ossl_X509V3_EXT_METHOD, ossl_X509V3_EXT_METHOD)
#define ossl_sk_X509V3_EXT_METHOD_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_X509V3_EXT_METHOD_sk_type(sk))
#define ossl_sk_X509V3_EXT_METHOD_value(sk, idx) ((ossl_X509V3_EXT_METHOD *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_X509V3_EXT_METHOD_sk_type(sk), (idx)))
#define ossl_sk_X509V3_EXT_METHOD_new(cmp) ((ossl_STACK_OF(ossl_X509V3_EXT_METHOD) *)ossl_OPENSSL_sk_new(ossl_ossl_check_X509V3_EXT_METHOD_compfunc_type(cmp)))
#define ossl_sk_X509V3_EXT_METHOD_new_null() ((ossl_STACK_OF(ossl_X509V3_EXT_METHOD) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_X509V3_EXT_METHOD_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_X509V3_EXT_METHOD) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_X509V3_EXT_METHOD_compfunc_type(cmp), (n)))
#define ossl_sk_X509V3_EXT_METHOD_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_X509V3_EXT_METHOD_sk_type(sk), (n))
#define ossl_sk_X509V3_EXT_METHOD_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_X509V3_EXT_METHOD_sk_type(sk))
#define ossl_sk_X509V3_EXT_METHOD_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_X509V3_EXT_METHOD_sk_type(sk))
#define ossl_sk_X509V3_EXT_METHOD_delete(sk, i) ((ossl_X509V3_EXT_METHOD *)ossl_OPENSSL_sk_delete(ossl_ossl_check_X509V3_EXT_METHOD_sk_type(sk), (i)))
#define ossl_sk_X509V3_EXT_METHOD_delete_ptr(sk, ptr) ((ossl_X509V3_EXT_METHOD *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_X509V3_EXT_METHOD_sk_type(sk), ossl_ossl_check_X509V3_EXT_METHOD_type(ptr)))
#define ossl_sk_X509V3_EXT_METHOD_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_X509V3_EXT_METHOD_sk_type(sk), ossl_ossl_check_X509V3_EXT_METHOD_type(ptr))
#define ossl_sk_X509V3_EXT_METHOD_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_X509V3_EXT_METHOD_sk_type(sk), ossl_ossl_check_X509V3_EXT_METHOD_type(ptr))
#define ossl_sk_X509V3_EXT_METHOD_pop(sk) ((ossl_X509V3_EXT_METHOD *)ossl_OPENSSL_sk_pop(ossl_ossl_check_X509V3_EXT_METHOD_sk_type(sk)))
#define ossl_sk_X509V3_EXT_METHOD_shift(sk) ((ossl_X509V3_EXT_METHOD *)ossl_OPENSSL_sk_shift(ossl_ossl_check_X509V3_EXT_METHOD_sk_type(sk)))
#define ossl_sk_X509V3_EXT_METHOD_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_X509V3_EXT_METHOD_sk_type(sk),ossl_ossl_check_X509V3_EXT_METHOD_freefunc_type(freefunc))
#define ossl_sk_X509V3_EXT_METHOD_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_X509V3_EXT_METHOD_sk_type(sk), ossl_ossl_check_X509V3_EXT_METHOD_type(ptr), (idx))
#define ossl_sk_X509V3_EXT_METHOD_set(sk, idx, ptr) ((ossl_X509V3_EXT_METHOD *)ossl_OPENSSL_sk_set(ossl_ossl_check_X509V3_EXT_METHOD_sk_type(sk), (idx), ossl_ossl_check_X509V3_EXT_METHOD_type(ptr)))
#define ossl_sk_X509V3_EXT_METHOD_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_X509V3_EXT_METHOD_sk_type(sk), ossl_ossl_check_X509V3_EXT_METHOD_type(ptr))
#define ossl_sk_X509V3_EXT_METHOD_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_X509V3_EXT_METHOD_sk_type(sk), ossl_ossl_check_X509V3_EXT_METHOD_type(ptr))
#define ossl_sk_X509V3_EXT_METHOD_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_X509V3_EXT_METHOD_sk_type(sk), ossl_ossl_check_X509V3_EXT_METHOD_type(ptr), pnum)
#define ossl_sk_X509V3_EXT_METHOD_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_X509V3_EXT_METHOD_sk_type(sk))
#define ossl_sk_X509V3_EXT_METHOD_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_X509V3_EXT_METHOD_sk_type(sk))
#define ossl_sk_X509V3_EXT_METHOD_dup(sk) ((ossl_STACK_OF(ossl_X509V3_EXT_METHOD) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_X509V3_EXT_METHOD_sk_type(sk)))
#define ossl_sk_X509V3_EXT_METHOD_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_X509V3_EXT_METHOD) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_X509V3_EXT_METHOD_sk_type(sk), ossl_ossl_check_X509V3_EXT_METHOD_copyfunc_type(copyfunc), ossl_ossl_check_X509V3_EXT_METHOD_freefunc_type(freefunc)))
#define ossl_sk_X509V3_EXT_METHOD_set_cmp_func(sk, cmp) ((ossl_sk_X509V3_EXT_METHOD_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_X509V3_EXT_METHOD_sk_type(sk), ossl_ossl_check_X509V3_EXT_METHOD_compfunc_type(cmp)))


/* ext_flags values */
# define ossl_X509V3_EXT_DYNAMIC      0x1
# define ossl_X509V3_EXT_CTX_DEP      0x2
# define ossl_X509V3_EXT_MULTILINE    0x4

typedef ossl_BIT_STRING_BITNAME ossl_ENUMERATED_NAMES;

typedef struct ossl_BASIC_CONSTRAINTS_st {
    int ca;
    ossl_ASN1_INTEGER *pathlen;
} ossl_BASIC_CONSTRAINTS;

typedef struct ossl_PKEY_USAGE_PERIOD_st {
    ossl_ASN1_GENERALIZEDTIME *notBefore;
    ossl_ASN1_GENERALIZEDTIME *notAfter;
} ossl_PKEY_USAGE_PERIOD;

typedef struct ossl_otherName_st {
    ossl_ASN1_OBJECT *type_id;
    ossl_ASN1_TYPE *value;
} ossl_OTHERNAME;

typedef struct ossl_EDIPartyName_st {
    ossl_ASN1_STRING *nameAssigner;
    ossl_ASN1_STRING *partyName;
} ossl_EDIPARTYNAME;

typedef struct ossl_GENERAL_NAME_st {
# define ossl_GEN_OTHERNAME   0
# define ossl_GEN_EMAIL       1
# define ossl_GEN_DNS         2
# define ossl_GEN_X400        3
# define ossl_GEN_DIRNAME     4
# define ossl_GEN_EDIPARTY    5
# define ossl_GEN_URI         6
# define ossl_GEN_IPADD       7
# define ossl_GEN_RID         8
    int type;
    union {
        char *ptr;
        ossl_OTHERNAME *otherName;   /* otherName */
        ossl_ASN1_IA5STRING *rfc822Name;
        ossl_ASN1_IA5STRING *dNSName;
        ossl_ASN1_STRING *x400Address;
        ossl_X509_NAME *directoryName;
        ossl_EDIPARTYNAME *ediPartyName;
        ossl_ASN1_IA5STRING *uniformResourceIdentifier;
        ossl_ASN1_OCTET_STRING *iPAddress;
        ossl_ASN1_OBJECT *registeredID;
        /* Old names */
        ossl_ASN1_OCTET_STRING *ip;  /* iPAddress */
        ossl_X509_NAME *dirn;        /* dirn */
        ossl_ASN1_IA5STRING *ia5;    /* rfc822Name, dNSName,
                                 * uniformResourceIdentifier */
        ossl_ASN1_OBJECT *rid;       /* registeredID */
        ossl_ASN1_TYPE *other;       /* x400Address */
    } d;
} ossl_GENERAL_NAME;

typedef struct ossl_ACCESS_DESCRIPTION_st {
    ossl_ASN1_OBJECT *method;
    ossl_GENERAL_NAME *location;
} ossl_ACCESS_DESCRIPTION;

ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_ACCESS_DESCRIPTION, ossl_ACCESS_DESCRIPTION, ossl_ACCESS_DESCRIPTION)
#define ossl_sk_ACCESS_DESCRIPTION_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_ACCESS_DESCRIPTION_sk_type(sk))
#define ossl_sk_ACCESS_DESCRIPTION_value(sk, idx) ((ossl_ACCESS_DESCRIPTION *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_ACCESS_DESCRIPTION_sk_type(sk), (idx)))
#define ossl_sk_ACCESS_DESCRIPTION_new(cmp) ((ossl_STACK_OF(ossl_ACCESS_DESCRIPTION) *)ossl_OPENSSL_sk_new(ossl_ossl_check_ACCESS_DESCRIPTION_compfunc_type(cmp)))
#define ossl_sk_ACCESS_DESCRIPTION_new_null() ((ossl_STACK_OF(ossl_ACCESS_DESCRIPTION) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_ACCESS_DESCRIPTION_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_ACCESS_DESCRIPTION) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_ACCESS_DESCRIPTION_compfunc_type(cmp), (n)))
#define ossl_sk_ACCESS_DESCRIPTION_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_ACCESS_DESCRIPTION_sk_type(sk), (n))
#define ossl_sk_ACCESS_DESCRIPTION_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_ACCESS_DESCRIPTION_sk_type(sk))
#define ossl_sk_ACCESS_DESCRIPTION_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_ACCESS_DESCRIPTION_sk_type(sk))
#define ossl_sk_ACCESS_DESCRIPTION_delete(sk, i) ((ossl_ACCESS_DESCRIPTION *)ossl_OPENSSL_sk_delete(ossl_ossl_check_ACCESS_DESCRIPTION_sk_type(sk), (i)))
#define ossl_sk_ACCESS_DESCRIPTION_delete_ptr(sk, ptr) ((ossl_ACCESS_DESCRIPTION *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_ACCESS_DESCRIPTION_sk_type(sk), ossl_ossl_check_ACCESS_DESCRIPTION_type(ptr)))
#define ossl_sk_ACCESS_DESCRIPTION_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_ACCESS_DESCRIPTION_sk_type(sk), ossl_ossl_check_ACCESS_DESCRIPTION_type(ptr))
#define ossl_sk_ACCESS_DESCRIPTION_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_ACCESS_DESCRIPTION_sk_type(sk), ossl_ossl_check_ACCESS_DESCRIPTION_type(ptr))
#define ossl_sk_ACCESS_DESCRIPTION_pop(sk) ((ossl_ACCESS_DESCRIPTION *)ossl_OPENSSL_sk_pop(ossl_ossl_check_ACCESS_DESCRIPTION_sk_type(sk)))
#define ossl_sk_ACCESS_DESCRIPTION_shift(sk) ((ossl_ACCESS_DESCRIPTION *)ossl_OPENSSL_sk_shift(ossl_ossl_check_ACCESS_DESCRIPTION_sk_type(sk)))
#define ossl_sk_ACCESS_DESCRIPTION_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_ACCESS_DESCRIPTION_sk_type(sk),ossl_ossl_check_ACCESS_DESCRIPTION_freefunc_type(freefunc))
#define ossl_sk_ACCESS_DESCRIPTION_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_ACCESS_DESCRIPTION_sk_type(sk), ossl_ossl_check_ACCESS_DESCRIPTION_type(ptr), (idx))
#define ossl_sk_ACCESS_DESCRIPTION_set(sk, idx, ptr) ((ossl_ACCESS_DESCRIPTION *)ossl_OPENSSL_sk_set(ossl_ossl_check_ACCESS_DESCRIPTION_sk_type(sk), (idx), ossl_ossl_check_ACCESS_DESCRIPTION_type(ptr)))
#define ossl_sk_ACCESS_DESCRIPTION_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_ACCESS_DESCRIPTION_sk_type(sk), ossl_ossl_check_ACCESS_DESCRIPTION_type(ptr))
#define ossl_sk_ACCESS_DESCRIPTION_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_ACCESS_DESCRIPTION_sk_type(sk), ossl_ossl_check_ACCESS_DESCRIPTION_type(ptr))
#define ossl_sk_ACCESS_DESCRIPTION_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_ACCESS_DESCRIPTION_sk_type(sk), ossl_ossl_check_ACCESS_DESCRIPTION_type(ptr), pnum)
#define ossl_sk_ACCESS_DESCRIPTION_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_ACCESS_DESCRIPTION_sk_type(sk))
#define ossl_sk_ACCESS_DESCRIPTION_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_ACCESS_DESCRIPTION_sk_type(sk))
#define ossl_sk_ACCESS_DESCRIPTION_dup(sk) ((ossl_STACK_OF(ossl_ACCESS_DESCRIPTION) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_ACCESS_DESCRIPTION_sk_type(sk)))
#define ossl_sk_ACCESS_DESCRIPTION_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_ACCESS_DESCRIPTION) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_ACCESS_DESCRIPTION_sk_type(sk), ossl_ossl_check_ACCESS_DESCRIPTION_copyfunc_type(copyfunc), ossl_ossl_check_ACCESS_DESCRIPTION_freefunc_type(freefunc)))
#define ossl_sk_ACCESS_DESCRIPTION_set_cmp_func(sk, cmp) ((ossl_sk_ACCESS_DESCRIPTION_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_ACCESS_DESCRIPTION_sk_type(sk), ossl_ossl_check_ACCESS_DESCRIPTION_compfunc_type(cmp)))
ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_GENERAL_NAME, ossl_GENERAL_NAME, ossl_GENERAL_NAME)
#define ossl_sk_GENERAL_NAME_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_GENERAL_NAME_sk_type(sk))
#define ossl_sk_GENERAL_NAME_value(sk, idx) ((ossl_GENERAL_NAME *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_GENERAL_NAME_sk_type(sk), (idx)))
#define ossl_sk_GENERAL_NAME_new(cmp) ((ossl_STACK_OF(ossl_GENERAL_NAME) *)ossl_OPENSSL_sk_new(ossl_ossl_check_GENERAL_NAME_compfunc_type(cmp)))
#define ossl_sk_GENERAL_NAME_new_null() ((ossl_STACK_OF(ossl_GENERAL_NAME) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_GENERAL_NAME_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_GENERAL_NAME) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_GENERAL_NAME_compfunc_type(cmp), (n)))
#define ossl_sk_GENERAL_NAME_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_GENERAL_NAME_sk_type(sk), (n))
#define ossl_sk_GENERAL_NAME_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_GENERAL_NAME_sk_type(sk))
#define ossl_sk_GENERAL_NAME_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_GENERAL_NAME_sk_type(sk))
#define ossl_sk_GENERAL_NAME_delete(sk, i) ((ossl_GENERAL_NAME *)ossl_OPENSSL_sk_delete(ossl_ossl_check_GENERAL_NAME_sk_type(sk), (i)))
#define ossl_sk_GENERAL_NAME_delete_ptr(sk, ptr) ((ossl_GENERAL_NAME *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_GENERAL_NAME_sk_type(sk), ossl_ossl_check_GENERAL_NAME_type(ptr)))
#define ossl_sk_GENERAL_NAME_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_GENERAL_NAME_sk_type(sk), ossl_ossl_check_GENERAL_NAME_type(ptr))
#define ossl_sk_GENERAL_NAME_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_GENERAL_NAME_sk_type(sk), ossl_ossl_check_GENERAL_NAME_type(ptr))
#define ossl_sk_GENERAL_NAME_pop(sk) ((ossl_GENERAL_NAME *)ossl_OPENSSL_sk_pop(ossl_ossl_check_GENERAL_NAME_sk_type(sk)))
#define ossl_sk_GENERAL_NAME_shift(sk) ((ossl_GENERAL_NAME *)ossl_OPENSSL_sk_shift(ossl_ossl_check_GENERAL_NAME_sk_type(sk)))
#define ossl_sk_GENERAL_NAME_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_GENERAL_NAME_sk_type(sk),ossl_ossl_check_GENERAL_NAME_freefunc_type(freefunc))
#define ossl_sk_GENERAL_NAME_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_GENERAL_NAME_sk_type(sk), ossl_ossl_check_GENERAL_NAME_type(ptr), (idx))
#define ossl_sk_GENERAL_NAME_set(sk, idx, ptr) ((ossl_GENERAL_NAME *)ossl_OPENSSL_sk_set(ossl_ossl_check_GENERAL_NAME_sk_type(sk), (idx), ossl_ossl_check_GENERAL_NAME_type(ptr)))
#define ossl_sk_GENERAL_NAME_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_GENERAL_NAME_sk_type(sk), ossl_ossl_check_GENERAL_NAME_type(ptr))
#define ossl_sk_GENERAL_NAME_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_GENERAL_NAME_sk_type(sk), ossl_ossl_check_GENERAL_NAME_type(ptr))
#define ossl_sk_GENERAL_NAME_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_GENERAL_NAME_sk_type(sk), ossl_ossl_check_GENERAL_NAME_type(ptr), pnum)
#define ossl_sk_GENERAL_NAME_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_GENERAL_NAME_sk_type(sk))
#define ossl_sk_GENERAL_NAME_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_GENERAL_NAME_sk_type(sk))
#define ossl_sk_GENERAL_NAME_dup(sk) ((ossl_STACK_OF(ossl_GENERAL_NAME) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_GENERAL_NAME_sk_type(sk)))
#define ossl_sk_GENERAL_NAME_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_GENERAL_NAME) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_GENERAL_NAME_sk_type(sk), ossl_ossl_check_GENERAL_NAME_copyfunc_type(copyfunc), ossl_ossl_check_GENERAL_NAME_freefunc_type(freefunc)))
#define ossl_sk_GENERAL_NAME_set_cmp_func(sk, cmp) ((ossl_sk_GENERAL_NAME_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_GENERAL_NAME_sk_type(sk), ossl_ossl_check_GENERAL_NAME_compfunc_type(cmp)))


typedef ossl_STACK_OF(ossl_ACCESS_DESCRIPTION) ossl_AUTHORITY_INFO_ACCESS;
typedef ossl_STACK_OF(ossl_ASN1_OBJECT) ossl_EXTENDED_KEY_USAGE;
typedef ossl_STACK_OF(ossl_ASN1_INTEGER) ossl_TLS_FEATURE;
typedef ossl_STACK_OF(ossl_GENERAL_NAME) ossl_GENERAL_NAMES;

ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_GENERAL_NAMES, ossl_GENERAL_NAMES, ossl_GENERAL_NAMES)
#define ossl_sk_GENERAL_NAMES_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_GENERAL_NAMES_sk_type(sk))
#define ossl_sk_GENERAL_NAMES_value(sk, idx) ((ossl_GENERAL_NAMES *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_GENERAL_NAMES_sk_type(sk), (idx)))
#define ossl_sk_GENERAL_NAMES_new(cmp) ((ossl_STACK_OF(ossl_GENERAL_NAMES) *)ossl_OPENSSL_sk_new(ossl_ossl_check_GENERAL_NAMES_compfunc_type(cmp)))
#define ossl_sk_GENERAL_NAMES_new_null() ((ossl_STACK_OF(ossl_GENERAL_NAMES) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_GENERAL_NAMES_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_GENERAL_NAMES) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_GENERAL_NAMES_compfunc_type(cmp), (n)))
#define ossl_sk_GENERAL_NAMES_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_GENERAL_NAMES_sk_type(sk), (n))
#define ossl_sk_GENERAL_NAMES_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_GENERAL_NAMES_sk_type(sk))
#define ossl_sk_GENERAL_NAMES_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_GENERAL_NAMES_sk_type(sk))
#define ossl_sk_GENERAL_NAMES_delete(sk, i) ((ossl_GENERAL_NAMES *)ossl_OPENSSL_sk_delete(ossl_ossl_check_GENERAL_NAMES_sk_type(sk), (i)))
#define ossl_sk_GENERAL_NAMES_delete_ptr(sk, ptr) ((ossl_GENERAL_NAMES *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_GENERAL_NAMES_sk_type(sk), ossl_ossl_check_GENERAL_NAMES_type(ptr)))
#define ossl_sk_GENERAL_NAMES_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_GENERAL_NAMES_sk_type(sk), ossl_ossl_check_GENERAL_NAMES_type(ptr))
#define ossl_sk_GENERAL_NAMES_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_GENERAL_NAMES_sk_type(sk), ossl_ossl_check_GENERAL_NAMES_type(ptr))
#define ossl_sk_GENERAL_NAMES_pop(sk) ((ossl_GENERAL_NAMES *)ossl_OPENSSL_sk_pop(ossl_ossl_check_GENERAL_NAMES_sk_type(sk)))
#define ossl_sk_GENERAL_NAMES_shift(sk) ((ossl_GENERAL_NAMES *)ossl_OPENSSL_sk_shift(ossl_ossl_check_GENERAL_NAMES_sk_type(sk)))
#define ossl_sk_GENERAL_NAMES_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_GENERAL_NAMES_sk_type(sk),ossl_ossl_check_GENERAL_NAMES_freefunc_type(freefunc))
#define ossl_sk_GENERAL_NAMES_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_GENERAL_NAMES_sk_type(sk), ossl_ossl_check_GENERAL_NAMES_type(ptr), (idx))
#define ossl_sk_GENERAL_NAMES_set(sk, idx, ptr) ((ossl_GENERAL_NAMES *)ossl_OPENSSL_sk_set(ossl_ossl_check_GENERAL_NAMES_sk_type(sk), (idx), ossl_ossl_check_GENERAL_NAMES_type(ptr)))
#define ossl_sk_GENERAL_NAMES_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_GENERAL_NAMES_sk_type(sk), ossl_ossl_check_GENERAL_NAMES_type(ptr))
#define ossl_sk_GENERAL_NAMES_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_GENERAL_NAMES_sk_type(sk), ossl_ossl_check_GENERAL_NAMES_type(ptr))
#define ossl_sk_GENERAL_NAMES_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_GENERAL_NAMES_sk_type(sk), ossl_ossl_check_GENERAL_NAMES_type(ptr), pnum)
#define ossl_sk_GENERAL_NAMES_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_GENERAL_NAMES_sk_type(sk))
#define ossl_sk_GENERAL_NAMES_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_GENERAL_NAMES_sk_type(sk))
#define ossl_sk_GENERAL_NAMES_dup(sk) ((ossl_STACK_OF(ossl_GENERAL_NAMES) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_GENERAL_NAMES_sk_type(sk)))
#define ossl_sk_GENERAL_NAMES_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_GENERAL_NAMES) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_GENERAL_NAMES_sk_type(sk), ossl_ossl_check_GENERAL_NAMES_copyfunc_type(copyfunc), ossl_ossl_check_GENERAL_NAMES_freefunc_type(freefunc)))
#define ossl_sk_GENERAL_NAMES_set_cmp_func(sk, cmp) ((ossl_sk_GENERAL_NAMES_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_GENERAL_NAMES_sk_type(sk), ossl_ossl_check_GENERAL_NAMES_compfunc_type(cmp)))


typedef struct ossl_DIST_POINT_NAME_st {
    int type;
    union {
        ossl_GENERAL_NAMES *fullname;
        ossl_STACK_OF(ossl_X509_NAME_ENTRY) *relativename;
    } name;
/* If relativename then this contains the full distribution point name */
    ossl_X509_NAME *dpname;
} ossl_DIST_POINT_NAME;
/* All existing reasons */
# define ossl_CRLDP_ALL_REASONS       0x807f

# define ossl_CRL_REASON_NONE                         -1
# define ossl_CRL_REASON_UNSPECIFIED                  0
# define ossl_CRL_REASON_KEY_COMPROMISE               1
# define ossl_CRL_REASON_CA_COMPROMISE                2
# define ossl_CRL_REASON_AFFILIATION_CHANGED          3
# define ossl_CRL_REASON_SUPERSEDED                   4
# define ossl_CRL_REASON_CESSATION_OF_OPERATION       5
# define ossl_CRL_REASON_CERTIFICATE_HOLD             6
# define ossl_CRL_REASON_REMOVE_FROM_CRL              8
# define ossl_CRL_REASON_PRIVILEGE_WITHDRAWN          9
# define ossl_CRL_REASON_AA_COMPROMISE                10

struct ossl_DIST_POINT_st {
    ossl_DIST_POINT_NAME *distpoint;
    ossl_ASN1_BIT_STRING *reasons;
    ossl_GENERAL_NAMES *CRLissuer;
    int dp_reasons;
};

ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_DIST_POINT, ossl_DIST_POINT, ossl_DIST_POINT)
#define ossl_sk_DIST_POINT_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_DIST_POINT_sk_type(sk))
#define ossl_sk_DIST_POINT_value(sk, idx) ((ossl_DIST_POINT *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_DIST_POINT_sk_type(sk), (idx)))
#define ossl_sk_DIST_POINT_new(cmp) ((ossl_STACK_OF(ossl_DIST_POINT) *)ossl_OPENSSL_sk_new(ossl_ossl_check_DIST_POINT_compfunc_type(cmp)))
#define ossl_sk_DIST_POINT_new_null() ((ossl_STACK_OF(ossl_DIST_POINT) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_DIST_POINT_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_DIST_POINT) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_DIST_POINT_compfunc_type(cmp), (n)))
#define ossl_sk_DIST_POINT_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_DIST_POINT_sk_type(sk), (n))
#define ossl_sk_DIST_POINT_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_DIST_POINT_sk_type(sk))
#define ossl_sk_DIST_POINT_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_DIST_POINT_sk_type(sk))
#define ossl_sk_DIST_POINT_delete(sk, i) ((ossl_DIST_POINT *)ossl_OPENSSL_sk_delete(ossl_ossl_check_DIST_POINT_sk_type(sk), (i)))
#define ossl_sk_DIST_POINT_delete_ptr(sk, ptr) ((ossl_DIST_POINT *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_DIST_POINT_sk_type(sk), ossl_ossl_check_DIST_POINT_type(ptr)))
#define ossl_sk_DIST_POINT_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_DIST_POINT_sk_type(sk), ossl_ossl_check_DIST_POINT_type(ptr))
#define ossl_sk_DIST_POINT_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_DIST_POINT_sk_type(sk), ossl_ossl_check_DIST_POINT_type(ptr))
#define ossl_sk_DIST_POINT_pop(sk) ((ossl_DIST_POINT *)ossl_OPENSSL_sk_pop(ossl_ossl_check_DIST_POINT_sk_type(sk)))
#define ossl_sk_DIST_POINT_shift(sk) ((ossl_DIST_POINT *)ossl_OPENSSL_sk_shift(ossl_ossl_check_DIST_POINT_sk_type(sk)))
#define ossl_sk_DIST_POINT_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_DIST_POINT_sk_type(sk),ossl_ossl_check_DIST_POINT_freefunc_type(freefunc))
#define ossl_sk_DIST_POINT_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_DIST_POINT_sk_type(sk), ossl_ossl_check_DIST_POINT_type(ptr), (idx))
#define ossl_sk_DIST_POINT_set(sk, idx, ptr) ((ossl_DIST_POINT *)ossl_OPENSSL_sk_set(ossl_ossl_check_DIST_POINT_sk_type(sk), (idx), ossl_ossl_check_DIST_POINT_type(ptr)))
#define ossl_sk_DIST_POINT_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_DIST_POINT_sk_type(sk), ossl_ossl_check_DIST_POINT_type(ptr))
#define ossl_sk_DIST_POINT_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_DIST_POINT_sk_type(sk), ossl_ossl_check_DIST_POINT_type(ptr))
#define ossl_sk_DIST_POINT_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_DIST_POINT_sk_type(sk), ossl_ossl_check_DIST_POINT_type(ptr), pnum)
#define ossl_sk_DIST_POINT_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_DIST_POINT_sk_type(sk))
#define ossl_sk_DIST_POINT_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_DIST_POINT_sk_type(sk))
#define ossl_sk_DIST_POINT_dup(sk) ((ossl_STACK_OF(ossl_DIST_POINT) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_DIST_POINT_sk_type(sk)))
#define ossl_sk_DIST_POINT_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_DIST_POINT) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_DIST_POINT_sk_type(sk), ossl_ossl_check_DIST_POINT_copyfunc_type(copyfunc), ossl_ossl_check_DIST_POINT_freefunc_type(freefunc)))
#define ossl_sk_DIST_POINT_set_cmp_func(sk, cmp) ((ossl_sk_DIST_POINT_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_DIST_POINT_sk_type(sk), ossl_ossl_check_DIST_POINT_compfunc_type(cmp)))


typedef ossl_STACK_OF(ossl_DIST_POINT) ossl_CRL_DIST_POINTS;

struct ossl_AUTHORITY_KEYID_st {
    ossl_ASN1_OCTET_STRING *keyid;
    ossl_GENERAL_NAMES *issuer;
    ossl_ASN1_INTEGER *serial;
};

/* Strong extranet structures */

typedef struct ossl_SXNET_ID_st {
    ossl_ASN1_INTEGER *zone;
    ossl_ASN1_OCTET_STRING *user;
} ossl_SXNETID;

ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_SXNETID, ossl_SXNETID, ossl_SXNETID)
#define ossl_sk_SXNETID_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_SXNETID_sk_type(sk))
#define ossl_sk_SXNETID_value(sk, idx) ((ossl_SXNETID *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_SXNETID_sk_type(sk), (idx)))
#define ossl_sk_SXNETID_new(cmp) ((ossl_STACK_OF(ossl_SXNETID) *)ossl_OPENSSL_sk_new(ossl_ossl_check_SXNETID_compfunc_type(cmp)))
#define ossl_sk_SXNETID_new_null() ((ossl_STACK_OF(ossl_SXNETID) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_SXNETID_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_SXNETID) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_SXNETID_compfunc_type(cmp), (n)))
#define ossl_sk_SXNETID_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_SXNETID_sk_type(sk), (n))
#define ossl_sk_SXNETID_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_SXNETID_sk_type(sk))
#define ossl_sk_SXNETID_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_SXNETID_sk_type(sk))
#define ossl_sk_SXNETID_delete(sk, i) ((ossl_SXNETID *)ossl_OPENSSL_sk_delete(ossl_ossl_check_SXNETID_sk_type(sk), (i)))
#define ossl_sk_SXNETID_delete_ptr(sk, ptr) ((ossl_SXNETID *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_SXNETID_sk_type(sk), ossl_ossl_check_SXNETID_type(ptr)))
#define ossl_sk_SXNETID_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_SXNETID_sk_type(sk), ossl_ossl_check_SXNETID_type(ptr))
#define ossl_sk_SXNETID_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_SXNETID_sk_type(sk), ossl_ossl_check_SXNETID_type(ptr))
#define ossl_sk_SXNETID_pop(sk) ((ossl_SXNETID *)ossl_OPENSSL_sk_pop(ossl_ossl_check_SXNETID_sk_type(sk)))
#define ossl_sk_SXNETID_shift(sk) ((ossl_SXNETID *)ossl_OPENSSL_sk_shift(ossl_ossl_check_SXNETID_sk_type(sk)))
#define ossl_sk_SXNETID_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_SXNETID_sk_type(sk),ossl_ossl_check_SXNETID_freefunc_type(freefunc))
#define ossl_sk_SXNETID_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_SXNETID_sk_type(sk), ossl_ossl_check_SXNETID_type(ptr), (idx))
#define ossl_sk_SXNETID_set(sk, idx, ptr) ((ossl_SXNETID *)ossl_OPENSSL_sk_set(ossl_ossl_check_SXNETID_sk_type(sk), (idx), ossl_ossl_check_SXNETID_type(ptr)))
#define ossl_sk_SXNETID_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_SXNETID_sk_type(sk), ossl_ossl_check_SXNETID_type(ptr))
#define ossl_sk_SXNETID_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_SXNETID_sk_type(sk), ossl_ossl_check_SXNETID_type(ptr))
#define ossl_sk_SXNETID_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_SXNETID_sk_type(sk), ossl_ossl_check_SXNETID_type(ptr), pnum)
#define ossl_sk_SXNETID_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_SXNETID_sk_type(sk))
#define ossl_sk_SXNETID_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_SXNETID_sk_type(sk))
#define ossl_sk_SXNETID_dup(sk) ((ossl_STACK_OF(ossl_SXNETID) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_SXNETID_sk_type(sk)))
#define ossl_sk_SXNETID_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_SXNETID) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_SXNETID_sk_type(sk), ossl_ossl_check_SXNETID_copyfunc_type(copyfunc), ossl_ossl_check_SXNETID_freefunc_type(freefunc)))
#define ossl_sk_SXNETID_set_cmp_func(sk, cmp) ((ossl_sk_SXNETID_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_SXNETID_sk_type(sk), ossl_ossl_check_SXNETID_compfunc_type(cmp)))



typedef struct ossl_SXNET_st {
    ossl_ASN1_INTEGER *version;
    ossl_STACK_OF(ossl_SXNETID) *ids;
} ossl_SXNET;

typedef struct ossl_ISSUER_SIGN_TOOL_st {
    ossl_ASN1_UTF8STRING *signTool;
    ossl_ASN1_UTF8STRING *cATool;
    ossl_ASN1_UTF8STRING *signToolCert;
    ossl_ASN1_UTF8STRING *cAToolCert;
} ossl_ISSUER_SIGN_TOOL;

typedef struct ossl_NOTICEREF_st {
    ossl_ASN1_STRING *organization;
    ossl_STACK_OF(ossl_ASN1_INTEGER) *noticenos;
} ossl_NOTICEREF;

typedef struct ossl_USERNOTICE_st {
    ossl_NOTICEREF *noticeref;
    ossl_ASN1_STRING *exptext;
} ossl_USERNOTICE;

typedef struct ossl_POLICYQUALINFO_st {
    ossl_ASN1_OBJECT *pqualid;
    union {
        ossl_ASN1_IA5STRING *cpsuri;
        ossl_USERNOTICE *usernotice;
        ossl_ASN1_TYPE *other;
    } d;
} ossl_POLICYQUALINFO;

ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_POLICYQUALINFO, ossl_POLICYQUALINFO, ossl_POLICYQUALINFO)
#define ossl_sk_POLICYQUALINFO_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_POLICYQUALINFO_sk_type(sk))
#define ossl_sk_POLICYQUALINFO_value(sk, idx) ((ossl_POLICYQUALINFO *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_POLICYQUALINFO_sk_type(sk), (idx)))
#define ossl_sk_POLICYQUALINFO_new(cmp) ((ossl_STACK_OF(ossl_POLICYQUALINFO) *)ossl_OPENSSL_sk_new(ossl_ossl_check_POLICYQUALINFO_compfunc_type(cmp)))
#define ossl_sk_POLICYQUALINFO_new_null() ((ossl_STACK_OF(ossl_POLICYQUALINFO) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_POLICYQUALINFO_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_POLICYQUALINFO) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_POLICYQUALINFO_compfunc_type(cmp), (n)))
#define ossl_sk_POLICYQUALINFO_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_POLICYQUALINFO_sk_type(sk), (n))
#define ossl_sk_POLICYQUALINFO_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_POLICYQUALINFO_sk_type(sk))
#define ossl_sk_POLICYQUALINFO_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_POLICYQUALINFO_sk_type(sk))
#define ossl_sk_POLICYQUALINFO_delete(sk, i) ((ossl_POLICYQUALINFO *)ossl_OPENSSL_sk_delete(ossl_ossl_check_POLICYQUALINFO_sk_type(sk), (i)))
#define ossl_sk_POLICYQUALINFO_delete_ptr(sk, ptr) ((ossl_POLICYQUALINFO *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_POLICYQUALINFO_sk_type(sk), ossl_ossl_check_POLICYQUALINFO_type(ptr)))
#define ossl_sk_POLICYQUALINFO_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_POLICYQUALINFO_sk_type(sk), ossl_ossl_check_POLICYQUALINFO_type(ptr))
#define ossl_sk_POLICYQUALINFO_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_POLICYQUALINFO_sk_type(sk), ossl_ossl_check_POLICYQUALINFO_type(ptr))
#define ossl_sk_POLICYQUALINFO_pop(sk) ((ossl_POLICYQUALINFO *)ossl_OPENSSL_sk_pop(ossl_ossl_check_POLICYQUALINFO_sk_type(sk)))
#define ossl_sk_POLICYQUALINFO_shift(sk) ((ossl_POLICYQUALINFO *)ossl_OPENSSL_sk_shift(ossl_ossl_check_POLICYQUALINFO_sk_type(sk)))
#define ossl_sk_POLICYQUALINFO_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_POLICYQUALINFO_sk_type(sk),ossl_ossl_check_POLICYQUALINFO_freefunc_type(freefunc))
#define ossl_sk_POLICYQUALINFO_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_POLICYQUALINFO_sk_type(sk), ossl_ossl_check_POLICYQUALINFO_type(ptr), (idx))
#define ossl_sk_POLICYQUALINFO_set(sk, idx, ptr) ((ossl_POLICYQUALINFO *)ossl_OPENSSL_sk_set(ossl_ossl_check_POLICYQUALINFO_sk_type(sk), (idx), ossl_ossl_check_POLICYQUALINFO_type(ptr)))
#define ossl_sk_POLICYQUALINFO_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_POLICYQUALINFO_sk_type(sk), ossl_ossl_check_POLICYQUALINFO_type(ptr))
#define ossl_sk_POLICYQUALINFO_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_POLICYQUALINFO_sk_type(sk), ossl_ossl_check_POLICYQUALINFO_type(ptr))
#define ossl_sk_POLICYQUALINFO_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_POLICYQUALINFO_sk_type(sk), ossl_ossl_check_POLICYQUALINFO_type(ptr), pnum)
#define ossl_sk_POLICYQUALINFO_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_POLICYQUALINFO_sk_type(sk))
#define ossl_sk_POLICYQUALINFO_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_POLICYQUALINFO_sk_type(sk))
#define ossl_sk_POLICYQUALINFO_dup(sk) ((ossl_STACK_OF(ossl_POLICYQUALINFO) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_POLICYQUALINFO_sk_type(sk)))
#define ossl_sk_POLICYQUALINFO_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_POLICYQUALINFO) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_POLICYQUALINFO_sk_type(sk), ossl_ossl_check_POLICYQUALINFO_copyfunc_type(copyfunc), ossl_ossl_check_POLICYQUALINFO_freefunc_type(freefunc)))
#define ossl_sk_POLICYQUALINFO_set_cmp_func(sk, cmp) ((ossl_sk_POLICYQUALINFO_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_POLICYQUALINFO_sk_type(sk), ossl_ossl_check_POLICYQUALINFO_compfunc_type(cmp)))



typedef struct ossl_POLICYINFO_st {
    ossl_ASN1_OBJECT *policyid;
    ossl_STACK_OF(ossl_POLICYQUALINFO) *qualifiers;
} ossl_POLICYINFO;

ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_POLICYINFO, ossl_POLICYINFO, ossl_POLICYINFO)
#define ossl_sk_POLICYINFO_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_POLICYINFO_sk_type(sk))
#define ossl_sk_POLICYINFO_value(sk, idx) ((ossl_POLICYINFO *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_POLICYINFO_sk_type(sk), (idx)))
#define ossl_sk_POLICYINFO_new(cmp) ((ossl_STACK_OF(ossl_POLICYINFO) *)ossl_OPENSSL_sk_new(ossl_ossl_check_POLICYINFO_compfunc_type(cmp)))
#define ossl_sk_POLICYINFO_new_null() ((ossl_STACK_OF(ossl_POLICYINFO) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_POLICYINFO_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_POLICYINFO) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_POLICYINFO_compfunc_type(cmp), (n)))
#define ossl_sk_POLICYINFO_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_POLICYINFO_sk_type(sk), (n))
#define ossl_sk_POLICYINFO_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_POLICYINFO_sk_type(sk))
#define ossl_sk_POLICYINFO_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_POLICYINFO_sk_type(sk))
#define ossl_sk_POLICYINFO_delete(sk, i) ((ossl_POLICYINFO *)ossl_OPENSSL_sk_delete(ossl_ossl_check_POLICYINFO_sk_type(sk), (i)))
#define ossl_sk_POLICYINFO_delete_ptr(sk, ptr) ((ossl_POLICYINFO *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_POLICYINFO_sk_type(sk), ossl_ossl_check_POLICYINFO_type(ptr)))
#define ossl_sk_POLICYINFO_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_POLICYINFO_sk_type(sk), ossl_ossl_check_POLICYINFO_type(ptr))
#define ossl_sk_POLICYINFO_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_POLICYINFO_sk_type(sk), ossl_ossl_check_POLICYINFO_type(ptr))
#define ossl_sk_POLICYINFO_pop(sk) ((ossl_POLICYINFO *)ossl_OPENSSL_sk_pop(ossl_ossl_check_POLICYINFO_sk_type(sk)))
#define ossl_sk_POLICYINFO_shift(sk) ((ossl_POLICYINFO *)ossl_OPENSSL_sk_shift(ossl_ossl_check_POLICYINFO_sk_type(sk)))
#define ossl_sk_POLICYINFO_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_POLICYINFO_sk_type(sk),ossl_ossl_check_POLICYINFO_freefunc_type(freefunc))
#define ossl_sk_POLICYINFO_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_POLICYINFO_sk_type(sk), ossl_ossl_check_POLICYINFO_type(ptr), (idx))
#define ossl_sk_POLICYINFO_set(sk, idx, ptr) ((ossl_POLICYINFO *)ossl_OPENSSL_sk_set(ossl_ossl_check_POLICYINFO_sk_type(sk), (idx), ossl_ossl_check_POLICYINFO_type(ptr)))
#define ossl_sk_POLICYINFO_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_POLICYINFO_sk_type(sk), ossl_ossl_check_POLICYINFO_type(ptr))
#define ossl_sk_POLICYINFO_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_POLICYINFO_sk_type(sk), ossl_ossl_check_POLICYINFO_type(ptr))
#define ossl_sk_POLICYINFO_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_POLICYINFO_sk_type(sk), ossl_ossl_check_POLICYINFO_type(ptr), pnum)
#define ossl_sk_POLICYINFO_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_POLICYINFO_sk_type(sk))
#define ossl_sk_POLICYINFO_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_POLICYINFO_sk_type(sk))
#define ossl_sk_POLICYINFO_dup(sk) ((ossl_STACK_OF(ossl_POLICYINFO) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_POLICYINFO_sk_type(sk)))
#define ossl_sk_POLICYINFO_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_POLICYINFO) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_POLICYINFO_sk_type(sk), ossl_ossl_check_POLICYINFO_copyfunc_type(copyfunc), ossl_ossl_check_POLICYINFO_freefunc_type(freefunc)))
#define ossl_sk_POLICYINFO_set_cmp_func(sk, cmp) ((ossl_sk_POLICYINFO_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_POLICYINFO_sk_type(sk), ossl_ossl_check_POLICYINFO_compfunc_type(cmp)))


typedef ossl_STACK_OF(ossl_POLICYINFO) ossl_CERTIFICATEPOLICIES;

typedef struct ossl_POLICY_MAPPING_st {
    ossl_ASN1_OBJECT *issuerDomainPolicy;
    ossl_ASN1_OBJECT *subjectDomainPolicy;
} ossl_POLICY_MAPPING;

ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_POLICY_MAPPING, ossl_POLICY_MAPPING, ossl_POLICY_MAPPING)
#define ossl_sk_POLICY_MAPPING_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_POLICY_MAPPING_sk_type(sk))
#define ossl_sk_POLICY_MAPPING_value(sk, idx) ((ossl_POLICY_MAPPING *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_POLICY_MAPPING_sk_type(sk), (idx)))
#define ossl_sk_POLICY_MAPPING_new(cmp) ((ossl_STACK_OF(ossl_POLICY_MAPPING) *)ossl_OPENSSL_sk_new(ossl_ossl_check_POLICY_MAPPING_compfunc_type(cmp)))
#define ossl_sk_POLICY_MAPPING_new_null() ((ossl_STACK_OF(ossl_POLICY_MAPPING) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_POLICY_MAPPING_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_POLICY_MAPPING) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_POLICY_MAPPING_compfunc_type(cmp), (n)))
#define ossl_sk_POLICY_MAPPING_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_POLICY_MAPPING_sk_type(sk), (n))
#define ossl_sk_POLICY_MAPPING_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_POLICY_MAPPING_sk_type(sk))
#define ossl_sk_POLICY_MAPPING_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_POLICY_MAPPING_sk_type(sk))
#define ossl_sk_POLICY_MAPPING_delete(sk, i) ((ossl_POLICY_MAPPING *)ossl_OPENSSL_sk_delete(ossl_ossl_check_POLICY_MAPPING_sk_type(sk), (i)))
#define ossl_sk_POLICY_MAPPING_delete_ptr(sk, ptr) ((ossl_POLICY_MAPPING *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_POLICY_MAPPING_sk_type(sk), ossl_ossl_check_POLICY_MAPPING_type(ptr)))
#define ossl_sk_POLICY_MAPPING_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_POLICY_MAPPING_sk_type(sk), ossl_ossl_check_POLICY_MAPPING_type(ptr))
#define ossl_sk_POLICY_MAPPING_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_POLICY_MAPPING_sk_type(sk), ossl_ossl_check_POLICY_MAPPING_type(ptr))
#define ossl_sk_POLICY_MAPPING_pop(sk) ((ossl_POLICY_MAPPING *)ossl_OPENSSL_sk_pop(ossl_ossl_check_POLICY_MAPPING_sk_type(sk)))
#define ossl_sk_POLICY_MAPPING_shift(sk) ((ossl_POLICY_MAPPING *)ossl_OPENSSL_sk_shift(ossl_ossl_check_POLICY_MAPPING_sk_type(sk)))
#define ossl_sk_POLICY_MAPPING_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_POLICY_MAPPING_sk_type(sk),ossl_ossl_check_POLICY_MAPPING_freefunc_type(freefunc))
#define ossl_sk_POLICY_MAPPING_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_POLICY_MAPPING_sk_type(sk), ossl_ossl_check_POLICY_MAPPING_type(ptr), (idx))
#define ossl_sk_POLICY_MAPPING_set(sk, idx, ptr) ((ossl_POLICY_MAPPING *)ossl_OPENSSL_sk_set(ossl_ossl_check_POLICY_MAPPING_sk_type(sk), (idx), ossl_ossl_check_POLICY_MAPPING_type(ptr)))
#define ossl_sk_POLICY_MAPPING_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_POLICY_MAPPING_sk_type(sk), ossl_ossl_check_POLICY_MAPPING_type(ptr))
#define ossl_sk_POLICY_MAPPING_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_POLICY_MAPPING_sk_type(sk), ossl_ossl_check_POLICY_MAPPING_type(ptr))
#define ossl_sk_POLICY_MAPPING_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_POLICY_MAPPING_sk_type(sk), ossl_ossl_check_POLICY_MAPPING_type(ptr), pnum)
#define ossl_sk_POLICY_MAPPING_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_POLICY_MAPPING_sk_type(sk))
#define ossl_sk_POLICY_MAPPING_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_POLICY_MAPPING_sk_type(sk))
#define ossl_sk_POLICY_MAPPING_dup(sk) ((ossl_STACK_OF(ossl_POLICY_MAPPING) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_POLICY_MAPPING_sk_type(sk)))
#define ossl_sk_POLICY_MAPPING_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_POLICY_MAPPING) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_POLICY_MAPPING_sk_type(sk), ossl_ossl_check_POLICY_MAPPING_copyfunc_type(copyfunc), ossl_ossl_check_POLICY_MAPPING_freefunc_type(freefunc)))
#define ossl_sk_POLICY_MAPPING_set_cmp_func(sk, cmp) ((ossl_sk_POLICY_MAPPING_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_POLICY_MAPPING_sk_type(sk), ossl_ossl_check_POLICY_MAPPING_compfunc_type(cmp)))


typedef ossl_STACK_OF(ossl_POLICY_MAPPING) ossl_POLICY_MAPPINGS;

typedef struct ossl_GENERAL_SUBTREE_st {
    ossl_GENERAL_NAME *base;
    ossl_ASN1_INTEGER *minimum;
    ossl_ASN1_INTEGER *maximum;
} ossl_GENERAL_SUBTREE;

ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_GENERAL_SUBTREE, ossl_GENERAL_SUBTREE, ossl_GENERAL_SUBTREE)
#define ossl_sk_GENERAL_SUBTREE_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_GENERAL_SUBTREE_sk_type(sk))
#define ossl_sk_GENERAL_SUBTREE_value(sk, idx) ((ossl_GENERAL_SUBTREE *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_GENERAL_SUBTREE_sk_type(sk), (idx)))
#define ossl_sk_GENERAL_SUBTREE_new(cmp) ((ossl_STACK_OF(ossl_GENERAL_SUBTREE) *)ossl_OPENSSL_sk_new(ossl_ossl_check_GENERAL_SUBTREE_compfunc_type(cmp)))
#define ossl_sk_GENERAL_SUBTREE_new_null() ((ossl_STACK_OF(ossl_GENERAL_SUBTREE) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_GENERAL_SUBTREE_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_GENERAL_SUBTREE) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_GENERAL_SUBTREE_compfunc_type(cmp), (n)))
#define ossl_sk_GENERAL_SUBTREE_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_GENERAL_SUBTREE_sk_type(sk), (n))
#define ossl_sk_GENERAL_SUBTREE_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_GENERAL_SUBTREE_sk_type(sk))
#define ossl_sk_GENERAL_SUBTREE_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_GENERAL_SUBTREE_sk_type(sk))
#define ossl_sk_GENERAL_SUBTREE_delete(sk, i) ((ossl_GENERAL_SUBTREE *)ossl_OPENSSL_sk_delete(ossl_ossl_check_GENERAL_SUBTREE_sk_type(sk), (i)))
#define ossl_sk_GENERAL_SUBTREE_delete_ptr(sk, ptr) ((ossl_GENERAL_SUBTREE *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_GENERAL_SUBTREE_sk_type(sk), ossl_ossl_check_GENERAL_SUBTREE_type(ptr)))
#define ossl_sk_GENERAL_SUBTREE_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_GENERAL_SUBTREE_sk_type(sk), ossl_ossl_check_GENERAL_SUBTREE_type(ptr))
#define ossl_sk_GENERAL_SUBTREE_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_GENERAL_SUBTREE_sk_type(sk), ossl_ossl_check_GENERAL_SUBTREE_type(ptr))
#define ossl_sk_GENERAL_SUBTREE_pop(sk) ((ossl_GENERAL_SUBTREE *)ossl_OPENSSL_sk_pop(ossl_ossl_check_GENERAL_SUBTREE_sk_type(sk)))
#define ossl_sk_GENERAL_SUBTREE_shift(sk) ((ossl_GENERAL_SUBTREE *)ossl_OPENSSL_sk_shift(ossl_ossl_check_GENERAL_SUBTREE_sk_type(sk)))
#define ossl_sk_GENERAL_SUBTREE_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_GENERAL_SUBTREE_sk_type(sk),ossl_ossl_check_GENERAL_SUBTREE_freefunc_type(freefunc))
#define ossl_sk_GENERAL_SUBTREE_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_GENERAL_SUBTREE_sk_type(sk), ossl_ossl_check_GENERAL_SUBTREE_type(ptr), (idx))
#define ossl_sk_GENERAL_SUBTREE_set(sk, idx, ptr) ((ossl_GENERAL_SUBTREE *)ossl_OPENSSL_sk_set(ossl_ossl_check_GENERAL_SUBTREE_sk_type(sk), (idx), ossl_ossl_check_GENERAL_SUBTREE_type(ptr)))
#define ossl_sk_GENERAL_SUBTREE_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_GENERAL_SUBTREE_sk_type(sk), ossl_ossl_check_GENERAL_SUBTREE_type(ptr))
#define ossl_sk_GENERAL_SUBTREE_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_GENERAL_SUBTREE_sk_type(sk), ossl_ossl_check_GENERAL_SUBTREE_type(ptr))
#define ossl_sk_GENERAL_SUBTREE_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_GENERAL_SUBTREE_sk_type(sk), ossl_ossl_check_GENERAL_SUBTREE_type(ptr), pnum)
#define ossl_sk_GENERAL_SUBTREE_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_GENERAL_SUBTREE_sk_type(sk))
#define ossl_sk_GENERAL_SUBTREE_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_GENERAL_SUBTREE_sk_type(sk))
#define ossl_sk_GENERAL_SUBTREE_dup(sk) ((ossl_STACK_OF(ossl_GENERAL_SUBTREE) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_GENERAL_SUBTREE_sk_type(sk)))
#define ossl_sk_GENERAL_SUBTREE_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_GENERAL_SUBTREE) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_GENERAL_SUBTREE_sk_type(sk), ossl_ossl_check_GENERAL_SUBTREE_copyfunc_type(copyfunc), ossl_ossl_check_GENERAL_SUBTREE_freefunc_type(freefunc)))
#define ossl_sk_GENERAL_SUBTREE_set_cmp_func(sk, cmp) ((ossl_sk_GENERAL_SUBTREE_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_GENERAL_SUBTREE_sk_type(sk), ossl_ossl_check_GENERAL_SUBTREE_compfunc_type(cmp)))


struct ossl_NAME_CONSTRAINTS_st {
    ossl_STACK_OF(ossl_GENERAL_SUBTREE) *permittedSubtrees;
    ossl_STACK_OF(ossl_GENERAL_SUBTREE) *excludedSubtrees;
};

typedef struct ossl_POLICY_CONSTRAINTS_st {
    ossl_ASN1_INTEGER *requireExplicitPolicy;
    ossl_ASN1_INTEGER *inhibitPolicyMapping;
} ossl_POLICY_CONSTRAINTS;

/* Proxy certificate structures, see RFC 3820 */
typedef struct ossl_PROXY_POLICY_st {
    ossl_ASN1_OBJECT *policyLanguage;
    ossl_ASN1_OCTET_STRING *policy;
} ossl_PROXY_POLICY;

typedef struct ossl_PROXY_CERT_INFO_EXTENSION_st {
    ossl_ASN1_INTEGER *pcPathLengthConstraint;
    ossl_PROXY_POLICY *proxyPolicy;
} ossl_PROXY_CERT_INFO_EXTENSION;

ossl_DECLARE_ASN1_FUNCTIONS(ossl_PROXY_POLICY)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_PROXY_CERT_INFO_EXTENSION)

struct ossl_ISSUING_DIST_POINT_st {
    ossl_DIST_POINT_NAME *distpoint;
    int onlyuser;
    int onlyCA;
    ossl_ASN1_BIT_STRING *onlysomereasons;
    int indirectCRL;
    int onlyattr;
};

/* Values in idp_flags field */
/* IDP present */
# define ossl_IDP_PRESENT     0x1
/* IDP values inconsistent */
# define ossl_IDP_INVALID     0x2
/* onlyuser true */
# define ossl_IDP_ONLYUSER    0x4
/* onlyCA true */
# define ossl_IDP_ONLYCA      0x8
/* onlyattr true */
# define ossl_IDP_ONLYATTR    0x10
/* indirectCRL true */
# define ossl_IDP_INDIRECT    0x20
/* onlysomereasons present */
# define ossl_IDP_REASONS     0x40

# define ossl_X509V3_conf_err(val) ossl_ERR_add_error_data(6, \
                        "section:", (val)->section, \
                        ",name:", (val)->name, ",value:", (val)->value)

# define ossl_X509V3_set_ctx_test(ctx) \
    ossl_X509V3_set_ctx(ctx, NULL, NULL, NULL, NULL, ossl_X509V3_CTX_TEST)
# define ossl_X509V3_set_ctx_nodb(ctx) (ctx)->db = NULL;

# define ossl_EXT_BITSTRING(nid, table) { nid, 0, ossl_ASN1_ITEM_ref(ossl_ASN1_BIT_STRING), \
                        0,0,0,0, \
                        0,0, \
                        (ossl_X509V3_EXT_I2V)ossl_i2v_ASN1_BIT_STRING, \
                        (ossl_X509V3_EXT_V2I)ossl_v2i_ASN1_BIT_STRING, \
                        NULL, NULL, \
                        table}

# define ossl_EXT_IA5STRING(nid) { nid, 0, ossl_ASN1_ITEM_ref(ossl_ASN1_IA5STRING), \
                        0,0,0,0, \
                        (ossl_X509V3_EXT_I2S)ossl_i2s_ASN1_IA5STRING, \
                        (ossl_X509V3_EXT_S2I)ossl_s2i_ASN1_IA5STRING, \
                        0,0,0,0, \
                        NULL}

#define ossl_EXT_UTF8STRING(nid) { nid, 0, ossl_ASN1_ITEM_ref(ossl_ASN1_UTF8STRING), \
                        0,0,0,0, \
                        (ossl_X509V3_EXT_I2S)ossl_i2s_ASN1_UTF8STRING, \
                        (ossl_X509V3_EXT_S2I)ossl_s2i_ASN1_UTF8STRING, \
                        0,0,0,0, \
                        NULL}

# define ossl_EXT_END { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

/* ossl_X509_PURPOSE stuff */

# define ossl_EXFLAG_BCONS            0x1
# define ossl_EXFLAG_KUSAGE           0x2
# define ossl_EXFLAG_XKUSAGE          0x4
# define ossl_EXFLAG_NSCERT           0x8

# define ossl_EXFLAG_CA               0x10
# define ossl_EXFLAG_SI               0x20 /* self-issued, maybe not self-signed */
# define ossl_EXFLAG_V1               0x40
# define ossl_EXFLAG_INVALID          0x80
/* ossl_EXFLAG_SET is set to indicate that some values have been precomputed */
# define ossl_EXFLAG_SET              0x100
# define ossl_EXFLAG_CRITICAL         0x200
# define ossl_EXFLAG_PROXY            0x400

# define ossl_EXFLAG_INVALID_POLICY   0x800
# define ossl_EXFLAG_FRESHEST         0x1000
# define ossl_EXFLAG_SS               0x2000 /* cert is apparently self-signed */

# define ossl_EXFLAG_BCONS_CRITICAL   0x10000
# define ossl_EXFLAG_AKID_CRITICAL    0x20000
# define ossl_EXFLAG_SKID_CRITICAL    0x40000
# define ossl_EXFLAG_SAN_CRITICAL     0x80000
# define ossl_EXFLAG_NO_FINGERPRINT   0x100000

# define ossl_KU_DIGITAL_SIGNATURE    0x0080
# define ossl_KU_NON_REPUDIATION      0x0040
# define ossl_KU_KEY_ENCIPHERMENT     0x0020
# define ossl_KU_DATA_ENCIPHERMENT    0x0010
# define ossl_KU_KEY_AGREEMENT        0x0008
# define ossl_KU_KEY_CERT_SIGN        0x0004
# define ossl_KU_CRL_SIGN             0x0002
# define ossl_KU_ENCIPHER_ONLY        0x0001
# define ossl_KU_DECIPHER_ONLY        0x8000

# define ossl_NS_SSL_CLIENT           0x80
# define ossl_NS_SSL_SERVER           0x40
# define ossl_NS_SMIME                0x20
# define ossl_NS_OBJSIGN              0x10
# define ossl_NS_SSL_CA               0x04
# define ossl_NS_SMIME_CA             0x02
# define ossl_NS_OBJSIGN_CA           0x01
# define ossl_NS_ANY_CA               (ossl_NS_SSL_CA|ossl_NS_SMIME_CA|ossl_NS_OBJSIGN_CA)

# define ossl_XKU_SSL_SERVER          0x1
# define ossl_XKU_SSL_CLIENT          0x2
# define ossl_XKU_SMIME               0x4
# define ossl_XKU_CODE_SIGN           0x8
# define ossl_XKU_SGC                 0x10 /* Netscape or MS Server-Gated Crypto */
# define ossl_XKU_OCSP_SIGN           0x20
# define ossl_XKU_TIMESTAMP           0x40
# define ossl_XKU_DVCS                0x80
# define ossl_XKU_ANYEKU              0x100

# define ossl_X509_PURPOSE_DYNAMIC    0x1
# define ossl_X509_PURPOSE_DYNAMIC_NAME       0x2

typedef struct ossl_x509_purpose_st {
    int purpose;
    int trust;                  /* Default trust ID */
    int flags;
    int (*check_purpose) (const struct ossl_x509_purpose_st *, const ossl_X509 *, int);
    char *name;
    char *sname;
    void *usr_data;
} ossl_X509_PURPOSE;

ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_X509_PURPOSE, ossl_X509_PURPOSE, ossl_X509_PURPOSE)
#define ossl_sk_X509_PURPOSE_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_X509_PURPOSE_sk_type(sk))
#define ossl_sk_X509_PURPOSE_value(sk, idx) ((ossl_X509_PURPOSE *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_X509_PURPOSE_sk_type(sk), (idx)))
#define ossl_sk_X509_PURPOSE_new(cmp) ((ossl_STACK_OF(ossl_X509_PURPOSE) *)ossl_OPENSSL_sk_new(ossl_ossl_check_X509_PURPOSE_compfunc_type(cmp)))
#define ossl_sk_X509_PURPOSE_new_null() ((ossl_STACK_OF(ossl_X509_PURPOSE) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_X509_PURPOSE_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_X509_PURPOSE) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_X509_PURPOSE_compfunc_type(cmp), (n)))
#define ossl_sk_X509_PURPOSE_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_X509_PURPOSE_sk_type(sk), (n))
#define ossl_sk_X509_PURPOSE_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_X509_PURPOSE_sk_type(sk))
#define ossl_sk_X509_PURPOSE_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_X509_PURPOSE_sk_type(sk))
#define ossl_sk_X509_PURPOSE_delete(sk, i) ((ossl_X509_PURPOSE *)ossl_OPENSSL_sk_delete(ossl_ossl_check_X509_PURPOSE_sk_type(sk), (i)))
#define ossl_sk_X509_PURPOSE_delete_ptr(sk, ptr) ((ossl_X509_PURPOSE *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_X509_PURPOSE_sk_type(sk), ossl_ossl_check_X509_PURPOSE_type(ptr)))
#define ossl_sk_X509_PURPOSE_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_X509_PURPOSE_sk_type(sk), ossl_ossl_check_X509_PURPOSE_type(ptr))
#define ossl_sk_X509_PURPOSE_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_X509_PURPOSE_sk_type(sk), ossl_ossl_check_X509_PURPOSE_type(ptr))
#define ossl_sk_X509_PURPOSE_pop(sk) ((ossl_X509_PURPOSE *)ossl_OPENSSL_sk_pop(ossl_ossl_check_X509_PURPOSE_sk_type(sk)))
#define ossl_sk_X509_PURPOSE_shift(sk) ((ossl_X509_PURPOSE *)ossl_OPENSSL_sk_shift(ossl_ossl_check_X509_PURPOSE_sk_type(sk)))
#define ossl_sk_X509_PURPOSE_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_X509_PURPOSE_sk_type(sk),ossl_ossl_check_X509_PURPOSE_freefunc_type(freefunc))
#define ossl_sk_X509_PURPOSE_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_X509_PURPOSE_sk_type(sk), ossl_ossl_check_X509_PURPOSE_type(ptr), (idx))
#define ossl_sk_X509_PURPOSE_set(sk, idx, ptr) ((ossl_X509_PURPOSE *)ossl_OPENSSL_sk_set(ossl_ossl_check_X509_PURPOSE_sk_type(sk), (idx), ossl_ossl_check_X509_PURPOSE_type(ptr)))
#define ossl_sk_X509_PURPOSE_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_X509_PURPOSE_sk_type(sk), ossl_ossl_check_X509_PURPOSE_type(ptr))
#define ossl_sk_X509_PURPOSE_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_X509_PURPOSE_sk_type(sk), ossl_ossl_check_X509_PURPOSE_type(ptr))
#define ossl_sk_X509_PURPOSE_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_X509_PURPOSE_sk_type(sk), ossl_ossl_check_X509_PURPOSE_type(ptr), pnum)
#define ossl_sk_X509_PURPOSE_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_X509_PURPOSE_sk_type(sk))
#define ossl_sk_X509_PURPOSE_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_X509_PURPOSE_sk_type(sk))
#define ossl_sk_X509_PURPOSE_dup(sk) ((ossl_STACK_OF(ossl_X509_PURPOSE) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_X509_PURPOSE_sk_type(sk)))
#define ossl_sk_X509_PURPOSE_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_X509_PURPOSE) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_X509_PURPOSE_sk_type(sk), ossl_ossl_check_X509_PURPOSE_copyfunc_type(copyfunc), ossl_ossl_check_X509_PURPOSE_freefunc_type(freefunc)))
#define ossl_sk_X509_PURPOSE_set_cmp_func(sk, cmp) ((ossl_sk_X509_PURPOSE_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_X509_PURPOSE_sk_type(sk), ossl_ossl_check_X509_PURPOSE_compfunc_type(cmp)))



# define ossl_X509_PURPOSE_SSL_CLIENT         1
# define ossl_X509_PURPOSE_SSL_SERVER         2
# define ossl_X509_PURPOSE_NS_SSL_SERVER      3
# define ossl_X509_PURPOSE_SMIME_SIGN         4
# define ossl_X509_PURPOSE_SMIME_ENCRYPT      5
# define ossl_X509_PURPOSE_CRL_SIGN           6
# define ossl_X509_PURPOSE_ANY                7
# define ossl_X509_PURPOSE_OCSP_HELPER        8
# define ossl_X509_PURPOSE_TIMESTAMP_SIGN     9

# define ossl_X509_PURPOSE_MIN                1
# define ossl_X509_PURPOSE_MAX                9

/* Flags for ossl_X509V3_EXT_print() */

# define ossl_X509V3_EXT_UNKNOWN_MASK         (0xfL << 16)
/* Return error for unknown extensions */
# define ossl_X509V3_EXT_DEFAULT              0
/* Print error for unknown extensions */
# define ossl_X509V3_EXT_ERROR_UNKNOWN        (1L << 16)
/* ASN1 parse unknown extensions */
# define ossl_X509V3_EXT_PARSE_UNKNOWN        (2L << 16)
/* ossl_BIO_dump unknown extensions */
# define ossl_X509V3_EXT_DUMP_UNKNOWN         (3L << 16)

/* Flags for ossl_X509V3_add1_i2d */

# define ossl_X509V3_ADD_OP_MASK              0xfL
# define ossl_X509V3_ADD_DEFAULT              0L
# define ossl_X509V3_ADD_APPEND               1L
# define ossl_X509V3_ADD_REPLACE              2L
# define ossl_X509V3_ADD_REPLACE_EXISTING     3L
# define ossl_X509V3_ADD_KEEP_EXISTING        4L
# define ossl_X509V3_ADD_DELETE               5L
# define ossl_X509V3_ADD_SILENT               0x10

ossl_DECLARE_ASN1_FUNCTIONS(ossl_BASIC_CONSTRAINTS)

ossl_DECLARE_ASN1_FUNCTIONS(ossl_SXNET)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_SXNETID)

ossl_DECLARE_ASN1_FUNCTIONS(ossl_ISSUER_SIGN_TOOL)

int ossl_SXNET_add_id_asc(ossl_SXNET **psx, const char *zone, const char *user, int userlen);
int ossl_SXNET_add_id_ulong(ossl_SXNET **psx, unsigned long lzone, const char *user,
                       int userlen);
int ossl_SXNET_add_id_INTEGER(ossl_SXNET **psx, ossl_ASN1_INTEGER *izone, const char *user,
                         int userlen);

ossl_ASN1_OCTET_STRING *ossl_SXNET_get_id_asc(ossl_SXNET *sx, const char *zone);
ossl_ASN1_OCTET_STRING *ossl_SXNET_get_id_ulong(ossl_SXNET *sx, unsigned long lzone);
ossl_ASN1_OCTET_STRING *ossl_SXNET_get_id_INTEGER(ossl_SXNET *sx, ossl_ASN1_INTEGER *zone);

ossl_DECLARE_ASN1_FUNCTIONS(ossl_AUTHORITY_KEYID)

ossl_DECLARE_ASN1_FUNCTIONS(ossl_PKEY_USAGE_PERIOD)

ossl_DECLARE_ASN1_FUNCTIONS(ossl_GENERAL_NAME)
ossl_DECLARE_ASN1_DUP_FUNCTION(ossl_GENERAL_NAME)
int ossl_GENERAL_NAME_cmp(ossl_GENERAL_NAME *a, ossl_GENERAL_NAME *b);

ossl_ASN1_BIT_STRING *ossl_v2i_ASN1_BIT_STRING(ossl_X509V3_EXT_METHOD *method,
                                     ossl_X509V3_CTX *ctx,
                                     ossl_STACK_OF(ossl_CONF_VALUE) *nval);
ossl_STACK_OF(ossl_CONF_VALUE) *ossl_i2v_ASN1_BIT_STRING(ossl_X509V3_EXT_METHOD *method,
                                          ossl_ASN1_BIT_STRING *bits,
                                          ossl_STACK_OF(ossl_CONF_VALUE) *extlist);
char *ossl_i2s_ASN1_IA5STRING(ossl_X509V3_EXT_METHOD *method, ossl_ASN1_IA5STRING *ia5);
ossl_ASN1_IA5STRING *ossl_s2i_ASN1_IA5STRING(ossl_X509V3_EXT_METHOD *method,
                                   ossl_X509V3_CTX *ctx, const char *str);
char *ossl_i2s_ASN1_UTF8STRING(ossl_X509V3_EXT_METHOD *method, ossl_ASN1_UTF8STRING *utf8);
ossl_ASN1_UTF8STRING *ossl_s2i_ASN1_UTF8STRING(ossl_X509V3_EXT_METHOD *method,
                                   ossl_X509V3_CTX *ctx, const char *str);

ossl_STACK_OF(ossl_CONF_VALUE) *ossl_i2v_GENERAL_NAME(ossl_X509V3_EXT_METHOD *method,
                                       ossl_GENERAL_NAME *gen,
                                       ossl_STACK_OF(ossl_CONF_VALUE) *ret);
int ossl_GENERAL_NAME_print(ossl_BIO *out, ossl_GENERAL_NAME *gen);

ossl_DECLARE_ASN1_FUNCTIONS(ossl_GENERAL_NAMES)

ossl_STACK_OF(ossl_CONF_VALUE) *ossl_i2v_GENERAL_NAMES(ossl_X509V3_EXT_METHOD *method,
                                        ossl_GENERAL_NAMES *gen,
                                        ossl_STACK_OF(ossl_CONF_VALUE) *extlist);
ossl_GENERAL_NAMES *ossl_v2i_GENERAL_NAMES(const ossl_X509V3_EXT_METHOD *method,
                                 ossl_X509V3_CTX *ctx, ossl_STACK_OF(ossl_CONF_VALUE) *nval);

ossl_DECLARE_ASN1_FUNCTIONS(ossl_OTHERNAME)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_EDIPARTYNAME)
int ossl_OTHERNAME_cmp(ossl_OTHERNAME *a, ossl_OTHERNAME *b);
void ossl_GENERAL_NAME_set0_value(ossl_GENERAL_NAME *a, int type, void *value);
void *ossl_GENERAL_NAME_get0_value(const ossl_GENERAL_NAME *a, int *ptype);
int ossl_GENERAL_NAME_set0_othername(ossl_GENERAL_NAME *gen,
                                ossl_ASN1_OBJECT *oid, ossl_ASN1_TYPE *value);
int ossl_GENERAL_NAME_get0_otherName(const ossl_GENERAL_NAME *gen,
                                ossl_ASN1_OBJECT **poid, ossl_ASN1_TYPE **pvalue);

char *ossl_i2s_ASN1_OCTET_STRING(ossl_X509V3_EXT_METHOD *method,
                            const ossl_ASN1_OCTET_STRING *ia5);
ossl_ASN1_OCTET_STRING *ossl_s2i_ASN1_OCTET_STRING(ossl_X509V3_EXT_METHOD *method,
                                         ossl_X509V3_CTX *ctx, const char *str);

ossl_DECLARE_ASN1_FUNCTIONS(ossl_EXTENDED_KEY_USAGE)
int ossl_i2a_ACCESS_DESCRIPTION(ossl_BIO *bp, const ossl_ACCESS_DESCRIPTION *a);

ossl_DECLARE_ASN1_ALLOC_FUNCTIONS(ossl_TLS_FEATURE)

ossl_DECLARE_ASN1_FUNCTIONS(ossl_CERTIFICATEPOLICIES)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_POLICYINFO)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_POLICYQUALINFO)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_USERNOTICE)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_NOTICEREF)

ossl_DECLARE_ASN1_FUNCTIONS(ossl_CRL_DIST_POINTS)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_DIST_POINT)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_DIST_POINT_NAME)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_ISSUING_DIST_POINT)

int ossl_DIST_POINT_set_dpname(ossl_DIST_POINT_NAME *dpn, const ossl_X509_NAME *iname);

int ossl_NAME_CONSTRAINTS_check(ossl_X509 *x, ossl_NAME_CONSTRAINTS *nc);
int ossl_NAME_CONSTRAINTS_check_CN(ossl_X509 *x, ossl_NAME_CONSTRAINTS *nc);

ossl_DECLARE_ASN1_FUNCTIONS(ossl_ACCESS_DESCRIPTION)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_AUTHORITY_INFO_ACCESS)

ossl_DECLARE_ASN1_ITEM(ossl_POLICY_MAPPING)
ossl_DECLARE_ASN1_ALLOC_FUNCTIONS(ossl_POLICY_MAPPING)
ossl_DECLARE_ASN1_ITEM(ossl_POLICY_MAPPINGS)

ossl_DECLARE_ASN1_ITEM(ossl_GENERAL_SUBTREE)
ossl_DECLARE_ASN1_ALLOC_FUNCTIONS(ossl_GENERAL_SUBTREE)

ossl_DECLARE_ASN1_ITEM(ossl_NAME_CONSTRAINTS)
ossl_DECLARE_ASN1_ALLOC_FUNCTIONS(ossl_NAME_CONSTRAINTS)

ossl_DECLARE_ASN1_ALLOC_FUNCTIONS(ossl_POLICY_CONSTRAINTS)
ossl_DECLARE_ASN1_ITEM(ossl_POLICY_CONSTRAINTS)

ossl_GENERAL_NAME *ossl_a2i_GENERAL_NAME(ossl_GENERAL_NAME *out,
                               const ossl_X509V3_EXT_METHOD *method,
                               ossl_X509V3_CTX *ctx, int gen_type,
                               const char *value, int is_nc);

# ifdef ossl_OPENSSL_CONF_H
ossl_GENERAL_NAME *ossl_v2i_GENERAL_NAME(const ossl_X509V3_EXT_METHOD *method,
                               ossl_X509V3_CTX *ctx, ossl_CONF_VALUE *cnf);
ossl_GENERAL_NAME *ossl_v2i_GENERAL_NAME_ex(ossl_GENERAL_NAME *out,
                                  const ossl_X509V3_EXT_METHOD *method,
                                  ossl_X509V3_CTX *ctx, ossl_CONF_VALUE *cnf,
                                  int is_nc);

void ossl_X509V3_conf_free(ossl_CONF_VALUE *val);

ossl_X509_EXTENSION *ossl_X509V3_EXT_nconf_nid(ossl_CONF *conf, ossl_X509V3_CTX *ctx, int ext_nid,
                                     const char *value);
ossl_X509_EXTENSION *ossl_X509V3_EXT_nconf(ossl_CONF *conf, ossl_X509V3_CTX *ctx, const char *name,
                                 const char *value);
int ossl_X509V3_EXT_add_nconf_sk(ossl_CONF *conf, ossl_X509V3_CTX *ctx, const char *section,
                            ossl_STACK_OF(ossl_X509_EXTENSION) **sk);
int ossl_X509V3_EXT_add_nconf(ossl_CONF *conf, ossl_X509V3_CTX *ctx, const char *section,
                         ossl_X509 *cert);
int ossl_X509V3_EXT_REQ_add_nconf(ossl_CONF *conf, ossl_X509V3_CTX *ctx, const char *section,
                             ossl_X509_REQ *req);
int ossl_X509V3_EXT_CRL_add_nconf(ossl_CONF *conf, ossl_X509V3_CTX *ctx, const char *section,
                             ossl_X509_CRL *crl);

ossl_X509_EXTENSION *ossl_X509V3_EXT_conf_nid(ossl_LHASH_OF(ossl_CONF_VALUE) *conf,
                                    ossl_X509V3_CTX *ctx, int ext_nid,
                                    const char *value);
ossl_X509_EXTENSION *ossl_X509V3_EXT_conf(ossl_LHASH_OF(ossl_CONF_VALUE) *conf, ossl_X509V3_CTX *ctx,
                                const char *name, const char *value);
int ossl_X509V3_EXT_add_conf(ossl_LHASH_OF(ossl_CONF_VALUE) *conf, ossl_X509V3_CTX *ctx,
                        const char *section, ossl_X509 *cert);
int ossl_X509V3_EXT_REQ_add_conf(ossl_LHASH_OF(ossl_CONF_VALUE) *conf, ossl_X509V3_CTX *ctx,
                            const char *section, ossl_X509_REQ *req);
int ossl_X509V3_EXT_CRL_add_conf(ossl_LHASH_OF(ossl_CONF_VALUE) *conf, ossl_X509V3_CTX *ctx,
                            const char *section, ossl_X509_CRL *crl);

int ossl_X509V3_add_value_bool_nf(const char *name, int asn1_bool,
                             ossl_STACK_OF(ossl_CONF_VALUE) **extlist);
int ossl_X509V3_get_value_bool(const ossl_CONF_VALUE *value, int *asn1_bool);
int ossl_X509V3_get_value_int(const ossl_CONF_VALUE *value, ossl_ASN1_INTEGER **aint);
void ossl_X509V3_set_nconf(ossl_X509V3_CTX *ctx, ossl_CONF *conf);
void ossl_X509V3_set_conf_lhash(ossl_X509V3_CTX *ctx, ossl_LHASH_OF(ossl_CONF_VALUE) *lhash);
# endif

char *ossl_X509V3_get_string(ossl_X509V3_CTX *ctx, const char *name, const char *section);
ossl_STACK_OF(ossl_CONF_VALUE) *ossl_X509V3_get_section(ossl_X509V3_CTX *ctx, const char *section);
void ossl_X509V3_string_free(ossl_X509V3_CTX *ctx, char *str);
void ossl_X509V3_section_free(ossl_X509V3_CTX *ctx, ossl_STACK_OF(ossl_CONF_VALUE) *section);
void ossl_X509V3_set_ctx(ossl_X509V3_CTX *ctx, ossl_X509 *issuer, ossl_X509 *subject,
                    ossl_X509_REQ *req, ossl_X509_CRL *crl, int flags);
/* For API backward compatibility, this is separate from ossl_X509V3_set_ctx(): */
int ossl_X509V3_set_issuer_pkey(ossl_X509V3_CTX *ctx, ossl_EVP_PKEY *pkey);

int ossl_X509V3_add_value(const char *name, const char *value,
                     ossl_STACK_OF(ossl_CONF_VALUE) **extlist);
int ossl_X509V3_add_value_uchar(const char *name, const unsigned char *value,
                           ossl_STACK_OF(ossl_CONF_VALUE) **extlist);
int ossl_X509V3_add_value_bool(const char *name, int asn1_bool,
                          ossl_STACK_OF(ossl_CONF_VALUE) **extlist);
int ossl_X509V3_add_value_int(const char *name, const ossl_ASN1_INTEGER *aint,
                         ossl_STACK_OF(ossl_CONF_VALUE) **extlist);
char *ossl_i2s_ASN1_INTEGER(ossl_X509V3_EXT_METHOD *meth, const ossl_ASN1_INTEGER *aint);
ossl_ASN1_INTEGER *ossl_s2i_ASN1_INTEGER(ossl_X509V3_EXT_METHOD *meth, const char *value);
char *ossl_i2s_ASN1_ENUMERATED(ossl_X509V3_EXT_METHOD *meth, const ossl_ASN1_ENUMERATED *aint);
char *ossl_i2s_ASN1_ENUMERATED_TABLE(ossl_X509V3_EXT_METHOD *meth,
                                const ossl_ASN1_ENUMERATED *aint);
int ossl_X509V3_EXT_add(ossl_X509V3_EXT_METHOD *ext);
int ossl_X509V3_EXT_add_list(ossl_X509V3_EXT_METHOD *extlist);
int ossl_X509V3_EXT_add_alias(int nid_to, int nid_from);
void ossl_X509V3_EXT_cleanup(void);

const ossl_X509V3_EXT_METHOD *ossl_X509V3_EXT_get(ossl_X509_EXTENSION *ext);
const ossl_X509V3_EXT_METHOD *ossl_X509V3_EXT_get_nid(int nid);
int ossl_X509V3_add_standard_extensions(void);
ossl_STACK_OF(ossl_CONF_VALUE) *ossl_X509V3_parse_list(const char *line);
void *ossl_X509V3_EXT_d2i(ossl_X509_EXTENSION *ext);
void *ossl_X509V3_get_d2i(const ossl_STACK_OF(ossl_X509_EXTENSION) *x, int nid, int *crit,
                     int *idx);

ossl_X509_EXTENSION *ossl_X509V3_EXT_i2d(int ext_nid, int crit, void *ext_struc);
int ossl_X509V3_add1_i2d(ossl_STACK_OF(ossl_X509_EXTENSION) **x, int nid, void *value,
                    int crit, unsigned long flags);

#ifndef ossl_OPENSSL_NO_DEPRECATED_1_1_0
/* The new declarations are in crypto.h, but the old ones were here. */
# define ossl_hex_to_string ossl_OPENSSL_buf2hexstr
# define ossl_string_to_hex ossl_OPENSSL_hexstr2buf
#endif

void ossl_X509V3_EXT_val_prn(ossl_BIO *out, ossl_STACK_OF(ossl_CONF_VALUE) *val, int indent,
                        int ml);
int ossl_X509V3_EXT_print(ossl_BIO *out, ossl_X509_EXTENSION *ext, unsigned long flag,
                     int indent);
#ifndef ossl_OPENSSL_NO_STDIO
int ossl_X509V3_EXT_print_fp(FILE *out, ossl_X509_EXTENSION *ext, int flag, int indent);
#endif
int ossl_X509V3_extensions_print(ossl_BIO *out, const char *title,
                            const ossl_STACK_OF(ossl_X509_EXTENSION) *exts,
                            unsigned long flag, int indent);

int ossl_X509_check_ca(ossl_X509 *x);
int ossl_X509_check_purpose(ossl_X509 *x, int id, int ca);
int ossl_X509_supported_extension(ossl_X509_EXTENSION *ex);
int ossl_X509_PURPOSE_set(int *p, int purpose);
int ossl_X509_check_issued(ossl_X509 *issuer, ossl_X509 *subject);
int ossl_X509_check_akid(const ossl_X509 *issuer, const ossl_AUTHORITY_KEYID *akid);
void ossl_X509_set_proxy_flag(ossl_X509 *x);
void ossl_X509_set_proxy_pathlen(ossl_X509 *x, long l);
long ossl_X509_get_proxy_pathlen(ossl_X509 *x);

uint32_t ossl_X509_get_extension_flags(ossl_X509 *x);
uint32_t ossl_X509_get_key_usage(ossl_X509 *x);
uint32_t ossl_X509_get_extended_key_usage(ossl_X509 *x);
const ossl_ASN1_OCTET_STRING *ossl_X509_get0_subject_key_id(ossl_X509 *x);
const ossl_ASN1_OCTET_STRING *ossl_X509_get0_authority_key_id(ossl_X509 *x);
const ossl_GENERAL_NAMES *ossl_X509_get0_authority_issuer(ossl_X509 *x);
const ossl_ASN1_INTEGER *ossl_X509_get0_authority_serial(ossl_X509 *x);

int ossl_X509_PURPOSE_get_count(void);
ossl_X509_PURPOSE *ossl_X509_PURPOSE_get0(int idx);
int ossl_X509_PURPOSE_get_by_sname(const char *sname);
int ossl_X509_PURPOSE_get_by_id(int id);
int ossl_X509_PURPOSE_add(int id, int trust, int flags,
                     int (*ck) (const ossl_X509_PURPOSE *, const ossl_X509 *, int),
                     const char *name, const char *sname, void *arg);
char *ossl_X509_PURPOSE_get0_name(const ossl_X509_PURPOSE *xp);
char *ossl_X509_PURPOSE_get0_sname(const ossl_X509_PURPOSE *xp);
int ossl_X509_PURPOSE_get_trust(const ossl_X509_PURPOSE *xp);
void ossl_X509_PURPOSE_cleanup(void);
int ossl_X509_PURPOSE_get_id(const ossl_X509_PURPOSE *);

ossl_STACK_OF(ossl_OPENSSL_STRING) *ossl_X509_get1_email(ossl_X509 *x);
ossl_STACK_OF(ossl_OPENSSL_STRING) *ossl_X509_REQ_get1_email(ossl_X509_REQ *x);
void ossl_X509_email_free(ossl_STACK_OF(ossl_OPENSSL_STRING) *sk);
ossl_STACK_OF(ossl_OPENSSL_STRING) *ossl_X509_get1_ocsp(ossl_X509 *x);
/* Flags for X509_check_* functions */

/*
 * Always check subject name for host match even if subject alt names present
 */
# define ossl_X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT    0x1
/* Disable wildcard matching for dnsName fields and common name. */
# define ossl_X509_CHECK_FLAG_NO_WILDCARDS    0x2
/* Wildcards must not match a partial label. */
# define ossl_X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS 0x4
/* Allow (non-partial) wildcards to match multiple labels. */
# define ossl_X509_CHECK_FLAG_MULTI_LABEL_WILDCARDS 0x8
/* Constraint verifier subdomain patterns to match a single labels. */
# define ossl_X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS 0x10
/* Never check the subject CN */
# define ossl_X509_CHECK_FLAG_NEVER_CHECK_SUBJECT    0x20
/*
 * Match reference identifiers starting with "." to any sub-domain.
 * This is a non-public flag, turned on implicitly when the subject
 * reference identity is a DNS name.
 */
# define ossl__X509_CHECK_FLAG_DOT_SUBDOMAINS 0x8000

int ossl_X509_check_host(ossl_X509 *x, const char *chk, size_t chklen,
                    unsigned int flags, char **peername);
int ossl_X509_check_email(ossl_X509 *x, const char *chk, size_t chklen,
                     unsigned int flags);
int ossl_X509_check_ip(ossl_X509 *x, const unsigned char *chk, size_t chklen,
                  unsigned int flags);
int ossl_X509_check_ip_asc(ossl_X509 *x, const char *ipasc, unsigned int flags);

ossl_ASN1_OCTET_STRING *ossl_a2i_IPADDRESS(const char *ipasc);
ossl_ASN1_OCTET_STRING *ossl_a2i_IPADDRESS_NC(const char *ipasc);
int ossl_X509V3_NAME_from_section(ossl_X509_NAME *nm, ossl_STACK_OF(ossl_CONF_VALUE) *dn_sk,
                             unsigned long chtype);

void ossl_X509_POLICY_NODE_print(ossl_BIO *out, ossl_X509_POLICY_NODE *node, int indent);
ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_X509_POLICY_NODE, ossl_X509_POLICY_NODE, ossl_X509_POLICY_NODE)
#define ossl_sk_X509_POLICY_NODE_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_X509_POLICY_NODE_sk_type(sk))
#define ossl_sk_X509_POLICY_NODE_value(sk, idx) ((ossl_X509_POLICY_NODE *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_X509_POLICY_NODE_sk_type(sk), (idx)))
#define ossl_sk_X509_POLICY_NODE_new(cmp) ((ossl_STACK_OF(ossl_X509_POLICY_NODE) *)ossl_OPENSSL_sk_new(ossl_ossl_check_X509_POLICY_NODE_compfunc_type(cmp)))
#define ossl_sk_X509_POLICY_NODE_new_null() ((ossl_STACK_OF(ossl_X509_POLICY_NODE) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_X509_POLICY_NODE_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_X509_POLICY_NODE) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_X509_POLICY_NODE_compfunc_type(cmp), (n)))
#define ossl_sk_X509_POLICY_NODE_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_X509_POLICY_NODE_sk_type(sk), (n))
#define ossl_sk_X509_POLICY_NODE_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_X509_POLICY_NODE_sk_type(sk))
#define ossl_sk_X509_POLICY_NODE_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_X509_POLICY_NODE_sk_type(sk))
#define ossl_sk_X509_POLICY_NODE_delete(sk, i) ((ossl_X509_POLICY_NODE *)ossl_OPENSSL_sk_delete(ossl_ossl_check_X509_POLICY_NODE_sk_type(sk), (i)))
#define ossl_sk_X509_POLICY_NODE_delete_ptr(sk, ptr) ((ossl_X509_POLICY_NODE *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_X509_POLICY_NODE_sk_type(sk), ossl_ossl_check_X509_POLICY_NODE_type(ptr)))
#define ossl_sk_X509_POLICY_NODE_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_X509_POLICY_NODE_sk_type(sk), ossl_ossl_check_X509_POLICY_NODE_type(ptr))
#define ossl_sk_X509_POLICY_NODE_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_X509_POLICY_NODE_sk_type(sk), ossl_ossl_check_X509_POLICY_NODE_type(ptr))
#define ossl_sk_X509_POLICY_NODE_pop(sk) ((ossl_X509_POLICY_NODE *)ossl_OPENSSL_sk_pop(ossl_ossl_check_X509_POLICY_NODE_sk_type(sk)))
#define ossl_sk_X509_POLICY_NODE_shift(sk) ((ossl_X509_POLICY_NODE *)ossl_OPENSSL_sk_shift(ossl_ossl_check_X509_POLICY_NODE_sk_type(sk)))
#define ossl_sk_X509_POLICY_NODE_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_X509_POLICY_NODE_sk_type(sk),ossl_ossl_check_X509_POLICY_NODE_freefunc_type(freefunc))
#define ossl_sk_X509_POLICY_NODE_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_X509_POLICY_NODE_sk_type(sk), ossl_ossl_check_X509_POLICY_NODE_type(ptr), (idx))
#define ossl_sk_X509_POLICY_NODE_set(sk, idx, ptr) ((ossl_X509_POLICY_NODE *)ossl_OPENSSL_sk_set(ossl_ossl_check_X509_POLICY_NODE_sk_type(sk), (idx), ossl_ossl_check_X509_POLICY_NODE_type(ptr)))
#define ossl_sk_X509_POLICY_NODE_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_X509_POLICY_NODE_sk_type(sk), ossl_ossl_check_X509_POLICY_NODE_type(ptr))
#define ossl_sk_X509_POLICY_NODE_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_X509_POLICY_NODE_sk_type(sk), ossl_ossl_check_X509_POLICY_NODE_type(ptr))
#define ossl_sk_X509_POLICY_NODE_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_X509_POLICY_NODE_sk_type(sk), ossl_ossl_check_X509_POLICY_NODE_type(ptr), pnum)
#define ossl_sk_X509_POLICY_NODE_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_X509_POLICY_NODE_sk_type(sk))
#define ossl_sk_X509_POLICY_NODE_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_X509_POLICY_NODE_sk_type(sk))
#define ossl_sk_X509_POLICY_NODE_dup(sk) ((ossl_STACK_OF(ossl_X509_POLICY_NODE) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_X509_POLICY_NODE_sk_type(sk)))
#define ossl_sk_X509_POLICY_NODE_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_X509_POLICY_NODE) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_X509_POLICY_NODE_sk_type(sk), ossl_ossl_check_X509_POLICY_NODE_copyfunc_type(copyfunc), ossl_ossl_check_X509_POLICY_NODE_freefunc_type(freefunc)))
#define ossl_sk_X509_POLICY_NODE_set_cmp_func(sk, cmp) ((ossl_sk_X509_POLICY_NODE_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_X509_POLICY_NODE_sk_type(sk), ossl_ossl_check_X509_POLICY_NODE_compfunc_type(cmp)))



#ifndef ossl_OPENSSL_NO_RFC3779
typedef struct ossl_ASRange_st {
    ossl_ASN1_INTEGER *min, *max;
} ossl_ASRange;

# define ossl_ASIdOrRange_id          0
# define ossl_ASIdOrRange_range       1

typedef struct ossl_ASIdOrRange_st {
    int type;
    union {
        ossl_ASN1_INTEGER *id;
        ossl_ASRange *range;
    } u;
} ossl_ASIdOrRange;

ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_ASIdOrRange, ossl_ASIdOrRange, ossl_ASIdOrRange)
#define ossl_sk_ASIdOrRange_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_ASIdOrRange_sk_type(sk))
#define ossl_sk_ASIdOrRange_value(sk, idx) ((ossl_ASIdOrRange *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_ASIdOrRange_sk_type(sk), (idx)))
#define ossl_sk_ASIdOrRange_new(cmp) ((ossl_STACK_OF(ossl_ASIdOrRange) *)ossl_OPENSSL_sk_new(ossl_ossl_check_ASIdOrRange_compfunc_type(cmp)))
#define ossl_sk_ASIdOrRange_new_null() ((ossl_STACK_OF(ossl_ASIdOrRange) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_ASIdOrRange_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_ASIdOrRange) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_ASIdOrRange_compfunc_type(cmp), (n)))
#define ossl_sk_ASIdOrRange_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_ASIdOrRange_sk_type(sk), (n))
#define ossl_sk_ASIdOrRange_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_ASIdOrRange_sk_type(sk))
#define ossl_sk_ASIdOrRange_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_ASIdOrRange_sk_type(sk))
#define ossl_sk_ASIdOrRange_delete(sk, i) ((ossl_ASIdOrRange *)ossl_OPENSSL_sk_delete(ossl_ossl_check_ASIdOrRange_sk_type(sk), (i)))
#define ossl_sk_ASIdOrRange_delete_ptr(sk, ptr) ((ossl_ASIdOrRange *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_ASIdOrRange_sk_type(sk), ossl_ossl_check_ASIdOrRange_type(ptr)))
#define ossl_sk_ASIdOrRange_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_ASIdOrRange_sk_type(sk), ossl_ossl_check_ASIdOrRange_type(ptr))
#define ossl_sk_ASIdOrRange_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_ASIdOrRange_sk_type(sk), ossl_ossl_check_ASIdOrRange_type(ptr))
#define ossl_sk_ASIdOrRange_pop(sk) ((ossl_ASIdOrRange *)ossl_OPENSSL_sk_pop(ossl_ossl_check_ASIdOrRange_sk_type(sk)))
#define ossl_sk_ASIdOrRange_shift(sk) ((ossl_ASIdOrRange *)ossl_OPENSSL_sk_shift(ossl_ossl_check_ASIdOrRange_sk_type(sk)))
#define ossl_sk_ASIdOrRange_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_ASIdOrRange_sk_type(sk),ossl_ossl_check_ASIdOrRange_freefunc_type(freefunc))
#define ossl_sk_ASIdOrRange_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_ASIdOrRange_sk_type(sk), ossl_ossl_check_ASIdOrRange_type(ptr), (idx))
#define ossl_sk_ASIdOrRange_set(sk, idx, ptr) ((ossl_ASIdOrRange *)ossl_OPENSSL_sk_set(ossl_ossl_check_ASIdOrRange_sk_type(sk), (idx), ossl_ossl_check_ASIdOrRange_type(ptr)))
#define ossl_sk_ASIdOrRange_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_ASIdOrRange_sk_type(sk), ossl_ossl_check_ASIdOrRange_type(ptr))
#define ossl_sk_ASIdOrRange_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_ASIdOrRange_sk_type(sk), ossl_ossl_check_ASIdOrRange_type(ptr))
#define ossl_sk_ASIdOrRange_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_ASIdOrRange_sk_type(sk), ossl_ossl_check_ASIdOrRange_type(ptr), pnum)
#define ossl_sk_ASIdOrRange_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_ASIdOrRange_sk_type(sk))
#define ossl_sk_ASIdOrRange_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_ASIdOrRange_sk_type(sk))
#define ossl_sk_ASIdOrRange_dup(sk) ((ossl_STACK_OF(ossl_ASIdOrRange) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_ASIdOrRange_sk_type(sk)))
#define ossl_sk_ASIdOrRange_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_ASIdOrRange) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_ASIdOrRange_sk_type(sk), ossl_ossl_check_ASIdOrRange_copyfunc_type(copyfunc), ossl_ossl_check_ASIdOrRange_freefunc_type(freefunc)))
#define ossl_sk_ASIdOrRange_set_cmp_func(sk, cmp) ((ossl_sk_ASIdOrRange_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_ASIdOrRange_sk_type(sk), ossl_ossl_check_ASIdOrRange_compfunc_type(cmp)))


typedef ossl_STACK_OF(ossl_ASIdOrRange) ossl_ASIdOrRanges;

# define ossl_ASIdentifierChoice_inherit              0
# define ossl_ASIdentifierChoice_asIdsOrRanges        1

typedef struct ossl_ASIdentifierChoice_st {
    int type;
    union {
        ossl_ASN1_NULL *inherit;
        ossl_ASIdOrRanges *asIdsOrRanges;
    } u;
} ossl_ASIdentifierChoice;

typedef struct ossl_ASIdentifiers_st {
    ossl_ASIdentifierChoice *asnum, *rdi;
} ossl_ASIdentifiers;

ossl_DECLARE_ASN1_FUNCTIONS(ossl_ASRange)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_ASIdOrRange)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_ASIdentifierChoice)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_ASIdentifiers)

typedef struct ossl_IPAddressRange_st {
    ossl_ASN1_BIT_STRING *min, *max;
} ossl_IPAddressRange;

# define ossl_IPAddressOrRange_addressPrefix  0
# define ossl_IPAddressOrRange_addressRange   1

typedef struct ossl_IPAddressOrRange_st {
    int type;
    union {
        ossl_ASN1_BIT_STRING *addressPrefix;
        ossl_IPAddressRange *addressRange;
    } u;
} ossl_IPAddressOrRange;

ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_IPAddressOrRange, ossl_IPAddressOrRange, ossl_IPAddressOrRange)
#define ossl_sk_IPAddressOrRange_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_IPAddressOrRange_sk_type(sk))
#define ossl_sk_IPAddressOrRange_value(sk, idx) ((ossl_IPAddressOrRange *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_IPAddressOrRange_sk_type(sk), (idx)))
#define ossl_sk_IPAddressOrRange_new(cmp) ((ossl_STACK_OF(ossl_IPAddressOrRange) *)ossl_OPENSSL_sk_new(ossl_ossl_check_IPAddressOrRange_compfunc_type(cmp)))
#define ossl_sk_IPAddressOrRange_new_null() ((ossl_STACK_OF(ossl_IPAddressOrRange) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_IPAddressOrRange_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_IPAddressOrRange) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_IPAddressOrRange_compfunc_type(cmp), (n)))
#define ossl_sk_IPAddressOrRange_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_IPAddressOrRange_sk_type(sk), (n))
#define ossl_sk_IPAddressOrRange_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_IPAddressOrRange_sk_type(sk))
#define ossl_sk_IPAddressOrRange_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_IPAddressOrRange_sk_type(sk))
#define ossl_sk_IPAddressOrRange_delete(sk, i) ((ossl_IPAddressOrRange *)ossl_OPENSSL_sk_delete(ossl_ossl_check_IPAddressOrRange_sk_type(sk), (i)))
#define ossl_sk_IPAddressOrRange_delete_ptr(sk, ptr) ((ossl_IPAddressOrRange *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_IPAddressOrRange_sk_type(sk), ossl_ossl_check_IPAddressOrRange_type(ptr)))
#define ossl_sk_IPAddressOrRange_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_IPAddressOrRange_sk_type(sk), ossl_ossl_check_IPAddressOrRange_type(ptr))
#define ossl_sk_IPAddressOrRange_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_IPAddressOrRange_sk_type(sk), ossl_ossl_check_IPAddressOrRange_type(ptr))
#define ossl_sk_IPAddressOrRange_pop(sk) ((ossl_IPAddressOrRange *)ossl_OPENSSL_sk_pop(ossl_ossl_check_IPAddressOrRange_sk_type(sk)))
#define ossl_sk_IPAddressOrRange_shift(sk) ((ossl_IPAddressOrRange *)ossl_OPENSSL_sk_shift(ossl_ossl_check_IPAddressOrRange_sk_type(sk)))
#define ossl_sk_IPAddressOrRange_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_IPAddressOrRange_sk_type(sk),ossl_ossl_check_IPAddressOrRange_freefunc_type(freefunc))
#define ossl_sk_IPAddressOrRange_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_IPAddressOrRange_sk_type(sk), ossl_ossl_check_IPAddressOrRange_type(ptr), (idx))
#define ossl_sk_IPAddressOrRange_set(sk, idx, ptr) ((ossl_IPAddressOrRange *)ossl_OPENSSL_sk_set(ossl_ossl_check_IPAddressOrRange_sk_type(sk), (idx), ossl_ossl_check_IPAddressOrRange_type(ptr)))
#define ossl_sk_IPAddressOrRange_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_IPAddressOrRange_sk_type(sk), ossl_ossl_check_IPAddressOrRange_type(ptr))
#define ossl_sk_IPAddressOrRange_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_IPAddressOrRange_sk_type(sk), ossl_ossl_check_IPAddressOrRange_type(ptr))
#define ossl_sk_IPAddressOrRange_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_IPAddressOrRange_sk_type(sk), ossl_ossl_check_IPAddressOrRange_type(ptr), pnum)
#define ossl_sk_IPAddressOrRange_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_IPAddressOrRange_sk_type(sk))
#define ossl_sk_IPAddressOrRange_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_IPAddressOrRange_sk_type(sk))
#define ossl_sk_IPAddressOrRange_dup(sk) ((ossl_STACK_OF(ossl_IPAddressOrRange) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_IPAddressOrRange_sk_type(sk)))
#define ossl_sk_IPAddressOrRange_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_IPAddressOrRange) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_IPAddressOrRange_sk_type(sk), ossl_ossl_check_IPAddressOrRange_copyfunc_type(copyfunc), ossl_ossl_check_IPAddressOrRange_freefunc_type(freefunc)))
#define ossl_sk_IPAddressOrRange_set_cmp_func(sk, cmp) ((ossl_sk_IPAddressOrRange_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_IPAddressOrRange_sk_type(sk), ossl_ossl_check_IPAddressOrRange_compfunc_type(cmp)))


typedef ossl_STACK_OF(ossl_IPAddressOrRange) ossl_IPAddressOrRanges;

# define ossl_IPAddressChoice_inherit                 0
# define ossl_IPAddressChoice_addressesOrRanges       1

typedef struct ossl_IPAddressChoice_st {
    int type;
    union {
        ossl_ASN1_NULL *inherit;
        ossl_IPAddressOrRanges *addressesOrRanges;
    } u;
} ossl_IPAddressChoice;

typedef struct ossl_IPAddressFamily_st {
    ossl_ASN1_OCTET_STRING *addressFamily;
    ossl_IPAddressChoice *ipAddressChoice;
} ossl_IPAddressFamily;

ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_IPAddressFamily, ossl_IPAddressFamily, ossl_IPAddressFamily)
#define ossl_sk_IPAddressFamily_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_IPAddressFamily_sk_type(sk))
#define ossl_sk_IPAddressFamily_value(sk, idx) ((ossl_IPAddressFamily *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_IPAddressFamily_sk_type(sk), (idx)))
#define ossl_sk_IPAddressFamily_new(cmp) ((ossl_STACK_OF(ossl_IPAddressFamily) *)ossl_OPENSSL_sk_new(ossl_ossl_check_IPAddressFamily_compfunc_type(cmp)))
#define ossl_sk_IPAddressFamily_new_null() ((ossl_STACK_OF(ossl_IPAddressFamily) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_IPAddressFamily_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_IPAddressFamily) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_IPAddressFamily_compfunc_type(cmp), (n)))
#define ossl_sk_IPAddressFamily_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_IPAddressFamily_sk_type(sk), (n))
#define ossl_sk_IPAddressFamily_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_IPAddressFamily_sk_type(sk))
#define ossl_sk_IPAddressFamily_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_IPAddressFamily_sk_type(sk))
#define ossl_sk_IPAddressFamily_delete(sk, i) ((ossl_IPAddressFamily *)ossl_OPENSSL_sk_delete(ossl_ossl_check_IPAddressFamily_sk_type(sk), (i)))
#define ossl_sk_IPAddressFamily_delete_ptr(sk, ptr) ((ossl_IPAddressFamily *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_IPAddressFamily_sk_type(sk), ossl_ossl_check_IPAddressFamily_type(ptr)))
#define ossl_sk_IPAddressFamily_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_IPAddressFamily_sk_type(sk), ossl_ossl_check_IPAddressFamily_type(ptr))
#define ossl_sk_IPAddressFamily_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_IPAddressFamily_sk_type(sk), ossl_ossl_check_IPAddressFamily_type(ptr))
#define ossl_sk_IPAddressFamily_pop(sk) ((ossl_IPAddressFamily *)ossl_OPENSSL_sk_pop(ossl_ossl_check_IPAddressFamily_sk_type(sk)))
#define ossl_sk_IPAddressFamily_shift(sk) ((ossl_IPAddressFamily *)ossl_OPENSSL_sk_shift(ossl_ossl_check_IPAddressFamily_sk_type(sk)))
#define ossl_sk_IPAddressFamily_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_IPAddressFamily_sk_type(sk),ossl_ossl_check_IPAddressFamily_freefunc_type(freefunc))
#define ossl_sk_IPAddressFamily_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_IPAddressFamily_sk_type(sk), ossl_ossl_check_IPAddressFamily_type(ptr), (idx))
#define ossl_sk_IPAddressFamily_set(sk, idx, ptr) ((ossl_IPAddressFamily *)ossl_OPENSSL_sk_set(ossl_ossl_check_IPAddressFamily_sk_type(sk), (idx), ossl_ossl_check_IPAddressFamily_type(ptr)))
#define ossl_sk_IPAddressFamily_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_IPAddressFamily_sk_type(sk), ossl_ossl_check_IPAddressFamily_type(ptr))
#define ossl_sk_IPAddressFamily_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_IPAddressFamily_sk_type(sk), ossl_ossl_check_IPAddressFamily_type(ptr))
#define ossl_sk_IPAddressFamily_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_IPAddressFamily_sk_type(sk), ossl_ossl_check_IPAddressFamily_type(ptr), pnum)
#define ossl_sk_IPAddressFamily_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_IPAddressFamily_sk_type(sk))
#define ossl_sk_IPAddressFamily_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_IPAddressFamily_sk_type(sk))
#define ossl_sk_IPAddressFamily_dup(sk) ((ossl_STACK_OF(ossl_IPAddressFamily) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_IPAddressFamily_sk_type(sk)))
#define ossl_sk_IPAddressFamily_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_IPAddressFamily) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_IPAddressFamily_sk_type(sk), ossl_ossl_check_IPAddressFamily_copyfunc_type(copyfunc), ossl_ossl_check_IPAddressFamily_freefunc_type(freefunc)))
#define ossl_sk_IPAddressFamily_set_cmp_func(sk, cmp) ((ossl_sk_IPAddressFamily_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_IPAddressFamily_sk_type(sk), ossl_ossl_check_IPAddressFamily_compfunc_type(cmp)))



typedef ossl_STACK_OF(ossl_IPAddressFamily) ossl_IPAddrBlocks;

ossl_DECLARE_ASN1_FUNCTIONS(ossl_IPAddressRange)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_IPAddressOrRange)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_IPAddressChoice)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_IPAddressFamily)

/*
 * API tag for elements of the ASIdentifer SEQUENCE.
 */
# define ossl_V3_ASID_ASNUM   0
# define ossl_V3_ASID_RDI     1

/*
 * AFI values, assigned by IANA.  It'd be nice to make the AFI
 * handling code totally generic, but there are too many little things
 * that would need to be defined for other address families for it to
 * be worth the trouble.
 */
# define ossl_IANA_AFI_IPV4   1
# define ossl_IANA_AFI_IPV6   2

/*
 * Utilities to construct and extract values from RFC3779 extensions,
 * since some of the encodings (particularly for IP address prefixes
 * and ranges) are a bit tedious to work with directly.
 */
int ossl_X509v3_asid_add_inherit(ossl_ASIdentifiers *asid, int which);
int ossl_X509v3_asid_add_id_or_range(ossl_ASIdentifiers *asid, int which,
                                ossl_ASN1_INTEGER *min, ossl_ASN1_INTEGER *max);
int ossl_X509v3_addr_add_inherit(ossl_IPAddrBlocks *addr,
                            const unsigned afi, const unsigned *safi);
int ossl_X509v3_addr_add_prefix(ossl_IPAddrBlocks *addr,
                           const unsigned afi, const unsigned *safi,
                           unsigned char *a, const int prefixlen);
int ossl_X509v3_addr_add_range(ossl_IPAddrBlocks *addr,
                          const unsigned afi, const unsigned *safi,
                          unsigned char *min, unsigned char *max);
unsigned ossl_X509v3_addr_get_afi(const ossl_IPAddressFamily *f);
int ossl_X509v3_addr_get_range(ossl_IPAddressOrRange *aor, const unsigned afi,
                          unsigned char *min, unsigned char *max,
                          const int length);

/*
 * Canonical forms.
 */
int ossl_X509v3_asid_is_canonical(ossl_ASIdentifiers *asid);
int ossl_X509v3_addr_is_canonical(ossl_IPAddrBlocks *addr);
int ossl_X509v3_asid_canonize(ossl_ASIdentifiers *asid);
int ossl_X509v3_addr_canonize(ossl_IPAddrBlocks *addr);

/*
 * Tests for inheritance and containment.
 */
int ossl_X509v3_asid_inherits(ossl_ASIdentifiers *asid);
int ossl_X509v3_addr_inherits(ossl_IPAddrBlocks *addr);
int ossl_X509v3_asid_subset(ossl_ASIdentifiers *a, ossl_ASIdentifiers *b);
int ossl_X509v3_addr_subset(ossl_IPAddrBlocks *a, ossl_IPAddrBlocks *b);

/*
 * Check whether RFC 3779 extensions nest properly in chains.
 */
int ossl_X509v3_asid_validate_path(ossl_X509_STORE_CTX *);
int ossl_X509v3_addr_validate_path(ossl_X509_STORE_CTX *);
int ossl_X509v3_asid_validate_resource_set(ossl_STACK_OF(ossl_X509) *chain,
                                      ossl_ASIdentifiers *ext,
                                      int allow_inheritance);
int ossl_X509v3_addr_validate_resource_set(ossl_STACK_OF(ossl_X509) *chain,
                                      ossl_IPAddrBlocks *ext, int allow_inheritance);

#endif                         /* ossl_OPENSSL_NO_RFC3779 */

ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_ASN1_STRING, ossl_ASN1_STRING, ossl_ASN1_STRING)
#define ossl_sk_ASN1_STRING_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_ASN1_STRING_sk_type(sk))
#define ossl_sk_ASN1_STRING_value(sk, idx) ((ossl_ASN1_STRING *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_ASN1_STRING_sk_type(sk), (idx)))
#define ossl_sk_ASN1_STRING_new(cmp) ((ossl_STACK_OF(ossl_ASN1_STRING) *)ossl_OPENSSL_sk_new(ossl_ossl_check_ASN1_STRING_compfunc_type(cmp)))
#define ossl_sk_ASN1_STRING_new_null() ((ossl_STACK_OF(ossl_ASN1_STRING) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_ASN1_STRING_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_ASN1_STRING) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_ASN1_STRING_compfunc_type(cmp), (n)))
#define ossl_sk_ASN1_STRING_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_ASN1_STRING_sk_type(sk), (n))
#define ossl_sk_ASN1_STRING_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_ASN1_STRING_sk_type(sk))
#define ossl_sk_ASN1_STRING_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_ASN1_STRING_sk_type(sk))
#define ossl_sk_ASN1_STRING_delete(sk, i) ((ossl_ASN1_STRING *)ossl_OPENSSL_sk_delete(ossl_ossl_check_ASN1_STRING_sk_type(sk), (i)))
#define ossl_sk_ASN1_STRING_delete_ptr(sk, ptr) ((ossl_ASN1_STRING *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_ASN1_STRING_sk_type(sk), ossl_ossl_check_ASN1_STRING_type(ptr)))
#define ossl_sk_ASN1_STRING_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_ASN1_STRING_sk_type(sk), ossl_ossl_check_ASN1_STRING_type(ptr))
#define ossl_sk_ASN1_STRING_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_ASN1_STRING_sk_type(sk), ossl_ossl_check_ASN1_STRING_type(ptr))
#define ossl_sk_ASN1_STRING_pop(sk) ((ossl_ASN1_STRING *)ossl_OPENSSL_sk_pop(ossl_ossl_check_ASN1_STRING_sk_type(sk)))
#define ossl_sk_ASN1_STRING_shift(sk) ((ossl_ASN1_STRING *)ossl_OPENSSL_sk_shift(ossl_ossl_check_ASN1_STRING_sk_type(sk)))
#define ossl_sk_ASN1_STRING_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_ASN1_STRING_sk_type(sk),ossl_ossl_check_ASN1_STRING_freefunc_type(freefunc))
#define ossl_sk_ASN1_STRING_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_ASN1_STRING_sk_type(sk), ossl_ossl_check_ASN1_STRING_type(ptr), (idx))
#define ossl_sk_ASN1_STRING_set(sk, idx, ptr) ((ossl_ASN1_STRING *)ossl_OPENSSL_sk_set(ossl_ossl_check_ASN1_STRING_sk_type(sk), (idx), ossl_ossl_check_ASN1_STRING_type(ptr)))
#define ossl_sk_ASN1_STRING_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_ASN1_STRING_sk_type(sk), ossl_ossl_check_ASN1_STRING_type(ptr))
#define ossl_sk_ASN1_STRING_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_ASN1_STRING_sk_type(sk), ossl_ossl_check_ASN1_STRING_type(ptr))
#define ossl_sk_ASN1_STRING_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_ASN1_STRING_sk_type(sk), ossl_ossl_check_ASN1_STRING_type(ptr), pnum)
#define ossl_sk_ASN1_STRING_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_ASN1_STRING_sk_type(sk))
#define ossl_sk_ASN1_STRING_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_ASN1_STRING_sk_type(sk))
#define ossl_sk_ASN1_STRING_dup(sk) ((ossl_STACK_OF(ossl_ASN1_STRING) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_ASN1_STRING_sk_type(sk)))
#define ossl_sk_ASN1_STRING_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_ASN1_STRING) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_ASN1_STRING_sk_type(sk), ossl_ossl_check_ASN1_STRING_copyfunc_type(copyfunc), ossl_ossl_check_ASN1_STRING_freefunc_type(freefunc)))
#define ossl_sk_ASN1_STRING_set_cmp_func(sk, cmp) ((ossl_sk_ASN1_STRING_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_ASN1_STRING_sk_type(sk), ossl_ossl_check_ASN1_STRING_compfunc_type(cmp)))


/*
 * Admission Syntax
 */
typedef struct ossl_NamingAuthority_st ossl_NAMING_AUTHORITY;
typedef struct ossl_ProfessionInfo_st ossl_PROFESSION_INFO;
typedef struct ossl_Admissions_st ossl_ADMISSIONS;
typedef struct ossl_AdmissionSyntax_st ossl_ADMISSION_SYNTAX;
ossl_DECLARE_ASN1_FUNCTIONS(ossl_NAMING_AUTHORITY)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_PROFESSION_INFO)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_ADMISSIONS)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_ADMISSION_SYNTAX)
ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_PROFESSION_INFO, ossl_PROFESSION_INFO, ossl_PROFESSION_INFO)
#define ossl_sk_PROFESSION_INFO_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_PROFESSION_INFO_sk_type(sk))
#define ossl_sk_PROFESSION_INFO_value(sk, idx) ((ossl_PROFESSION_INFO *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_PROFESSION_INFO_sk_type(sk), (idx)))
#define ossl_sk_PROFESSION_INFO_new(cmp) ((ossl_STACK_OF(ossl_PROFESSION_INFO) *)ossl_OPENSSL_sk_new(ossl_ossl_check_PROFESSION_INFO_compfunc_type(cmp)))
#define ossl_sk_PROFESSION_INFO_new_null() ((ossl_STACK_OF(ossl_PROFESSION_INFO) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_PROFESSION_INFO_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_PROFESSION_INFO) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_PROFESSION_INFO_compfunc_type(cmp), (n)))
#define ossl_sk_PROFESSION_INFO_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_PROFESSION_INFO_sk_type(sk), (n))
#define ossl_sk_PROFESSION_INFO_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_PROFESSION_INFO_sk_type(sk))
#define ossl_sk_PROFESSION_INFO_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_PROFESSION_INFO_sk_type(sk))
#define ossl_sk_PROFESSION_INFO_delete(sk, i) ((ossl_PROFESSION_INFO *)ossl_OPENSSL_sk_delete(ossl_ossl_check_PROFESSION_INFO_sk_type(sk), (i)))
#define ossl_sk_PROFESSION_INFO_delete_ptr(sk, ptr) ((ossl_PROFESSION_INFO *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_PROFESSION_INFO_sk_type(sk), ossl_ossl_check_PROFESSION_INFO_type(ptr)))
#define ossl_sk_PROFESSION_INFO_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_PROFESSION_INFO_sk_type(sk), ossl_ossl_check_PROFESSION_INFO_type(ptr))
#define ossl_sk_PROFESSION_INFO_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_PROFESSION_INFO_sk_type(sk), ossl_ossl_check_PROFESSION_INFO_type(ptr))
#define ossl_sk_PROFESSION_INFO_pop(sk) ((ossl_PROFESSION_INFO *)ossl_OPENSSL_sk_pop(ossl_ossl_check_PROFESSION_INFO_sk_type(sk)))
#define ossl_sk_PROFESSION_INFO_shift(sk) ((ossl_PROFESSION_INFO *)ossl_OPENSSL_sk_shift(ossl_ossl_check_PROFESSION_INFO_sk_type(sk)))
#define ossl_sk_PROFESSION_INFO_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_PROFESSION_INFO_sk_type(sk),ossl_ossl_check_PROFESSION_INFO_freefunc_type(freefunc))
#define ossl_sk_PROFESSION_INFO_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_PROFESSION_INFO_sk_type(sk), ossl_ossl_check_PROFESSION_INFO_type(ptr), (idx))
#define ossl_sk_PROFESSION_INFO_set(sk, idx, ptr) ((ossl_PROFESSION_INFO *)ossl_OPENSSL_sk_set(ossl_ossl_check_PROFESSION_INFO_sk_type(sk), (idx), ossl_ossl_check_PROFESSION_INFO_type(ptr)))
#define ossl_sk_PROFESSION_INFO_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_PROFESSION_INFO_sk_type(sk), ossl_ossl_check_PROFESSION_INFO_type(ptr))
#define ossl_sk_PROFESSION_INFO_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_PROFESSION_INFO_sk_type(sk), ossl_ossl_check_PROFESSION_INFO_type(ptr))
#define ossl_sk_PROFESSION_INFO_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_PROFESSION_INFO_sk_type(sk), ossl_ossl_check_PROFESSION_INFO_type(ptr), pnum)
#define ossl_sk_PROFESSION_INFO_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_PROFESSION_INFO_sk_type(sk))
#define ossl_sk_PROFESSION_INFO_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_PROFESSION_INFO_sk_type(sk))
#define ossl_sk_PROFESSION_INFO_dup(sk) ((ossl_STACK_OF(ossl_PROFESSION_INFO) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_PROFESSION_INFO_sk_type(sk)))
#define ossl_sk_PROFESSION_INFO_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_PROFESSION_INFO) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_PROFESSION_INFO_sk_type(sk), ossl_ossl_check_PROFESSION_INFO_copyfunc_type(copyfunc), ossl_ossl_check_PROFESSION_INFO_freefunc_type(freefunc)))
#define ossl_sk_PROFESSION_INFO_set_cmp_func(sk, cmp) ((ossl_sk_PROFESSION_INFO_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_PROFESSION_INFO_sk_type(sk), ossl_ossl_check_PROFESSION_INFO_compfunc_type(cmp)))
ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_ADMISSIONS, ossl_ADMISSIONS, ossl_ADMISSIONS)
#define ossl_sk_ADMISSIONS_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_ADMISSIONS_sk_type(sk))
#define ossl_sk_ADMISSIONS_value(sk, idx) ((ossl_ADMISSIONS *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_ADMISSIONS_sk_type(sk), (idx)))
#define ossl_sk_ADMISSIONS_new(cmp) ((ossl_STACK_OF(ossl_ADMISSIONS) *)ossl_OPENSSL_sk_new(ossl_ossl_check_ADMISSIONS_compfunc_type(cmp)))
#define ossl_sk_ADMISSIONS_new_null() ((ossl_STACK_OF(ossl_ADMISSIONS) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_ADMISSIONS_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_ADMISSIONS) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_ADMISSIONS_compfunc_type(cmp), (n)))
#define ossl_sk_ADMISSIONS_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_ADMISSIONS_sk_type(sk), (n))
#define ossl_sk_ADMISSIONS_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_ADMISSIONS_sk_type(sk))
#define ossl_sk_ADMISSIONS_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_ADMISSIONS_sk_type(sk))
#define ossl_sk_ADMISSIONS_delete(sk, i) ((ossl_ADMISSIONS *)ossl_OPENSSL_sk_delete(ossl_ossl_check_ADMISSIONS_sk_type(sk), (i)))
#define ossl_sk_ADMISSIONS_delete_ptr(sk, ptr) ((ossl_ADMISSIONS *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_ADMISSIONS_sk_type(sk), ossl_ossl_check_ADMISSIONS_type(ptr)))
#define ossl_sk_ADMISSIONS_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_ADMISSIONS_sk_type(sk), ossl_ossl_check_ADMISSIONS_type(ptr))
#define ossl_sk_ADMISSIONS_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_ADMISSIONS_sk_type(sk), ossl_ossl_check_ADMISSIONS_type(ptr))
#define ossl_sk_ADMISSIONS_pop(sk) ((ossl_ADMISSIONS *)ossl_OPENSSL_sk_pop(ossl_ossl_check_ADMISSIONS_sk_type(sk)))
#define ossl_sk_ADMISSIONS_shift(sk) ((ossl_ADMISSIONS *)ossl_OPENSSL_sk_shift(ossl_ossl_check_ADMISSIONS_sk_type(sk)))
#define ossl_sk_ADMISSIONS_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_ADMISSIONS_sk_type(sk),ossl_ossl_check_ADMISSIONS_freefunc_type(freefunc))
#define ossl_sk_ADMISSIONS_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_ADMISSIONS_sk_type(sk), ossl_ossl_check_ADMISSIONS_type(ptr), (idx))
#define ossl_sk_ADMISSIONS_set(sk, idx, ptr) ((ossl_ADMISSIONS *)ossl_OPENSSL_sk_set(ossl_ossl_check_ADMISSIONS_sk_type(sk), (idx), ossl_ossl_check_ADMISSIONS_type(ptr)))
#define ossl_sk_ADMISSIONS_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_ADMISSIONS_sk_type(sk), ossl_ossl_check_ADMISSIONS_type(ptr))
#define ossl_sk_ADMISSIONS_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_ADMISSIONS_sk_type(sk), ossl_ossl_check_ADMISSIONS_type(ptr))
#define ossl_sk_ADMISSIONS_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_ADMISSIONS_sk_type(sk), ossl_ossl_check_ADMISSIONS_type(ptr), pnum)
#define ossl_sk_ADMISSIONS_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_ADMISSIONS_sk_type(sk))
#define ossl_sk_ADMISSIONS_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_ADMISSIONS_sk_type(sk))
#define ossl_sk_ADMISSIONS_dup(sk) ((ossl_STACK_OF(ossl_ADMISSIONS) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_ADMISSIONS_sk_type(sk)))
#define ossl_sk_ADMISSIONS_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_ADMISSIONS) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_ADMISSIONS_sk_type(sk), ossl_ossl_check_ADMISSIONS_copyfunc_type(copyfunc), ossl_ossl_check_ADMISSIONS_freefunc_type(freefunc)))
#define ossl_sk_ADMISSIONS_set_cmp_func(sk, cmp) ((ossl_sk_ADMISSIONS_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_ADMISSIONS_sk_type(sk), ossl_ossl_check_ADMISSIONS_compfunc_type(cmp)))

typedef ossl_STACK_OF(ossl_PROFESSION_INFO) ossl_PROFESSION_INFOS;

const ossl_ASN1_OBJECT *ossl_NAMING_AUTHORITY_get0_authorityId(
    const ossl_NAMING_AUTHORITY *n);
const ossl_ASN1_IA5STRING *ossl_NAMING_AUTHORITY_get0_authorityURL(
    const ossl_NAMING_AUTHORITY *n);
const ossl_ASN1_STRING *ossl_NAMING_AUTHORITY_get0_authorityText(
    const ossl_NAMING_AUTHORITY *n);
void ossl_NAMING_AUTHORITY_set0_authorityId(ossl_NAMING_AUTHORITY *n,
    ossl_ASN1_OBJECT* namingAuthorityId);
void ossl_NAMING_AUTHORITY_set0_authorityURL(ossl_NAMING_AUTHORITY *n,
    ossl_ASN1_IA5STRING* namingAuthorityUrl);
void ossl_NAMING_AUTHORITY_set0_authorityText(ossl_NAMING_AUTHORITY *n,
    ossl_ASN1_STRING* namingAuthorityText);

const ossl_GENERAL_NAME *ossl_ADMISSION_SYNTAX_get0_admissionAuthority(
    const ossl_ADMISSION_SYNTAX *as);
void ossl_ADMISSION_SYNTAX_set0_admissionAuthority(
    ossl_ADMISSION_SYNTAX *as, ossl_GENERAL_NAME *aa);
const ossl_STACK_OF(ossl_ADMISSIONS) *ossl_ADMISSION_SYNTAX_get0_contentsOfAdmissions(
    const ossl_ADMISSION_SYNTAX *as);
void ossl_ADMISSION_SYNTAX_set0_contentsOfAdmissions(
    ossl_ADMISSION_SYNTAX *as, ossl_STACK_OF(ossl_ADMISSIONS) *a);
const ossl_GENERAL_NAME *ossl_ADMISSIONS_get0_admissionAuthority(const ossl_ADMISSIONS *a);
void ossl_ADMISSIONS_set0_admissionAuthority(ossl_ADMISSIONS *a, ossl_GENERAL_NAME *aa);
const ossl_NAMING_AUTHORITY *ossl_ADMISSIONS_get0_namingAuthority(const ossl_ADMISSIONS *a);
void ossl_ADMISSIONS_set0_namingAuthority(ossl_ADMISSIONS *a, ossl_NAMING_AUTHORITY *na);
const ossl_PROFESSION_INFOS *ossl_ADMISSIONS_get0_professionInfos(const ossl_ADMISSIONS *a);
void ossl_ADMISSIONS_set0_professionInfos(ossl_ADMISSIONS *a, ossl_PROFESSION_INFOS *pi);
const ossl_ASN1_OCTET_STRING *ossl_PROFESSION_INFO_get0_addProfessionInfo(
    const ossl_PROFESSION_INFO *pi);
void ossl_PROFESSION_INFO_set0_addProfessionInfo(
    ossl_PROFESSION_INFO *pi, ossl_ASN1_OCTET_STRING *aos);
const ossl_NAMING_AUTHORITY *ossl_PROFESSION_INFO_get0_namingAuthority(
    const ossl_PROFESSION_INFO *pi);
void ossl_PROFESSION_INFO_set0_namingAuthority(
    ossl_PROFESSION_INFO *pi, ossl_NAMING_AUTHORITY *na);
const ossl_STACK_OF(ossl_ASN1_STRING) *ossl_PROFESSION_INFO_get0_professionItems(
    const ossl_PROFESSION_INFO *pi);
void ossl_PROFESSION_INFO_set0_professionItems(
    ossl_PROFESSION_INFO *pi, ossl_STACK_OF(ossl_ASN1_STRING) *as);
const ossl_STACK_OF(ossl_ASN1_OBJECT) *ossl_PROFESSION_INFO_get0_professionOIDs(
    const ossl_PROFESSION_INFO *pi);
void ossl_PROFESSION_INFO_set0_professionOIDs(
    ossl_PROFESSION_INFO *pi, ossl_STACK_OF(ossl_ASN1_OBJECT) *po);
const ossl_ASN1_PRINTABLESTRING *ossl_PROFESSION_INFO_get0_registrationNumber(
    const ossl_PROFESSION_INFO *pi);
void ossl_PROFESSION_INFO_set0_registrationNumber(
    ossl_PROFESSION_INFO *pi, ossl_ASN1_PRINTABLESTRING *rn);

# ifdef  __cplusplus
}
# endif
#endif
