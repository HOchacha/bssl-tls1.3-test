/*
 * WARNING: do not edit!
 * Generated by Makefile from ../../../openssl/source/include/openssl/asn1t.h.in
 *
 * Copyright 2000-2021 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



#ifndef ossl_OPENSSL_ASN1T_H
# define ossl_OPENSSL_ASN1T_H
# pragma once

# include "ossl/openssl/macros.h"
# ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
#  define ossl_HEADER_ASN1T_H
# endif

# include <stddef.h>
# include "ossl/openssl/e_os2.h"
# include "ossl/openssl/asn1.h"

# ifdef ossl_OPENSSL_BUILD_SHLIBCRYPTO
#  undef ossl_OPENSSL_EXTERN
#  define ossl_OPENSSL_EXTERN ossl_OPENSSL_EXPORT
# endif

/* ASN1 template defines, structures and functions */

#ifdef  __cplusplus
extern "C" {
#endif

/*-
 * These are the possible values for the itype field of the
 * ossl_ASN1_ITEM structure and determine how it is interpreted.
 *
 * For PRIMITIVE types the underlying type
 * determines the behaviour if items is NULL.
 *
 * Otherwise templates must contain a single
 * template and the type is treated in the
 * same way as the type specified in the template.
 *
 * For SEQUENCE types the templates field points
 * to the members, the size field is the
 * structure size.
 *
 * For CHOICE types the templates field points
 * to each possible member (typically a union)
 * and the 'size' field is the offset of the
 * selector.
 *
 * The 'funcs' field is used for application-specific
 * data and functions.
 *
 * The EXTERN type uses a new style d2i/i2d.
 * The new style should be used where possible
 * because it avoids things like the d2i IMPLICIT
 * hack.
 *
 * MSTRING is a multiple string type, it is used
 * for a CHOICE of character strings where the
 * actual strings all occupy an ossl_ASN1_STRING
 * structure. In this case the 'utype' field
 * has a special meaning, it is used as a mask
 * of acceptable types using the B_ASN1 constants.
 *
 * NDEF_SEQUENCE is the same as SEQUENCE except
 * that it will use indefinite length constructed
 * encoding if requested.
 *
 */

# define ossl_ASN1_ITYPE_PRIMITIVE            0x0
# define ossl_ASN1_ITYPE_SEQUENCE             0x1
# define ossl_ASN1_ITYPE_CHOICE               0x2
/* unused value                          0x3 */
# define ossl_ASN1_ITYPE_EXTERN               0x4
# define ossl_ASN1_ITYPE_MSTRING              0x5
# define ossl_ASN1_ITYPE_NDEF_SEQUENCE        0x6

/* Macro to obtain ossl_ASN1_ADB pointer from a type (only used internally) */
# define ossl_ASN1_ADB_ptr(iptr) ((const ossl_ASN1_ADB *)((iptr)()))

/* Macros for start and end of ossl_ASN1_ITEM definition */

# define ossl_ASN1_ITEM_start(itname) \
        const ossl_ASN1_ITEM * itname##_it(void) \
        { \
                static const ossl_ASN1_ITEM local_it = {

# define ossl_static_ASN1_ITEM_start(itname) \
        static ossl_ASN1_ITEM_start(itname)

# define ossl_ASN1_ITEM_end(itname) \
                }; \
        return &local_it; \
        }

/* Macros to aid ASN1 template writing */

# define ossl_ASN1_ITEM_TEMPLATE(tname) \
        static const ossl_ASN1_TEMPLATE tname##_item_tt

# define ossl_ASN1_ITEM_TEMPLATE_END(tname) \
        ;\
        ossl_ASN1_ITEM_start(tname) \
                ossl_ASN1_ITYPE_PRIMITIVE,\
                -1,\
                &tname##_item_tt,\
                0,\
                NULL,\
                0,\
                #tname \
        ossl_ASN1_ITEM_end(tname)
# define ossl_static_ASN1_ITEM_TEMPLATE_END(tname) \
        ;\
        ossl_static_ASN1_ITEM_start(tname) \
                ossl_ASN1_ITYPE_PRIMITIVE,\
                -1,\
                &tname##_item_tt,\
                0,\
                NULL,\
                0,\
                #tname \
        ossl_ASN1_ITEM_end(tname)

/* This is a ASN1 type which just embeds a template */

/*-
 * This pair helps declare a SEQUENCE. We can do:
 *
 *      ossl_ASN1_SEQUENCE(stname) = {
 *              ... SEQUENCE components ...
 *      } ossl_ASN1_SEQUENCE_END(stname)
 *
 *      This will produce an ossl_ASN1_ITEM called stname_it
 *      for a structure called stname.
 *
 *      If you want the same structure but a different
 *      name then use:
 *
 *      ossl_ASN1_SEQUENCE(itname) = {
 *              ... SEQUENCE components ...
 *      } ossl_ASN1_SEQUENCE_END_name(stname, itname)
 *
 *      This will create an item called itname_it using
 *      a structure called stname.
 */

# define ossl_ASN1_SEQUENCE(tname) \
        static const ossl_ASN1_TEMPLATE tname##_seq_tt[]

# define ossl_ASN1_SEQUENCE_END(stname) ossl_ASN1_SEQUENCE_END_name(stname, stname)

# define ossl_static_ASN1_SEQUENCE_END(stname) ossl_static_ASN1_SEQUENCE_END_name(stname, stname)

# define ossl_ASN1_SEQUENCE_END_name(stname, tname) \
        ;\
        ossl_ASN1_ITEM_start(tname) \
                ossl_ASN1_ITYPE_SEQUENCE,\
                ossl_V_ASN1_SEQUENCE,\
                tname##_seq_tt,\
                sizeof(tname##_seq_tt) / sizeof(ossl_ASN1_TEMPLATE),\
                NULL,\
                sizeof(stname),\
                #tname \
        ossl_ASN1_ITEM_end(tname)

# define ossl_static_ASN1_SEQUENCE_END_name(stname, tname) \
        ;\
        ossl_static_ASN1_ITEM_start(tname) \
                ossl_ASN1_ITYPE_SEQUENCE,\
                ossl_V_ASN1_SEQUENCE,\
                tname##_seq_tt,\
                sizeof(tname##_seq_tt) / sizeof(ossl_ASN1_TEMPLATE),\
                NULL,\
                sizeof(stname),\
                #stname \
        ossl_ASN1_ITEM_end(tname)

# define ossl_ASN1_NDEF_SEQUENCE(tname) \
        ossl_ASN1_SEQUENCE(tname)

# define ossl_ASN1_NDEF_SEQUENCE_cb(tname, cb) \
        ossl_ASN1_SEQUENCE_cb(tname, cb)

# define ossl_ASN1_SEQUENCE_cb(tname, cb) \
        static const ossl_ASN1_AUX tname##_aux = {NULL, 0, 0, 0, cb, 0, NULL}; \
        ossl_ASN1_SEQUENCE(tname)

# define ossl_ASN1_SEQUENCE_const_cb(tname, const_cb) \
        static const ossl_ASN1_AUX tname##_aux = \
            {NULL, ossl_ASN1_AFLG_CONST_CB, 0, 0, NULL, 0, const_cb}; \
        ossl_ASN1_SEQUENCE(tname)

# define ossl_ASN1_SEQUENCE_cb_const_cb(tname, cb, const_cb) \
        static const ossl_ASN1_AUX tname##_aux = \
            {NULL, ossl_ASN1_AFLG_CONST_CB, 0, 0, cb, 0, const_cb}; \
        ossl_ASN1_SEQUENCE(tname)

# define ossl_ASN1_SEQUENCE_ref(tname, cb) \
        static const ossl_ASN1_AUX tname##_aux = {NULL, ossl_ASN1_AFLG_REFCOUNT, offsetof(tname, references), offsetof(tname, lock), cb, 0, NULL}; \
        ossl_ASN1_SEQUENCE(tname)

# define ossl_ASN1_SEQUENCE_enc(tname, enc, cb) \
        static const ossl_ASN1_AUX tname##_aux = {NULL, ossl_ASN1_AFLG_ENCODING, 0, 0, cb, offsetof(tname, enc), NULL}; \
        ossl_ASN1_SEQUENCE(tname)

# define ossl_ASN1_NDEF_SEQUENCE_END(tname) \
        ;\
        ossl_ASN1_ITEM_start(tname) \
                ossl_ASN1_ITYPE_NDEF_SEQUENCE,\
                ossl_V_ASN1_SEQUENCE,\
                tname##_seq_tt,\
                sizeof(tname##_seq_tt) / sizeof(ossl_ASN1_TEMPLATE),\
                NULL,\
                sizeof(tname),\
                #tname \
        ossl_ASN1_ITEM_end(tname)
# define ossl_static_ASN1_NDEF_SEQUENCE_END(tname) \
        ;\
        ossl_static_ASN1_ITEM_start(tname) \
                ossl_ASN1_ITYPE_NDEF_SEQUENCE,\
                ossl_V_ASN1_SEQUENCE,\
                tname##_seq_tt,\
                sizeof(tname##_seq_tt) / sizeof(ossl_ASN1_TEMPLATE),\
                NULL,\
                sizeof(tname),\
                #tname \
        ossl_ASN1_ITEM_end(tname)


# define ossl_ASN1_SEQUENCE_END_enc(stname, tname) ossl_ASN1_SEQUENCE_END_ref(stname, tname)

# define ossl_ASN1_SEQUENCE_END_cb(stname, tname) ossl_ASN1_SEQUENCE_END_ref(stname, tname)
# define ossl_static_ASN1_SEQUENCE_END_cb(stname, tname) ossl_static_ASN1_SEQUENCE_END_ref(stname, tname)

# define ossl_ASN1_SEQUENCE_END_ref(stname, tname) \
        ;\
        ossl_ASN1_ITEM_start(tname) \
                ossl_ASN1_ITYPE_SEQUENCE,\
                ossl_V_ASN1_SEQUENCE,\
                tname##_seq_tt,\
                sizeof(tname##_seq_tt) / sizeof(ossl_ASN1_TEMPLATE),\
                &tname##_aux,\
                sizeof(stname),\
                #tname \
        ossl_ASN1_ITEM_end(tname)
# define ossl_static_ASN1_SEQUENCE_END_ref(stname, tname) \
        ;\
        ossl_static_ASN1_ITEM_start(tname) \
                ossl_ASN1_ITYPE_SEQUENCE,\
                ossl_V_ASN1_SEQUENCE,\
                tname##_seq_tt,\
                sizeof(tname##_seq_tt) / sizeof(ossl_ASN1_TEMPLATE),\
                &tname##_aux,\
                sizeof(stname),\
                #stname \
        ossl_ASN1_ITEM_end(tname)

# define ossl_ASN1_NDEF_SEQUENCE_END_cb(stname, tname) \
        ;\
        ossl_ASN1_ITEM_start(tname) \
                ossl_ASN1_ITYPE_NDEF_SEQUENCE,\
                ossl_V_ASN1_SEQUENCE,\
                tname##_seq_tt,\
                sizeof(tname##_seq_tt) / sizeof(ossl_ASN1_TEMPLATE),\
                &tname##_aux,\
                sizeof(stname),\
                #stname \
        ossl_ASN1_ITEM_end(tname)

/*-
 * This pair helps declare a CHOICE type. We can do:
 *
 *      ossl_ASN1_CHOICE(chname) = {
 *              ... CHOICE options ...
 *      ossl_ASN1_CHOICE_END(chname)
 *
 *      This will produce an ossl_ASN1_ITEM called chname_it
 *      for a structure called chname. The structure
 *      definition must look like this:
 *      typedef struct {
 *              int type;
 *              union {
 *                      ossl_ASN1_SOMETHING *opt1;
 *                      ossl_ASN1_SOMEOTHER *opt2;
 *              } value;
 *      } chname;
 *
 *      the name of the selector must be 'type'.
 *      to use an alternative selector name use the
 *      ossl_ASN1_CHOICE_END_selector() version.
 */

# define ossl_ASN1_CHOICE(tname) \
        static const ossl_ASN1_TEMPLATE tname##_ch_tt[]

# define ossl_ASN1_CHOICE_cb(tname, cb) \
        static const ossl_ASN1_AUX tname##_aux = {NULL, 0, 0, 0, cb, 0, NULL}; \
        ossl_ASN1_CHOICE(tname)

# define ossl_ASN1_CHOICE_END(stname) ossl_ASN1_CHOICE_END_name(stname, stname)

# define ossl_static_ASN1_CHOICE_END(stname) ossl_static_ASN1_CHOICE_END_name(stname, stname)

# define ossl_ASN1_CHOICE_END_name(stname, tname) ossl_ASN1_CHOICE_END_selector(stname, tname, type)

# define ossl_static_ASN1_CHOICE_END_name(stname, tname) ossl_static_ASN1_CHOICE_END_selector(stname, tname, type)

# define ossl_ASN1_CHOICE_END_selector(stname, tname, selname) \
        ;\
        ossl_ASN1_ITEM_start(tname) \
                ossl_ASN1_ITYPE_CHOICE,\
                offsetof(stname,selname) ,\
                tname##_ch_tt,\
                sizeof(tname##_ch_tt) / sizeof(ossl_ASN1_TEMPLATE),\
                NULL,\
                sizeof(stname),\
                #stname \
        ossl_ASN1_ITEM_end(tname)

# define ossl_static_ASN1_CHOICE_END_selector(stname, tname, selname) \
        ;\
        ossl_static_ASN1_ITEM_start(tname) \
                ossl_ASN1_ITYPE_CHOICE,\
                offsetof(stname,selname) ,\
                tname##_ch_tt,\
                sizeof(tname##_ch_tt) / sizeof(ossl_ASN1_TEMPLATE),\
                NULL,\
                sizeof(stname),\
                #stname \
        ossl_ASN1_ITEM_end(tname)

# define ossl_ASN1_CHOICE_END_cb(stname, tname, selname) \
        ;\
        ossl_ASN1_ITEM_start(tname) \
                ossl_ASN1_ITYPE_CHOICE,\
                offsetof(stname,selname) ,\
                tname##_ch_tt,\
                sizeof(tname##_ch_tt) / sizeof(ossl_ASN1_TEMPLATE),\
                &tname##_aux,\
                sizeof(stname),\
                #stname \
        ossl_ASN1_ITEM_end(tname)

/* This helps with the template wrapper form of ossl_ASN1_ITEM */

# define ossl_ASN1_EX_TEMPLATE_TYPE(flags, tag, name, type) { \
        (flags), (tag), 0,\
        #name, ossl_ASN1_ITEM_ref(type) }

/* These help with SEQUENCE or CHOICE components */

/* used to declare other types */

# define ossl_ASN1_EX_TYPE(flags, tag, stname, field, type) { \
        (flags), (tag), offsetof(stname, field),\
        #field, ossl_ASN1_ITEM_ref(type) }

/* implicit and explicit helper macros */

# define ossl_ASN1_IMP_EX(stname, field, type, tag, ex) \
         ossl_ASN1_EX_TYPE(ossl_ASN1_TFLG_IMPLICIT | (ex), tag, stname, field, type)

# define ossl_ASN1_EXP_EX(stname, field, type, tag, ex) \
         ossl_ASN1_EX_TYPE(ossl_ASN1_TFLG_EXPLICIT | (ex), tag, stname, field, type)

/* Any defined by macros: the field used is in the table itself */

# define ossl_ASN1_ADB_OBJECT(tblname) { ossl_ASN1_TFLG_ADB_OID, -1, 0, #tblname, tblname##_adb }
# define ossl_ASN1_ADB_INTEGER(tblname) { ossl_ASN1_TFLG_ADB_INT, -1, 0, #tblname, tblname##_adb }

/* Plain simple type */
# define ossl_ASN1_SIMPLE(stname, field, type) ossl_ASN1_EX_TYPE(0,0, stname, field, type)
/* Embedded simple type */
# define ossl_ASN1_EMBED(stname, field, type) ossl_ASN1_EX_TYPE(ossl_ASN1_TFLG_EMBED,0, stname, field, type)

/* OPTIONAL simple type */
# define ossl_ASN1_OPT(stname, field, type) ossl_ASN1_EX_TYPE(ossl_ASN1_TFLG_OPTIONAL, 0, stname, field, type)
# define ossl_ASN1_OPT_EMBED(stname, field, type) ossl_ASN1_EX_TYPE(ossl_ASN1_TFLG_OPTIONAL|ossl_ASN1_TFLG_EMBED, 0, stname, field, type)

/* IMPLICIT tagged simple type */
# define ossl_ASN1_IMP(stname, field, type, tag) ossl_ASN1_IMP_EX(stname, field, type, tag, 0)
# define ossl_ASN1_IMP_EMBED(stname, field, type, tag) ossl_ASN1_IMP_EX(stname, field, type, tag, ossl_ASN1_TFLG_EMBED)

/* IMPLICIT tagged OPTIONAL simple type */
# define ossl_ASN1_IMP_OPT(stname, field, type, tag) ossl_ASN1_IMP_EX(stname, field, type, tag, ossl_ASN1_TFLG_OPTIONAL)
# define ossl_ASN1_IMP_OPT_EMBED(stname, field, type, tag) ossl_ASN1_IMP_EX(stname, field, type, tag, ossl_ASN1_TFLG_OPTIONAL|ossl_ASN1_TFLG_EMBED)

/* Same as above but EXPLICIT */

# define ossl_ASN1_EXP(stname, field, type, tag) ossl_ASN1_EXP_EX(stname, field, type, tag, 0)
# define ossl_ASN1_EXP_EMBED(stname, field, type, tag) ossl_ASN1_EXP_EX(stname, field, type, tag, ossl_ASN1_TFLG_EMBED)
# define ossl_ASN1_EXP_OPT(stname, field, type, tag) ossl_ASN1_EXP_EX(stname, field, type, tag, ossl_ASN1_TFLG_OPTIONAL)
# define ossl_ASN1_EXP_OPT_EMBED(stname, field, type, tag) ossl_ASN1_EXP_EX(stname, field, type, tag, ossl_ASN1_TFLG_OPTIONAL|ossl_ASN1_TFLG_EMBED)

/* SEQUENCE OF type */
# define ossl_ASN1_SEQUENCE_OF(stname, field, type) \
                ossl_ASN1_EX_TYPE(ossl_ASN1_TFLG_SEQUENCE_OF, 0, stname, field, type)

/* OPTIONAL SEQUENCE OF */
# define ossl_ASN1_SEQUENCE_OF_OPT(stname, field, type) \
                ossl_ASN1_EX_TYPE(ossl_ASN1_TFLG_SEQUENCE_OF|ossl_ASN1_TFLG_OPTIONAL, 0, stname, field, type)

/* Same as above but for SET OF */

# define ossl_ASN1_SET_OF(stname, field, type) \
                ossl_ASN1_EX_TYPE(ossl_ASN1_TFLG_SET_OF, 0, stname, field, type)

# define ossl_ASN1_SET_OF_OPT(stname, field, type) \
                ossl_ASN1_EX_TYPE(ossl_ASN1_TFLG_SET_OF|ossl_ASN1_TFLG_OPTIONAL, 0, stname, field, type)

/* Finally compound types of SEQUENCE, SET, IMPLICIT, EXPLICIT and OPTIONAL */

# define ossl_ASN1_IMP_SET_OF(stname, field, type, tag) \
                        ossl_ASN1_IMP_EX(stname, field, type, tag, ossl_ASN1_TFLG_SET_OF)

# define ossl_ASN1_EXP_SET_OF(stname, field, type, tag) \
                        ossl_ASN1_EXP_EX(stname, field, type, tag, ossl_ASN1_TFLG_SET_OF)

# define ossl_ASN1_IMP_SET_OF_OPT(stname, field, type, tag) \
                        ossl_ASN1_IMP_EX(stname, field, type, tag, ossl_ASN1_TFLG_SET_OF|ossl_ASN1_TFLG_OPTIONAL)

# define ossl_ASN1_EXP_SET_OF_OPT(stname, field, type, tag) \
                        ossl_ASN1_EXP_EX(stname, field, type, tag, ossl_ASN1_TFLG_SET_OF|ossl_ASN1_TFLG_OPTIONAL)

# define ossl_ASN1_IMP_SEQUENCE_OF(stname, field, type, tag) \
                        ossl_ASN1_IMP_EX(stname, field, type, tag, ossl_ASN1_TFLG_SEQUENCE_OF)

# define ossl_ASN1_IMP_SEQUENCE_OF_OPT(stname, field, type, tag) \
                        ossl_ASN1_IMP_EX(stname, field, type, tag, ossl_ASN1_TFLG_SEQUENCE_OF|ossl_ASN1_TFLG_OPTIONAL)

# define ossl_ASN1_EXP_SEQUENCE_OF(stname, field, type, tag) \
                        ossl_ASN1_EXP_EX(stname, field, type, tag, ossl_ASN1_TFLG_SEQUENCE_OF)

# define ossl_ASN1_EXP_SEQUENCE_OF_OPT(stname, field, type, tag) \
                        ossl_ASN1_EXP_EX(stname, field, type, tag, ossl_ASN1_TFLG_SEQUENCE_OF|ossl_ASN1_TFLG_OPTIONAL)

/* EXPLICIT using indefinite length constructed form */
# define ossl_ASN1_NDEF_EXP(stname, field, type, tag) \
                        ossl_ASN1_EXP_EX(stname, field, type, tag, ossl_ASN1_TFLG_NDEF)

/* EXPLICIT OPTIONAL using indefinite length constructed form */
# define ossl_ASN1_NDEF_EXP_OPT(stname, field, type, tag) \
                        ossl_ASN1_EXP_EX(stname, field, type, tag, ossl_ASN1_TFLG_OPTIONAL|ossl_ASN1_TFLG_NDEF)

/* Macros for the ossl_ASN1_ADB structure */

# define ossl_ASN1_ADB(name) \
        static const ossl_ASN1_ADB_TABLE name##_adbtbl[]

# define ossl_ASN1_ADB_END(name, flags, field, adb_cb, def, none) \
        ;\
        static const ossl_ASN1_ITEM *name##_adb(void) \
        { \
        static const ossl_ASN1_ADB internal_adb = \
                {\
                flags,\
                offsetof(name, field),\
                adb_cb,\
                name##_adbtbl,\
                sizeof(name##_adbtbl) / sizeof(ossl_ASN1_ADB_TABLE),\
                def,\
                none\
                }; \
                return (const ossl_ASN1_ITEM *) &internal_adb; \
        } \
        void dummy_function(void)

# define ossl_ADB_ENTRY(val, template) {val, template}

# define ossl_ASN1_ADB_TEMPLATE(name) \
        static const ossl_ASN1_TEMPLATE name##_tt

/*
 * This is the ASN1 template structure that defines a wrapper round the
 * actual type. It determines the actual position of the field in the value
 * structure, various flags such as OPTIONAL and the field name.
 */

struct ossl_ASN1_TEMPLATE_st {
    unsigned long flags;        /* Various flags */
    long tag;                   /* tag, not used if no tagging */
    unsigned long offset;       /* Offset of this field in structure */
    const char *field_name;     /* Field name */
    ossl_ASN1_ITEM_EXP *item;        /* Relevant ossl_ASN1_ITEM or ossl_ASN1_ADB */
};

/* Macro to extract ossl_ASN1_ITEM and ossl_ASN1_ADB pointer from ossl_ASN1_TEMPLATE */

# define ossl_ASN1_TEMPLATE_item(t) (t->item_ptr)
# define ossl_ASN1_TEMPLATE_adb(t) (t->item_ptr)

typedef struct ossl_ASN1_ADB_TABLE_st ossl_ASN1_ADB_TABLE;
typedef struct ossl_ASN1_ADB_st ossl_ASN1_ADB;

struct ossl_ASN1_ADB_st {
    unsigned long flags;        /* Various flags */
    unsigned long offset;       /* Offset of selector field */
    int (*adb_cb)(long *psel);  /* Application callback */
    const ossl_ASN1_ADB_TABLE *tbl;  /* Table of possible types */
    long tblcount;              /* Number of entries in tbl */
    const ossl_ASN1_TEMPLATE *default_tt; /* Type to use if no match */
    const ossl_ASN1_TEMPLATE *null_tt; /* Type to use if selector is NULL */
};

struct ossl_ASN1_ADB_TABLE_st {
    long value;                 /* NID for an object or value for an int */
    const ossl_ASN1_TEMPLATE tt;     /* item for this value */
};

/* template flags */

/* Field is optional */
# define ossl_ASN1_TFLG_OPTIONAL      (0x1)

/* Field is a SET OF */
# define ossl_ASN1_TFLG_SET_OF        (0x1 << 1)

/* Field is a SEQUENCE OF */
# define ossl_ASN1_TFLG_SEQUENCE_OF   (0x2 << 1)

/*
 * Special case: this refers to a SET OF that will be sorted into DER order
 * when encoded *and* the corresponding STACK will be modified to match the
 * new order.
 */
# define ossl_ASN1_TFLG_SET_ORDER     (0x3 << 1)

/* Mask for SET OF or SEQUENCE OF */
# define ossl_ASN1_TFLG_SK_MASK       (0x3 << 1)

/*
 * These flags mean the tag should be taken from the tag field. If EXPLICIT
 * then the underlying type is used for the inner tag.
 */

/* IMPLICIT tagging */
# define ossl_ASN1_TFLG_IMPTAG        (0x1 << 3)

/* EXPLICIT tagging, inner tag from underlying type */
# define ossl_ASN1_TFLG_EXPTAG        (0x2 << 3)

# define ossl_ASN1_TFLG_TAG_MASK      (0x3 << 3)

/* context specific IMPLICIT */
# define ossl_ASN1_TFLG_IMPLICIT      (ossl_ASN1_TFLG_IMPTAG|ossl_ASN1_TFLG_CONTEXT)

/* context specific EXPLICIT */
# define ossl_ASN1_TFLG_EXPLICIT      (ossl_ASN1_TFLG_EXPTAG|ossl_ASN1_TFLG_CONTEXT)

/*
 * If tagging is in force these determine the type of tag to use. Otherwise
 * the tag is determined by the underlying type. These values reflect the
 * actual octet format.
 */

/* Universal tag */
# define ossl_ASN1_TFLG_UNIVERSAL     (0x0<<6)
/* Application tag */
# define ossl_ASN1_TFLG_APPLICATION   (0x1<<6)
/* Context specific tag */
# define ossl_ASN1_TFLG_CONTEXT       (0x2<<6)
/* Private tag */
# define ossl_ASN1_TFLG_PRIVATE       (0x3<<6)

# define ossl_ASN1_TFLG_TAG_CLASS     (0x3<<6)

/*
 * These are for ANY DEFINED BY type. In this case the 'item' field points to
 * an ossl_ASN1_ADB structure which contains a table of values to decode the
 * relevant type
 */

# define ossl_ASN1_TFLG_ADB_MASK      (0x3<<8)

# define ossl_ASN1_TFLG_ADB_OID       (0x1<<8)

# define ossl_ASN1_TFLG_ADB_INT       (0x1<<9)

/*
 * This flag when present in a SEQUENCE OF, SET OF or EXPLICIT causes
 * indefinite length constructed encoding to be used if required.
 */

# define ossl_ASN1_TFLG_NDEF          (0x1<<11)

/* Field is embedded and not a pointer */
# define ossl_ASN1_TFLG_EMBED         (0x1 << 12)

/* This is the actual ASN1 item itself */

struct ossl_ASN1_ITEM_st {
    char itype;                 /* The item type, primitive, SEQUENCE, CHOICE
                                 * or extern */
    long utype;                 /* underlying type */
    const ossl_ASN1_TEMPLATE *templates; /* If SEQUENCE or CHOICE this contains
                                     * the contents */
    long tcount;                /* Number of templates if SEQUENCE or CHOICE */
    const void *funcs;          /* further data and type-specific functions */
    /* funcs can be ossl_ASN1_PRIMITIVE_FUNCS*, ossl_ASN1_EXTERN_FUNCS*, or ossl_ASN1_AUX* */
    long size;                  /* Structure size (usually) */
    const char *sname;          /* Structure name */
};

/*
 * Cache for ASN1 tag and length, so we don't keep re-reading it for things
 * like CHOICE
 */

struct ossl_ASN1_TLC_st {
    char valid;                 /* Values below are valid */
    int ret;                    /* return value */
    long plen;                  /* length */
    int ptag;                   /* class value */
    int pclass;                 /* class value */
    int hdrlen;                 /* header length */
};

/* Typedefs for ASN1 function pointers */
typedef int ossl_ASN1_ex_d2i(ossl_ASN1_VALUE **pval, const unsigned char **in, long len,
                        const ossl_ASN1_ITEM *it, int tag, int aclass, char opt,
                        ossl_ASN1_TLC *ctx);

typedef int ossl_ASN1_ex_d2i_ex(ossl_ASN1_VALUE **pval, const unsigned char **in, long len,
                           const ossl_ASN1_ITEM *it, int tag, int aclass, char opt,
                           ossl_ASN1_TLC *ctx, ossl_OSSL_LIB_CTX *libctx,
                           const char *propq);
typedef int ossl_ASN1_ex_i2d(const ossl_ASN1_VALUE **pval, unsigned char **out,
                        const ossl_ASN1_ITEM *it, int tag, int aclass);
typedef int ossl_ASN1_ex_new_func(ossl_ASN1_VALUE **pval, const ossl_ASN1_ITEM *it);
typedef int ossl_ASN1_ex_new_ex_func(ossl_ASN1_VALUE **pval, const ossl_ASN1_ITEM *it,
                                ossl_OSSL_LIB_CTX *libctx, const char *propq);
typedef void ossl_ASN1_ex_free_func(ossl_ASN1_VALUE **pval, const ossl_ASN1_ITEM *it);

typedef int ossl_ASN1_ex_print_func(ossl_BIO *out, const ossl_ASN1_VALUE **pval,
                               int indent, const char *fname,
                               const ossl_ASN1_PCTX *pctx);

typedef int ossl_ASN1_primitive_i2c(const ossl_ASN1_VALUE **pval, unsigned char *cont,
                               int *putype, const ossl_ASN1_ITEM *it);
typedef int ossl_ASN1_primitive_c2i(ossl_ASN1_VALUE **pval, const unsigned char *cont,
                               int len, int utype, char *free_cont,
                               const ossl_ASN1_ITEM *it);
typedef int ossl_ASN1_primitive_print(ossl_BIO *out, const ossl_ASN1_VALUE **pval,
                                 const ossl_ASN1_ITEM *it, int indent,
                                 const ossl_ASN1_PCTX *pctx);

typedef struct ossl_ASN1_EXTERN_FUNCS_st {
    void *app_data;
    ossl_ASN1_ex_new_func *asn1_ex_new;
    ossl_ASN1_ex_free_func *asn1_ex_free;
    ossl_ASN1_ex_free_func *asn1_ex_clear;
    ossl_ASN1_ex_d2i *asn1_ex_d2i;
    ossl_ASN1_ex_i2d *asn1_ex_i2d;
    ossl_ASN1_ex_print_func *asn1_ex_print;
    ossl_ASN1_ex_new_ex_func *asn1_ex_new_ex;
    ossl_ASN1_ex_d2i_ex *asn1_ex_d2i_ex;
} ossl_ASN1_EXTERN_FUNCS;

typedef struct ossl_ASN1_PRIMITIVE_FUNCS_st {
    void *app_data;
    unsigned long flags;
    ossl_ASN1_ex_new_func *prim_new;
    ossl_ASN1_ex_free_func *prim_free;
    ossl_ASN1_ex_free_func *prim_clear;
    ossl_ASN1_primitive_c2i *prim_c2i;
    ossl_ASN1_primitive_i2c *prim_i2c;
    ossl_ASN1_primitive_print *prim_print;
} ossl_ASN1_PRIMITIVE_FUNCS;

/*
 * This is the ossl_ASN1_AUX structure: it handles various miscellaneous
 * requirements. For example the use of reference counts and an informational
 * callback. The "informational callback" is called at various points during
 * the ASN1 encoding and decoding. It can be used to provide minor
 * customisation of the structures used. This is most useful where the
 * supplied routines *almost* do the right thing but need some extra help at
 * a few points. If the callback returns zero then it is assumed a fatal
 * error has occurred and the main operation should be abandoned. If major
 * changes in the default behaviour are required then an external type is
 * more appropriate.
 * For the operations ossl_ASN1_OP_I2D_PRE, ossl_ASN1_OP_I2D_POST, ossl_ASN1_OP_PRINT_PRE, and
 * ossl_ASN1_OP_PRINT_POST, meanwhile a variant of the callback with const parameter
 * 'in' is provided to make clear statically that its input is not modified. If
 * and only if this variant is in use the flag ossl_ASN1_AFLG_CONST_CB must be set.
 */

typedef int ossl_ASN1_aux_cb(int operation, ossl_ASN1_VALUE **in, const ossl_ASN1_ITEM *it,
                        void *exarg);
typedef int ossl_ASN1_aux_const_cb(int operation, const ossl_ASN1_VALUE **in,
                              const ossl_ASN1_ITEM *it, void *exarg);

typedef struct ossl_ASN1_AUX_st {
    void *app_data;
    int flags;
    int ref_offset;             /* Offset of reference value */
    int ref_lock;               /* Offset of lock value */
    ossl_ASN1_aux_cb *asn1_cb;
    int enc_offset;             /* Offset of ossl_ASN1_ENCODING structure */
    ossl_ASN1_aux_const_cb *asn1_const_cb; /* for ossl_ASN1_OP_I2D_ and ossl_ASN1_OP_PRINT_ */
} ossl_ASN1_AUX;

/* For print related callbacks exarg points to this structure */
typedef struct ossl_ASN1_PRINT_ARG_st {
    ossl_BIO *out;
    int indent;
    const ossl_ASN1_PCTX *pctx;
} ossl_ASN1_PRINT_ARG;

/* For streaming related callbacks exarg points to this structure */
typedef struct ossl_ASN1_STREAM_ARG_st {
    /* ossl_BIO to stream through */
    ossl_BIO *out;
    /* ossl_BIO with filters appended */
    ossl_BIO *ndef_bio;
    /* Streaming I/O boundary */
    unsigned char **boundary;
} ossl_ASN1_STREAM_ARG;

/* Flags in ossl_ASN1_AUX */

/* Use a reference count */
# define ossl_ASN1_AFLG_REFCOUNT      1
/* Save the encoding of structure (useful for signatures) */
# define ossl_ASN1_AFLG_ENCODING      2
/* The Sequence length is invalid */
# define ossl_ASN1_AFLG_BROKEN        4
/* Use the new asn1_const_cb */
# define ossl_ASN1_AFLG_CONST_CB      8

/* operation values for asn1_cb */

# define ossl_ASN1_OP_NEW_PRE         0
# define ossl_ASN1_OP_NEW_POST        1
# define ossl_ASN1_OP_FREE_PRE        2
# define ossl_ASN1_OP_FREE_POST       3
# define ossl_ASN1_OP_D2I_PRE         4
# define ossl_ASN1_OP_D2I_POST        5
# define ossl_ASN1_OP_I2D_PRE         6
# define ossl_ASN1_OP_I2D_POST        7
# define ossl_ASN1_OP_PRINT_PRE       8
# define ossl_ASN1_OP_PRINT_POST      9
# define ossl_ASN1_OP_STREAM_PRE      10
# define ossl_ASN1_OP_STREAM_POST     11
# define ossl_ASN1_OP_DETACHED_PRE    12
# define ossl_ASN1_OP_DETACHED_POST   13
# define ossl_ASN1_OP_DUP_PRE         14
# define ossl_ASN1_OP_DUP_POST        15
# define ossl_ASN1_OP_GET0_LIBCTX     16
# define ossl_ASN1_OP_GET0_PROPQ      17

/* Macro to implement a primitive type */
# define ossl_IMPLEMENT_ASN1_TYPE(stname) ossl_IMPLEMENT_ASN1_TYPE_ex(stname, stname, 0)
# define ossl_IMPLEMENT_ASN1_TYPE_ex(itname, vname, ex) \
                                ossl_ASN1_ITEM_start(itname) \
                                        ossl_ASN1_ITYPE_PRIMITIVE, V_##vname, NULL, 0, NULL, ex, #itname \
                                ossl_ASN1_ITEM_end(itname)

/* Macro to implement a multi string type */
# define ossl_IMPLEMENT_ASN1_MSTRING(itname, mask) \
                                ossl_ASN1_ITEM_start(itname) \
                                        ossl_ASN1_ITYPE_MSTRING, mask, NULL, 0, NULL, sizeof(ossl_ASN1_STRING), #itname \
                                ossl_ASN1_ITEM_end(itname)

# define ossl_IMPLEMENT_EXTERN_ASN1(sname, tag, fptrs) \
        ossl_ASN1_ITEM_start(sname) \
                ossl_ASN1_ITYPE_EXTERN, \
                tag, \
                NULL, \
                0, \
                &fptrs, \
                0, \
                #sname \
        ossl_ASN1_ITEM_end(sname)

/* Macro to implement standard functions in terms of ossl_ASN1_ITEM structures */

# define ossl_IMPLEMENT_ASN1_FUNCTIONS(stname) ossl_IMPLEMENT_ASN1_FUNCTIONS_fname(stname, stname, stname)

# define ossl_IMPLEMENT_ASN1_FUNCTIONS_name(stname, itname) ossl_IMPLEMENT_ASN1_FUNCTIONS_fname(stname, itname, itname)

# define ossl_IMPLEMENT_ASN1_FUNCTIONS_ENCODE_name(stname, itname) \
                        IMPLEMENT_ASN1_FUNCTIONS_ENCODE_fname(stname, itname, itname)

# define ossl_IMPLEMENT_STATIC_ASN1_ALLOC_FUNCTIONS(stname) \
                ossl_IMPLEMENT_ASN1_ALLOC_FUNCTIONS_pfname(static, stname, stname, stname)

# define ossl_IMPLEMENT_ASN1_ALLOC_FUNCTIONS(stname) \
                ossl_IMPLEMENT_ASN1_ALLOC_FUNCTIONS_fname(stname, stname, stname)

# define ossl_IMPLEMENT_ASN1_ALLOC_FUNCTIONS_pfname(pre, stname, itname, fname) \
        pre stname *fname##_new(void) \
        { \
                return (stname *)ossl_ASN1_item_new(ossl_ASN1_ITEM_rptr(itname)); \
        } \
        pre void fname##_free(stname *a) \
        { \
                ossl_ASN1_item_free((ossl_ASN1_VALUE *)a, ossl_ASN1_ITEM_rptr(itname)); \
        }

# define ossl_IMPLEMENT_ASN1_ALLOC_FUNCTIONS_fname(stname, itname, fname) \
        stname *fname##_new(void) \
        { \
                return (stname *)ossl_ASN1_item_new(ossl_ASN1_ITEM_rptr(itname)); \
        } \
        void fname##_free(stname *a) \
        { \
                ossl_ASN1_item_free((ossl_ASN1_VALUE *)a, ossl_ASN1_ITEM_rptr(itname)); \
        }

# define ossl_IMPLEMENT_ASN1_FUNCTIONS_fname(stname, itname, fname) \
        ossl_IMPLEMENT_ASN1_ENCODE_FUNCTIONS_fname(stname, itname, fname) \
        ossl_IMPLEMENT_ASN1_ALLOC_FUNCTIONS_fname(stname, itname, fname)

# define ossl_IMPLEMENT_ASN1_ENCODE_FUNCTIONS_fname(stname, itname, fname) \
        stname *ossl_d2i_##fname(stname **a, const unsigned char **in, long len) \
        { \
                return (stname *)ossl_ASN1_item_d2i((ossl_ASN1_VALUE **)a, in, len, ossl_ASN1_ITEM_rptr(itname));\
        } \
        int ossl_i2d_##fname(const stname *a, unsigned char **out) \
        { \
                return ossl_ASN1_item_i2d((const ossl_ASN1_VALUE *)a, out, ossl_ASN1_ITEM_rptr(itname));\
        }

# define ossl_IMPLEMENT_ASN1_NDEF_FUNCTION(stname) \
        int ossl_i2d_##stname##_NDEF(const stname *a, unsigned char **out) \
        { \
                return ossl_ASN1_item_ndef_i2d((const ossl_ASN1_VALUE *)a, out, ossl_ASN1_ITEM_rptr(stname));\
        }

# define ossl_IMPLEMENT_STATIC_ASN1_ENCODE_FUNCTIONS(stname) \
        static stname *ossl_d2i_##stname(stname **a, \
                                   const unsigned char **in, long len) \
        { \
                return (stname *)ossl_ASN1_item_d2i((ossl_ASN1_VALUE **)a, in, len, \
                                               ossl_ASN1_ITEM_rptr(stname)); \
        } \
        static int ossl_i2d_##stname(const stname *a, unsigned char **out) \
        { \
                return ossl_ASN1_item_i2d((const ossl_ASN1_VALUE *)a, out, \
                                     ossl_ASN1_ITEM_rptr(stname)); \
        }

# define ossl_IMPLEMENT_ASN1_DUP_FUNCTION(stname) \
        stname * stname##_dup(const stname *x) \
        { \
        return ossl_ASN1_item_dup(ossl_ASN1_ITEM_rptr(stname), x); \
        }

# define ossl_IMPLEMENT_ASN1_PRINT_FUNCTION(stname) \
        ossl_IMPLEMENT_ASN1_PRINT_FUNCTION_fname(stname, stname, stname)

# define ossl_IMPLEMENT_ASN1_PRINT_FUNCTION_fname(stname, itname, fname) \
        int fname##_print_ctx(ossl_BIO *out, const stname *x, int indent, \
                                                const ossl_ASN1_PCTX *pctx) \
        { \
                return ossl_ASN1_item_print(out, (const ossl_ASN1_VALUE *)x, indent, \
                        ossl_ASN1_ITEM_rptr(itname), pctx); \
        }

/* external definitions for primitive types */

ossl_DECLARE_ASN1_ITEM(ossl_ASN1_BOOLEAN)
ossl_DECLARE_ASN1_ITEM(ossl_ASN1_TBOOLEAN)
ossl_DECLARE_ASN1_ITEM(ossl_ASN1_FBOOLEAN)
ossl_DECLARE_ASN1_ITEM(ossl_ASN1_SEQUENCE)
ossl_DECLARE_ASN1_ITEM(CBIGNUM)
ossl_DECLARE_ASN1_ITEM(ossl_BIGNUM)
ossl_DECLARE_ASN1_ITEM(INT32)
ossl_DECLARE_ASN1_ITEM(ZINT32)
ossl_DECLARE_ASN1_ITEM(UINT32)
ossl_DECLARE_ASN1_ITEM(ZUINT32)
ossl_DECLARE_ASN1_ITEM(INT64)
ossl_DECLARE_ASN1_ITEM(ZINT64)
ossl_DECLARE_ASN1_ITEM(UINT64)
ossl_DECLARE_ASN1_ITEM(ZUINT64)

# ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
/*
 * LONG and ZLONG are strongly discouraged for use as stored data, as the
 * underlying C type (long) differs in size depending on the architecture.
 * They are designed with 32-bit longs in mind.
 */
ossl_DECLARE_ASN1_ITEM(LONG)
ossl_DECLARE_ASN1_ITEM(ZLONG)
# endif

ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_ASN1_VALUE, ossl_ASN1_VALUE, ossl_ASN1_VALUE)
#define ossl_sk_ASN1_VALUE_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_ASN1_VALUE_sk_type(sk))
#define ossl_sk_ASN1_VALUE_value(sk, idx) ((ossl_ASN1_VALUE *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_ASN1_VALUE_sk_type(sk), (idx)))
#define ossl_sk_ASN1_VALUE_new(cmp) ((ossl_STACK_OF(ossl_ASN1_VALUE) *)ossl_OPENSSL_sk_new(ossl_ossl_check_ASN1_VALUE_compfunc_type(cmp)))
#define ossl_sk_ASN1_VALUE_new_null() ((ossl_STACK_OF(ossl_ASN1_VALUE) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_ASN1_VALUE_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_ASN1_VALUE) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_ASN1_VALUE_compfunc_type(cmp), (n)))
#define ossl_sk_ASN1_VALUE_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_ASN1_VALUE_sk_type(sk), (n))
#define ossl_sk_ASN1_VALUE_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_ASN1_VALUE_sk_type(sk))
#define ossl_sk_ASN1_VALUE_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_ASN1_VALUE_sk_type(sk))
#define ossl_sk_ASN1_VALUE_delete(sk, i) ((ossl_ASN1_VALUE *)ossl_OPENSSL_sk_delete(ossl_ossl_check_ASN1_VALUE_sk_type(sk), (i)))
#define ossl_sk_ASN1_VALUE_delete_ptr(sk, ptr) ((ossl_ASN1_VALUE *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_ASN1_VALUE_sk_type(sk), ossl_ossl_check_ASN1_VALUE_type(ptr)))
#define ossl_sk_ASN1_VALUE_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_ASN1_VALUE_sk_type(sk), ossl_ossl_check_ASN1_VALUE_type(ptr))
#define ossl_sk_ASN1_VALUE_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_ASN1_VALUE_sk_type(sk), ossl_ossl_check_ASN1_VALUE_type(ptr))
#define ossl_sk_ASN1_VALUE_pop(sk) ((ossl_ASN1_VALUE *)ossl_OPENSSL_sk_pop(ossl_ossl_check_ASN1_VALUE_sk_type(sk)))
#define ossl_sk_ASN1_VALUE_shift(sk) ((ossl_ASN1_VALUE *)ossl_OPENSSL_sk_shift(ossl_ossl_check_ASN1_VALUE_sk_type(sk)))
#define ossl_sk_ASN1_VALUE_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_ASN1_VALUE_sk_type(sk),ossl_ossl_check_ASN1_VALUE_freefunc_type(freefunc))
#define ossl_sk_ASN1_VALUE_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_ASN1_VALUE_sk_type(sk), ossl_ossl_check_ASN1_VALUE_type(ptr), (idx))
#define ossl_sk_ASN1_VALUE_set(sk, idx, ptr) ((ossl_ASN1_VALUE *)ossl_OPENSSL_sk_set(ossl_ossl_check_ASN1_VALUE_sk_type(sk), (idx), ossl_ossl_check_ASN1_VALUE_type(ptr)))
#define ossl_sk_ASN1_VALUE_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_ASN1_VALUE_sk_type(sk), ossl_ossl_check_ASN1_VALUE_type(ptr))
#define ossl_sk_ASN1_VALUE_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_ASN1_VALUE_sk_type(sk), ossl_ossl_check_ASN1_VALUE_type(ptr))
#define ossl_sk_ASN1_VALUE_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_ASN1_VALUE_sk_type(sk), ossl_ossl_check_ASN1_VALUE_type(ptr), pnum)
#define ossl_sk_ASN1_VALUE_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_ASN1_VALUE_sk_type(sk))
#define ossl_sk_ASN1_VALUE_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_ASN1_VALUE_sk_type(sk))
#define ossl_sk_ASN1_VALUE_dup(sk) ((ossl_STACK_OF(ossl_ASN1_VALUE) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_ASN1_VALUE_sk_type(sk)))
#define ossl_sk_ASN1_VALUE_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_ASN1_VALUE) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_ASN1_VALUE_sk_type(sk), ossl_ossl_check_ASN1_VALUE_copyfunc_type(copyfunc), ossl_ossl_check_ASN1_VALUE_freefunc_type(freefunc)))
#define ossl_sk_ASN1_VALUE_set_cmp_func(sk, cmp) ((ossl_sk_ASN1_VALUE_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_ASN1_VALUE_sk_type(sk), ossl_ossl_check_ASN1_VALUE_compfunc_type(cmp)))



/* Functions used internally by the ASN1 code */

int ossl_ASN1_item_ex_new(ossl_ASN1_VALUE **pval, const ossl_ASN1_ITEM *it);
void ossl_ASN1_item_ex_free(ossl_ASN1_VALUE **pval, const ossl_ASN1_ITEM *it);

int ossl_ASN1_item_ex_d2i(ossl_ASN1_VALUE **pval, const unsigned char **in, long len,
                     const ossl_ASN1_ITEM *it, int tag, int aclass, char opt,
                     ossl_ASN1_TLC *ctx);

int ossl_ASN1_item_ex_i2d(const ossl_ASN1_VALUE **pval, unsigned char **out,
                     const ossl_ASN1_ITEM *it, int tag, int aclass);

/* Legacy compatibility */
# define ossl_IMPLEMENT_ASN1_FUNCTIONS_const(name) ossl_IMPLEMENT_ASN1_FUNCTIONS(name)
# define ossl_IMPLEMENT_ASN1_ENCODE_FUNCTIONS_const_fname(stname, itname, fname) \
         ossl_IMPLEMENT_ASN1_ENCODE_FUNCTIONS_fname(stname, itname, fname)

#ifdef  __cplusplus
}
#endif
#endif
