/*
 * WARNING: do not edit!
 * Generated by Makefile from ../../../openssl/source/include/openssl/crypto.h.in
 *
 * Copyright 1995-2022 The OpenSSL Project Authors. All Rights Reserved.
 * Copyright (c) 2002, Oracle and/or its affiliates. All rights reserved
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



#ifndef ossl_OPENSSL_CRYPTO_H
# define ossl_OPENSSL_CRYPTO_H
# pragma once

# include "ossl/openssl/macros.h"
# ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
#  define ossl_HEADER_CRYPTO_H
# endif

# include <stdlib.h>
# include <time.h>

# include "ossl/openssl/e_os2.h"

# ifndef ossl_OPENSSL_NO_STDIO
#  include <stdio.h>
# endif

# include "ossl/openssl/safestack.h"
# include "ossl/openssl/opensslv.h"
# include "ossl/openssl/types.h"
# include "ossl/openssl/opensslconf.h"
# include "ossl/openssl/cryptoerr.h"
# include "ossl/openssl/core.h"

# ifdef CHARSET_EBCDIC
#  include "ossl/openssl/ebcdic.h"
# endif

/*
 * Resolve problems on some operating systems with symbol names that clash
 * one way or another
 */
# include "ossl/openssl/symhacks.h"

# ifndef ossl_OPENSSL_NO_DEPRECATED_1_1_0
#  include "ossl/openssl/opensslv.h"
# endif

#ifdef  __cplusplus
extern "C" {
#endif

# ifndef ossl_OPENSSL_NO_DEPRECATED_1_1_0
#  define ossl_SSLeay                  ossl_OpenSSL_version_num
#  define ossl_SSLeay_version          ossl_OpenSSL_version
#  define ossl_SSLEAY_VERSION_NUMBER   ossl_OPENSSL_VERSION_NUMBER
#  define ossl_SSLEAY_VERSION          ossl_OPENSSL_VERSION
#  define ossl_SSLEAY_CFLAGS           ossl_OPENSSL_CFLAGS
#  define ossl_SSLEAY_BUILT_ON         ossl_OPENSSL_BUILT_ON
#  define ossl_SSLEAY_PLATFORM         ossl_OPENSSL_PLATFORM
#  define ossl_SSLEAY_DIR              ossl_OPENSSL_DIR

/*
 * Old type for allocating dynamic locks. No longer used. Use the new thread
 * API instead.
 */
typedef struct {
    int dummy;
} ossl_CRYPTO_dynlock;

# endif /* ossl_OPENSSL_NO_DEPRECATED_1_1_0 */

typedef void ossl_CRYPTO_RWLOCK;

ossl_CRYPTO_RWLOCK *ossl_CRYPTO_THREAD_lock_new(void);
ossl___owur int ossl_CRYPTO_THREAD_read_lock(ossl_CRYPTO_RWLOCK *lock);
ossl___owur int ossl_CRYPTO_THREAD_write_lock(ossl_CRYPTO_RWLOCK *lock);
int ossl_CRYPTO_THREAD_unlock(ossl_CRYPTO_RWLOCK *lock);
void ossl_CRYPTO_THREAD_lock_free(ossl_CRYPTO_RWLOCK *lock);

int ossl_CRYPTO_atomic_add(int *val, int amount, int *ret, ossl_CRYPTO_RWLOCK *lock);
int ossl_CRYPTO_atomic_or(uint64_t *val, uint64_t op, uint64_t *ret,
                     ossl_CRYPTO_RWLOCK *lock);
int ossl_CRYPTO_atomic_load(uint64_t *val, uint64_t *ret, ossl_CRYPTO_RWLOCK *lock);

/* No longer needed, so this is a no-op */
#define ossl_OPENSSL_malloc_init() while(0) continue

# define ossl_OPENSSL_malloc(num) \
        ossl_CRYPTO_malloc(num, ossl_OPENSSL_FILE, ossl_OPENSSL_LINE)
# define ossl_OPENSSL_zalloc(num) \
        ossl_CRYPTO_zalloc(num, ossl_OPENSSL_FILE, ossl_OPENSSL_LINE)
# define ossl_OPENSSL_realloc(addr, num) \
        ossl_CRYPTO_realloc(addr, num, ossl_OPENSSL_FILE, ossl_OPENSSL_LINE)
# define ossl_OPENSSL_clear_realloc(addr, old_num, num) \
        ossl_CRYPTO_clear_realloc(addr, old_num, num, ossl_OPENSSL_FILE, ossl_OPENSSL_LINE)
# define ossl_OPENSSL_clear_free(addr, num) \
        ossl_CRYPTO_clear_free(addr, num, ossl_OPENSSL_FILE, ossl_OPENSSL_LINE)
# define ossl_OPENSSL_free(addr) \
        ossl_CRYPTO_free(addr, ossl_OPENSSL_FILE, ossl_OPENSSL_LINE)
# define ossl_OPENSSL_memdup(str, s) \
        ossl_CRYPTO_memdup((str), s, ossl_OPENSSL_FILE, ossl_OPENSSL_LINE)
# define ossl_OPENSSL_strdup(str) \
        ossl_CRYPTO_strdup(str, ossl_OPENSSL_FILE, ossl_OPENSSL_LINE)
# define ossl_OPENSSL_strndup(str, n) \
        ossl_CRYPTO_strndup(str, n, ossl_OPENSSL_FILE, ossl_OPENSSL_LINE)
# define ossl_OPENSSL_secure_malloc(num) \
        ossl_CRYPTO_secure_malloc(num, ossl_OPENSSL_FILE, ossl_OPENSSL_LINE)
# define ossl_OPENSSL_secure_zalloc(num) \
        ossl_CRYPTO_secure_zalloc(num, ossl_OPENSSL_FILE, ossl_OPENSSL_LINE)
# define ossl_OPENSSL_secure_free(addr) \
        ossl_CRYPTO_secure_free(addr, ossl_OPENSSL_FILE, ossl_OPENSSL_LINE)
# define ossl_OPENSSL_secure_clear_free(addr, num) \
        ossl_CRYPTO_secure_clear_free(addr, num, ossl_OPENSSL_FILE, ossl_OPENSSL_LINE)
# define ossl_OPENSSL_secure_actual_size(ptr) \
        ossl_CRYPTO_secure_actual_size(ptr)

size_t ossl_OPENSSL_strlcpy(char *dst, const char *src, size_t siz);
size_t ossl_OPENSSL_strlcat(char *dst, const char *src, size_t siz);
size_t ossl_OPENSSL_strnlen(const char *str, size_t maxlen);
int ossl_OPENSSL_buf2hexstr_ex(char *str, size_t str_n, size_t *strlength,
                          const unsigned char *buf, size_t buflen,
                          const char sep);
char *ossl_OPENSSL_buf2hexstr(const unsigned char *buf, long buflen);
int ossl_OPENSSL_hexstr2buf_ex(unsigned char *buf, size_t buf_n, size_t *buflen,
                          const char *str, const char sep);
unsigned char *ossl_OPENSSL_hexstr2buf(const char *str, long *buflen);
int ossl_OPENSSL_hexchar2int(unsigned char c);
int ossl_OPENSSL_strcasecmp(const char *s1, const char *s2);
int ossl_OPENSSL_strncasecmp(const char *s1, const char *s2, size_t n);

# define ossl_OPENSSL_MALLOC_MAX_NELEMS(type)  (((1U<<(sizeof(int)*8-1))-1)/sizeof(type))

/*
 * These functions return the values of ossl_OPENSSL_VERSION_MAJOR,
 * ossl_OPENSSL_VERSION_MINOR, ossl_OPENSSL_VERSION_PATCH, ossl_OPENSSL_VERSION_PRE_RELEASE
 * and ossl_OPENSSL_VERSION_BUILD_METADATA, respectively.
 */
unsigned int ossl_OPENSSL_version_major(void);
unsigned int ossl_OPENSSL_version_minor(void);
unsigned int ossl_OPENSSL_version_patch(void);
const char *ossl_OPENSSL_version_pre_release(void);
const char *ossl_OPENSSL_version_build_metadata(void);

unsigned long ossl_OpenSSL_version_num(void);
const char *ossl_OpenSSL_version(int type);
# define ossl_OPENSSL_VERSION                0
# define ossl_OPENSSL_CFLAGS                 1
# define ossl_OPENSSL_BUILT_ON               2
# define ossl_OPENSSL_PLATFORM               3
# define ossl_OPENSSL_DIR                    4
# define ossl_OPENSSL_ENGINES_DIR            5
# define ossl_OPENSSL_VERSION_STRING         6
# define ossl_OPENSSL_FULL_VERSION_STRING    7
# define ossl_OPENSSL_MODULES_DIR            8
# define ossl_OPENSSL_CPU_INFO               9

const char *ossl_OPENSSL_info(int type);
/*
 * The series starts at 1001 to avoid confusion with the ossl_OpenSSL_version
 * types.
 */
# define ossl_OPENSSL_INFO_CONFIG_DIR                1001
# define ossl_OPENSSL_INFO_ENGINES_DIR               1002
# define ossl_OPENSSL_INFO_MODULES_DIR               1003
# define ossl_OPENSSL_INFO_DSO_EXTENSION             1004
# define ossl_OPENSSL_INFO_DIR_FILENAME_SEPARATOR    1005
# define ossl_OPENSSL_INFO_LIST_SEPARATOR            1006
# define ossl_OPENSSL_INFO_SEED_SOURCE               1007
# define ossl_OPENSSL_INFO_CPU_SETTINGS              1008

int ossl_OPENSSL_issetugid(void);

struct ossl_crypto_ex_data_st {
    ossl_OSSL_LIB_CTX *ctx;
    ossl_STACK_OF(void) *sk;
};

ossl_SKM_DEFINE_STACK_OF_INTERNAL(void, void, void)
#define ossl_sk_void_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_void_sk_type(sk))
#define ossl_sk_void_value(sk, idx) ((void *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_void_sk_type(sk), (idx)))
#define ossl_sk_void_new(cmp) ((ossl_STACK_OF(void) *)ossl_OPENSSL_sk_new(ossl_ossl_check_void_compfunc_type(cmp)))
#define ossl_sk_void_new_null() ((ossl_STACK_OF(void) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_void_new_reserve(cmp, n) ((ossl_STACK_OF(void) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_void_compfunc_type(cmp), (n)))
#define ossl_sk_void_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_void_sk_type(sk), (n))
#define ossl_sk_void_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_void_sk_type(sk))
#define ossl_sk_void_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_void_sk_type(sk))
#define ossl_sk_void_delete(sk, i) ((void *)ossl_OPENSSL_sk_delete(ossl_ossl_check_void_sk_type(sk), (i)))
#define ossl_sk_void_delete_ptr(sk, ptr) ((void *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_void_sk_type(sk), ossl_ossl_check_void_type(ptr)))
#define ossl_sk_void_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_void_sk_type(sk), ossl_ossl_check_void_type(ptr))
#define ossl_sk_void_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_void_sk_type(sk), ossl_ossl_check_void_type(ptr))
#define ossl_sk_void_pop(sk) ((void *)ossl_OPENSSL_sk_pop(ossl_ossl_check_void_sk_type(sk)))
#define ossl_sk_void_shift(sk) ((void *)ossl_OPENSSL_sk_shift(ossl_ossl_check_void_sk_type(sk)))
#define ossl_sk_void_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_void_sk_type(sk),ossl_ossl_check_void_freefunc_type(freefunc))
#define ossl_sk_void_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_void_sk_type(sk), ossl_ossl_check_void_type(ptr), (idx))
#define ossl_sk_void_set(sk, idx, ptr) ((void *)ossl_OPENSSL_sk_set(ossl_ossl_check_void_sk_type(sk), (idx), ossl_ossl_check_void_type(ptr)))
#define ossl_sk_void_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_void_sk_type(sk), ossl_ossl_check_void_type(ptr))
#define ossl_sk_void_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_void_sk_type(sk), ossl_ossl_check_void_type(ptr))
#define ossl_sk_void_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_void_sk_type(sk), ossl_ossl_check_void_type(ptr), pnum)
#define ossl_sk_void_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_void_sk_type(sk))
#define ossl_sk_void_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_void_sk_type(sk))
#define ossl_sk_void_dup(sk) ((ossl_STACK_OF(void) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_void_sk_type(sk)))
#define ossl_sk_void_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(void) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_void_sk_type(sk), ossl_ossl_check_void_copyfunc_type(copyfunc), ossl_ossl_check_void_freefunc_type(freefunc)))
#define ossl_sk_void_set_cmp_func(sk, cmp) ((ossl_sk_void_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_void_sk_type(sk), ossl_ossl_check_void_compfunc_type(cmp)))



/*
 * Per class, we have a STACK of function pointers.
 */
# define ossl_CRYPTO_EX_INDEX_SSL              0
# define ossl_CRYPTO_EX_INDEX_SSL_CTX          1
# define ossl_CRYPTO_EX_INDEX_SSL_SESSION      2
# define ossl_CRYPTO_EX_INDEX_X509             3
# define ossl_CRYPTO_EX_INDEX_X509_STORE       4
# define ossl_CRYPTO_EX_INDEX_X509_STORE_CTX   5
# define ossl_CRYPTO_EX_INDEX_DH               6
# define ossl_CRYPTO_EX_INDEX_DSA              7
# define ossl_CRYPTO_EX_INDEX_EC_KEY           8
# define ossl_CRYPTO_EX_INDEX_RSA              9
# define ossl_CRYPTO_EX_INDEX_ENGINE          10
# define ossl_CRYPTO_EX_INDEX_UI              11
# define ossl_CRYPTO_EX_INDEX_BIO             12
# define ossl_CRYPTO_EX_INDEX_APP             13
# define ossl_CRYPTO_EX_INDEX_UI_METHOD       14
# define ossl_CRYPTO_EX_INDEX_RAND_DRBG       15
# define ossl_CRYPTO_EX_INDEX_DRBG            ossl_CRYPTO_EX_INDEX_RAND_DRBG
# define ossl_CRYPTO_EX_INDEX_OSSL_LIB_CTX    16
# define ossl_CRYPTO_EX_INDEX_EVP_PKEY        17
# define ossl_CRYPTO_EX_INDEX__COUNT          18

typedef void ossl_CRYPTO_EX_new (void *parent, void *ptr, ossl_CRYPTO_EX_DATA *ad,
                           int idx, long argl, void *argp);
typedef void ossl_CRYPTO_EX_free (void *parent, void *ptr, ossl_CRYPTO_EX_DATA *ad,
                             int idx, long argl, void *argp);
typedef int ossl_CRYPTO_EX_dup (ossl_CRYPTO_EX_DATA *to, const ossl_CRYPTO_EX_DATA *from,
                           void **from_d, int idx, long argl, void *argp);
ossl___owur int ossl_CRYPTO_get_ex_new_index(int class_index, long argl, void *argp,
                                   ossl_CRYPTO_EX_new *new_func,
                                   ossl_CRYPTO_EX_dup *dup_func,
                                   ossl_CRYPTO_EX_free *free_func);
/* No longer use an index. */
int ossl_CRYPTO_free_ex_index(int class_index, int idx);

/*
 * Initialise/duplicate/free ossl_CRYPTO_EX_DATA variables corresponding to a
 * given class (invokes whatever per-class callbacks are applicable)
 */
int ossl_CRYPTO_new_ex_data(int class_index, void *obj, ossl_CRYPTO_EX_DATA *ad);
int ossl_CRYPTO_dup_ex_data(int class_index, ossl_CRYPTO_EX_DATA *to,
                       const ossl_CRYPTO_EX_DATA *from);

void ossl_CRYPTO_free_ex_data(int class_index, void *obj, ossl_CRYPTO_EX_DATA *ad);

/* Allocate a single item in the ossl_CRYPTO_EX_DATA variable */
int ossl_CRYPTO_alloc_ex_data(int class_index, void *obj, ossl_CRYPTO_EX_DATA *ad,
                         int idx);

/*
 * Get/set data in a ossl_CRYPTO_EX_DATA variable corresponding to a particular
 * index (relative to the class type involved)
 */
int ossl_CRYPTO_set_ex_data(ossl_CRYPTO_EX_DATA *ad, int idx, void *val);
void *ossl_CRYPTO_get_ex_data(const ossl_CRYPTO_EX_DATA *ad, int idx);

# ifndef ossl_OPENSSL_NO_DEPRECATED_1_1_0
/*
 * This function cleans up all "ex_data" state. It mustn't be called under
 * potential race-conditions.
 */
# define ossl_CRYPTO_cleanup_all_ex_data() while(0) continue

/*
 * The old locking functions have been removed completely without compatibility
 * macros. This is because the old functions either could not properly report
 * errors, or the returned error values were not clearly documented.
 * Replacing the locking functions with no-ops would cause race condition
 * issues in the affected applications. It is far better for them to fail at
 * compile time.
 * On the other hand, the locking callbacks are no longer used.  Consequently,
 * the callback management functions can be safely replaced with no-op macros.
 */
#  define ossl_CRYPTO_num_locks()            (1)
#  define ossl_CRYPTO_set_locking_callback(func)
#  define ossl_CRYPTO_get_locking_callback()         (NULL)
#  define ossl_CRYPTO_set_add_lock_callback(func)
#  define ossl_CRYPTO_get_add_lock_callback()        (NULL)

/*
 * These defines where used in combination with the old locking callbacks,
 * they are not called anymore, but old code that's not called might still
 * use them.
 */
#  define ossl_CRYPTO_LOCK             1
#  define ossl_CRYPTO_UNLOCK           2
#  define ossl_CRYPTO_READ             4
#  define ossl_CRYPTO_WRITE            8

/* This structure is no longer used */
typedef struct ossl_crypto_threadid_st {
    int dummy;
} ossl_CRYPTO_THREADID;
/* Only use CRYPTO_THREADID_set_[numeric|pointer]() within callbacks */
#  define ossl_CRYPTO_THREADID_set_numeric(id, val)
#  define ossl_CRYPTO_THREADID_set_pointer(id, ptr)
#  define ossl_CRYPTO_THREADID_set_callback(threadid_func)   (0)
#  define ossl_CRYPTO_THREADID_get_callback()                (NULL)
#  define ossl_CRYPTO_THREADID_current(id)
#  define ossl_CRYPTO_THREADID_cmp(a, b)                     (-1)
#  define ossl_CRYPTO_THREADID_cpy(dest, src)
#  define ossl_CRYPTO_THREADID_hash(id)                      (0UL)

#  ifndef ossl_OPENSSL_NO_DEPRECATED_1_0_0
#   define ossl_CRYPTO_set_id_callback(func)
#   define ossl_CRYPTO_get_id_callback()                     (NULL)
#   define ossl_CRYPTO_thread_id()                           (0UL)
#  endif /* ossl_OPENSSL_NO_DEPRECATED_1_0_0 */

#  define ossl_CRYPTO_set_dynlock_create_callback(dyn_create_function)
#  define ossl_CRYPTO_set_dynlock_lock_callback(dyn_lock_function)
#  define ossl_CRYPTO_set_dynlock_destroy_callback(dyn_destroy_function)
#  define ossl_CRYPTO_get_dynlock_create_callback()          (NULL)
#  define ossl_CRYPTO_get_dynlock_lock_callback()            (NULL)
#  define ossl_CRYPTO_get_dynlock_destroy_callback()         (NULL)
# endif /* ossl_OPENSSL_NO_DEPRECATED_1_1_0 */

typedef void *(*ossl_CRYPTO_malloc_fn)(size_t num, const char *file, int line);
typedef void *(*ossl_CRYPTO_realloc_fn)(void *addr, size_t num, const char *file,
                                   int line);
typedef void (*ossl_CRYPTO_free_fn)(void *addr, const char *file, int line);
int ossl_CRYPTO_set_mem_functions(ossl_CRYPTO_malloc_fn malloc_fn,
                             ossl_CRYPTO_realloc_fn realloc_fn,
                             ossl_CRYPTO_free_fn free_fn);
void ossl_CRYPTO_get_mem_functions(ossl_CRYPTO_malloc_fn *malloc_fn,
                              ossl_CRYPTO_realloc_fn *realloc_fn,
                              ossl_CRYPTO_free_fn *free_fn);

void *ossl_CRYPTO_malloc(size_t num, const char *file, int line);
void *ossl_CRYPTO_zalloc(size_t num, const char *file, int line);
void *ossl_CRYPTO_memdup(const void *str, size_t siz, const char *file, int line);
char *ossl_CRYPTO_strdup(const char *str, const char *file, int line);
char *ossl_CRYPTO_strndup(const char *str, size_t s, const char *file, int line);
void ossl_CRYPTO_free(void *ptr, const char *file, int line);
void ossl_CRYPTO_clear_free(void *ptr, size_t num, const char *file, int line);
void *ossl_CRYPTO_realloc(void *addr, size_t num, const char *file, int line);
void *ossl_CRYPTO_clear_realloc(void *addr, size_t old_num, size_t num,
                           const char *file, int line);

int ossl_CRYPTO_secure_malloc_init(size_t sz, size_t minsize);
int ossl_CRYPTO_secure_malloc_done(void);
void *ossl_CRYPTO_secure_malloc(size_t num, const char *file, int line);
void *ossl_CRYPTO_secure_zalloc(size_t num, const char *file, int line);
void ossl_CRYPTO_secure_free(void *ptr, const char *file, int line);
void ossl_CRYPTO_secure_clear_free(void *ptr, size_t num,
                              const char *file, int line);
int ossl_CRYPTO_secure_allocated(const void *ptr);
int ossl_CRYPTO_secure_malloc_initialized(void);
size_t ossl_CRYPTO_secure_actual_size(void *ptr);
size_t ossl_CRYPTO_secure_used(void);

void ossl_OPENSSL_cleanse(void *ptr, size_t len);

# ifndef ossl_OPENSSL_NO_CRYPTO_MDEBUG
/*
 * The following can be used to detect memory leaks in the library. If
 * used, it turns on malloc checking
 */
# define CRYPTO_MEM_CHECK_OFF     0x0   /* Control only */
# define CRYPTO_MEM_CHECK_ON      0x1   /* Control and mode bit */
# define CRYPTO_MEM_CHECK_ENABLE  0x2   /* Control and mode bit */
# define CRYPTO_MEM_CHECK_DISABLE 0x3   /* Control only */

void CRYPTO_get_alloc_counts(int *mcount, int *rcount, int *fcount);
#  ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
#    define ossl_OPENSSL_mem_debug_push(info) \
         CRYPTO_mem_debug_push(info, ossl_OPENSSL_FILE, ossl_OPENSSL_LINE)
#    define ossl_OPENSSL_mem_debug_pop() \
         CRYPTO_mem_debug_pop()
#  endif
#  ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
ossl_OSSL_DEPRECATEDIN_3_0 int CRYPTO_set_mem_debug(int flag);
ossl_OSSL_DEPRECATEDIN_3_0 int CRYPTO_mem_ctrl(int mode);
ossl_OSSL_DEPRECATEDIN_3_0 int CRYPTO_mem_debug_push(const char *info,
                                                const char *file, int line);
ossl_OSSL_DEPRECATEDIN_3_0 int CRYPTO_mem_debug_pop(void);
ossl_OSSL_DEPRECATEDIN_3_0 void CRYPTO_mem_debug_malloc(void *addr, size_t num,
                                                   int flag,
                                                   const char *file, int line);
ossl_OSSL_DEPRECATEDIN_3_0 void CRYPTO_mem_debug_realloc(void *addr1, void *addr2,
                                                    size_t num, int flag,
                                                    const char *file, int line);
ossl_OSSL_DEPRECATEDIN_3_0 void CRYPTO_mem_debug_free(void *addr, int flag,
                                                 const char *file, int line);
ossl_OSSL_DEPRECATEDIN_3_0
int CRYPTO_mem_leaks_cb(int (*cb)(const char *str, size_t len, void *u),
                        void *u);
#  endif
#  ifndef ossl_OPENSSL_NO_STDIO
#  ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
ossl_OSSL_DEPRECATEDIN_3_0 int CRYPTO_mem_leaks_fp(FILE *);
#  endif
#  endif
# ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
ossl_OSSL_DEPRECATEDIN_3_0 int CRYPTO_mem_leaks(ossl_BIO *bio);
# endif
# endif /* ossl_OPENSSL_NO_CRYPTO_MDEBUG */

/* die if we have to */
ossl_ossl_noreturn void ossl_OPENSSL_die(const char *assertion, const char *file, int line);
# ifndef ossl_OPENSSL_NO_DEPRECATED_1_1_0
#  define ossl_OpenSSLDie(f,l,a) ossl_OPENSSL_die((a),(f),(l))
# endif
# define ossl_OPENSSL_assert(e) \
    (void)((e) ? 0 : (ossl_OPENSSL_die("assertion failed: " #e, ossl_OPENSSL_FILE, ossl_OPENSSL_LINE), 1))

int ossl_OPENSSL_isservice(void);

void ossl_OPENSSL_init(void);
# ifdef ossl_OPENSSL_SYS_UNIX
#  ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
ossl_OSSL_DEPRECATEDIN_3_0 void ossl_OPENSSL_fork_prepare(void);
ossl_OSSL_DEPRECATEDIN_3_0 void ossl_OPENSSL_fork_parent(void);
ossl_OSSL_DEPRECATEDIN_3_0 void ossl_OPENSSL_fork_child(void);
#  endif
# endif

struct tm *ossl_OPENSSL_gmtime(const time_t *timer, struct tm *result);
int ossl_OPENSSL_gmtime_adj(struct tm *tm, int offset_day, long offset_sec);
int ossl_OPENSSL_gmtime_diff(int *pday, int *psec,
                        const struct tm *from, const struct tm *to);

/*
 * ossl_CRYPTO_memcmp returns zero iff the |len| bytes at |a| and |b| are equal.
 * It takes an amount of time dependent on |len|, but independent of the
 * contents of |a| and |b|. Unlike memcmp, it cannot be used to put elements
 * into a defined order as the return value when a != b is undefined, other
 * than to be non-zero.
 */
int ossl_CRYPTO_memcmp(const void * in_a, const void * in_b, size_t len);

/* Standard initialisation options */
# define ossl_OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS 0x00000001L
# define ossl_OPENSSL_INIT_LOAD_CRYPTO_STRINGS    0x00000002L
# define ossl_OPENSSL_INIT_ADD_ALL_CIPHERS        0x00000004L
# define ossl_OPENSSL_INIT_ADD_ALL_DIGESTS        0x00000008L
# define ossl_OPENSSL_INIT_NO_ADD_ALL_CIPHERS     0x00000010L
# define ossl_OPENSSL_INIT_NO_ADD_ALL_DIGESTS     0x00000020L
# define ossl_OPENSSL_INIT_LOAD_CONFIG            0x00000040L
# define ossl_OPENSSL_INIT_NO_LOAD_CONFIG         0x00000080L
# define ossl_OPENSSL_INIT_ASYNC                  0x00000100L
# define ossl_OPENSSL_INIT_ENGINE_RDRAND          0x00000200L
# define ossl_OPENSSL_INIT_ENGINE_DYNAMIC         0x00000400L
# define ossl_OPENSSL_INIT_ENGINE_OPENSSL         0x00000800L
# define ossl_OPENSSL_INIT_ENGINE_CRYPTODEV       0x00001000L
# define ossl_OPENSSL_INIT_ENGINE_CAPI            0x00002000L
# define ossl_OPENSSL_INIT_ENGINE_PADLOCK         0x00004000L
# define ossl_OPENSSL_INIT_ENGINE_AFALG           0x00008000L
/* FREE:                                     0x00010000L */
# define ossl_OPENSSL_INIT_ATFORK                 0x00020000L
/* ossl_OPENSSL_INIT_BASE_ONLY                    0x00040000L */
# define ossl_OPENSSL_INIT_NO_ATEXIT              0x00080000L
/* ossl_OPENSSL_INIT flag range 0x03f00000 reserved for ossl_OPENSSL_init_ssl() */
/* FREE: 0x04000000L */
/* FREE: 0x08000000L */
/* FREE: 0x10000000L */
/* FREE: 0x20000000L */
/* FREE: 0x40000000L */
/* FREE: 0x80000000L */
/* Max ossl_OPENSSL_INIT flag value is 0x80000000 */

/* openssl and dasync not counted as builtin */
# define ossl_OPENSSL_INIT_ENGINE_ALL_BUILTIN \
    (ossl_OPENSSL_INIT_ENGINE_RDRAND | ossl_OPENSSL_INIT_ENGINE_DYNAMIC \
    | ossl_OPENSSL_INIT_ENGINE_CRYPTODEV | ossl_OPENSSL_INIT_ENGINE_CAPI | \
    ossl_OPENSSL_INIT_ENGINE_PADLOCK)

/* Library initialisation functions */
void ossl_OPENSSL_cleanup(void);
int ossl_OPENSSL_init_crypto(uint64_t opts, const ossl_OPENSSL_INIT_SETTINGS *settings);
int ossl_OPENSSL_atexit(void (*handler)(void));
void ossl_OPENSSL_thread_stop(void);
void ossl_OPENSSL_thread_stop_ex(ossl_OSSL_LIB_CTX *ctx);

/* Low-level control of initialization */
ossl_OPENSSL_INIT_SETTINGS *ossl_OPENSSL_INIT_new(void);
# ifndef ossl_OPENSSL_NO_STDIO
int ossl_OPENSSL_INIT_set_config_filename(ossl_OPENSSL_INIT_SETTINGS *settings,
                                     const char *config_filename);
void ossl_OPENSSL_INIT_set_config_file_flags(ossl_OPENSSL_INIT_SETTINGS *settings,
                                        unsigned long flags);
int ossl_OPENSSL_INIT_set_config_appname(ossl_OPENSSL_INIT_SETTINGS *settings,
                                    const char *config_appname);
# endif
void ossl_OPENSSL_INIT_free(ossl_OPENSSL_INIT_SETTINGS *settings);

# if defined(ossl_OPENSSL_THREADS) && !defined(CRYPTO_TDEBUG)
#  if defined(_WIN32)
#   if defined(BASETYPES) || defined(_WINDEF_H)
/* application has to include <windows.h> in order to use this */
typedef DWORD ossl_CRYPTO_THREAD_LOCAL;
typedef DWORD ossl_CRYPTO_THREAD_ID;

typedef LONG ossl_CRYPTO_ONCE;
#    define ossl_CRYPTO_ONCE_STATIC_INIT 0
#   endif
#  else
#   if defined(__TANDEM) && defined(_SPT_MODEL_)
#    define  SPT_THREAD_SIGNAL 1
#    define  SPT_THREAD_AWARE 1
#    include <spthread.h>
#   else
#    include <pthread.h>
#   endif
typedef pthread_once_t ossl_CRYPTO_ONCE;
typedef pthread_key_t ossl_CRYPTO_THREAD_LOCAL;
typedef pthread_t ossl_CRYPTO_THREAD_ID;

#   define ossl_CRYPTO_ONCE_STATIC_INIT PTHREAD_ONCE_INIT
#  endif
# endif

# if !defined(ossl_CRYPTO_ONCE_STATIC_INIT)
typedef unsigned int ossl_CRYPTO_ONCE;
typedef unsigned int ossl_CRYPTO_THREAD_LOCAL;
typedef unsigned int ossl_CRYPTO_THREAD_ID;
#  define ossl_CRYPTO_ONCE_STATIC_INIT 0
# endif

int ossl_CRYPTO_THREAD_run_once(ossl_CRYPTO_ONCE *once, void (*init)(void));

int ossl_CRYPTO_THREAD_init_local(ossl_CRYPTO_THREAD_LOCAL *key, void (*cleanup)(void *));
void *ossl_CRYPTO_THREAD_get_local(ossl_CRYPTO_THREAD_LOCAL *key);
int ossl_CRYPTO_THREAD_set_local(ossl_CRYPTO_THREAD_LOCAL *key, void *val);
int ossl_CRYPTO_THREAD_cleanup_local(ossl_CRYPTO_THREAD_LOCAL *key);

ossl_CRYPTO_THREAD_ID ossl_CRYPTO_THREAD_get_current_id(void);
int ossl_CRYPTO_THREAD_compare_id(ossl_CRYPTO_THREAD_ID a, ossl_CRYPTO_THREAD_ID b);

ossl_OSSL_LIB_CTX *ossl_OSSL_LIB_CTX_new(void);
ossl_OSSL_LIB_CTX *ossl_OSSL_LIB_CTX_new_from_dispatch(const ossl_OSSL_CORE_HANDLE *handle,
                                             const ossl_OSSL_DISPATCH *in);
ossl_OSSL_LIB_CTX *ossl_OSSL_LIB_CTX_new_child(const ossl_OSSL_CORE_HANDLE *handle,
                                     const ossl_OSSL_DISPATCH *in);
int ossl_OSSL_LIB_CTX_load_config(ossl_OSSL_LIB_CTX *ctx, const char *config_file);
void ossl_OSSL_LIB_CTX_free(ossl_OSSL_LIB_CTX *);
ossl_OSSL_LIB_CTX *ossl_OSSL_LIB_CTX_get0_global_default(void);
ossl_OSSL_LIB_CTX *ossl_OSSL_LIB_CTX_set0_default(ossl_OSSL_LIB_CTX *libctx);

# ifdef  __cplusplus
}
# endif
#endif
