/*
 * WARNING: do not edit!
 * Generated by Makefile from ../../../openssl/source/include/openssl/ssl.h.in
 *
 * Copyright 1995-2022 The OpenSSL Project Authors. All Rights Reserved.
 * Copyright (c) 2002, Oracle and/or its affiliates. All rights reserved
 * Copyright 2005 Nokia. All rights reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



#ifndef ossl_OPENSSL_SSL_H
# define ossl_OPENSSL_SSL_H
# pragma once

# include "ossl/openssl/macros.h"
# ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
#  define ossl_HEADER_SSL_H
# endif

# include "ossl/openssl/e_os2.h"
# include "ossl/openssl/opensslconf.h"
# include "ossl/openssl/comp.h"
# include "ossl/openssl/bio.h"
# ifndef ossl_OPENSSL_NO_DEPRECATED_1_1_0
#  include "ossl/openssl/x509.h"
#  include "ossl/openssl/crypto.h"
#  include "ossl/openssl/buffer.h"
# endif
# include "ossl/openssl/lhash.h"
# include "ossl/openssl/pem.h"
# include "ossl/openssl/hmac.h"
# include "ossl/openssl/async.h"

# include "ossl/openssl/safestack.h"
# include "ossl/openssl/symhacks.h"
# include "ossl/openssl/ct.h"
# include "ossl/openssl/sslerr.h"
# include "ossl/openssl/prov_ssl.h"

#ifdef  __cplusplus
extern "C" {
#endif

/* OpenSSL version number for ASN.1 encoding of the session information */
/*-
 * Version 0 - initial version
 * Version 1 - added the optional peer certificate
 */
# define ossl_SSL_SESSION_ASN1_VERSION 0x0001

# define ossl_SSL_MAX_SSL_SESSION_ID_LENGTH           32
# define ossl_SSL_MAX_SID_CTX_LENGTH                  32

# define ossl_SSL_MIN_RSA_MODULUS_LENGTH_IN_BYTES     (512/8)
# define ossl_SSL_MAX_KEY_ARG_LENGTH                  8
/* ossl_SSL_MAX_MASTER_KEY_LENGTH is defined in prov_ssl.h */

/* The maximum number of encrypt/decrypt pipelines we can support */
# define ossl_SSL_MAX_PIPELINES  32

/* text strings for the ciphers */

/* These are used to specify which ciphers to use and not to use */

# define ossl_SSL_TXT_LOW             "LOW"
# define ossl_SSL_TXT_MEDIUM          "MEDIUM"
# define ossl_SSL_TXT_HIGH            "HIGH"
# define ossl_SSL_TXT_FIPS            "FIPS"

# define ossl_SSL_TXT_aNULL           "aNULL"
# define ossl_SSL_TXT_eNULL           "eNULL"
# define ossl_SSL_TXT_NULL            "NULL"

# define ossl_SSL_TXT_kRSA            "kRSA"
# define ossl_SSL_TXT_kDHr            "kDHr"/* this cipher class has been removed */
# define ossl_SSL_TXT_kDHd            "kDHd"/* this cipher class has been removed */
# define ossl_SSL_TXT_kDH             "kDH"/* this cipher class has been removed */
# define ossl_SSL_TXT_kEDH            "kEDH"/* alias for kDHE */
# define ossl_SSL_TXT_kDHE            "kDHE"
# define ossl_SSL_TXT_kECDHr          "kECDHr"/* this cipher class has been removed */
# define ossl_SSL_TXT_kECDHe          "kECDHe"/* this cipher class has been removed */
# define ossl_SSL_TXT_kECDH           "kECDH"/* this cipher class has been removed */
# define ossl_SSL_TXT_kEECDH          "kEECDH"/* alias for kECDHE */
# define ossl_SSL_TXT_kECDHE          "kECDHE"
# define ossl_SSL_TXT_kPSK            "kPSK"
# define ossl_SSL_TXT_kRSAPSK         "kRSAPSK"
# define ossl_SSL_TXT_kECDHEPSK       "kECDHEPSK"
# define ossl_SSL_TXT_kDHEPSK         "kDHEPSK"
# define ossl_SSL_TXT_kGOST           "kGOST"
# define ossl_SSL_TXT_kGOST18         "kGOST18"
# define ossl_SSL_TXT_kSRP            "kSRP"

# define ossl_SSL_TXT_aRSA            "aRSA"
# define ossl_SSL_TXT_aDSS            "aDSS"
# define ossl_SSL_TXT_aDH             "aDH"/* this cipher class has been removed */
# define ossl_SSL_TXT_aECDH           "aECDH"/* this cipher class has been removed */
# define ossl_SSL_TXT_aECDSA          "aECDSA"
# define ossl_SSL_TXT_aPSK            "aPSK"
# define ossl_SSL_TXT_aGOST94         "aGOST94"
# define ossl_SSL_TXT_aGOST01         "aGOST01"
# define ossl_SSL_TXT_aGOST12         "aGOST12"
# define ossl_SSL_TXT_aGOST           "aGOST"
# define ossl_SSL_TXT_aSRP            "aSRP"

# define ossl_SSL_TXT_DSS             "DSS"
# define ossl_SSL_TXT_DH              "ossl_DH"
# define ossl_SSL_TXT_DHE             "DHE"/* same as "kDHE:-ADH" */
# define ossl_SSL_TXT_EDH             "EDH"/* alias for DHE */
# define ossl_SSL_TXT_ADH             "ADH"
# define ossl_SSL_TXT_RSA             "ossl_RSA"
# define ossl_SSL_TXT_ECDH            "ECDH"
# define ossl_SSL_TXT_EECDH           "EECDH"/* alias for ECDHE" */
# define ossl_SSL_TXT_ECDHE           "ECDHE"/* same as "kECDHE:-AECDH" */
# define ossl_SSL_TXT_AECDH           "AECDH"
# define ossl_SSL_TXT_ECDSA           "ECDSA"
# define ossl_SSL_TXT_PSK             "PSK"
# define ossl_SSL_TXT_SRP             "SRP"

# define ossl_SSL_TXT_DES             "DES"
# define ossl_SSL_TXT_3DES            "3DES"
# define ossl_SSL_TXT_RC4             "ossl_RC4"
# define ossl_SSL_TXT_RC2             "RC2"
# define ossl_SSL_TXT_IDEA            "IDEA"
# define ossl_SSL_TXT_SEED            "SEED"
# define ossl_SSL_TXT_AES128          "AES128"
# define ossl_SSL_TXT_AES256          "AES256"
# define ossl_SSL_TXT_AES             "AES"
# define ossl_SSL_TXT_AES_GCM         "AESGCM"
# define ossl_SSL_TXT_AES_CCM         "AESCCM"
# define ossl_SSL_TXT_AES_CCM_8       "AESCCM8"
# define ossl_SSL_TXT_CAMELLIA128     "CAMELLIA128"
# define ossl_SSL_TXT_CAMELLIA256     "CAMELLIA256"
# define ossl_SSL_TXT_CAMELLIA        "CAMELLIA"
# define ossl_SSL_TXT_CHACHA20        "CHACHA20"
# define ossl_SSL_TXT_GOST            "GOST89"
# define ossl_SSL_TXT_ARIA            "ARIA"
# define ossl_SSL_TXT_ARIA_GCM        "ARIAGCM"
# define ossl_SSL_TXT_ARIA128         "ARIA128"
# define ossl_SSL_TXT_ARIA256         "ARIA256"
# define ossl_SSL_TXT_GOST2012_GOST8912_GOST8912 "GOST2012-GOST8912-GOST8912"
# define ossl_SSL_TXT_CBC             "CBC"

# define ossl_SSL_TXT_MD5             "ossl_MD5"
# define ossl_SSL_TXT_SHA1            "ossl_SHA1"
# define ossl_SSL_TXT_SHA             "SHA"/* same as "ossl_SHA1" */
# define ossl_SSL_TXT_GOST94          "GOST94"
# define ossl_SSL_TXT_GOST89MAC       "GOST89MAC"
# define ossl_SSL_TXT_GOST12          "GOST12"
# define ossl_SSL_TXT_GOST89MAC12     "GOST89MAC12"
# define ossl_SSL_TXT_SHA256          "ossl_SHA256"
# define ossl_SSL_TXT_SHA384          "ossl_SHA384"

# define ossl_SSL_TXT_SSLV3           "SSLv3"
# define ossl_SSL_TXT_TLSV1           "TLSv1"
# define ossl_SSL_TXT_TLSV1_1         "TLSv1.1"
# define ossl_SSL_TXT_TLSV1_2         "TLSv1.2"

# define ossl_SSL_TXT_ALL             "ALL"

/*-
 * COMPLEMENTOF* definitions. These identifiers are used to (de-select)
 * ciphers normally not being used.
 * Example: "ossl_RC4" will activate all ciphers using ossl_RC4 including ciphers
 * without authentication, which would normally disabled by DEFAULT (due
 * the "!ADH" being part of default). Therefore "ossl_RC4:!COMPLEMENTOFDEFAULT"
 * will make sure that it is also disabled in the specific selection.
 * COMPLEMENTOF* identifiers are portable between version, as adjustments
 * to the default cipher setup will also be included here.
 *
 * COMPLEMENTOFDEFAULT does not experience the same special treatment that
 * DEFAULT gets, as only selection is being done and no sorting as needed
 * for DEFAULT.
 */
# define ossl_SSL_TXT_CMPALL          "COMPLEMENTOFALL"
# define ossl_SSL_TXT_CMPDEF          "COMPLEMENTOFDEFAULT"

/*
 * The following cipher list is used by default. It also is substituted when
 * an application-defined cipher list string starts with 'DEFAULT'.
 * This applies to ciphersuites for TLSv1.2 and below.
 * DEPRECATED IN 3.0.0, in favor of ossl_OSSL_default_cipher_list()
 * Update both macro and function simultaneously
 */
# ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
#  define ossl_SSL_DEFAULT_CIPHER_LIST "ALL:!COMPLEMENTOFDEFAULT:!eNULL"
/*
 * This is the default set of TLSv1.3 ciphersuites
 * DEPRECATED IN 3.0.0, in favor of ossl_OSSL_default_ciphersuites()
 * Update both macro and function simultaneously
 */
#  define ossl_TLS_DEFAULT_CIPHERSUITES "TLS_AES_256_GCM_SHA384:" \
                                   "TLS_CHACHA20_POLY1305_SHA256:" \
                                   "TLS_AES_128_GCM_SHA256"
# endif
/*
 * As of OpenSSL 1.0.0, ssl_create_cipher_list() in ssl/ssl_ciph.c always
 * starts with a reasonable order, and all we have to do for DEFAULT is
 * throwing out anonymous and unencrypted ciphersuites! (The latter are not
 * actually enabled by ALL, but "ALL:ossl_RSA" would enable some of them.)
 */

/* Used in ossl_SSL_set_shutdown()/ossl_SSL_get_shutdown(); */
# define ossl_SSL_SENT_SHUTDOWN       1
# define ossl_SSL_RECEIVED_SHUTDOWN   2

#ifdef __cplusplus
}
#endif

#ifdef  __cplusplus
extern "C" {
#endif

# define ossl_SSL_FILETYPE_ASN1       ossl_X509_FILETYPE_ASN1
# define ossl_SSL_FILETYPE_PEM        ossl_X509_FILETYPE_PEM

/*
 * This is needed to stop compilers complaining about the 'struct ossl_ssl_st *'
 * function parameters used to prototype callbacks in ossl_SSL_CTX.
 */
typedef struct ossl_ssl_st *ossl_ssl_crock_st;
typedef struct ossl_tls_session_ticket_ext_st ossl_TLS_SESSION_TICKET_EXT;
typedef struct ossl_ssl_method_st ossl_SSL_METHOD;
typedef struct ossl_ssl_cipher_st ossl_SSL_CIPHER;
typedef struct ossl_ssl_session_st ossl_SSL_SESSION;
typedef struct ossl_tls_sigalgs_st ossl_TLS_SIGALGS;
typedef struct ossl_ssl_conf_ctx_st ossl_SSL_CONF_CTX;
typedef struct ossl_ssl_comp_st ossl_SSL_COMP;

ossl_STACK_OF(ossl_SSL_CIPHER);
ossl_STACK_OF(ossl_SSL_COMP);

/* SRTP protection profiles for use with the use_srtp extension (RFC 5764)*/
typedef struct ossl_srtp_protection_profile_st {
    const char *name;
    unsigned long id;
} ossl_SRTP_PROTECTION_PROFILE;
ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_SRTP_PROTECTION_PROFILE, ossl_SRTP_PROTECTION_PROFILE, ossl_SRTP_PROTECTION_PROFILE)
#define ossl_sk_SRTP_PROTECTION_PROFILE_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_SRTP_PROTECTION_PROFILE_sk_type(sk))
#define ossl_sk_SRTP_PROTECTION_PROFILE_value(sk, idx) ((ossl_SRTP_PROTECTION_PROFILE *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_SRTP_PROTECTION_PROFILE_sk_type(sk), (idx)))
#define ossl_sk_SRTP_PROTECTION_PROFILE_new(cmp) ((ossl_STACK_OF(ossl_SRTP_PROTECTION_PROFILE) *)ossl_OPENSSL_sk_new(ossl_ossl_check_SRTP_PROTECTION_PROFILE_compfunc_type(cmp)))
#define ossl_sk_SRTP_PROTECTION_PROFILE_new_null() ((ossl_STACK_OF(ossl_SRTP_PROTECTION_PROFILE) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_SRTP_PROTECTION_PROFILE_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_SRTP_PROTECTION_PROFILE) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_SRTP_PROTECTION_PROFILE_compfunc_type(cmp), (n)))
#define ossl_sk_SRTP_PROTECTION_PROFILE_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk), (n))
#define ossl_sk_SRTP_PROTECTION_PROFILE_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk))
#define ossl_sk_SRTP_PROTECTION_PROFILE_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk))
#define ossl_sk_SRTP_PROTECTION_PROFILE_delete(sk, i) ((ossl_SRTP_PROTECTION_PROFILE *)ossl_OPENSSL_sk_delete(ossl_ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk), (i)))
#define ossl_sk_SRTP_PROTECTION_PROFILE_delete_ptr(sk, ptr) ((ossl_SRTP_PROTECTION_PROFILE *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk), ossl_ossl_check_SRTP_PROTECTION_PROFILE_type(ptr)))
#define ossl_sk_SRTP_PROTECTION_PROFILE_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk), ossl_ossl_check_SRTP_PROTECTION_PROFILE_type(ptr))
#define ossl_sk_SRTP_PROTECTION_PROFILE_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk), ossl_ossl_check_SRTP_PROTECTION_PROFILE_type(ptr))
#define ossl_sk_SRTP_PROTECTION_PROFILE_pop(sk) ((ossl_SRTP_PROTECTION_PROFILE *)ossl_OPENSSL_sk_pop(ossl_ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk)))
#define ossl_sk_SRTP_PROTECTION_PROFILE_shift(sk) ((ossl_SRTP_PROTECTION_PROFILE *)ossl_OPENSSL_sk_shift(ossl_ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk)))
#define ossl_sk_SRTP_PROTECTION_PROFILE_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk),ossl_ossl_check_SRTP_PROTECTION_PROFILE_freefunc_type(freefunc))
#define ossl_sk_SRTP_PROTECTION_PROFILE_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk), ossl_ossl_check_SRTP_PROTECTION_PROFILE_type(ptr), (idx))
#define ossl_sk_SRTP_PROTECTION_PROFILE_set(sk, idx, ptr) ((ossl_SRTP_PROTECTION_PROFILE *)ossl_OPENSSL_sk_set(ossl_ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk), (idx), ossl_ossl_check_SRTP_PROTECTION_PROFILE_type(ptr)))
#define ossl_sk_SRTP_PROTECTION_PROFILE_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk), ossl_ossl_check_SRTP_PROTECTION_PROFILE_type(ptr))
#define ossl_sk_SRTP_PROTECTION_PROFILE_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk), ossl_ossl_check_SRTP_PROTECTION_PROFILE_type(ptr))
#define ossl_sk_SRTP_PROTECTION_PROFILE_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk), ossl_ossl_check_SRTP_PROTECTION_PROFILE_type(ptr), pnum)
#define ossl_sk_SRTP_PROTECTION_PROFILE_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk))
#define ossl_sk_SRTP_PROTECTION_PROFILE_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_SRTP_PROTECTION_PROFILE_sk_type(sk))
#define ossl_sk_SRTP_PROTECTION_PROFILE_dup(sk) ((ossl_STACK_OF(ossl_SRTP_PROTECTION_PROFILE) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_SRTP_PROTECTION_PROFILE_sk_type(sk)))
#define ossl_sk_SRTP_PROTECTION_PROFILE_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_SRTP_PROTECTION_PROFILE) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_SRTP_PROTECTION_PROFILE_sk_type(sk), ossl_ossl_check_SRTP_PROTECTION_PROFILE_copyfunc_type(copyfunc), ossl_ossl_check_SRTP_PROTECTION_PROFILE_freefunc_type(freefunc)))
#define ossl_sk_SRTP_PROTECTION_PROFILE_set_cmp_func(sk, cmp) ((ossl_sk_SRTP_PROTECTION_PROFILE_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_SRTP_PROTECTION_PROFILE_sk_type(sk), ossl_ossl_check_SRTP_PROTECTION_PROFILE_compfunc_type(cmp)))



typedef int (*ossl_tls_session_ticket_ext_cb_fn)(ossl_SSL *s, const unsigned char *data,
                                            int len, void *arg);
typedef int (*ossl_tls_session_secret_cb_fn)(ossl_SSL *s, void *secret, int *secret_len,
                                        ossl_STACK_OF(ossl_SSL_CIPHER) *peer_ciphers,
                                        const ossl_SSL_CIPHER **cipher, void *arg);

/* Extension context codes */
/* This extension is only allowed in TLS */
#define ossl_SSL_EXT_TLS_ONLY                        0x0001
/* This extension is only allowed in DTLS */
#define ossl_SSL_EXT_DTLS_ONLY                       0x0002
/* Some extensions may be allowed in DTLS but we don't implement them for it */
#define ossl_SSL_EXT_TLS_IMPLEMENTATION_ONLY         0x0004
/* Most extensions are not defined for SSLv3 but EXT_TYPE_renegotiate is */
#define ossl_SSL_EXT_SSL3_ALLOWED                    0x0008
/* Extension is only defined for TLS1.2 and below */
#define ossl_SSL_EXT_TLS1_2_AND_BELOW_ONLY           0x0010
/* Extension is only defined for TLS1.3 and above */
#define ossl_SSL_EXT_TLS1_3_ONLY                     0x0020
/* Ignore this extension during parsing if we are resuming */
#define ossl_SSL_EXT_IGNORE_ON_RESUMPTION            0x0040
#define ossl_SSL_EXT_CLIENT_HELLO                    0x0080
/* Really means TLS1.2 or below */
#define ossl_SSL_EXT_TLS1_2_SERVER_HELLO             0x0100
#define ossl_SSL_EXT_TLS1_3_SERVER_HELLO             0x0200
#define ossl_SSL_EXT_TLS1_3_ENCRYPTED_EXTENSIONS     0x0400
#define ossl_SSL_EXT_TLS1_3_HELLO_RETRY_REQUEST      0x0800
#define ossl_SSL_EXT_TLS1_3_CERTIFICATE              0x1000
#define ossl_SSL_EXT_TLS1_3_NEW_SESSION_TICKET       0x2000
#define ossl_SSL_EXT_TLS1_3_CERTIFICATE_REQUEST      0x4000

/* Typedefs for handling custom extensions */

typedef int (*ossl_custom_ext_add_cb)(ossl_SSL *s, unsigned int ext_type,
                                 const unsigned char **out, size_t *outlen,
                                 int *al, void *add_arg);

typedef void (*ossl_custom_ext_free_cb)(ossl_SSL *s, unsigned int ext_type,
                                   const unsigned char *out, void *add_arg);

typedef int (*ossl_custom_ext_parse_cb)(ossl_SSL *s, unsigned int ext_type,
                                   const unsigned char *in, size_t inlen,
                                   int *al, void *parse_arg);


typedef int (*ossl_SSL_custom_ext_add_cb_ex)(ossl_SSL *s, unsigned int ext_type,
                                        unsigned int context,
                                        const unsigned char **out,
                                        size_t *outlen, ossl_X509 *x,
                                        size_t chainidx,
                                        int *al, void *add_arg);

typedef void (*ossl_SSL_custom_ext_free_cb_ex)(ossl_SSL *s, unsigned int ext_type,
                                          unsigned int context,
                                          const unsigned char *out,
                                          void *add_arg);

typedef int (*ossl_SSL_custom_ext_parse_cb_ex)(ossl_SSL *s, unsigned int ext_type,
                                          unsigned int context,
                                          const unsigned char *in,
                                          size_t inlen, ossl_X509 *x,
                                          size_t chainidx,
                                          int *al, void *parse_arg);

/* Typedef for verification callback */
typedef int (*ossl_SSL_verify_cb)(int preverify_ok, ossl_X509_STORE_CTX *x509_ctx);

/* Typedef for ossl_SSL async callback */
typedef int (*ossl_SSL_async_callback_fn)(ossl_SSL *s, void *arg);

#define ossl_SSL_OP_BIT(n)  ((uint64_t)1 << (uint64_t)n)

/*
 * ossl_SSL/TLS connection options.
 */
    /* Disable Extended master secret */
# define ossl_SSL_OP_NO_EXTENDED_MASTER_SECRET                ossl_SSL_OP_BIT(0)
    /* Cleanse plaintext copies of data delivered to the application */
# define ossl_SSL_OP_CLEANSE_PLAINTEXT                        ossl_SSL_OP_BIT(1)
    /* Allow initial connection to servers that don't support RI */
# define ossl_SSL_OP_LEGACY_SERVER_CONNECT                    ossl_SSL_OP_BIT(2)
    /* Enable support for Kernel TLS */
# define ossl_SSL_OP_ENABLE_KTLS                              ossl_SSL_OP_BIT(3)
# define ossl_SSL_OP_TLSEXT_PADDING                           ossl_SSL_OP_BIT(4)
# define ossl_SSL_OP_SAFARI_ECDHE_ECDSA_BUG                   ossl_SSL_OP_BIT(6)
# define ossl_SSL_OP_IGNORE_UNEXPECTED_EOF                    ossl_SSL_OP_BIT(7)
# define ossl_SSL_OP_ALLOW_CLIENT_RENEGOTIATION               ossl_SSL_OP_BIT(8)
# define ossl_SSL_OP_DISABLE_TLSEXT_CA_NAMES                  ossl_SSL_OP_BIT(9)
    /* In TLSv1.3 allow a non-(ec)dhe based kex_mode */
# define ossl_SSL_OP_ALLOW_NO_DHE_KEX                         ossl_SSL_OP_BIT(10)
    /*
     * Disable ossl_SSL 3.0/TLS 1.0 CBC vulnerability workaround that was added
     * in OpenSSL 0.9.6d.  Usually (depending on the application protocol)
     * the workaround is not needed.  Unfortunately some broken ossl_SSL/TLS
     * implementations cannot handle it at all, which is why we include it
     * in ossl_SSL_OP_ALL. Added in 0.9.6e
     */
# define ossl_SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS              ossl_SSL_OP_BIT(11)
    /* DTLS options */
# define ossl_SSL_OP_NO_QUERY_MTU                             ossl_SSL_OP_BIT(12)
    /* Turn on Cookie Exchange (on relevant for servers) */
# define ossl_SSL_OP_COOKIE_EXCHANGE                          ossl_SSL_OP_BIT(13)
    /* Don't use RFC4507 ticket extension */
# define ossl_SSL_OP_NO_TICKET                                ossl_SSL_OP_BIT(14)
# ifndef ossl_OPENSSL_NO_DTLS1_METHOD
    /*
     * Use Cisco's version identifier of DTLS_BAD_VER
     * (only with deprecated ossl_DTLSv1_client_method())
     */
#  define ossl_SSL_OP_CISCO_ANYCONNECT                        ossl_SSL_OP_BIT(15)
# endif
    /* As server, disallow session resumption on renegotiation */
# define ossl_SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION   ossl_SSL_OP_BIT(16)
    /* Don't use compression even if supported */
# define ossl_SSL_OP_NO_COMPRESSION                           ossl_SSL_OP_BIT(17)
    /* Permit unsafe legacy renegotiation */
# define ossl_SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION        ossl_SSL_OP_BIT(18)
    /* Disable encrypt-then-mac */
# define ossl_SSL_OP_NO_ENCRYPT_THEN_MAC                      ossl_SSL_OP_BIT(19)
    /*
     * Enable TLSv1.3 Compatibility mode. This is on by default. A future
     * version of OpenSSL may have this disabled by default.
     */
# define ossl_SSL_OP_ENABLE_MIDDLEBOX_COMPAT                  ossl_SSL_OP_BIT(20)
    /*
     * Prioritize Chacha20Poly1305 when client does.
     * Modifies ossl_SSL_OP_CIPHER_SERVER_PREFERENCE
     */
# define ossl_SSL_OP_PRIORITIZE_CHACHA                        ossl_SSL_OP_BIT(21)
    /*
     * Set on servers to choose the cipher according to server's preferences.
     */
# define ossl_SSL_OP_CIPHER_SERVER_PREFERENCE                 ossl_SSL_OP_BIT(22)
    /*
     * If set, a server will allow a client to issue a SSLv3.0 version
     * number as latest version supported in the premaster secret, even when
     * TLSv1.0 (version 3.1) was announced in the client hello. Normally
     * this is forbidden to prevent version rollback attacks.
     */
# define ossl_SSL_OP_TLS_ROLLBACK_BUG                         ossl_SSL_OP_BIT(23)
    /*
     * Switches off automatic TLSv1.3 anti-replay protection for early data.
     * This is a server-side option only (no effect on the client).
     */
# define ossl_SSL_OP_NO_ANTI_REPLAY                           ossl_SSL_OP_BIT(24)
# define ossl_SSL_OP_NO_SSLv3                                 ossl_SSL_OP_BIT(25)
# define ossl_SSL_OP_NO_TLSv1                                 ossl_SSL_OP_BIT(26)
# define ossl_SSL_OP_NO_TLSv1_2                               ossl_SSL_OP_BIT(27)
# define ossl_SSL_OP_NO_TLSv1_1                               ossl_SSL_OP_BIT(28)
# define ossl_SSL_OP_NO_TLSv1_3                               ossl_SSL_OP_BIT(29)
# define ossl_SSL_OP_NO_DTLSv1                                ossl_SSL_OP_BIT(26)
# define ossl_SSL_OP_NO_DTLSv1_2                              ossl_SSL_OP_BIT(27)
    /* Disallow all renegotiation */
# define ossl_SSL_OP_NO_RENEGOTIATION                         ossl_SSL_OP_BIT(30)
    /*
     * Make server add server-hello extension from early version of
     * cryptopro draft, when GOST ciphersuite is negotiated. Required for
     * interoperability with CryptoPro CSP 3.x
     */
# define ossl_SSL_OP_CRYPTOPRO_TLSEXT_BUG                     ossl_SSL_OP_BIT(31)

/*
 * Option "collections."
 */
# define ossl_SSL_OP_NO_SSL_MASK \
        ( ossl_SSL_OP_NO_SSLv3 | ossl_SSL_OP_NO_TLSv1 | ossl_SSL_OP_NO_TLSv1_1 \
          | ossl_SSL_OP_NO_TLSv1_2 | ossl_SSL_OP_NO_TLSv1_3 )
# define ossl_SSL_OP_NO_DTLS_MASK \
        ( ossl_SSL_OP_NO_DTLSv1 | ossl_SSL_OP_NO_DTLSv1_2 )

/* Various bug workarounds that should be rather harmless. */
# define ossl_SSL_OP_ALL \
        ( ossl_SSL_OP_CRYPTOPRO_TLSEXT_BUG | ossl_SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS \
          | ossl_SSL_OP_TLSEXT_PADDING | ossl_SSL_OP_SAFARI_ECDHE_ECDSA_BUG )

/*
 * OBSOLETE OPTIONS retained for compatibility
 */

# define ossl_SSL_OP_MICROSOFT_SESS_ID_BUG                    0x0
# define ossl_SSL_OP_NETSCAPE_CHALLENGE_BUG                   0x0
# define ossl_SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG         0x0
# define ossl_SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG              0x0
# define ossl_SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER               0x0
# define ossl_SSL_OP_MSIE_SSLV2_RSA_PADDING                   0x0
# define ossl_SSL_OP_SSLEAY_080_CLIENT_DH_BUG                 0x0
# define ossl_SSL_OP_TLS_D5_BUG                               0x0
# define ossl_SSL_OP_TLS_BLOCK_PADDING_BUG                    0x0
# define ossl_SSL_OP_SINGLE_ECDH_USE                          0x0
# define ossl_SSL_OP_SINGLE_DH_USE                            0x0
# define ossl_SSL_OP_EPHEMERAL_RSA                            0x0
# define ossl_SSL_OP_NO_SSLv2                                 0x0
# define ossl_SSL_OP_PKCS1_CHECK_1                            0x0
# define ossl_SSL_OP_PKCS1_CHECK_2                            0x0
# define ossl_SSL_OP_NETSCAPE_CA_DN_BUG                       0x0
# define ossl_SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG          0x0

/*
 * Allow ossl_SSL_write(..., n) to return r with 0 < r < n (i.e. report success
 * when just a single record has been written):
 */
# define ossl_SSL_MODE_ENABLE_PARTIAL_WRITE       0x00000001U
/*
 * Make it possible to retry ossl_SSL_write() with changed buffer location (buffer
 * contents must stay the same!); this is not the default to avoid the
 * misconception that non-blocking ossl_SSL_write() behaves like non-blocking
 * write():
 */
# define ossl_SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER 0x00000002U
/*
 * Never bother the application with retries if the transport is blocking:
 */
# define ossl_SSL_MODE_AUTO_RETRY 0x00000004U
/* Don't attempt to automatically build certificate chain */
# define ossl_SSL_MODE_NO_AUTO_CHAIN 0x00000008U
/*
 * Save RAM by releasing read and write buffers when they're empty. (SSL3 and
 * TLS only.) Released buffers are freed.
 */
# define ossl_SSL_MODE_RELEASE_BUFFERS 0x00000010U
/*
 * Send the current time in the Random fields of the ClientHello and
 * ServerHello records for compatibility with hypothetical implementations
 * that require it.
 */
# define ossl_SSL_MODE_SEND_CLIENTHELLO_TIME 0x00000020U
# define ossl_SSL_MODE_SEND_SERVERHELLO_TIME 0x00000040U
/*
 * Send TLS_FALLBACK_SCSV in the ClientHello. To be set only by applications
 * that reconnect with a downgraded protocol version; see
 * draft-ietf-tls-downgrade-scsv-00 for details. DO NOT ENABLE THIS if your
 * application attempts a normal handshake. Only use this in explicit
 * fallback retries, following the guidance in
 * draft-ietf-tls-downgrade-scsv-00.
 */
# define ossl_SSL_MODE_SEND_FALLBACK_SCSV 0x00000080U
/*
 * Support Asynchronous operation
 */
# define ossl_SSL_MODE_ASYNC 0x00000100U

/*
 * When using DTLS/SCTP, include the terminating zero in the label
 * used for computing the endpoint-pair shared secret. Required for
 * interoperability with implementations having this bug like these
 * older version of OpenSSL:
 * - OpenSSL 1.0.0 series
 * - OpenSSL 1.0.1 series
 * - OpenSSL 1.0.2 series
 * - OpenSSL 1.1.0 series
 * - OpenSSL 1.1.1 and 1.1.1a
 */
# define ossl_SSL_MODE_DTLS_SCTP_LABEL_LENGTH_BUG 0x00000400U

/* Cert related flags */
/*
 * Many implementations ignore some aspects of the TLS standards such as
 * enforcing certificate chain algorithms. When this is set we enforce them.
 */
# define ossl_SSL_CERT_FLAG_TLS_STRICT                0x00000001U

/* Suite B modes, takes same values as certificate verify flags */
# define ossl_SSL_CERT_FLAG_SUITEB_128_LOS_ONLY       0x10000
/* Suite B 192 bit only mode */
# define ossl_SSL_CERT_FLAG_SUITEB_192_LOS            0x20000
/* Suite B 128 bit mode allowing 192 bit algorithms */
# define ossl_SSL_CERT_FLAG_SUITEB_128_LOS            0x30000

/* Perform all sorts of protocol violations for testing purposes */
# define ossl_SSL_CERT_FLAG_BROKEN_PROTOCOL           0x10000000

/* Flags for building certificate chains */
/* Treat any existing certificates as untrusted CAs */
# define ossl_SSL_BUILD_CHAIN_FLAG_UNTRUSTED          0x1
/* Don't include root CA in chain */
# define ossl_SSL_BUILD_CHAIN_FLAG_NO_ROOT            0x2
/* Just check certificates already there */
# define ossl_SSL_BUILD_CHAIN_FLAG_CHECK              0x4
/* Ignore verification errors */
# define ossl_SSL_BUILD_CHAIN_FLAG_IGNORE_ERROR       0x8
/* Clear verification errors from queue */
# define ossl_SSL_BUILD_CHAIN_FLAG_CLEAR_ERROR        0x10

/* Flags returned by ossl_SSL_check_chain */
/* Certificate can be used with this session */
# define ossl_CERT_PKEY_VALID         0x1
/* Certificate can also be used for signing */
# define ossl_CERT_PKEY_SIGN          0x2
/* EE certificate signing algorithm OK */
# define ossl_CERT_PKEY_EE_SIGNATURE  0x10
/* CA signature algorithms OK */
# define ossl_CERT_PKEY_CA_SIGNATURE  0x20
/* EE certificate parameters OK */
# define ossl_CERT_PKEY_EE_PARAM      0x40
/* CA certificate parameters OK */
# define ossl_CERT_PKEY_CA_PARAM      0x80
/* Signing explicitly allowed as opposed to ossl_SHA1 fallback */
# define ossl_CERT_PKEY_EXPLICIT_SIGN 0x100
/* Client CA issuer names match (always set for server cert) */
# define ossl_CERT_PKEY_ISSUER_NAME   0x200
/* Cert type matches client types (always set for server cert) */
# define ossl_CERT_PKEY_CERT_TYPE     0x400
/* Cert chain suitable to Suite B */
# define ossl_CERT_PKEY_SUITEB        0x800

# define ossl_SSL_CONF_FLAG_CMDLINE           0x1
# define ossl_SSL_CONF_FLAG_FILE              0x2
# define ossl_SSL_CONF_FLAG_CLIENT            0x4
# define ossl_SSL_CONF_FLAG_SERVER            0x8
# define ossl_SSL_CONF_FLAG_SHOW_ERRORS       0x10
# define ossl_SSL_CONF_FLAG_CERTIFICATE       0x20
# define ossl_SSL_CONF_FLAG_REQUIRE_PRIVATE   0x40
/* Configuration value types */
# define ossl_SSL_CONF_TYPE_UNKNOWN           0x0
# define ossl_SSL_CONF_TYPE_STRING            0x1
# define ossl_SSL_CONF_TYPE_FILE              0x2
# define ossl_SSL_CONF_TYPE_DIR               0x3
# define ossl_SSL_CONF_TYPE_NONE              0x4
# define ossl_SSL_CONF_TYPE_STORE             0x5

/* Maximum length of the application-controlled segment of a a TLSv1.3 cookie */
# define ossl_SSL_COOKIE_LENGTH                       4096

/*
 * Note: ossl_SSL[_CTX]_set_{options,mode} use |= op on the previous value, they
 * cannot be used to clear bits.
 */

uint64_t ossl_SSL_CTX_get_options(const ossl_SSL_CTX *ctx);
uint64_t ossl_SSL_get_options(const ossl_SSL *s);
uint64_t ossl_SSL_CTX_clear_options(ossl_SSL_CTX *ctx, uint64_t op);
uint64_t ossl_SSL_clear_options(ossl_SSL *s, uint64_t op);
uint64_t ossl_SSL_CTX_set_options(ossl_SSL_CTX *ctx, uint64_t op);
uint64_t ossl_SSL_set_options(ossl_SSL *s, uint64_t op);

# define ossl_SSL_CTX_set_mode(ctx,op) \
        ossl_SSL_CTX_ctrl((ctx),ossl_SSL_CTRL_MODE,(op),NULL)
# define ossl_SSL_CTX_clear_mode(ctx,op) \
        ossl_SSL_CTX_ctrl((ctx),ossl_SSL_CTRL_CLEAR_MODE,(op),NULL)
# define ossl_SSL_CTX_get_mode(ctx) \
        ossl_SSL_CTX_ctrl((ctx),ossl_SSL_CTRL_MODE,0,NULL)
# define ossl_SSL_clear_mode(ssl,op) \
        ossl_SSL_ctrl((ssl),ossl_SSL_CTRL_CLEAR_MODE,(op),NULL)
# define ossl_SSL_set_mode(ssl,op) \
        ossl_SSL_ctrl((ssl),ossl_SSL_CTRL_MODE,(op),NULL)
# define ossl_SSL_get_mode(ssl) \
        ossl_SSL_ctrl((ssl),ossl_SSL_CTRL_MODE,0,NULL)
# define ossl_SSL_set_mtu(ssl, mtu) \
        ossl_SSL_ctrl((ssl),ossl_SSL_CTRL_SET_MTU,(mtu),NULL)
# define ossl_DTLS_set_link_mtu(ssl, mtu) \
        ossl_SSL_ctrl((ssl),ossl_DTLS_CTRL_SET_LINK_MTU,(mtu),NULL)
# define ossl_DTLS_get_link_min_mtu(ssl) \
        ossl_SSL_ctrl((ssl),ossl_DTLS_CTRL_GET_LINK_MIN_MTU,0,NULL)

# define ossl_SSL_get_secure_renegotiation_support(ssl) \
        ossl_SSL_ctrl((ssl), ossl_SSL_CTRL_GET_RI_SUPPORT, 0, NULL)

# define ossl_SSL_CTX_set_cert_flags(ctx,op) \
        ossl_SSL_CTX_ctrl((ctx),ossl_SSL_CTRL_CERT_FLAGS,(op),NULL)
# define ossl_SSL_set_cert_flags(s,op) \
        ossl_SSL_ctrl((s),ossl_SSL_CTRL_CERT_FLAGS,(op),NULL)
# define ossl_SSL_CTX_clear_cert_flags(ctx,op) \
        ossl_SSL_CTX_ctrl((ctx),ossl_SSL_CTRL_CLEAR_CERT_FLAGS,(op),NULL)
# define ossl_SSL_clear_cert_flags(s,op) \
        ossl_SSL_ctrl((s),ossl_SSL_CTRL_CLEAR_CERT_FLAGS,(op),NULL)

void ossl_SSL_CTX_set_msg_callback(ossl_SSL_CTX *ctx,
                              void (*cb) (int write_p, int version,
                                          int content_type, const void *buf,
                                          size_t len, ossl_SSL *ssl, void *arg));
void ossl_SSL_set_msg_callback(ossl_SSL *ssl,
                          void (*cb) (int write_p, int version,
                                      int content_type, const void *buf,
                                      size_t len, ossl_SSL *ssl, void *arg));
# define ossl_SSL_CTX_set_msg_callback_arg(ctx, arg) ossl_SSL_CTX_ctrl((ctx), ossl_SSL_CTRL_SET_MSG_CALLBACK_ARG, 0, (arg))
# define ossl_SSL_set_msg_callback_arg(ssl, arg) ossl_SSL_ctrl((ssl), ossl_SSL_CTRL_SET_MSG_CALLBACK_ARG, 0, (arg))

# define ossl_SSL_get_extms_support(s) \
        ossl_SSL_ctrl((s),ossl_SSL_CTRL_GET_EXTMS_SUPPORT,0,NULL)

# ifndef ossl_OPENSSL_NO_SRP
/* see tls_srp.c */
#  ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
ossl_OSSL_DEPRECATEDIN_3_0 ossl___owur int ossl_SSL_SRP_CTX_init(ossl_SSL *s);
ossl_OSSL_DEPRECATEDIN_3_0 ossl___owur int ossl_SSL_CTX_SRP_CTX_init(ossl_SSL_CTX *ctx);
ossl_OSSL_DEPRECATEDIN_3_0 int ossl_SSL_SRP_CTX_free(ossl_SSL *ctx);
ossl_OSSL_DEPRECATEDIN_3_0 int ossl_SSL_CTX_SRP_CTX_free(ossl_SSL_CTX *ctx);
ossl_OSSL_DEPRECATEDIN_3_0 ossl___owur int ossl_SSL_srp_server_param_with_username(ossl_SSL *s,
                                                                    int *ad);
ossl_OSSL_DEPRECATEDIN_3_0 ossl___owur int ossl_SRP_Calc_A_param(ossl_SSL *s);
#  endif
# endif

/* 100k max cert list */
# define ossl_SSL_MAX_CERT_LIST_DEFAULT (1024*100)

# define ossl_SSL_SESSION_CACHE_MAX_SIZE_DEFAULT      (1024*20)

/*
 * This callback type is used inside ossl_SSL_CTX, ossl_SSL, and in the functions that
 * set them. It is used to override the generation of ossl_SSL/TLS session IDs in
 * a server. Return value should be zero on an error, non-zero to proceed.
 * Also, callbacks should themselves check if the id they generate is unique
 * otherwise the ossl_SSL handshake will fail with an error - callbacks can do
 * this using the 'ssl' value they're passed by;
 * ossl_SSL_has_matching_session_id(ssl, id, *id_len) The length value passed in
 * is set at the maximum size the session ID can be. In SSLv3/TLSv1 it is 32
 * bytes. The callback can alter this length to be less if desired. It is
 * also an error for the callback to set the size to zero.
 */
typedef int (*ossl_GEN_SESSION_CB) (ossl_SSL *ssl, unsigned char *id,
                               unsigned int *id_len);

# define ossl_SSL_SESS_CACHE_OFF                      0x0000
# define ossl_SSL_SESS_CACHE_CLIENT                   0x0001
# define ossl_SSL_SESS_CACHE_SERVER                   0x0002
# define ossl_SSL_SESS_CACHE_BOTH     (ossl_SSL_SESS_CACHE_CLIENT|ossl_SSL_SESS_CACHE_SERVER)
# define ossl_SSL_SESS_CACHE_NO_AUTO_CLEAR            0x0080
/* enough comments already ... see ossl_SSL_CTX_set_session_cache_mode(3) */
# define ossl_SSL_SESS_CACHE_NO_INTERNAL_LOOKUP       0x0100
# define ossl_SSL_SESS_CACHE_NO_INTERNAL_STORE        0x0200
# define ossl_SSL_SESS_CACHE_NO_INTERNAL \
        (ossl_SSL_SESS_CACHE_NO_INTERNAL_LOOKUP|ossl_SSL_SESS_CACHE_NO_INTERNAL_STORE)
# define ossl_SSL_SESS_CACHE_UPDATE_TIME              0x0400

ossl_LHASH_OF(ossl_SSL_SESSION) *ossl_SSL_CTX_sessions(ossl_SSL_CTX *ctx);
# define ossl_SSL_CTX_sess_number(ctx) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SESS_NUMBER,0,NULL)
# define ossl_SSL_CTX_sess_connect(ctx) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SESS_CONNECT,0,NULL)
# define ossl_SSL_CTX_sess_connect_good(ctx) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SESS_CONNECT_GOOD,0,NULL)
# define ossl_SSL_CTX_sess_connect_renegotiate(ctx) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SESS_CONNECT_RENEGOTIATE,0,NULL)
# define ossl_SSL_CTX_sess_accept(ctx) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SESS_ACCEPT,0,NULL)
# define ossl_SSL_CTX_sess_accept_renegotiate(ctx) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SESS_ACCEPT_RENEGOTIATE,0,NULL)
# define ossl_SSL_CTX_sess_accept_good(ctx) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SESS_ACCEPT_GOOD,0,NULL)
# define ossl_SSL_CTX_sess_hits(ctx) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SESS_HIT,0,NULL)
# define ossl_SSL_CTX_sess_cb_hits(ctx) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SESS_CB_HIT,0,NULL)
# define ossl_SSL_CTX_sess_misses(ctx) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SESS_MISSES,0,NULL)
# define ossl_SSL_CTX_sess_timeouts(ctx) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SESS_TIMEOUTS,0,NULL)
# define ossl_SSL_CTX_sess_cache_full(ctx) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SESS_CACHE_FULL,0,NULL)

void ossl_SSL_CTX_sess_set_new_cb(ossl_SSL_CTX *ctx,
                             int (*new_session_cb) (struct ossl_ssl_st *ssl,
                                                    ossl_SSL_SESSION *sess));
int (*ossl_SSL_CTX_sess_get_new_cb(ossl_SSL_CTX *ctx)) (struct ossl_ssl_st *ssl,
                                              ossl_SSL_SESSION *sess);
void ossl_SSL_CTX_sess_set_remove_cb(ossl_SSL_CTX *ctx,
                                void (*remove_session_cb) (struct ossl_ssl_ctx_st
                                                           *ctx,
                                                           ossl_SSL_SESSION *sess));
void (*ossl_SSL_CTX_sess_get_remove_cb(ossl_SSL_CTX *ctx)) (struct ossl_ssl_ctx_st *ctx,
                                                  ossl_SSL_SESSION *sess);
void ossl_SSL_CTX_sess_set_get_cb(ossl_SSL_CTX *ctx,
                             ossl_SSL_SESSION *(*get_session_cb) (struct ossl_ssl_st
                                                             *ssl,
                                                             const unsigned char
                                                             *data, int len,
                                                             int *copy));
ossl_SSL_SESSION *(*ossl_SSL_CTX_sess_get_get_cb(ossl_SSL_CTX *ctx)) (struct ossl_ssl_st *ssl,
                                                       const unsigned char *data,
                                                       int len, int *copy);
void ossl_SSL_CTX_set_info_callback(ossl_SSL_CTX *ctx,
                               void (*cb) (const ossl_SSL *ssl, int type, int val));
void (*ossl_SSL_CTX_get_info_callback(ossl_SSL_CTX *ctx)) (const ossl_SSL *ssl, int type,
                                                 int val);
void ossl_SSL_CTX_set_client_cert_cb(ossl_SSL_CTX *ctx,
                                int (*client_cert_cb) (ossl_SSL *ssl, ossl_X509 **x509,
                                                       ossl_EVP_PKEY **pkey));
int (*ossl_SSL_CTX_get_client_cert_cb(ossl_SSL_CTX *ctx)) (ossl_SSL *ssl, ossl_X509 **x509,
                                                 ossl_EVP_PKEY **pkey);
# ifndef ossl_OPENSSL_NO_ENGINE
ossl___owur int ossl_SSL_CTX_set_client_cert_engine(ossl_SSL_CTX *ctx, ossl_ENGINE *e);
# endif
void ossl_SSL_CTX_set_cookie_generate_cb(ossl_SSL_CTX *ctx,
                                    int (*app_gen_cookie_cb) (ossl_SSL *ssl,
                                                              unsigned char
                                                              *cookie,
                                                              unsigned int
                                                              *cookie_len));
void ossl_SSL_CTX_set_cookie_verify_cb(ossl_SSL_CTX *ctx,
                                  int (*app_verify_cookie_cb) (ossl_SSL *ssl,
                                                               const unsigned
                                                               char *cookie,
                                                               unsigned int
                                                               cookie_len));

void ossl_SSL_CTX_set_stateless_cookie_generate_cb(
    ossl_SSL_CTX *ctx,
    int (*gen_stateless_cookie_cb) (ossl_SSL *ssl,
                                    unsigned char *cookie,
                                    size_t *cookie_len));
void ossl_SSL_CTX_set_stateless_cookie_verify_cb(
    ossl_SSL_CTX *ctx,
    int (*verify_stateless_cookie_cb) (ossl_SSL *ssl,
                                       const unsigned char *cookie,
                                       size_t cookie_len));
# ifndef ossl_OPENSSL_NO_NEXTPROTONEG

typedef int (*ossl_SSL_CTX_npn_advertised_cb_func)(ossl_SSL *ssl,
                                              const unsigned char **out,
                                              unsigned int *outlen,
                                              void *arg);
void ossl_SSL_CTX_set_next_protos_advertised_cb(ossl_SSL_CTX *s,
                                           ossl_SSL_CTX_npn_advertised_cb_func cb,
                                           void *arg);
#  define ossl_SSL_CTX_set_npn_advertised_cb ossl_SSL_CTX_set_next_protos_advertised_cb

typedef int (*ossl_SSL_CTX_npn_select_cb_func)(ossl_SSL *s,
                                          unsigned char **out,
                                          unsigned char *outlen,
                                          const unsigned char *in,
                                          unsigned int inlen,
                                          void *arg);
void ossl_SSL_CTX_set_next_proto_select_cb(ossl_SSL_CTX *s,
                                      ossl_SSL_CTX_npn_select_cb_func cb,
                                      void *arg);
#  define ossl_SSL_CTX_set_npn_select_cb ossl_SSL_CTX_set_next_proto_select_cb

void ossl_SSL_get0_next_proto_negotiated(const ossl_SSL *s, const unsigned char **data,
                                    unsigned *len);
#  define ossl_SSL_get0_npn_negotiated ossl_SSL_get0_next_proto_negotiated
# endif

ossl___owur int ossl_SSL_select_next_proto(unsigned char **out, unsigned char *outlen,
                                 const unsigned char *in, unsigned int inlen,
                                 const unsigned char *client,
                                 unsigned int client_len);

# define ossl_OPENSSL_NPN_UNSUPPORTED 0
# define ossl_OPENSSL_NPN_NEGOTIATED  1
# define ossl_OPENSSL_NPN_NO_OVERLAP  2

ossl___owur int ossl_SSL_CTX_set_alpn_protos(ossl_SSL_CTX *ctx, const unsigned char *protos,
                                   unsigned int protos_len);
ossl___owur int ossl_SSL_set_alpn_protos(ossl_SSL *ssl, const unsigned char *protos,
                               unsigned int protos_len);
typedef int (*ossl_SSL_CTX_alpn_select_cb_func)(ossl_SSL *ssl,
                                           const unsigned char **out,
                                           unsigned char *outlen,
                                           const unsigned char *in,
                                           unsigned int inlen,
                                           void *arg);
void ossl_SSL_CTX_set_alpn_select_cb(ossl_SSL_CTX *ctx,
                                ossl_SSL_CTX_alpn_select_cb_func cb,
                                void *arg);
void ossl_SSL_get0_alpn_selected(const ossl_SSL *ssl, const unsigned char **data,
                            unsigned int *len);

# ifndef ossl_OPENSSL_NO_PSK
/*
 * the maximum length of the buffer given to callbacks containing the
 * resulting identity/psk
 */
#  define ossl_PSK_MAX_IDENTITY_LEN 256
#  define ossl_PSK_MAX_PSK_LEN 512
typedef unsigned int (*ossl_SSL_psk_client_cb_func)(ossl_SSL *ssl,
                                               const char *hint,
                                               char *identity,
                                               unsigned int max_identity_len,
                                               unsigned char *psk,
                                               unsigned int max_psk_len);
void ossl_SSL_CTX_set_psk_client_callback(ossl_SSL_CTX *ctx, ossl_SSL_psk_client_cb_func cb);
void ossl_SSL_set_psk_client_callback(ossl_SSL *ssl, ossl_SSL_psk_client_cb_func cb);

typedef unsigned int (*ossl_SSL_psk_server_cb_func)(ossl_SSL *ssl,
                                               const char *identity,
                                               unsigned char *psk,
                                               unsigned int max_psk_len);
void ossl_SSL_CTX_set_psk_server_callback(ossl_SSL_CTX *ctx, ossl_SSL_psk_server_cb_func cb);
void ossl_SSL_set_psk_server_callback(ossl_SSL *ssl, ossl_SSL_psk_server_cb_func cb);

ossl___owur int ossl_SSL_CTX_use_psk_identity_hint(ossl_SSL_CTX *ctx, const char *identity_hint);
ossl___owur int ossl_SSL_use_psk_identity_hint(ossl_SSL *s, const char *identity_hint);
const char *ossl_SSL_get_psk_identity_hint(const ossl_SSL *s);
const char *ossl_SSL_get_psk_identity(const ossl_SSL *s);
# endif

typedef int (*ossl_SSL_psk_find_session_cb_func)(ossl_SSL *ssl,
                                            const unsigned char *identity,
                                            size_t identity_len,
                                            ossl_SSL_SESSION **sess);
typedef int (*ossl_SSL_psk_use_session_cb_func)(ossl_SSL *ssl, const ossl_EVP_MD *md,
                                           const unsigned char **id,
                                           size_t *idlen,
                                           ossl_SSL_SESSION **sess);

void ossl_SSL_set_psk_find_session_callback(ossl_SSL *s, ossl_SSL_psk_find_session_cb_func cb);
void ossl_SSL_CTX_set_psk_find_session_callback(ossl_SSL_CTX *ctx,
                                           ossl_SSL_psk_find_session_cb_func cb);
void ossl_SSL_set_psk_use_session_callback(ossl_SSL *s, ossl_SSL_psk_use_session_cb_func cb);
void ossl_SSL_CTX_set_psk_use_session_callback(ossl_SSL_CTX *ctx,
                                          ossl_SSL_psk_use_session_cb_func cb);

/* Register callbacks to handle custom TLS Extensions for client or server. */

ossl___owur int ossl_SSL_CTX_has_client_custom_ext(const ossl_SSL_CTX *ctx,
                                         unsigned int ext_type);

ossl___owur int ossl_SSL_CTX_add_client_custom_ext(ossl_SSL_CTX *ctx,
                                         unsigned int ext_type,
                                         ossl_custom_ext_add_cb add_cb,
                                         ossl_custom_ext_free_cb free_cb,
                                         void *add_arg,
                                         ossl_custom_ext_parse_cb parse_cb,
                                         void *parse_arg);

ossl___owur int ossl_SSL_CTX_add_server_custom_ext(ossl_SSL_CTX *ctx,
                                         unsigned int ext_type,
                                         ossl_custom_ext_add_cb add_cb,
                                         ossl_custom_ext_free_cb free_cb,
                                         void *add_arg,
                                         ossl_custom_ext_parse_cb parse_cb,
                                         void *parse_arg);

ossl___owur int ossl_SSL_CTX_add_custom_ext(ossl_SSL_CTX *ctx, unsigned int ext_type,
                                  unsigned int context,
                                  ossl_SSL_custom_ext_add_cb_ex add_cb,
                                  ossl_SSL_custom_ext_free_cb_ex free_cb,
                                  void *add_arg,
                                  ossl_SSL_custom_ext_parse_cb_ex parse_cb,
                                  void *parse_arg);

ossl___owur int ossl_SSL_extension_supported(unsigned int ext_type);

# define ossl_SSL_NOTHING            1
# define ossl_SSL_WRITING            2
# define ossl_SSL_READING            3
# define ossl_SSL_X509_LOOKUP        4
# define ossl_SSL_ASYNC_PAUSED       5
# define ossl_SSL_ASYNC_NO_JOBS      6
# define ossl_SSL_CLIENT_HELLO_CB    7
# define ossl_SSL_RETRY_VERIFY       8

/* These will only be used when doing non-blocking IO */
# define ossl_SSL_want_nothing(s)         (ossl_SSL_want(s) == ossl_SSL_NOTHING)
# define ossl_SSL_want_read(s)            (ossl_SSL_want(s) == ossl_SSL_READING)
# define ossl_SSL_want_write(s)           (ossl_SSL_want(s) == ossl_SSL_WRITING)
# define ossl_SSL_want_x509_lookup(s)     (ossl_SSL_want(s) == ossl_SSL_X509_LOOKUP)
# define ossl_SSL_want_retry_verify(s)    (ossl_SSL_want(s) == ossl_SSL_RETRY_VERIFY)
# define ossl_SSL_want_async(s)           (ossl_SSL_want(s) == ossl_SSL_ASYNC_PAUSED)
# define ossl_SSL_want_async_job(s)       (ossl_SSL_want(s) == ossl_SSL_ASYNC_NO_JOBS)
# define ossl_SSL_want_client_hello_cb(s) (ossl_SSL_want(s) == ossl_SSL_CLIENT_HELLO_CB)

# define ossl_SSL_MAC_FLAG_READ_MAC_STREAM 1
# define ossl_SSL_MAC_FLAG_WRITE_MAC_STREAM 2
# define ossl_SSL_MAC_FLAG_READ_MAC_TLSTREE 4
# define ossl_SSL_MAC_FLAG_WRITE_MAC_TLSTREE 8

/*
 * A callback for logging out TLS key material. This callback should log out
 * |line| followed by a newline.
 */
typedef void (*ossl_SSL_CTX_keylog_cb_func)(const ossl_SSL *ssl, const char *line);

/*
 * ossl_SSL_CTX_set_keylog_callback configures a callback to log key material. This
 * is intended for debugging use with tools like Wireshark. The cb function
 * should log line followed by a newline.
 */
void ossl_SSL_CTX_set_keylog_callback(ossl_SSL_CTX *ctx, ossl_SSL_CTX_keylog_cb_func cb);

/*
 * ossl_SSL_CTX_get_keylog_callback returns the callback configured by
 * ossl_SSL_CTX_set_keylog_callback.
 */
ossl_SSL_CTX_keylog_cb_func ossl_SSL_CTX_get_keylog_callback(const ossl_SSL_CTX *ctx);

int ossl_SSL_CTX_set_max_early_data(ossl_SSL_CTX *ctx, uint32_t max_early_data);
uint32_t ossl_SSL_CTX_get_max_early_data(const ossl_SSL_CTX *ctx);
int ossl_SSL_set_max_early_data(ossl_SSL *s, uint32_t max_early_data);
uint32_t ossl_SSL_get_max_early_data(const ossl_SSL *s);
int ossl_SSL_CTX_set_recv_max_early_data(ossl_SSL_CTX *ctx, uint32_t recv_max_early_data);
uint32_t ossl_SSL_CTX_get_recv_max_early_data(const ossl_SSL_CTX *ctx);
int ossl_SSL_set_recv_max_early_data(ossl_SSL *s, uint32_t recv_max_early_data);
uint32_t ossl_SSL_get_recv_max_early_data(const ossl_SSL *s);

#ifdef __cplusplus
}
#endif

# include "ossl/openssl/ssl2.h"
# include "ossl/openssl/ssl3.h"
# include "ossl/openssl/tls1.h"      /* This is mostly sslv3 with a few tweaks */
# include "ossl/openssl/dtls1.h"     /* Datagram TLS */
# include "ossl/openssl/srtp.h"      /* Support for the use_srtp extension */

#ifdef  __cplusplus
extern "C" {
#endif

/*
 * These need to be after the above set of includes due to a compiler bug
 * in VisualStudio 2015
 */
ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_SSL_CIPHER, const ossl_SSL_CIPHER, ossl_SSL_CIPHER)
#define ossl_sk_SSL_CIPHER_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_SSL_CIPHER_sk_type(sk))
#define ossl_sk_SSL_CIPHER_value(sk, idx) ((const ossl_SSL_CIPHER *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_SSL_CIPHER_sk_type(sk), (idx)))
#define ossl_sk_SSL_CIPHER_new(cmp) ((ossl_STACK_OF(ossl_SSL_CIPHER) *)ossl_OPENSSL_sk_new(ossl_ossl_check_SSL_CIPHER_compfunc_type(cmp)))
#define ossl_sk_SSL_CIPHER_new_null() ((ossl_STACK_OF(ossl_SSL_CIPHER) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_SSL_CIPHER_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_SSL_CIPHER) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_SSL_CIPHER_compfunc_type(cmp), (n)))
#define ossl_sk_SSL_CIPHER_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_SSL_CIPHER_sk_type(sk), (n))
#define ossl_sk_SSL_CIPHER_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_SSL_CIPHER_sk_type(sk))
#define ossl_sk_SSL_CIPHER_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_SSL_CIPHER_sk_type(sk))
#define ossl_sk_SSL_CIPHER_delete(sk, i) ((const ossl_SSL_CIPHER *)ossl_OPENSSL_sk_delete(ossl_ossl_check_SSL_CIPHER_sk_type(sk), (i)))
#define ossl_sk_SSL_CIPHER_delete_ptr(sk, ptr) ((const ossl_SSL_CIPHER *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_SSL_CIPHER_sk_type(sk), ossl_ossl_check_SSL_CIPHER_type(ptr)))
#define ossl_sk_SSL_CIPHER_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_SSL_CIPHER_sk_type(sk), ossl_ossl_check_SSL_CIPHER_type(ptr))
#define ossl_sk_SSL_CIPHER_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_SSL_CIPHER_sk_type(sk), ossl_ossl_check_SSL_CIPHER_type(ptr))
#define ossl_sk_SSL_CIPHER_pop(sk) ((const ossl_SSL_CIPHER *)ossl_OPENSSL_sk_pop(ossl_ossl_check_SSL_CIPHER_sk_type(sk)))
#define ossl_sk_SSL_CIPHER_shift(sk) ((const ossl_SSL_CIPHER *)ossl_OPENSSL_sk_shift(ossl_ossl_check_SSL_CIPHER_sk_type(sk)))
#define ossl_sk_SSL_CIPHER_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_SSL_CIPHER_sk_type(sk),ossl_ossl_check_SSL_CIPHER_freefunc_type(freefunc))
#define ossl_sk_SSL_CIPHER_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_SSL_CIPHER_sk_type(sk), ossl_ossl_check_SSL_CIPHER_type(ptr), (idx))
#define ossl_sk_SSL_CIPHER_set(sk, idx, ptr) ((const ossl_SSL_CIPHER *)ossl_OPENSSL_sk_set(ossl_ossl_check_SSL_CIPHER_sk_type(sk), (idx), ossl_ossl_check_SSL_CIPHER_type(ptr)))
#define ossl_sk_SSL_CIPHER_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_SSL_CIPHER_sk_type(sk), ossl_ossl_check_SSL_CIPHER_type(ptr))
#define ossl_sk_SSL_CIPHER_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_SSL_CIPHER_sk_type(sk), ossl_ossl_check_SSL_CIPHER_type(ptr))
#define ossl_sk_SSL_CIPHER_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_SSL_CIPHER_sk_type(sk), ossl_ossl_check_SSL_CIPHER_type(ptr), pnum)
#define ossl_sk_SSL_CIPHER_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_SSL_CIPHER_sk_type(sk))
#define ossl_sk_SSL_CIPHER_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_SSL_CIPHER_sk_type(sk))
#define ossl_sk_SSL_CIPHER_dup(sk) ((ossl_STACK_OF(ossl_SSL_CIPHER) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_SSL_CIPHER_sk_type(sk)))
#define ossl_sk_SSL_CIPHER_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_SSL_CIPHER) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_SSL_CIPHER_sk_type(sk), ossl_ossl_check_SSL_CIPHER_copyfunc_type(copyfunc), ossl_ossl_check_SSL_CIPHER_freefunc_type(freefunc)))
#define ossl_sk_SSL_CIPHER_set_cmp_func(sk, cmp) ((ossl_sk_SSL_CIPHER_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_SSL_CIPHER_sk_type(sk), ossl_ossl_check_SSL_CIPHER_compfunc_type(cmp)))
ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_SSL_COMP, ossl_SSL_COMP, ossl_SSL_COMP)
#define ossl_sk_SSL_COMP_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_SSL_COMP_sk_type(sk))
#define ossl_sk_SSL_COMP_value(sk, idx) ((ossl_SSL_COMP *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_SSL_COMP_sk_type(sk), (idx)))
#define ossl_sk_SSL_COMP_new(cmp) ((ossl_STACK_OF(ossl_SSL_COMP) *)ossl_OPENSSL_sk_new(ossl_ossl_check_SSL_COMP_compfunc_type(cmp)))
#define ossl_sk_SSL_COMP_new_null() ((ossl_STACK_OF(ossl_SSL_COMP) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_SSL_COMP_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_SSL_COMP) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_SSL_COMP_compfunc_type(cmp), (n)))
#define ossl_sk_SSL_COMP_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_SSL_COMP_sk_type(sk), (n))
#define ossl_sk_SSL_COMP_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_SSL_COMP_sk_type(sk))
#define ossl_sk_SSL_COMP_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_SSL_COMP_sk_type(sk))
#define ossl_sk_SSL_COMP_delete(sk, i) ((ossl_SSL_COMP *)ossl_OPENSSL_sk_delete(ossl_ossl_check_SSL_COMP_sk_type(sk), (i)))
#define ossl_sk_SSL_COMP_delete_ptr(sk, ptr) ((ossl_SSL_COMP *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_SSL_COMP_sk_type(sk), ossl_ossl_check_SSL_COMP_type(ptr)))
#define ossl_sk_SSL_COMP_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_SSL_COMP_sk_type(sk), ossl_ossl_check_SSL_COMP_type(ptr))
#define ossl_sk_SSL_COMP_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_SSL_COMP_sk_type(sk), ossl_ossl_check_SSL_COMP_type(ptr))
#define ossl_sk_SSL_COMP_pop(sk) ((ossl_SSL_COMP *)ossl_OPENSSL_sk_pop(ossl_ossl_check_SSL_COMP_sk_type(sk)))
#define ossl_sk_SSL_COMP_shift(sk) ((ossl_SSL_COMP *)ossl_OPENSSL_sk_shift(ossl_ossl_check_SSL_COMP_sk_type(sk)))
#define ossl_sk_SSL_COMP_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_SSL_COMP_sk_type(sk),ossl_ossl_check_SSL_COMP_freefunc_type(freefunc))
#define ossl_sk_SSL_COMP_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_SSL_COMP_sk_type(sk), ossl_ossl_check_SSL_COMP_type(ptr), (idx))
#define ossl_sk_SSL_COMP_set(sk, idx, ptr) ((ossl_SSL_COMP *)ossl_OPENSSL_sk_set(ossl_ossl_check_SSL_COMP_sk_type(sk), (idx), ossl_ossl_check_SSL_COMP_type(ptr)))
#define ossl_sk_SSL_COMP_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_SSL_COMP_sk_type(sk), ossl_ossl_check_SSL_COMP_type(ptr))
#define ossl_sk_SSL_COMP_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_SSL_COMP_sk_type(sk), ossl_ossl_check_SSL_COMP_type(ptr))
#define ossl_sk_SSL_COMP_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_SSL_COMP_sk_type(sk), ossl_ossl_check_SSL_COMP_type(ptr), pnum)
#define ossl_sk_SSL_COMP_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_SSL_COMP_sk_type(sk))
#define ossl_sk_SSL_COMP_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_SSL_COMP_sk_type(sk))
#define ossl_sk_SSL_COMP_dup(sk) ((ossl_STACK_OF(ossl_SSL_COMP) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_SSL_COMP_sk_type(sk)))
#define ossl_sk_SSL_COMP_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_SSL_COMP) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_SSL_COMP_sk_type(sk), ossl_ossl_check_SSL_COMP_copyfunc_type(copyfunc), ossl_ossl_check_SSL_COMP_freefunc_type(freefunc)))
#define ossl_sk_SSL_COMP_set_cmp_func(sk, cmp) ((ossl_sk_SSL_COMP_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_SSL_COMP_sk_type(sk), ossl_ossl_check_SSL_COMP_compfunc_type(cmp)))


/* compatibility */
# define ossl_SSL_set_app_data(s,arg)         (ossl_SSL_set_ex_data(s,0,(char *)(arg)))
# define ossl_SSL_get_app_data(s)             (ossl_SSL_get_ex_data(s,0))
# define ossl_SSL_SESSION_set_app_data(s,a)   (ossl_SSL_SESSION_set_ex_data(s,0, \
                                                                  (char *)(a)))
# define ossl_SSL_SESSION_get_app_data(s)     (ossl_SSL_SESSION_get_ex_data(s,0))
# define ossl_SSL_CTX_get_app_data(ctx)       (ossl_SSL_CTX_get_ex_data(ctx,0))
# define ossl_SSL_CTX_set_app_data(ctx,arg)   (ossl_SSL_CTX_set_ex_data(ctx,0, \
                                                              (char *)(arg)))
# ifndef ossl_OPENSSL_NO_DEPRECATED_1_1_0
ossl_OSSL_DEPRECATEDIN_1_1_0 void ossl_SSL_set_debug(ossl_SSL *s, int debug);
# endif

/* TLSv1.3 KeyUpdate message types */
/* -1 used so that this is an invalid value for the on-the-wire protocol */
#define ossl_SSL_KEY_UPDATE_NONE             -1
/* Values as defined for the on-the-wire protocol */
#define ossl_SSL_KEY_UPDATE_NOT_REQUESTED     0
#define ossl_SSL_KEY_UPDATE_REQUESTED         1

/*
 * The valid handshake states (one for each type message sent and one for each
 * type of message received). There are also two "special" states:
 * TLS = TLS or DTLS state
 * DTLS = DTLS specific state
 * CR/SR = Client Read/Server Read
 * CW/SW = Client Write/Server Write
 *
 * The "special" states are:
 * ossl_TLS_ST_BEFORE = No handshake has been initiated yet
 * ossl_TLS_ST_OK = A handshake has been successfully completed
 */
typedef enum {
    ossl_TLS_ST_BEFORE,
    ossl_TLS_ST_OK,
    ossl_DTLS_ST_CR_HELLO_VERIFY_REQUEST,
    ossl_TLS_ST_CR_SRVR_HELLO,
    ossl_TLS_ST_CR_CERT,
    ossl_TLS_ST_CR_CERT_STATUS,
    ossl_TLS_ST_CR_KEY_EXCH,
    ossl_TLS_ST_CR_CERT_REQ,
    ossl_TLS_ST_CR_SRVR_DONE,
    ossl_TLS_ST_CR_SESSION_TICKET,
    ossl_TLS_ST_CR_CHANGE,
    ossl_TLS_ST_CR_FINISHED,
    ossl_TLS_ST_CW_CLNT_HELLO,
    ossl_TLS_ST_CW_CERT,
    ossl_TLS_ST_CW_KEY_EXCH,
    ossl_TLS_ST_CW_CERT_VRFY,
    ossl_TLS_ST_CW_CHANGE,
    ossl_TLS_ST_CW_NEXT_PROTO,
    ossl_TLS_ST_CW_FINISHED,
    ossl_TLS_ST_SW_HELLO_REQ,
    ossl_TLS_ST_SR_CLNT_HELLO,
    ossl_DTLS_ST_SW_HELLO_VERIFY_REQUEST,
    ossl_TLS_ST_SW_SRVR_HELLO,
    ossl_TLS_ST_SW_CERT,
    ossl_TLS_ST_SW_KEY_EXCH,
    ossl_TLS_ST_SW_CERT_REQ,
    ossl_TLS_ST_SW_SRVR_DONE,
    ossl_TLS_ST_SR_CERT,
    ossl_TLS_ST_SR_KEY_EXCH,
    ossl_TLS_ST_SR_CERT_VRFY,
    ossl_TLS_ST_SR_NEXT_PROTO,
    ossl_TLS_ST_SR_CHANGE,
    ossl_TLS_ST_SR_FINISHED,
    ossl_TLS_ST_SW_SESSION_TICKET,
    ossl_TLS_ST_SW_CERT_STATUS,
    ossl_TLS_ST_SW_CHANGE,
    ossl_TLS_ST_SW_FINISHED,
    ossl_TLS_ST_SW_ENCRYPTED_EXTENSIONS,
    ossl_TLS_ST_CR_ENCRYPTED_EXTENSIONS,
    ossl_TLS_ST_CR_CERT_VRFY,
    ossl_TLS_ST_SW_CERT_VRFY,
    ossl_TLS_ST_CR_HELLO_REQ,
    ossl_TLS_ST_SW_KEY_UPDATE,
    ossl_TLS_ST_CW_KEY_UPDATE,
    ossl_TLS_ST_SR_KEY_UPDATE,
    ossl_TLS_ST_CR_KEY_UPDATE,
    ossl_TLS_ST_EARLY_DATA,
    ossl_TLS_ST_PENDING_EARLY_DATA_END,
    ossl_TLS_ST_CW_END_OF_EARLY_DATA,
    ossl_TLS_ST_SR_END_OF_EARLY_DATA
} ossl_OSSL_HANDSHAKE_STATE;

/*
 * Most of the following state values are no longer used and are defined to be
 * the closest equivalent value in the current state machine code. Not all
 * defines have an equivalent and are set to a dummy value (-1). ossl_SSL_ST_CONNECT
 * and ossl_SSL_ST_ACCEPT are still in use in the definition of ossl_SSL_CB_ACCEPT_LOOP,
 * ossl_SSL_CB_ACCEPT_EXIT, ossl_SSL_CB_CONNECT_LOOP and ossl_SSL_CB_CONNECT_EXIT.
 */

# define ossl_SSL_ST_CONNECT                  0x1000
# define ossl_SSL_ST_ACCEPT                   0x2000

# define ossl_SSL_ST_MASK                     0x0FFF

# define ossl_SSL_CB_LOOP                     0x01
# define ossl_SSL_CB_EXIT                     0x02
# define ossl_SSL_CB_READ                     0x04
# define ossl_SSL_CB_WRITE                    0x08
# define ossl_SSL_CB_ALERT                    0x4000/* used in callback */
# define ossl_SSL_CB_READ_ALERT               (ossl_SSL_CB_ALERT|ossl_SSL_CB_READ)
# define ossl_SSL_CB_WRITE_ALERT              (ossl_SSL_CB_ALERT|ossl_SSL_CB_WRITE)
# define ossl_SSL_CB_ACCEPT_LOOP              (ossl_SSL_ST_ACCEPT|ossl_SSL_CB_LOOP)
# define ossl_SSL_CB_ACCEPT_EXIT              (ossl_SSL_ST_ACCEPT|ossl_SSL_CB_EXIT)
# define ossl_SSL_CB_CONNECT_LOOP             (ossl_SSL_ST_CONNECT|ossl_SSL_CB_LOOP)
# define ossl_SSL_CB_CONNECT_EXIT             (ossl_SSL_ST_CONNECT|ossl_SSL_CB_EXIT)
# define ossl_SSL_CB_HANDSHAKE_START          0x10
# define ossl_SSL_CB_HANDSHAKE_DONE           0x20

/* Is the SSL_connection established? */
# define ossl_SSL_in_connect_init(a)          (ossl_SSL_in_init(a) && !ossl_SSL_is_server(a))
# define ossl_SSL_in_accept_init(a)           (ossl_SSL_in_init(a) && ossl_SSL_is_server(a))
int ossl_SSL_in_init(const ossl_SSL *s);
int ossl_SSL_in_before(const ossl_SSL *s);
int ossl_SSL_is_init_finished(const ossl_SSL *s);

/*
 * The following 3 states are kept in ssl->rlayer.rstate when reads fail, you
 * should not need these
 */
# define ossl_SSL_ST_READ_HEADER                      0xF0
# define ossl_SSL_ST_READ_BODY                        0xF1
# define ossl_SSL_ST_READ_DONE                        0xF2

/*-
 * Obtain latest Finished message
 *   -- that we sent (ossl_SSL_get_finished)
 *   -- that we expected from peer (ossl_SSL_get_peer_finished).
 * Returns length (0 == no Finished so far), copies up to 'count' bytes.
 */
size_t ossl_SSL_get_finished(const ossl_SSL *s, void *buf, size_t count);
size_t ossl_SSL_get_peer_finished(const ossl_SSL *s, void *buf, size_t count);

/*
 * use either ossl_SSL_VERIFY_NONE or ossl_SSL_VERIFY_PEER, the last 3 options are
 * 'ored' with ossl_SSL_VERIFY_PEER if they are desired
 */
# define ossl_SSL_VERIFY_NONE                 0x00
# define ossl_SSL_VERIFY_PEER                 0x01
# define ossl_SSL_VERIFY_FAIL_IF_NO_PEER_CERT 0x02
# define ossl_SSL_VERIFY_CLIENT_ONCE          0x04
# define ossl_SSL_VERIFY_POST_HANDSHAKE       0x08

# ifndef ossl_OPENSSL_NO_DEPRECATED_1_1_0
#  define ossl_OpenSSL_add_ssl_algorithms()   ossl_SSL_library_init()
#  define ossl_SSLeay_add_ssl_algorithms()    ossl_SSL_library_init()
# endif

/* More backward compatibility */
# define ossl_SSL_get_cipher(s) \
                ossl_SSL_CIPHER_get_name(ossl_SSL_get_current_cipher(s))
# define ossl_SSL_get_cipher_bits(s,np) \
                ossl_SSL_CIPHER_get_bits(ossl_SSL_get_current_cipher(s),np)
# define ossl_SSL_get_cipher_version(s) \
                ossl_SSL_CIPHER_get_version(ossl_SSL_get_current_cipher(s))
# define ossl_SSL_get_cipher_name(s) \
                ossl_SSL_CIPHER_get_name(ossl_SSL_get_current_cipher(s))
# define ossl_SSL_get_time(a)         ossl_SSL_SESSION_get_time(a)
# define ossl_SSL_set_time(a,b)       ossl_SSL_SESSION_set_time((a),(b))
# define ossl_SSL_get_timeout(a)      ossl_SSL_SESSION_get_timeout(a)
# define ossl_SSL_set_timeout(a,b)    ossl_SSL_SESSION_set_timeout((a),(b))

# define ossl_d2i_SSL_SESSION_bio(bp,s_id) ossl_ASN1_d2i_bio_of(ossl_SSL_SESSION,ossl_SSL_SESSION_new,ossl_d2i_SSL_SESSION,bp,s_id)
# define ossl_i2d_SSL_SESSION_bio(bp,s_id) ossl_ASN1_i2d_bio_of(ossl_SSL_SESSION,ossl_i2d_SSL_SESSION,bp,s_id)

ossl_DECLARE_PEM_rw(ossl_SSL_SESSION, ossl_SSL_SESSION)
# define ossl_SSL_AD_REASON_OFFSET            1000/* offset to get SSL_R_... value
                                              * from SSL_AD_... */
/* These alert types are for SSLv3 and TLSv1 */
# define ossl_SSL_AD_CLOSE_NOTIFY             ossl_SSL3_AD_CLOSE_NOTIFY
/* fatal */
# define ossl_SSL_AD_UNEXPECTED_MESSAGE       ossl_SSL3_AD_UNEXPECTED_MESSAGE
/* fatal */
# define ossl_SSL_AD_BAD_RECORD_MAC           ossl_SSL3_AD_BAD_RECORD_MAC
# define ossl_SSL_AD_DECRYPTION_FAILED        ossl_TLS1_AD_DECRYPTION_FAILED
# define ossl_SSL_AD_RECORD_OVERFLOW          ossl_TLS1_AD_RECORD_OVERFLOW
/* fatal */
# define ossl_SSL_AD_DECOMPRESSION_FAILURE    ossl_SSL3_AD_DECOMPRESSION_FAILURE
/* fatal */
# define ossl_SSL_AD_HANDSHAKE_FAILURE        ossl_SSL3_AD_HANDSHAKE_FAILURE
/* Not for TLS */
# define ossl_SSL_AD_NO_CERTIFICATE           ossl_SSL3_AD_NO_CERTIFICATE
# define ossl_SSL_AD_BAD_CERTIFICATE          ossl_SSL3_AD_BAD_CERTIFICATE
# define ossl_SSL_AD_UNSUPPORTED_CERTIFICATE  ossl_SSL3_AD_UNSUPPORTED_CERTIFICATE
# define ossl_SSL_AD_CERTIFICATE_REVOKED      ossl_SSL3_AD_CERTIFICATE_REVOKED
# define ossl_SSL_AD_CERTIFICATE_EXPIRED      ossl_SSL3_AD_CERTIFICATE_EXPIRED
# define ossl_SSL_AD_CERTIFICATE_UNKNOWN      ossl_SSL3_AD_CERTIFICATE_UNKNOWN
/* fatal */
# define ossl_SSL_AD_ILLEGAL_PARAMETER        ossl_SSL3_AD_ILLEGAL_PARAMETER
/* fatal */
# define ossl_SSL_AD_UNKNOWN_CA               ossl_TLS1_AD_UNKNOWN_CA
/* fatal */
# define ossl_SSL_AD_ACCESS_DENIED            ossl_TLS1_AD_ACCESS_DENIED
/* fatal */
# define ossl_SSL_AD_DECODE_ERROR             ossl_TLS1_AD_DECODE_ERROR
# define ossl_SSL_AD_DECRYPT_ERROR            ossl_TLS1_AD_DECRYPT_ERROR
/* fatal */
# define ossl_SSL_AD_EXPORT_RESTRICTION       ossl_TLS1_AD_EXPORT_RESTRICTION
/* fatal */
# define ossl_SSL_AD_PROTOCOL_VERSION         ossl_TLS1_AD_PROTOCOL_VERSION
/* fatal */
# define ossl_SSL_AD_INSUFFICIENT_SECURITY    ossl_TLS1_AD_INSUFFICIENT_SECURITY
/* fatal */
# define ossl_SSL_AD_INTERNAL_ERROR           ossl_TLS1_AD_INTERNAL_ERROR
# define ossl_SSL_AD_USER_CANCELLED           ossl_TLS1_AD_USER_CANCELLED
# define ossl_SSL_AD_NO_RENEGOTIATION         ossl_TLS1_AD_NO_RENEGOTIATION
# define ossl_SSL_AD_MISSING_EXTENSION        ossl_TLS13_AD_MISSING_EXTENSION
# define ossl_SSL_AD_CERTIFICATE_REQUIRED     ossl_TLS13_AD_CERTIFICATE_REQUIRED
# define ossl_SSL_AD_UNSUPPORTED_EXTENSION    ossl_TLS1_AD_UNSUPPORTED_EXTENSION
# define ossl_SSL_AD_CERTIFICATE_UNOBTAINABLE ossl_TLS1_AD_CERTIFICATE_UNOBTAINABLE
# define ossl_SSL_AD_UNRECOGNIZED_NAME        ossl_TLS1_AD_UNRECOGNIZED_NAME
# define ossl_SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE ossl_TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE
# define ossl_SSL_AD_BAD_CERTIFICATE_HASH_VALUE ossl_TLS1_AD_BAD_CERTIFICATE_HASH_VALUE
/* fatal */
# define ossl_SSL_AD_UNKNOWN_PSK_IDENTITY     ossl_TLS1_AD_UNKNOWN_PSK_IDENTITY
/* fatal */
# define ossl_SSL_AD_INAPPROPRIATE_FALLBACK   ossl_TLS1_AD_INAPPROPRIATE_FALLBACK
# define ossl_SSL_AD_NO_APPLICATION_PROTOCOL  ossl_TLS1_AD_NO_APPLICATION_PROTOCOL
# define ossl_SSL_ERROR_NONE                  0
# define ossl_SSL_ERROR_SSL                   1
# define ossl_SSL_ERROR_WANT_READ             2
# define ossl_SSL_ERROR_WANT_WRITE            3
# define ossl_SSL_ERROR_WANT_X509_LOOKUP      4
# define ossl_SSL_ERROR_SYSCALL               5/* look at error stack/return
                                           * value/errno */
# define ossl_SSL_ERROR_ZERO_RETURN           6
# define ossl_SSL_ERROR_WANT_CONNECT          7
# define ossl_SSL_ERROR_WANT_ACCEPT           8
# define ossl_SSL_ERROR_WANT_ASYNC            9
# define ossl_SSL_ERROR_WANT_ASYNC_JOB       10
# define ossl_SSL_ERROR_WANT_CLIENT_HELLO_CB 11
# define ossl_SSL_ERROR_WANT_RETRY_VERIFY    12

# ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
#  define ossl_SSL_CTRL_SET_TMP_DH                    3
#  define ossl_SSL_CTRL_SET_TMP_ECDH                  4
#  define ossl_SSL_CTRL_SET_TMP_DH_CB                 6
# endif

# define ossl_SSL_CTRL_GET_CLIENT_CERT_REQUEST        9
# define ossl_SSL_CTRL_GET_NUM_RENEGOTIATIONS         10
# define ossl_SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS       11
# define ossl_SSL_CTRL_GET_TOTAL_RENEGOTIATIONS       12
# define ossl_SSL_CTRL_GET_FLAGS                      13
# define ossl_SSL_CTRL_EXTRA_CHAIN_CERT               14
# define ossl_SSL_CTRL_SET_MSG_CALLBACK               15
# define ossl_SSL_CTRL_SET_MSG_CALLBACK_ARG           16
/* only applies to datagram connections */
# define ossl_SSL_CTRL_SET_MTU                17
/* Stats */
# define ossl_SSL_CTRL_SESS_NUMBER                    20
# define ossl_SSL_CTRL_SESS_CONNECT                   21
# define ossl_SSL_CTRL_SESS_CONNECT_GOOD              22
# define ossl_SSL_CTRL_SESS_CONNECT_RENEGOTIATE       23
# define ossl_SSL_CTRL_SESS_ACCEPT                    24
# define ossl_SSL_CTRL_SESS_ACCEPT_GOOD               25
# define ossl_SSL_CTRL_SESS_ACCEPT_RENEGOTIATE        26
# define ossl_SSL_CTRL_SESS_HIT                       27
# define ossl_SSL_CTRL_SESS_CB_HIT                    28
# define ossl_SSL_CTRL_SESS_MISSES                    29
# define ossl_SSL_CTRL_SESS_TIMEOUTS                  30
# define ossl_SSL_CTRL_SESS_CACHE_FULL                31
# define ossl_SSL_CTRL_MODE                           33
# define ossl_SSL_CTRL_GET_READ_AHEAD                 40
# define ossl_SSL_CTRL_SET_READ_AHEAD                 41
# define ossl_SSL_CTRL_SET_SESS_CACHE_SIZE            42
# define ossl_SSL_CTRL_GET_SESS_CACHE_SIZE            43
# define ossl_SSL_CTRL_SET_SESS_CACHE_MODE            44
# define ossl_SSL_CTRL_GET_SESS_CACHE_MODE            45
# define ossl_SSL_CTRL_GET_MAX_CERT_LIST              50
# define ossl_SSL_CTRL_SET_MAX_CERT_LIST              51
# define ossl_SSL_CTRL_SET_MAX_SEND_FRAGMENT          52
/* see tls1.h for macros based on these */
# define ossl_SSL_CTRL_SET_TLSEXT_SERVERNAME_CB       53
# define ossl_SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG      54
# define ossl_SSL_CTRL_SET_TLSEXT_HOSTNAME            55
# define ossl_SSL_CTRL_SET_TLSEXT_DEBUG_CB            56
# define ossl_SSL_CTRL_SET_TLSEXT_DEBUG_ARG           57
# define ossl_SSL_CTRL_GET_TLSEXT_TICKET_KEYS         58
# define ossl_SSL_CTRL_SET_TLSEXT_TICKET_KEYS         59
/*# define SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT    60 */
/*# define SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB 61 */
/*# define SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB_ARG 62 */
# define ossl_SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB       63
# define ossl_SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG   64
# define ossl_SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE     65
# define ossl_SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS     66
# define ossl_SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS     67
# define ossl_SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS      68
# define ossl_SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS      69
# define ossl_SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP        70
# define ossl_SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP        71
# ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
#  define ossl_SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB      72
# endif
# define ossl_SSL_CTRL_SET_TLS_EXT_SRP_USERNAME_CB    75
# define ossl_SSL_CTRL_SET_SRP_VERIFY_PARAM_CB                76
# define ossl_SSL_CTRL_SET_SRP_GIVE_CLIENT_PWD_CB             77
# define ossl_SSL_CTRL_SET_SRP_ARG            78
# define ossl_SSL_CTRL_SET_TLS_EXT_SRP_USERNAME               79
# define ossl_SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH               80
# define ossl_SSL_CTRL_SET_TLS_EXT_SRP_PASSWORD               81
# define ossl_DTLS_CTRL_GET_TIMEOUT           73
# define ossl_DTLS_CTRL_HANDLE_TIMEOUT        74
# define ossl_SSL_CTRL_GET_RI_SUPPORT                 76
# define ossl_SSL_CTRL_CLEAR_MODE                     78
# define ossl_SSL_CTRL_SET_NOT_RESUMABLE_SESS_CB      79
# define ossl_SSL_CTRL_GET_EXTRA_CHAIN_CERTS          82
# define ossl_SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS        83
# define ossl_SSL_CTRL_CHAIN                          88
# define ossl_SSL_CTRL_CHAIN_CERT                     89
# define ossl_SSL_CTRL_GET_GROUPS                     90
# define ossl_SSL_CTRL_SET_GROUPS                     91
# define ossl_SSL_CTRL_SET_GROUPS_LIST                92
# define ossl_SSL_CTRL_GET_SHARED_GROUP               93
# define ossl_SSL_CTRL_SET_SIGALGS                    97
# define ossl_SSL_CTRL_SET_SIGALGS_LIST               98
# define ossl_SSL_CTRL_CERT_FLAGS                     99
# define ossl_SSL_CTRL_CLEAR_CERT_FLAGS               100
# define ossl_SSL_CTRL_SET_CLIENT_SIGALGS             101
# define ossl_SSL_CTRL_SET_CLIENT_SIGALGS_LIST        102
# define ossl_SSL_CTRL_GET_CLIENT_CERT_TYPES          103
# define ossl_SSL_CTRL_SET_CLIENT_CERT_TYPES          104
# define ossl_SSL_CTRL_BUILD_CERT_CHAIN               105
# define ossl_SSL_CTRL_SET_VERIFY_CERT_STORE          106
# define ossl_SSL_CTRL_SET_CHAIN_CERT_STORE           107
# define ossl_SSL_CTRL_GET_PEER_SIGNATURE_NID         108
# define ossl_SSL_CTRL_GET_PEER_TMP_KEY               109
# define ossl_SSL_CTRL_GET_RAW_CIPHERLIST             110
# define ossl_SSL_CTRL_GET_EC_POINT_FORMATS           111
# define ossl_SSL_CTRL_GET_CHAIN_CERTS                115
# define ossl_SSL_CTRL_SELECT_CURRENT_CERT            116
# define ossl_SSL_CTRL_SET_CURRENT_CERT               117
# define ossl_SSL_CTRL_SET_DH_AUTO                    118
# define ossl_DTLS_CTRL_SET_LINK_MTU                  120
# define ossl_DTLS_CTRL_GET_LINK_MIN_MTU              121
# define ossl_SSL_CTRL_GET_EXTMS_SUPPORT              122
# define ossl_SSL_CTRL_SET_MIN_PROTO_VERSION          123
# define ossl_SSL_CTRL_SET_MAX_PROTO_VERSION          124
# define ossl_SSL_CTRL_SET_SPLIT_SEND_FRAGMENT        125
# define ossl_SSL_CTRL_SET_MAX_PIPELINES              126
# define ossl_SSL_CTRL_GET_TLSEXT_STATUS_REQ_TYPE     127
# define ossl_SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB       128
# define ossl_SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB_ARG   129
# define ossl_SSL_CTRL_GET_MIN_PROTO_VERSION          130
# define ossl_SSL_CTRL_GET_MAX_PROTO_VERSION          131
# define ossl_SSL_CTRL_GET_SIGNATURE_NID              132
# define ossl_SSL_CTRL_GET_TMP_KEY                    133
# define ossl_SSL_CTRL_GET_NEGOTIATED_GROUP           134
# define ossl_SSL_CTRL_SET_RETRY_VERIFY               136
# define ossl_SSL_CTRL_GET_VERIFY_CERT_STORE          137
# define ossl_SSL_CTRL_GET_CHAIN_CERT_STORE           138
# define ossl_SSL_CERT_SET_FIRST                      1
# define ossl_SSL_CERT_SET_NEXT                       2
# define ossl_SSL_CERT_SET_SERVER                     3
# define ossl_DTLSv1_get_timeout(ssl, arg) \
        ossl_SSL_ctrl(ssl,ossl_DTLS_CTRL_GET_TIMEOUT,0, (void *)(arg))
# define ossl_DTLSv1_handle_timeout(ssl) \
        ossl_SSL_ctrl(ssl,ossl_DTLS_CTRL_HANDLE_TIMEOUT,0, NULL)
# define ossl_SSL_num_renegotiations(ssl) \
        ossl_SSL_ctrl((ssl),ossl_SSL_CTRL_GET_NUM_RENEGOTIATIONS,0,NULL)
# define ossl_SSL_clear_num_renegotiations(ssl) \
        ossl_SSL_ctrl((ssl),ossl_SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS,0,NULL)
# define ossl_SSL_total_renegotiations(ssl) \
        ossl_SSL_ctrl((ssl),ossl_SSL_CTRL_GET_TOTAL_RENEGOTIATIONS,0,NULL)
# ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
#  define ossl_SSL_CTX_set_tmp_dh(ctx,dh) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SET_TMP_DH,0,(char *)(dh))
# endif
# define ossl_SSL_CTX_set_dh_auto(ctx, onoff) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SET_DH_AUTO,onoff,NULL)
# define ossl_SSL_set_dh_auto(s, onoff) \
        ossl_SSL_ctrl(s,ossl_SSL_CTRL_SET_DH_AUTO,onoff,NULL)
# ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
#  define ossl_SSL_set_tmp_dh(ssl,dh) \
        ossl_SSL_ctrl(ssl,ossl_SSL_CTRL_SET_TMP_DH,0,(char *)(dh))
# endif
# ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
#  define ossl_SSL_CTX_set_tmp_ecdh(ctx,ecdh) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SET_TMP_ECDH,0,(char *)(ecdh))
#  define ossl_SSL_set_tmp_ecdh(ssl,ecdh) \
        ossl_SSL_ctrl(ssl,ossl_SSL_CTRL_SET_TMP_ECDH,0,(char *)(ecdh))
# endif
# define ossl_SSL_CTX_add_extra_chain_cert(ctx,x509) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_EXTRA_CHAIN_CERT,0,(char *)(x509))
# define ossl_SSL_CTX_get_extra_chain_certs(ctx,px509) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_GET_EXTRA_CHAIN_CERTS,0,px509)
# define ossl_SSL_CTX_get_extra_chain_certs_only(ctx,px509) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_GET_EXTRA_CHAIN_CERTS,1,px509)
# define ossl_SSL_CTX_clear_extra_chain_certs(ctx) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS,0,NULL)
# define ossl_SSL_CTX_set0_chain(ctx,sk) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_CHAIN,0,(char *)(sk))
# define ossl_SSL_CTX_set1_chain(ctx,sk) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_CHAIN,1,(char *)(sk))
# define ossl_SSL_CTX_add0_chain_cert(ctx,x509) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_CHAIN_CERT,0,(char *)(x509))
# define ossl_SSL_CTX_add1_chain_cert(ctx,x509) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_CHAIN_CERT,1,(char *)(x509))
# define ossl_SSL_CTX_get0_chain_certs(ctx,px509) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_GET_CHAIN_CERTS,0,px509)
# define ossl_SSL_CTX_clear_chain_certs(ctx) \
        ossl_SSL_CTX_set0_chain(ctx,NULL)
# define ossl_SSL_CTX_build_cert_chain(ctx, flags) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_BUILD_CERT_CHAIN, flags, NULL)
# define ossl_SSL_CTX_select_current_cert(ctx,x509) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SELECT_CURRENT_CERT,0,(char *)(x509))
# define ossl_SSL_CTX_set_current_cert(ctx, op) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SET_CURRENT_CERT, op, NULL)
# define ossl_SSL_CTX_set0_verify_cert_store(ctx,st) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SET_VERIFY_CERT_STORE,0,(char *)(st))
# define ossl_SSL_CTX_set1_verify_cert_store(ctx,st) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SET_VERIFY_CERT_STORE,1,(char *)(st))
# define ossl_SSL_CTX_get0_verify_cert_store(ctx,st) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_GET_VERIFY_CERT_STORE,0,(char *)(st))
# define ossl_SSL_CTX_set0_chain_cert_store(ctx,st) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SET_CHAIN_CERT_STORE,0,(char *)(st))
# define ossl_SSL_CTX_set1_chain_cert_store(ctx,st) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SET_CHAIN_CERT_STORE,1,(char *)(st))
# define ossl_SSL_CTX_get0_chain_cert_store(ctx,st) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_GET_CHAIN_CERT_STORE,0,(char *)(st))
# define ossl_SSL_set0_chain(s,sk) \
        ossl_SSL_ctrl(s,ossl_SSL_CTRL_CHAIN,0,(char *)(sk))
# define ossl_SSL_set1_chain(s,sk) \
        ossl_SSL_ctrl(s,ossl_SSL_CTRL_CHAIN,1,(char *)(sk))
# define ossl_SSL_add0_chain_cert(s,x509) \
        ossl_SSL_ctrl(s,ossl_SSL_CTRL_CHAIN_CERT,0,(char *)(x509))
# define ossl_SSL_add1_chain_cert(s,x509) \
        ossl_SSL_ctrl(s,ossl_SSL_CTRL_CHAIN_CERT,1,(char *)(x509))
# define ossl_SSL_get0_chain_certs(s,px509) \
        ossl_SSL_ctrl(s,ossl_SSL_CTRL_GET_CHAIN_CERTS,0,px509)
# define ossl_SSL_clear_chain_certs(s) \
        ossl_SSL_set0_chain(s,NULL)
# define ossl_SSL_build_cert_chain(s, flags) \
        ossl_SSL_ctrl(s,ossl_SSL_CTRL_BUILD_CERT_CHAIN, flags, NULL)
# define ossl_SSL_select_current_cert(s,x509) \
        ossl_SSL_ctrl(s,ossl_SSL_CTRL_SELECT_CURRENT_CERT,0,(char *)(x509))
# define ossl_SSL_set_current_cert(s,op) \
        ossl_SSL_ctrl(s,ossl_SSL_CTRL_SET_CURRENT_CERT, op, NULL)
# define ossl_SSL_set0_verify_cert_store(s,st) \
        ossl_SSL_ctrl(s,ossl_SSL_CTRL_SET_VERIFY_CERT_STORE,0,(char *)(st))
# define ossl_SSL_set1_verify_cert_store(s,st) \
        ossl_SSL_ctrl(s,ossl_SSL_CTRL_SET_VERIFY_CERT_STORE,1,(char *)(st))
#define ossl_SSL_get0_verify_cert_store(s,st) \
        ossl_SSL_ctrl(s,ossl_SSL_CTRL_GET_VERIFY_CERT_STORE,0,(char *)(st))
# define ossl_SSL_set0_chain_cert_store(s,st) \
        ossl_SSL_ctrl(s,ossl_SSL_CTRL_SET_CHAIN_CERT_STORE,0,(char *)(st))
# define ossl_SSL_set1_chain_cert_store(s,st) \
        ossl_SSL_ctrl(s,ossl_SSL_CTRL_SET_CHAIN_CERT_STORE,1,(char *)(st))
#define ossl_SSL_get0_chain_cert_store(s,st) \
        ossl_SSL_ctrl(s,ossl_SSL_CTRL_GET_CHAIN_CERT_STORE,0,(char *)(st))

# define ossl_SSL_get1_groups(s, glist) \
        ossl_SSL_ctrl(s,ossl_SSL_CTRL_GET_GROUPS,0,(int*)(glist))
# define ossl_SSL_CTX_set1_groups(ctx, glist, glistlen) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SET_GROUPS,glistlen,(int *)(glist))
# define ossl_SSL_CTX_set1_groups_list(ctx, s) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SET_GROUPS_LIST,0,(char *)(s))
# define ossl_SSL_set1_groups(s, glist, glistlen) \
        ossl_SSL_ctrl(s,ossl_SSL_CTRL_SET_GROUPS,glistlen,(char *)(glist))
# define ossl_SSL_set1_groups_list(s, str) \
        ossl_SSL_ctrl(s,ossl_SSL_CTRL_SET_GROUPS_LIST,0,(char *)(str))
# define ossl_SSL_get_shared_group(s, n) \
        ossl_SSL_ctrl(s,ossl_SSL_CTRL_GET_SHARED_GROUP,n,NULL)
# define ossl_SSL_get_negotiated_group(s) \
        ossl_SSL_ctrl(s,ossl_SSL_CTRL_GET_NEGOTIATED_GROUP,0,NULL)
# define ossl_SSL_CTX_set1_sigalgs(ctx, slist, slistlen) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SET_SIGALGS,slistlen,(int *)(slist))
# define ossl_SSL_CTX_set1_sigalgs_list(ctx, s) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SET_SIGALGS_LIST,0,(char *)(s))
# define ossl_SSL_set1_sigalgs(s, slist, slistlen) \
        ossl_SSL_ctrl(s,ossl_SSL_CTRL_SET_SIGALGS,slistlen,(int *)(slist))
# define ossl_SSL_set1_sigalgs_list(s, str) \
        ossl_SSL_ctrl(s,ossl_SSL_CTRL_SET_SIGALGS_LIST,0,(char *)(str))
# define ossl_SSL_CTX_set1_client_sigalgs(ctx, slist, slistlen) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SET_CLIENT_SIGALGS,slistlen,(int *)(slist))
# define ossl_SSL_CTX_set1_client_sigalgs_list(ctx, s) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SET_CLIENT_SIGALGS_LIST,0,(char *)(s))
# define ossl_SSL_set1_client_sigalgs(s, slist, slistlen) \
        ossl_SSL_ctrl(s,ossl_SSL_CTRL_SET_CLIENT_SIGALGS,slistlen,(int *)(slist))
# define ossl_SSL_set1_client_sigalgs_list(s, str) \
        ossl_SSL_ctrl(s,ossl_SSL_CTRL_SET_CLIENT_SIGALGS_LIST,0,(char *)(str))
# define ossl_SSL_get0_certificate_types(s, clist) \
        ossl_SSL_ctrl(s, ossl_SSL_CTRL_GET_CLIENT_CERT_TYPES, 0, (char *)(clist))
# define ossl_SSL_CTX_set1_client_certificate_types(ctx, clist, clistlen) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SET_CLIENT_CERT_TYPES,clistlen, \
                     (char *)(clist))
# define ossl_SSL_set1_client_certificate_types(s, clist, clistlen) \
        ossl_SSL_ctrl(s,ossl_SSL_CTRL_SET_CLIENT_CERT_TYPES,clistlen,(char *)(clist))
# define ossl_SSL_get_signature_nid(s, pn) \
        ossl_SSL_ctrl(s,ossl_SSL_CTRL_GET_SIGNATURE_NID,0,pn)
# define ossl_SSL_get_peer_signature_nid(s, pn) \
        ossl_SSL_ctrl(s,ossl_SSL_CTRL_GET_PEER_SIGNATURE_NID,0,pn)
# define ossl_SSL_get_peer_tmp_key(s, pk) \
        ossl_SSL_ctrl(s,ossl_SSL_CTRL_GET_PEER_TMP_KEY,0,pk)
# define ossl_SSL_get_tmp_key(s, pk) \
        ossl_SSL_ctrl(s,ossl_SSL_CTRL_GET_TMP_KEY,0,pk)
# define ossl_SSL_get0_raw_cipherlist(s, plst) \
        ossl_SSL_ctrl(s,ossl_SSL_CTRL_GET_RAW_CIPHERLIST,0,plst)
# define ossl_SSL_get0_ec_point_formats(s, plst) \
        ossl_SSL_ctrl(s,ossl_SSL_CTRL_GET_EC_POINT_FORMATS,0,plst)
# define ossl_SSL_CTX_set_min_proto_version(ctx, version) \
        ossl_SSL_CTX_ctrl(ctx, ossl_SSL_CTRL_SET_MIN_PROTO_VERSION, version, NULL)
# define ossl_SSL_CTX_set_max_proto_version(ctx, version) \
        ossl_SSL_CTX_ctrl(ctx, ossl_SSL_CTRL_SET_MAX_PROTO_VERSION, version, NULL)
# define ossl_SSL_CTX_get_min_proto_version(ctx) \
        ossl_SSL_CTX_ctrl(ctx, ossl_SSL_CTRL_GET_MIN_PROTO_VERSION, 0, NULL)
# define ossl_SSL_CTX_get_max_proto_version(ctx) \
        ossl_SSL_CTX_ctrl(ctx, ossl_SSL_CTRL_GET_MAX_PROTO_VERSION, 0, NULL)
# define ossl_SSL_set_min_proto_version(s, version) \
        ossl_SSL_ctrl(s, ossl_SSL_CTRL_SET_MIN_PROTO_VERSION, version, NULL)
# define ossl_SSL_set_max_proto_version(s, version) \
        ossl_SSL_ctrl(s, ossl_SSL_CTRL_SET_MAX_PROTO_VERSION, version, NULL)
# define ossl_SSL_get_min_proto_version(s) \
        ossl_SSL_ctrl(s, ossl_SSL_CTRL_GET_MIN_PROTO_VERSION, 0, NULL)
# define ossl_SSL_get_max_proto_version(s) \
        ossl_SSL_ctrl(s, ossl_SSL_CTRL_GET_MAX_PROTO_VERSION, 0, NULL)

const char *ossl_SSL_group_to_name(ossl_SSL *s, int id);

/* Backwards compatibility, original 1.1.0 names */
# define ossl_SSL_CTRL_GET_SERVER_TMP_KEY \
         ossl_SSL_CTRL_GET_PEER_TMP_KEY
# define ossl_SSL_get_server_tmp_key(s, pk) \
         ossl_SSL_get_peer_tmp_key(s, pk)

int ossl_SSL_set0_tmp_dh_pkey(ossl_SSL *s, ossl_EVP_PKEY *dhpkey);
int ossl_SSL_CTX_set0_tmp_dh_pkey(ossl_SSL_CTX *ctx, ossl_EVP_PKEY *dhpkey);

/*
 * The following symbol names are old and obsolete. They are kept
 * for compatibility reasons only and should not be used anymore.
 */
# define ossl_SSL_CTRL_GET_CURVES           ossl_SSL_CTRL_GET_GROUPS
# define ossl_SSL_CTRL_SET_CURVES           ossl_SSL_CTRL_SET_GROUPS
# define ossl_SSL_CTRL_SET_CURVES_LIST      ossl_SSL_CTRL_SET_GROUPS_LIST
# define ossl_SSL_CTRL_GET_SHARED_CURVE     ossl_SSL_CTRL_GET_SHARED_GROUP

# define ossl_SSL_get1_curves               ossl_SSL_get1_groups
# define ossl_SSL_CTX_set1_curves           ossl_SSL_CTX_set1_groups
# define ossl_SSL_CTX_set1_curves_list      ossl_SSL_CTX_set1_groups_list
# define ossl_SSL_set1_curves               ossl_SSL_set1_groups
# define ossl_SSL_set1_curves_list          ossl_SSL_set1_groups_list
# define ossl_SSL_get_shared_curve          ossl_SSL_get_shared_group


# ifndef ossl_OPENSSL_NO_DEPRECATED_1_1_0
/* Provide some compatibility macros for removed functionality. */
#  define ossl_SSL_CTX_need_tmp_RSA(ctx)                0
#  define ossl_SSL_CTX_set_tmp_rsa(ctx,rsa)             1
#  define ossl_SSL_need_tmp_RSA(ssl)                    0
#  define ossl_SSL_set_tmp_rsa(ssl,rsa)                 1
#  define ossl_SSL_CTX_set_ecdh_auto(dummy, onoff)      ((onoff) != 0)
#  define ossl_SSL_set_ecdh_auto(dummy, onoff)          ((onoff) != 0)
/*
 * We "pretend" to call the callback to avoid warnings about unused static
 * functions.
 */
#  define ossl_SSL_CTX_set_tmp_rsa_callback(ctx, cb)    while(0) (cb)(NULL, 0, 0)
#  define ossl_SSL_set_tmp_rsa_callback(ssl, cb)        while(0) (cb)(NULL, 0, 0)
# endif
ossl___owur const ossl_BIO_METHOD *ossl_BIO_f_ssl(void);
ossl___owur ossl_BIO *ossl_BIO_new_ssl(ossl_SSL_CTX *ctx, int client);
ossl___owur ossl_BIO *ossl_BIO_new_ssl_connect(ossl_SSL_CTX *ctx);
ossl___owur ossl_BIO *ossl_BIO_new_buffer_ssl_connect(ossl_SSL_CTX *ctx);
ossl___owur int ossl_BIO_ssl_copy_session_id(ossl_BIO *to, ossl_BIO *from);
void ossl_BIO_ssl_shutdown(ossl_BIO *ssl_bio);

ossl___owur int ossl_SSL_CTX_set_cipher_list(ossl_SSL_CTX *, const char *str);
ossl___owur ossl_SSL_CTX *ossl_SSL_CTX_new(const ossl_SSL_METHOD *meth);
ossl___owur ossl_SSL_CTX *ossl_SSL_CTX_new_ex(ossl_OSSL_LIB_CTX *libctx, const char *propq,
                               const ossl_SSL_METHOD *meth);
int ossl_SSL_CTX_up_ref(ossl_SSL_CTX *ctx);
void ossl_SSL_CTX_free(ossl_SSL_CTX *);
ossl___owur long ossl_SSL_CTX_set_timeout(ossl_SSL_CTX *ctx, long t);
ossl___owur long ossl_SSL_CTX_get_timeout(const ossl_SSL_CTX *ctx);
ossl___owur ossl_X509_STORE *ossl_SSL_CTX_get_cert_store(const ossl_SSL_CTX *);
void ossl_SSL_CTX_set_cert_store(ossl_SSL_CTX *, ossl_X509_STORE *);
void ossl_SSL_CTX_set1_cert_store(ossl_SSL_CTX *, ossl_X509_STORE *);
ossl___owur int ossl_SSL_want(const ossl_SSL *s);
ossl___owur int ossl_SSL_clear(ossl_SSL *s);

void ossl_SSL_CTX_flush_sessions(ossl_SSL_CTX *ctx, long tm);

ossl___owur const ossl_SSL_CIPHER *ossl_SSL_get_current_cipher(const ossl_SSL *s);
ossl___owur const ossl_SSL_CIPHER *ossl_SSL_get_pending_cipher(const ossl_SSL *s);
ossl___owur int ossl_SSL_CIPHER_get_bits(const ossl_SSL_CIPHER *c, int *alg_bits);
ossl___owur const char *ossl_SSL_CIPHER_get_version(const ossl_SSL_CIPHER *c);
ossl___owur const char *ossl_SSL_CIPHER_get_name(const ossl_SSL_CIPHER *c);
ossl___owur const char *ossl_SSL_CIPHER_standard_name(const ossl_SSL_CIPHER *c);
ossl___owur const char *ossl_OPENSSL_cipher_name(const char *rfc_name);
ossl___owur uint32_t ossl_SSL_CIPHER_get_id(const ossl_SSL_CIPHER *c);
ossl___owur uint16_t ossl_SSL_CIPHER_get_protocol_id(const ossl_SSL_CIPHER *c);
ossl___owur int ossl_SSL_CIPHER_get_kx_nid(const ossl_SSL_CIPHER *c);
ossl___owur int ossl_SSL_CIPHER_get_auth_nid(const ossl_SSL_CIPHER *c);
ossl___owur const ossl_EVP_MD *ossl_SSL_CIPHER_get_handshake_digest(const ossl_SSL_CIPHER *c);
ossl___owur int ossl_SSL_CIPHER_is_aead(const ossl_SSL_CIPHER *c);

ossl___owur int ossl_SSL_get_fd(const ossl_SSL *s);
ossl___owur int ossl_SSL_get_rfd(const ossl_SSL *s);
ossl___owur int ossl_SSL_get_wfd(const ossl_SSL *s);
ossl___owur const char *ossl_SSL_get_cipher_list(const ossl_SSL *s, int n);
ossl___owur char *ossl_SSL_get_shared_ciphers(const ossl_SSL *s, char *buf, int size);
ossl___owur int ossl_SSL_get_read_ahead(const ossl_SSL *s);
ossl___owur int ossl_SSL_pending(const ossl_SSL *s);
ossl___owur int ossl_SSL_has_pending(const ossl_SSL *s);
# ifndef ossl_OPENSSL_NO_SOCK
ossl___owur int ossl_SSL_set_fd(ossl_SSL *s, int fd);
ossl___owur int ossl_SSL_set_rfd(ossl_SSL *s, int fd);
ossl___owur int ossl_SSL_set_wfd(ossl_SSL *s, int fd);
# endif
void ossl_SSL_set0_rbio(ossl_SSL *s, ossl_BIO *rbio);
void ossl_SSL_set0_wbio(ossl_SSL *s, ossl_BIO *wbio);
void ossl_SSL_set_bio(ossl_SSL *s, ossl_BIO *rbio, ossl_BIO *wbio);
ossl___owur ossl_BIO *ossl_SSL_get_rbio(const ossl_SSL *s);
ossl___owur ossl_BIO *ossl_SSL_get_wbio(const ossl_SSL *s);
ossl___owur int ossl_SSL_set_cipher_list(ossl_SSL *s, const char *str);
ossl___owur int ossl_SSL_CTX_set_ciphersuites(ossl_SSL_CTX *ctx, const char *str);
ossl___owur int ossl_SSL_set_ciphersuites(ossl_SSL *s, const char *str);
void ossl_SSL_set_read_ahead(ossl_SSL *s, int yes);
ossl___owur int ossl_SSL_get_verify_mode(const ossl_SSL *s);
ossl___owur int ossl_SSL_get_verify_depth(const ossl_SSL *s);
ossl___owur ossl_SSL_verify_cb ossl_SSL_get_verify_callback(const ossl_SSL *s);
void ossl_SSL_set_verify(ossl_SSL *s, int mode, ossl_SSL_verify_cb callback);
void ossl_SSL_set_verify_depth(ossl_SSL *s, int depth);
void ossl_SSL_set_cert_cb(ossl_SSL *s, int (*cb) (ossl_SSL *ssl, void *arg), void *arg);
# ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
ossl_OSSL_DEPRECATEDIN_3_0 ossl___owur int ossl_SSL_use_RSAPrivateKey(ossl_SSL *ssl, ossl_RSA *rsa);
ossl_OSSL_DEPRECATEDIN_3_0
ossl___owur int ossl_SSL_use_RSAPrivateKey_ASN1(ossl_SSL *ssl,
                                      const unsigned char *d, long len);
# endif
ossl___owur int ossl_SSL_use_PrivateKey(ossl_SSL *ssl, ossl_EVP_PKEY *pkey);
ossl___owur int ossl_SSL_use_PrivateKey_ASN1(int pk, ossl_SSL *ssl, const unsigned char *d,
                                   long len);
ossl___owur int ossl_SSL_use_certificate(ossl_SSL *ssl, ossl_X509 *x);
ossl___owur int ossl_SSL_use_certificate_ASN1(ossl_SSL *ssl, const unsigned char *d, int len);
ossl___owur int ossl_SSL_use_cert_and_key(ossl_SSL *ssl, ossl_X509 *x509, ossl_EVP_PKEY *privatekey,
                                ossl_STACK_OF(ossl_X509) *chain, int override);


/* serverinfo file format versions */
# define ossl_SSL_SERVERINFOV1   1
# define ossl_SSL_SERVERINFOV2   2

/* Set serverinfo data for the current active cert. */
ossl___owur int ossl_SSL_CTX_use_serverinfo(ossl_SSL_CTX *ctx, const unsigned char *serverinfo,
                                  size_t serverinfo_length);
ossl___owur int ossl_SSL_CTX_use_serverinfo_ex(ossl_SSL_CTX *ctx, unsigned int version,
                                     const unsigned char *serverinfo,
                                     size_t serverinfo_length);
ossl___owur int ossl_SSL_CTX_use_serverinfo_file(ossl_SSL_CTX *ctx, const char *file);

#ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
ossl_OSSL_DEPRECATEDIN_3_0
ossl___owur int ossl_SSL_use_RSAPrivateKey_file(ossl_SSL *ssl, const char *file, int type);
#endif

ossl___owur int ossl_SSL_use_PrivateKey_file(ossl_SSL *ssl, const char *file, int type);
ossl___owur int ossl_SSL_use_certificate_file(ossl_SSL *ssl, const char *file, int type);

#ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
ossl_OSSL_DEPRECATEDIN_3_0
ossl___owur int ossl_SSL_CTX_use_RSAPrivateKey_file(ossl_SSL_CTX *ctx, const char *file,
                                          int type);
#endif
ossl___owur int ossl_SSL_CTX_use_PrivateKey_file(ossl_SSL_CTX *ctx, const char *file,
                                       int type);
ossl___owur int ossl_SSL_CTX_use_certificate_file(ossl_SSL_CTX *ctx, const char *file,
                                        int type);
/* PEM type */
ossl___owur int ossl_SSL_CTX_use_certificate_chain_file(ossl_SSL_CTX *ctx, const char *file);
ossl___owur int ossl_SSL_use_certificate_chain_file(ossl_SSL *ssl, const char *file);
ossl___owur ossl_STACK_OF(ossl_X509_NAME) *ossl_SSL_load_client_CA_file(const char *file);
ossl___owur ossl_STACK_OF(ossl_X509_NAME)
*ossl_SSL_load_client_CA_file_ex(const char *file, ossl_OSSL_LIB_CTX *libctx,
                            const char *propq);
ossl___owur int ossl_SSL_add_file_cert_subjects_to_stack(ossl_STACK_OF(ossl_X509_NAME) *stackCAs,
                                               const char *file);
int ossl_SSL_add_dir_cert_subjects_to_stack(ossl_STACK_OF(ossl_X509_NAME) *stackCAs,
                                       const char *dir);
int ossl_SSL_add_store_cert_subjects_to_stack(ossl_STACK_OF(ossl_X509_NAME) *stackCAs,
                                       const char *uri);

# ifndef ossl_OPENSSL_NO_DEPRECATED_1_1_0
#  define ossl_SSL_load_error_strings() \
    ossl_OPENSSL_init_ssl(ossl_OPENSSL_INIT_LOAD_SSL_STRINGS \
                     | ossl_OPENSSL_INIT_LOAD_CRYPTO_STRINGS, NULL)
# endif

ossl___owur const char *ossl_SSL_state_string(const ossl_SSL *s);
ossl___owur const char *ossl_SSL_rstate_string(const ossl_SSL *s);
ossl___owur const char *ossl_SSL_state_string_long(const ossl_SSL *s);
ossl___owur const char *ossl_SSL_rstate_string_long(const ossl_SSL *s);
ossl___owur long ossl_SSL_SESSION_get_time(const ossl_SSL_SESSION *s);
ossl___owur long ossl_SSL_SESSION_set_time(ossl_SSL_SESSION *s, long t);
ossl___owur long ossl_SSL_SESSION_get_timeout(const ossl_SSL_SESSION *s);
ossl___owur long ossl_SSL_SESSION_set_timeout(ossl_SSL_SESSION *s, long t);
ossl___owur int ossl_SSL_SESSION_get_protocol_version(const ossl_SSL_SESSION *s);
ossl___owur int ossl_SSL_SESSION_set_protocol_version(ossl_SSL_SESSION *s, int version);

ossl___owur const char *ossl_SSL_SESSION_get0_hostname(const ossl_SSL_SESSION *s);
ossl___owur int ossl_SSL_SESSION_set1_hostname(ossl_SSL_SESSION *s, const char *hostname);
void ossl_SSL_SESSION_get0_alpn_selected(const ossl_SSL_SESSION *s,
                                    const unsigned char **alpn,
                                    size_t *len);
ossl___owur int ossl_SSL_SESSION_set1_alpn_selected(ossl_SSL_SESSION *s,
                                          const unsigned char *alpn,
                                          size_t len);
ossl___owur const ossl_SSL_CIPHER *ossl_SSL_SESSION_get0_cipher(const ossl_SSL_SESSION *s);
ossl___owur int ossl_SSL_SESSION_set_cipher(ossl_SSL_SESSION *s, const ossl_SSL_CIPHER *cipher);
ossl___owur int ossl_SSL_SESSION_has_ticket(const ossl_SSL_SESSION *s);
ossl___owur unsigned long ossl_SSL_SESSION_get_ticket_lifetime_hint(const ossl_SSL_SESSION *s);
void ossl_SSL_SESSION_get0_ticket(const ossl_SSL_SESSION *s, const unsigned char **tick,
                             size_t *len);
ossl___owur uint32_t ossl_SSL_SESSION_get_max_early_data(const ossl_SSL_SESSION *s);
ossl___owur int ossl_SSL_SESSION_set_max_early_data(ossl_SSL_SESSION *s,
                                          uint32_t max_early_data);
ossl___owur int ossl_SSL_copy_session_id(ossl_SSL *to, const ossl_SSL *from);
ossl___owur ossl_X509 *ossl_SSL_SESSION_get0_peer(ossl_SSL_SESSION *s);
ossl___owur int ossl_SSL_SESSION_set1_id_context(ossl_SSL_SESSION *s,
                                       const unsigned char *sid_ctx,
                                       unsigned int sid_ctx_len);
ossl___owur int ossl_SSL_SESSION_set1_id(ossl_SSL_SESSION *s, const unsigned char *sid,
                               unsigned int sid_len);
ossl___owur int ossl_SSL_SESSION_is_resumable(const ossl_SSL_SESSION *s);

ossl___owur ossl_SSL_SESSION *ossl_SSL_SESSION_new(void);
ossl___owur ossl_SSL_SESSION *ossl_SSL_SESSION_dup(const ossl_SSL_SESSION *src);
const unsigned char *ossl_SSL_SESSION_get_id(const ossl_SSL_SESSION *s,
                                        unsigned int *len);
const unsigned char *ossl_SSL_SESSION_get0_id_context(const ossl_SSL_SESSION *s,
                                                 unsigned int *len);
ossl___owur unsigned int ossl_SSL_SESSION_get_compress_id(const ossl_SSL_SESSION *s);
# ifndef ossl_OPENSSL_NO_STDIO
int ossl_SSL_SESSION_print_fp(FILE *fp, const ossl_SSL_SESSION *ses);
# endif
int ossl_SSL_SESSION_print(ossl_BIO *fp, const ossl_SSL_SESSION *ses);
int ossl_SSL_SESSION_print_keylog(ossl_BIO *bp, const ossl_SSL_SESSION *x);
int ossl_SSL_SESSION_up_ref(ossl_SSL_SESSION *ses);
void ossl_SSL_SESSION_free(ossl_SSL_SESSION *ses);
ossl___owur int ossl_i2d_SSL_SESSION(const ossl_SSL_SESSION *in, unsigned char **pp);
ossl___owur int ossl_SSL_set_session(ossl_SSL *to, ossl_SSL_SESSION *session);
int ossl_SSL_CTX_add_session(ossl_SSL_CTX *ctx, ossl_SSL_SESSION *session);
int ossl_SSL_CTX_remove_session(ossl_SSL_CTX *ctx, ossl_SSL_SESSION *session);
ossl___owur int ossl_SSL_CTX_set_generate_session_id(ossl_SSL_CTX *ctx, ossl_GEN_SESSION_CB cb);
ossl___owur int ossl_SSL_set_generate_session_id(ossl_SSL *s, ossl_GEN_SESSION_CB cb);
ossl___owur int ossl_SSL_has_matching_session_id(const ossl_SSL *s,
                                       const unsigned char *id,
                                       unsigned int id_len);
ossl_SSL_SESSION *ossl_d2i_SSL_SESSION(ossl_SSL_SESSION **a, const unsigned char **pp,
                             long length);

# ifdef ossl_OPENSSL_X509_H
ossl___owur ossl_X509 *ossl_SSL_get0_peer_certificate(const ossl_SSL *s);
ossl___owur ossl_X509 *ossl_SSL_get1_peer_certificate(const ossl_SSL *s);
/* Deprecated in 3.0.0 */
#  ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
#   define ossl_SSL_get_peer_certificate ossl_SSL_get1_peer_certificate
#  endif
# endif

ossl___owur ossl_STACK_OF(ossl_X509) *ossl_SSL_get_peer_cert_chain(const ossl_SSL *s);

ossl___owur int ossl_SSL_CTX_get_verify_mode(const ossl_SSL_CTX *ctx);
ossl___owur int ossl_SSL_CTX_get_verify_depth(const ossl_SSL_CTX *ctx);
ossl___owur ossl_SSL_verify_cb ossl_SSL_CTX_get_verify_callback(const ossl_SSL_CTX *ctx);
void ossl_SSL_CTX_set_verify(ossl_SSL_CTX *ctx, int mode, ossl_SSL_verify_cb callback);
void ossl_SSL_CTX_set_verify_depth(ossl_SSL_CTX *ctx, int depth);
void ossl_SSL_CTX_set_cert_verify_callback(ossl_SSL_CTX *ctx,
                                      int (*cb) (ossl_X509_STORE_CTX *, void *),
                                      void *arg);
void ossl_SSL_CTX_set_cert_cb(ossl_SSL_CTX *c, int (*cb) (ossl_SSL *ssl, void *arg),
                         void *arg);
# ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
ossl_OSSL_DEPRECATEDIN_3_0
ossl___owur int ossl_SSL_CTX_use_RSAPrivateKey(ossl_SSL_CTX *ctx, ossl_RSA *rsa);
ossl_OSSL_DEPRECATEDIN_3_0
ossl___owur int ossl_SSL_CTX_use_RSAPrivateKey_ASN1(ossl_SSL_CTX *ctx, const unsigned char *d,
                                          long len);
# endif
ossl___owur int ossl_SSL_CTX_use_PrivateKey(ossl_SSL_CTX *ctx, ossl_EVP_PKEY *pkey);
ossl___owur int ossl_SSL_CTX_use_PrivateKey_ASN1(int pk, ossl_SSL_CTX *ctx,
                                       const unsigned char *d, long len);
ossl___owur int ossl_SSL_CTX_use_certificate(ossl_SSL_CTX *ctx, ossl_X509 *x);
ossl___owur int ossl_SSL_CTX_use_certificate_ASN1(ossl_SSL_CTX *ctx, int len,
                                        const unsigned char *d);
ossl___owur int ossl_SSL_CTX_use_cert_and_key(ossl_SSL_CTX *ctx, ossl_X509 *x509, ossl_EVP_PKEY *privatekey,
                                    ossl_STACK_OF(ossl_X509) *chain, int override);

void ossl_SSL_CTX_set_default_passwd_cb(ossl_SSL_CTX *ctx, ossl_pem_password_cb *cb);
void ossl_SSL_CTX_set_default_passwd_cb_userdata(ossl_SSL_CTX *ctx, void *u);
ossl_pem_password_cb *ossl_SSL_CTX_get_default_passwd_cb(ossl_SSL_CTX *ctx);
void *ossl_SSL_CTX_get_default_passwd_cb_userdata(ossl_SSL_CTX *ctx);
void ossl_SSL_set_default_passwd_cb(ossl_SSL *s, ossl_pem_password_cb *cb);
void ossl_SSL_set_default_passwd_cb_userdata(ossl_SSL *s, void *u);
ossl_pem_password_cb *ossl_SSL_get_default_passwd_cb(ossl_SSL *s);
void *ossl_SSL_get_default_passwd_cb_userdata(ossl_SSL *s);

ossl___owur int ossl_SSL_CTX_check_private_key(const ossl_SSL_CTX *ctx);
ossl___owur int ossl_SSL_check_private_key(const ossl_SSL *ctx);

ossl___owur int ossl_SSL_CTX_set_session_id_context(ossl_SSL_CTX *ctx,
                                          const unsigned char *sid_ctx,
                                          unsigned int sid_ctx_len);

ossl_SSL *ossl_SSL_new(ossl_SSL_CTX *ctx);
int ossl_SSL_up_ref(ossl_SSL *s);
int ossl_SSL_is_dtls(const ossl_SSL *s);
ossl___owur int ossl_SSL_set_session_id_context(ossl_SSL *ssl, const unsigned char *sid_ctx,
                                      unsigned int sid_ctx_len);

ossl___owur int ossl_SSL_CTX_set_purpose(ossl_SSL_CTX *ctx, int purpose);
ossl___owur int ossl_SSL_set_purpose(ossl_SSL *ssl, int purpose);
ossl___owur int ossl_SSL_CTX_set_trust(ossl_SSL_CTX *ctx, int trust);
ossl___owur int ossl_SSL_set_trust(ossl_SSL *ssl, int trust);

ossl___owur int ossl_SSL_set1_host(ossl_SSL *s, const char *hostname);
ossl___owur int ossl_SSL_add1_host(ossl_SSL *s, const char *hostname);
ossl___owur const char *ossl_SSL_get0_peername(ossl_SSL *s);
void ossl_SSL_set_hostflags(ossl_SSL *s, unsigned int flags);

ossl___owur int ossl_SSL_CTX_dane_enable(ossl_SSL_CTX *ctx);
ossl___owur int ossl_SSL_CTX_dane_mtype_set(ossl_SSL_CTX *ctx, const ossl_EVP_MD *md,
                                  uint8_t mtype, uint8_t ord);
ossl___owur int ossl_SSL_dane_enable(ossl_SSL *s, const char *basedomain);
ossl___owur int ossl_SSL_dane_tlsa_add(ossl_SSL *s, uint8_t usage, uint8_t selector,
                             uint8_t mtype, const unsigned char *data, size_t dlen);
ossl___owur int ossl_SSL_get0_dane_authority(ossl_SSL *s, ossl_X509 **mcert, ossl_EVP_PKEY **mspki);
ossl___owur int ossl_SSL_get0_dane_tlsa(ossl_SSL *s, uint8_t *usage, uint8_t *selector,
                              uint8_t *mtype, const unsigned char **data,
                              size_t *dlen);
/*
 * Bridge opacity barrier between libcrypt and libssl, also needed to support
 * offline testing in test/danetest.c
 */
ossl_SSL_DANE *ossl_SSL_get0_dane(ossl_SSL *ssl);
/*
 * DANE flags
 */
unsigned long ossl_SSL_CTX_dane_set_flags(ossl_SSL_CTX *ctx, unsigned long flags);
unsigned long ossl_SSL_CTX_dane_clear_flags(ossl_SSL_CTX *ctx, unsigned long flags);
unsigned long ossl_SSL_dane_set_flags(ossl_SSL *ssl, unsigned long flags);
unsigned long ossl_SSL_dane_clear_flags(ossl_SSL *ssl, unsigned long flags);

ossl___owur int ossl_SSL_CTX_set1_param(ossl_SSL_CTX *ctx, ossl_X509_VERIFY_PARAM *vpm);
ossl___owur int ossl_SSL_set1_param(ossl_SSL *ssl, ossl_X509_VERIFY_PARAM *vpm);

ossl___owur ossl_X509_VERIFY_PARAM *ossl_SSL_CTX_get0_param(ossl_SSL_CTX *ctx);
ossl___owur ossl_X509_VERIFY_PARAM *ossl_SSL_get0_param(ossl_SSL *ssl);

# ifndef ossl_OPENSSL_NO_SRP
#  ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
ossl_OSSL_DEPRECATEDIN_3_0 int ossl_SSL_CTX_set_srp_username(ossl_SSL_CTX *ctx, char *name);
ossl_OSSL_DEPRECATEDIN_3_0 int ossl_SSL_CTX_set_srp_password(ossl_SSL_CTX *ctx, char *password);
ossl_OSSL_DEPRECATEDIN_3_0 int ossl_SSL_CTX_set_srp_strength(ossl_SSL_CTX *ctx, int strength);
ossl_OSSL_DEPRECATEDIN_3_0
int ossl_SSL_CTX_set_srp_client_pwd_callback(ossl_SSL_CTX *ctx,
                                        char *(*cb) (ossl_SSL *, void *));
ossl_OSSL_DEPRECATEDIN_3_0
int ossl_SSL_CTX_set_srp_verify_param_callback(ossl_SSL_CTX *ctx,
                                          int (*cb) (ossl_SSL *, void *));
ossl_OSSL_DEPRECATEDIN_3_0
int ossl_SSL_CTX_set_srp_username_callback(ossl_SSL_CTX *ctx,
                                      int (*cb) (ossl_SSL *, int *, void *));
ossl_OSSL_DEPRECATEDIN_3_0 int ossl_SSL_CTX_set_srp_cb_arg(ossl_SSL_CTX *ctx, void *arg);

ossl_OSSL_DEPRECATEDIN_3_0
int ossl_SSL_set_srp_server_param(ossl_SSL *s, const ossl_BIGNUM *N, const ossl_BIGNUM *g,
                             ossl_BIGNUM *sa, ossl_BIGNUM *v, char *info);
ossl_OSSL_DEPRECATEDIN_3_0
int ossl_SSL_set_srp_server_param_pw(ossl_SSL *s, const char *user, const char *pass,
                                const char *grp);

ossl_OSSL_DEPRECATEDIN_3_0 ossl___owur ossl_BIGNUM *ossl_SSL_get_srp_g(ossl_SSL *s);
ossl_OSSL_DEPRECATEDIN_3_0 ossl___owur ossl_BIGNUM *ossl_SSL_get_srp_N(ossl_SSL *s);

ossl_OSSL_DEPRECATEDIN_3_0 ossl___owur char *ossl_SSL_get_srp_username(ossl_SSL *s);
ossl_OSSL_DEPRECATEDIN_3_0 ossl___owur char *ossl_SSL_get_srp_userinfo(ossl_SSL *s);
#  endif
# endif

/*
 * ClientHello callback and helpers.
 */

# define ossl_SSL_CLIENT_HELLO_SUCCESS 1
# define ossl_SSL_CLIENT_HELLO_ERROR   0
# define ossl_SSL_CLIENT_HELLO_RETRY   (-1)

typedef int (*ossl_SSL_client_hello_cb_fn) (ossl_SSL *s, int *al, void *arg);
void ossl_SSL_CTX_set_client_hello_cb(ossl_SSL_CTX *c, ossl_SSL_client_hello_cb_fn cb,
                                 void *arg);
int ossl_SSL_client_hello_isv2(ossl_SSL *s);
unsigned int ossl_SSL_client_hello_get0_legacy_version(ossl_SSL *s);
size_t ossl_SSL_client_hello_get0_random(ossl_SSL *s, const unsigned char **out);
size_t ossl_SSL_client_hello_get0_session_id(ossl_SSL *s, const unsigned char **out);
size_t ossl_SSL_client_hello_get0_ciphers(ossl_SSL *s, const unsigned char **out);
size_t ossl_SSL_client_hello_get0_compression_methods(ossl_SSL *s,
                                                 const unsigned char **out);
int ossl_SSL_client_hello_get1_extensions_present(ossl_SSL *s, int **out, size_t *outlen);
int ossl_SSL_client_hello_get0_ext(ossl_SSL *s, unsigned int type,
                              const unsigned char **out, size_t *outlen);

void ossl_SSL_certs_clear(ossl_SSL *s);
void ossl_SSL_free(ossl_SSL *ssl);
# ifdef ossl_OSSL_ASYNC_FD
/*
 * Windows application developer has to include windows.h to use these.
 */
ossl___owur int ossl_SSL_waiting_for_async(ossl_SSL *s);
ossl___owur int ossl_SSL_get_all_async_fds(ossl_SSL *s, ossl_OSSL_ASYNC_FD *fds, size_t *numfds);
ossl___owur int ossl_SSL_get_changed_async_fds(ossl_SSL *s, ossl_OSSL_ASYNC_FD *addfd,
                                     size_t *numaddfds, ossl_OSSL_ASYNC_FD *delfd,
                                     size_t *numdelfds);
ossl___owur int ossl_SSL_CTX_set_async_callback(ossl_SSL_CTX *ctx, ossl_SSL_async_callback_fn callback);
ossl___owur int ossl_SSL_CTX_set_async_callback_arg(ossl_SSL_CTX *ctx, void *arg);
ossl___owur int ossl_SSL_set_async_callback(ossl_SSL *s, ossl_SSL_async_callback_fn callback);
ossl___owur int ossl_SSL_set_async_callback_arg(ossl_SSL *s, void *arg);
ossl___owur int ossl_SSL_get_async_status(ossl_SSL *s, int *status);

# endif
ossl___owur int ossl_SSL_accept(ossl_SSL *ssl);
ossl___owur int ossl_SSL_stateless(ossl_SSL *s);
ossl___owur int ossl_SSL_connect(ossl_SSL *ssl);
ossl___owur int ossl_SSL_read(ossl_SSL *ssl, void *buf, int num);
ossl___owur int ossl_SSL_read_ex(ossl_SSL *ssl, void *buf, size_t num, size_t *readbytes);

# define ossl_SSL_READ_EARLY_DATA_ERROR   0
# define ossl_SSL_READ_EARLY_DATA_SUCCESS 1
# define ossl_SSL_READ_EARLY_DATA_FINISH  2

ossl___owur int ossl_SSL_read_early_data(ossl_SSL *s, void *buf, size_t num,
                               size_t *readbytes);
ossl___owur int ossl_SSL_peek(ossl_SSL *ssl, void *buf, int num);
ossl___owur int ossl_SSL_peek_ex(ossl_SSL *ssl, void *buf, size_t num, size_t *readbytes);
ossl___owur ossl_ossl_ssize_t ossl_SSL_sendfile(ossl_SSL *s, int fd, off_t offset, size_t size,
                                 int flags);
ossl___owur int ossl_SSL_write(ossl_SSL *ssl, const void *buf, int num);
ossl___owur int ossl_SSL_write_ex(ossl_SSL *s, const void *buf, size_t num, size_t *written);
ossl___owur int ossl_SSL_write_early_data(ossl_SSL *s, const void *buf, size_t num,
                                size_t *written);
long ossl_SSL_ctrl(ossl_SSL *ssl, int cmd, long larg, void *parg);
long ossl_SSL_callback_ctrl(ossl_SSL *, int, void (*)(void));
long ossl_SSL_CTX_ctrl(ossl_SSL_CTX *ctx, int cmd, long larg, void *parg);
long ossl_SSL_CTX_callback_ctrl(ossl_SSL_CTX *, int, void (*)(void));

# define ossl_SSL_EARLY_DATA_NOT_SENT    0
# define ossl_SSL_EARLY_DATA_REJECTED    1
# define ossl_SSL_EARLY_DATA_ACCEPTED    2

ossl___owur int ossl_SSL_get_early_data_status(const ossl_SSL *s);

ossl___owur int ossl_SSL_get_error(const ossl_SSL *s, int ret_code);
ossl___owur const char *ossl_SSL_get_version(const ossl_SSL *s);

/* This sets the 'default' ossl_SSL version that ossl_SSL_new() will create */
# ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
ossl_OSSL_DEPRECATEDIN_3_0
ossl___owur int ossl_SSL_CTX_set_ssl_version(ossl_SSL_CTX *ctx, const ossl_SSL_METHOD *meth);
# endif

# ifndef ossl_OPENSSL_NO_SSL3_METHOD
#  ifndef ossl_OPENSSL_NO_DEPRECATED_1_1_0
ossl_OSSL_DEPRECATEDIN_1_1_0 ossl___owur const ossl_SSL_METHOD *SSLv3_method(void); /* SSLv3 */
ossl_OSSL_DEPRECATEDIN_1_1_0 ossl___owur const ossl_SSL_METHOD *SSLv3_server_method(void);
ossl_OSSL_DEPRECATEDIN_1_1_0 ossl___owur const ossl_SSL_METHOD *SSLv3_client_method(void);
#  endif
# endif

#define ossl_SSLv23_method           ossl_TLS_method
#define ossl_SSLv23_server_method    ossl_TLS_server_method
#define ossl_SSLv23_client_method    ossl_TLS_client_method

/* Negotiate highest available ossl_SSL/TLS version */
ossl___owur const ossl_SSL_METHOD *ossl_TLS_method(void);
ossl___owur const ossl_SSL_METHOD *ossl_TLS_server_method(void);
ossl___owur const ossl_SSL_METHOD *ossl_TLS_client_method(void);

# ifndef ossl_OPENSSL_NO_TLS1_METHOD
#  ifndef ossl_OPENSSL_NO_DEPRECATED_1_1_0
ossl_OSSL_DEPRECATEDIN_1_1_0 ossl___owur const ossl_SSL_METHOD *ossl_TLSv1_method(void); /* TLSv1.0 */
ossl_OSSL_DEPRECATEDIN_1_1_0 ossl___owur const ossl_SSL_METHOD *ossl_TLSv1_server_method(void);
ossl_OSSL_DEPRECATEDIN_1_1_0 ossl___owur const ossl_SSL_METHOD *ossl_TLSv1_client_method(void);
#  endif
# endif

# ifndef ossl_OPENSSL_NO_TLS1_1_METHOD
#  ifndef ossl_OPENSSL_NO_DEPRECATED_1_1_0
ossl_OSSL_DEPRECATEDIN_1_1_0 ossl___owur const ossl_SSL_METHOD *ossl_TLSv1_1_method(void); /* TLSv1.1 */
ossl_OSSL_DEPRECATEDIN_1_1_0 ossl___owur const ossl_SSL_METHOD *ossl_TLSv1_1_server_method(void);
ossl_OSSL_DEPRECATEDIN_1_1_0 ossl___owur const ossl_SSL_METHOD *ossl_TLSv1_1_client_method(void);
#  endif
# endif

# ifndef ossl_OPENSSL_NO_TLS1_2_METHOD
#  ifndef ossl_OPENSSL_NO_DEPRECATED_1_1_0
ossl_OSSL_DEPRECATEDIN_1_1_0 ossl___owur const ossl_SSL_METHOD *ossl_TLSv1_2_method(void); /* TLSv1.2 */
ossl_OSSL_DEPRECATEDIN_1_1_0 ossl___owur const ossl_SSL_METHOD *ossl_TLSv1_2_server_method(void);
ossl_OSSL_DEPRECATEDIN_1_1_0 ossl___owur const ossl_SSL_METHOD *ossl_TLSv1_2_client_method(void);
#  endif
# endif

# ifndef ossl_OPENSSL_NO_DTLS1_METHOD
#  ifndef ossl_OPENSSL_NO_DEPRECATED_1_1_0
ossl_OSSL_DEPRECATEDIN_1_1_0 ossl___owur const ossl_SSL_METHOD *ossl_DTLSv1_method(void); /* DTLSv1.0 */
ossl_OSSL_DEPRECATEDIN_1_1_0 ossl___owur const ossl_SSL_METHOD *ossl_DTLSv1_server_method(void);
ossl_OSSL_DEPRECATEDIN_1_1_0 ossl___owur const ossl_SSL_METHOD *ossl_DTLSv1_client_method(void);
#  endif
# endif

# ifndef ossl_OPENSSL_NO_DTLS1_2_METHOD
/* DTLSv1.2 */
#  ifndef ossl_OPENSSL_NO_DEPRECATED_1_1_0
ossl_OSSL_DEPRECATEDIN_1_1_0 ossl___owur const ossl_SSL_METHOD *ossl_DTLSv1_2_method(void);
ossl_OSSL_DEPRECATEDIN_1_1_0 ossl___owur const ossl_SSL_METHOD *ossl_DTLSv1_2_server_method(void);
ossl_OSSL_DEPRECATEDIN_1_1_0 ossl___owur const ossl_SSL_METHOD *ossl_DTLSv1_2_client_method(void);
#  endif
# endif

ossl___owur const ossl_SSL_METHOD *ossl_DTLS_method(void); /* DTLS 1.0 and 1.2 */
ossl___owur const ossl_SSL_METHOD *ossl_DTLS_server_method(void); /* DTLS 1.0 and 1.2 */
ossl___owur const ossl_SSL_METHOD *ossl_DTLS_client_method(void); /* DTLS 1.0 and 1.2 */

ossl___owur size_t ossl_DTLS_get_data_mtu(const ossl_SSL *s);

ossl___owur ossl_STACK_OF(ossl_SSL_CIPHER) *ossl_SSL_get_ciphers(const ossl_SSL *s);
ossl___owur ossl_STACK_OF(ossl_SSL_CIPHER) *ossl_SSL_CTX_get_ciphers(const ossl_SSL_CTX *ctx);
ossl___owur ossl_STACK_OF(ossl_SSL_CIPHER) *ossl_SSL_get_client_ciphers(const ossl_SSL *s);
ossl___owur ossl_STACK_OF(ossl_SSL_CIPHER) *ossl_SSL_get1_supported_ciphers(ossl_SSL *s);

ossl___owur int ossl_SSL_do_handshake(ossl_SSL *s);
int ossl_SSL_key_update(ossl_SSL *s, int updatetype);
int ossl_SSL_get_key_update_type(const ossl_SSL *s);
int ossl_SSL_renegotiate(ossl_SSL *s);
int ossl_SSL_renegotiate_abbreviated(ossl_SSL *s);
ossl___owur int ossl_SSL_renegotiate_pending(const ossl_SSL *s);
int ossl_SSL_new_session_ticket(ossl_SSL *s);
int ossl_SSL_shutdown(ossl_SSL *s);
ossl___owur int ossl_SSL_verify_client_post_handshake(ossl_SSL *s);
void ossl_SSL_CTX_set_post_handshake_auth(ossl_SSL_CTX *ctx, int val);
void ossl_SSL_set_post_handshake_auth(ossl_SSL *s, int val);

ossl___owur const ossl_SSL_METHOD *ossl_SSL_CTX_get_ssl_method(const ossl_SSL_CTX *ctx);
ossl___owur const ossl_SSL_METHOD *ossl_SSL_get_ssl_method(const ossl_SSL *s);
ossl___owur int ossl_SSL_set_ssl_method(ossl_SSL *s, const ossl_SSL_METHOD *method);
ossl___owur const char *ossl_SSL_alert_type_string_long(int value);
ossl___owur const char *ossl_SSL_alert_type_string(int value);
ossl___owur const char *ossl_SSL_alert_desc_string_long(int value);
ossl___owur const char *ossl_SSL_alert_desc_string(int value);

void ossl_SSL_set0_CA_list(ossl_SSL *s, ossl_STACK_OF(ossl_X509_NAME) *name_list);
void ossl_SSL_CTX_set0_CA_list(ossl_SSL_CTX *ctx, ossl_STACK_OF(ossl_X509_NAME) *name_list);
ossl___owur const ossl_STACK_OF(ossl_X509_NAME) *ossl_SSL_get0_CA_list(const ossl_SSL *s);
ossl___owur const ossl_STACK_OF(ossl_X509_NAME) *ossl_SSL_CTX_get0_CA_list(const ossl_SSL_CTX *ctx);
ossl___owur int ossl_SSL_add1_to_CA_list(ossl_SSL *ssl, const ossl_X509 *x);
ossl___owur int ossl_SSL_CTX_add1_to_CA_list(ossl_SSL_CTX *ctx, const ossl_X509 *x);
ossl___owur const ossl_STACK_OF(ossl_X509_NAME) *ossl_SSL_get0_peer_CA_list(const ossl_SSL *s);

void ossl_SSL_set_client_CA_list(ossl_SSL *s, ossl_STACK_OF(ossl_X509_NAME) *name_list);
void ossl_SSL_CTX_set_client_CA_list(ossl_SSL_CTX *ctx, ossl_STACK_OF(ossl_X509_NAME) *name_list);
ossl___owur ossl_STACK_OF(ossl_X509_NAME) *ossl_SSL_get_client_CA_list(const ossl_SSL *s);
ossl___owur ossl_STACK_OF(ossl_X509_NAME) *ossl_SSL_CTX_get_client_CA_list(const ossl_SSL_CTX *s);
ossl___owur int ossl_SSL_add_client_CA(ossl_SSL *ssl, ossl_X509 *x);
ossl___owur int ossl_SSL_CTX_add_client_CA(ossl_SSL_CTX *ctx, ossl_X509 *x);

void ossl_SSL_set_connect_state(ossl_SSL *s);
void ossl_SSL_set_accept_state(ossl_SSL *s);

ossl___owur long ossl_SSL_get_default_timeout(const ossl_SSL *s);

# ifndef ossl_OPENSSL_NO_DEPRECATED_1_1_0
#  define ossl_SSL_library_init() ossl_OPENSSL_init_ssl(0, NULL)
# endif

ossl___owur char *ossl_SSL_CIPHER_description(const ossl_SSL_CIPHER *, char *buf, int size);
ossl___owur ossl_STACK_OF(ossl_X509_NAME) *ossl_SSL_dup_CA_list(const ossl_STACK_OF(ossl_X509_NAME) *sk);

ossl___owur ossl_SSL *ossl_SSL_dup(ossl_SSL *ssl);

ossl___owur ossl_X509 *ossl_SSL_get_certificate(const ossl_SSL *ssl);
/*
 * ossl_EVP_PKEY
 */
struct ossl_evp_pkey_st *ossl_SSL_get_privatekey(const ossl_SSL *ssl);

ossl___owur ossl_X509 *ossl_SSL_CTX_get0_certificate(const ossl_SSL_CTX *ctx);
ossl___owur ossl_EVP_PKEY *ossl_SSL_CTX_get0_privatekey(const ossl_SSL_CTX *ctx);

void ossl_SSL_CTX_set_quiet_shutdown(ossl_SSL_CTX *ctx, int mode);
ossl___owur int ossl_SSL_CTX_get_quiet_shutdown(const ossl_SSL_CTX *ctx);
void ossl_SSL_set_quiet_shutdown(ossl_SSL *ssl, int mode);
ossl___owur int ossl_SSL_get_quiet_shutdown(const ossl_SSL *ssl);
void ossl_SSL_set_shutdown(ossl_SSL *ssl, int mode);
ossl___owur int ossl_SSL_get_shutdown(const ossl_SSL *ssl);
ossl___owur int ossl_SSL_version(const ossl_SSL *ssl);
ossl___owur int ossl_SSL_client_version(const ossl_SSL *s);
ossl___owur int ossl_SSL_CTX_set_default_verify_paths(ossl_SSL_CTX *ctx);
ossl___owur int ossl_SSL_CTX_set_default_verify_dir(ossl_SSL_CTX *ctx);
ossl___owur int ossl_SSL_CTX_set_default_verify_file(ossl_SSL_CTX *ctx);
ossl___owur int ossl_SSL_CTX_set_default_verify_store(ossl_SSL_CTX *ctx);
ossl___owur int ossl_SSL_CTX_load_verify_file(ossl_SSL_CTX *ctx, const char *CAfile);
ossl___owur int ossl_SSL_CTX_load_verify_dir(ossl_SSL_CTX *ctx, const char *CApath);
ossl___owur int ossl_SSL_CTX_load_verify_store(ossl_SSL_CTX *ctx, const char *CAstore);
ossl___owur int ossl_SSL_CTX_load_verify_locations(ossl_SSL_CTX *ctx,
                                                        const char *CAfile,
                                                        const char *CApath);
# define ossl_SSL_get0_session ossl_SSL_get_session/* just peek at pointer */
ossl___owur ossl_SSL_SESSION *ossl_SSL_get_session(const ossl_SSL *ssl);
ossl___owur ossl_SSL_SESSION *ossl_SSL_get1_session(ossl_SSL *ssl); /* obtain a reference count */
ossl___owur ossl_SSL_CTX *ossl_SSL_get_SSL_CTX(const ossl_SSL *ssl);
ossl_SSL_CTX *ossl_SSL_set_SSL_CTX(ossl_SSL *ssl, ossl_SSL_CTX *ctx);
void ossl_SSL_set_info_callback(ossl_SSL *ssl,
                           void (*cb) (const ossl_SSL *ssl, int type, int val));
void (*ossl_SSL_get_info_callback(const ossl_SSL *ssl)) (const ossl_SSL *ssl, int type,
                                               int val);
ossl___owur ossl_OSSL_HANDSHAKE_STATE ossl_SSL_get_state(const ossl_SSL *ssl);

void ossl_SSL_set_verify_result(ossl_SSL *ssl, long v);
ossl___owur long ossl_SSL_get_verify_result(const ossl_SSL *ssl);
ossl___owur ossl_STACK_OF(ossl_X509) *ossl_SSL_get0_verified_chain(const ossl_SSL *s);

ossl___owur size_t ossl_SSL_get_client_random(const ossl_SSL *ssl, unsigned char *out,
                                    size_t outlen);
ossl___owur size_t ossl_SSL_get_server_random(const ossl_SSL *ssl, unsigned char *out,
                                    size_t outlen);
ossl___owur size_t ossl_SSL_SESSION_get_master_key(const ossl_SSL_SESSION *sess,
                                         unsigned char *out, size_t outlen);
ossl___owur int ossl_SSL_SESSION_set1_master_key(ossl_SSL_SESSION *sess,
                                       const unsigned char *in, size_t len);
uint8_t ossl_SSL_SESSION_get_max_fragment_length(const ossl_SSL_SESSION *sess);

#define ossl_SSL_get_ex_new_index(l, p, newf, dupf, freef) \
    ossl_CRYPTO_get_ex_new_index(ossl_CRYPTO_EX_INDEX_SSL, l, p, newf, dupf, freef)
ossl___owur int ossl_SSL_set_ex_data(ossl_SSL *ssl, int idx, void *data);
void *ossl_SSL_get_ex_data(const ossl_SSL *ssl, int idx);
#define ossl_SSL_SESSION_get_ex_new_index(l, p, newf, dupf, freef) \
    ossl_CRYPTO_get_ex_new_index(ossl_CRYPTO_EX_INDEX_SSL_SESSION, l, p, newf, dupf, freef)
ossl___owur int ossl_SSL_SESSION_set_ex_data(ossl_SSL_SESSION *ss, int idx, void *data);
void *ossl_SSL_SESSION_get_ex_data(const ossl_SSL_SESSION *ss, int idx);
#define ossl_SSL_CTX_get_ex_new_index(l, p, newf, dupf, freef) \
    ossl_CRYPTO_get_ex_new_index(ossl_CRYPTO_EX_INDEX_SSL_CTX, l, p, newf, dupf, freef)
ossl___owur int ossl_SSL_CTX_set_ex_data(ossl_SSL_CTX *ssl, int idx, void *data);
void *ossl_SSL_CTX_get_ex_data(const ossl_SSL_CTX *ssl, int idx);

ossl___owur int ossl_SSL_get_ex_data_X509_STORE_CTX_idx(void);

# define ossl_SSL_CTX_sess_set_cache_size(ctx,t) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SET_SESS_CACHE_SIZE,t,NULL)
# define ossl_SSL_CTX_sess_get_cache_size(ctx) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_GET_SESS_CACHE_SIZE,0,NULL)
# define ossl_SSL_CTX_set_session_cache_mode(ctx,m) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SET_SESS_CACHE_MODE,m,NULL)
# define ossl_SSL_CTX_get_session_cache_mode(ctx) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_GET_SESS_CACHE_MODE,0,NULL)

# define ossl_SSL_CTX_get_default_read_ahead(ctx) ossl_SSL_CTX_get_read_ahead(ctx)
# define ossl_SSL_CTX_set_default_read_ahead(ctx,m) ossl_SSL_CTX_set_read_ahead(ctx,m)
# define ossl_SSL_CTX_get_read_ahead(ctx) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_GET_READ_AHEAD,0,NULL)
# define ossl_SSL_CTX_set_read_ahead(ctx,m) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SET_READ_AHEAD,m,NULL)
# define ossl_SSL_CTX_get_max_cert_list(ctx) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_GET_MAX_CERT_LIST,0,NULL)
# define ossl_SSL_CTX_set_max_cert_list(ctx,m) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SET_MAX_CERT_LIST,m,NULL)
# define ossl_SSL_get_max_cert_list(ssl) \
        ossl_SSL_ctrl(ssl,ossl_SSL_CTRL_GET_MAX_CERT_LIST,0,NULL)
# define ossl_SSL_set_max_cert_list(ssl,m) \
        ossl_SSL_ctrl(ssl,ossl_SSL_CTRL_SET_MAX_CERT_LIST,m,NULL)

# define ossl_SSL_CTX_set_max_send_fragment(ctx,m) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SET_MAX_SEND_FRAGMENT,m,NULL)
# define ossl_SSL_set_max_send_fragment(ssl,m) \
        ossl_SSL_ctrl(ssl,ossl_SSL_CTRL_SET_MAX_SEND_FRAGMENT,m,NULL)
# define ossl_SSL_CTX_set_split_send_fragment(ctx,m) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SET_SPLIT_SEND_FRAGMENT,m,NULL)
# define ossl_SSL_set_split_send_fragment(ssl,m) \
        ossl_SSL_ctrl(ssl,ossl_SSL_CTRL_SET_SPLIT_SEND_FRAGMENT,m,NULL)
# define ossl_SSL_CTX_set_max_pipelines(ctx,m) \
        ossl_SSL_CTX_ctrl(ctx,ossl_SSL_CTRL_SET_MAX_PIPELINES,m,NULL)
# define ossl_SSL_set_max_pipelines(ssl,m) \
        ossl_SSL_ctrl(ssl,ossl_SSL_CTRL_SET_MAX_PIPELINES,m,NULL)
# define ossl_SSL_set_retry_verify(ssl) \
        (ossl_SSL_ctrl(ssl,ossl_SSL_CTRL_SET_RETRY_VERIFY,0,NULL) > 0)

void ossl_SSL_CTX_set_default_read_buffer_len(ossl_SSL_CTX *ctx, size_t len);
void ossl_SSL_set_default_read_buffer_len(ossl_SSL *s, size_t len);

# ifndef ossl_OPENSSL_NO_DH
#  ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
/* NB: the |keylength| is only applicable when is_export is true */
ossl_OSSL_DEPRECATEDIN_3_0
void ossl_SSL_CTX_set_tmp_dh_callback(ossl_SSL_CTX *ctx,
                                 ossl_DH *(*dh) (ossl_SSL *ssl, int is_export,
                                            int keylength));
ossl_OSSL_DEPRECATEDIN_3_0
void ossl_SSL_set_tmp_dh_callback(ossl_SSL *ssl,
                             ossl_DH *(*dh) (ossl_SSL *ssl, int is_export,
                                        int keylength));
#  endif
# endif

ossl___owur const ossl_COMP_METHOD *ossl_SSL_get_current_compression(const ossl_SSL *s);
ossl___owur const ossl_COMP_METHOD *ossl_SSL_get_current_expansion(const ossl_SSL *s);
ossl___owur const char *ossl_SSL_COMP_get_name(const ossl_COMP_METHOD *comp);
ossl___owur const char *ossl_SSL_COMP_get0_name(const ossl_SSL_COMP *comp);
ossl___owur int ossl_SSL_COMP_get_id(const ossl_SSL_COMP *comp);
ossl_STACK_OF(ossl_SSL_COMP) *ossl_SSL_COMP_get_compression_methods(void);
ossl___owur ossl_STACK_OF(ossl_SSL_COMP) *ossl_SSL_COMP_set0_compression_methods(ossl_STACK_OF(ossl_SSL_COMP)
                                                             *meths);
# ifndef ossl_OPENSSL_NO_DEPRECATED_1_1_0
#  define ossl_SSL_COMP_free_compression_methods() while(0) continue
# endif
ossl___owur int ossl_SSL_COMP_add_compression_method(int id, ossl_COMP_METHOD *cm);

const ossl_SSL_CIPHER *ossl_SSL_CIPHER_find(ossl_SSL *ssl, const unsigned char *ptr);
int ossl_SSL_CIPHER_get_cipher_nid(const ossl_SSL_CIPHER *c);
int ossl_SSL_CIPHER_get_digest_nid(const ossl_SSL_CIPHER *c);
int ossl_SSL_bytes_to_cipher_list(ossl_SSL *s, const unsigned char *bytes, size_t len,
                             int isv2format, ossl_STACK_OF(ossl_SSL_CIPHER) **sk,
                             ossl_STACK_OF(ossl_SSL_CIPHER) **scsvs);

/* TLS extensions functions */
ossl___owur int ossl_SSL_set_session_ticket_ext(ossl_SSL *s, void *ext_data, int ext_len);

ossl___owur int ossl_SSL_set_session_ticket_ext_cb(ossl_SSL *s,
                                         ossl_tls_session_ticket_ext_cb_fn cb,
                                         void *arg);

/* Pre-shared secret session resumption functions */
ossl___owur int ossl_SSL_set_session_secret_cb(ossl_SSL *s,
                                     ossl_tls_session_secret_cb_fn session_secret_cb,
                                     void *arg);

void ossl_SSL_CTX_set_not_resumable_session_callback(ossl_SSL_CTX *ctx,
                                                int (*cb) (ossl_SSL *ssl,
                                                           int
                                                           is_forward_secure));

void ossl_SSL_set_not_resumable_session_callback(ossl_SSL *ssl,
                                            int (*cb) (ossl_SSL *ssl,
                                                       int is_forward_secure));

void ossl_SSL_CTX_set_record_padding_callback(ossl_SSL_CTX *ctx,
                                         size_t (*cb) (ossl_SSL *ssl, int type,
                                                       size_t len, void *arg));
void ossl_SSL_CTX_set_record_padding_callback_arg(ossl_SSL_CTX *ctx, void *arg);
void *ossl_SSL_CTX_get_record_padding_callback_arg(const ossl_SSL_CTX *ctx);
int ossl_SSL_CTX_set_block_padding(ossl_SSL_CTX *ctx, size_t block_size);

int ossl_SSL_set_record_padding_callback(ossl_SSL *ssl,
                                    size_t (*cb) (ossl_SSL *ssl, int type,
                                                  size_t len, void *arg));
void ossl_SSL_set_record_padding_callback_arg(ossl_SSL *ssl, void *arg);
void *ossl_SSL_get_record_padding_callback_arg(const ossl_SSL *ssl);
int ossl_SSL_set_block_padding(ossl_SSL *ssl, size_t block_size);

int ossl_SSL_set_num_tickets(ossl_SSL *s, size_t num_tickets);
size_t ossl_SSL_get_num_tickets(const ossl_SSL *s);
int ossl_SSL_CTX_set_num_tickets(ossl_SSL_CTX *ctx, size_t num_tickets);
size_t ossl_SSL_CTX_get_num_tickets(const ossl_SSL_CTX *ctx);

# ifndef ossl_OPENSSL_NO_DEPRECATED_1_1_0
#  define ossl_SSL_cache_hit(s) ossl_SSL_session_reused(s)
# endif

ossl___owur int ossl_SSL_session_reused(const ossl_SSL *s);
ossl___owur int ossl_SSL_is_server(const ossl_SSL *s);

ossl___owur ossl___owur ossl_SSL_CONF_CTX *ossl_SSL_CONF_CTX_new(void);
int ossl_SSL_CONF_CTX_finish(ossl_SSL_CONF_CTX *cctx);
void ossl_SSL_CONF_CTX_free(ossl_SSL_CONF_CTX *cctx);
unsigned int ossl_SSL_CONF_CTX_set_flags(ossl_SSL_CONF_CTX *cctx, unsigned int flags);
ossl___owur unsigned int ossl_SSL_CONF_CTX_clear_flags(ossl_SSL_CONF_CTX *cctx,
                                             unsigned int flags);
ossl___owur int ossl_SSL_CONF_CTX_set1_prefix(ossl_SSL_CONF_CTX *cctx, const char *pre);

void ossl_SSL_CONF_CTX_set_ssl(ossl_SSL_CONF_CTX *cctx, ossl_SSL *ssl);
void ossl_SSL_CONF_CTX_set_ssl_ctx(ossl_SSL_CONF_CTX *cctx, ossl_SSL_CTX *ctx);

ossl___owur int ossl_SSL_CONF_cmd(ossl_SSL_CONF_CTX *cctx, const char *cmd, const char *value);
ossl___owur int ossl_SSL_CONF_cmd_argv(ossl_SSL_CONF_CTX *cctx, int *pargc, char ***pargv);
ossl___owur int ossl_SSL_CONF_cmd_value_type(ossl_SSL_CONF_CTX *cctx, const char *cmd);

void ossl_SSL_add_ssl_module(void);
int ossl_SSL_config(ossl_SSL *s, const char *name);
int ossl_SSL_CTX_config(ossl_SSL_CTX *ctx, const char *name);

# ifndef ossl_OPENSSL_NO_SSL_TRACE
void ossl_SSL_trace(int write_p, int version, int content_type,
               const void *buf, size_t len, ossl_SSL *ssl, void *arg);
# endif

# ifndef ossl_OPENSSL_NO_SOCK
int ossl_DTLSv1_listen(ossl_SSL *s, ossl_BIO_ADDR *client);
# endif

# ifndef ossl_OPENSSL_NO_CT

/*
 * A callback for verifying that the received SCTs are sufficient.
 * Expected to return 1 if they are sufficient, otherwise 0.
 * May return a negative integer if an error occurs.
 * A connection should be aborted if the SCTs are deemed insufficient.
 */
typedef int (*ossl_ssl_ct_validation_cb)(const ossl_CT_POLICY_EVAL_CTX *ctx,
                                    const ossl_STACK_OF(ossl_SCT) *scts, void *arg);

/*
 * Sets a |callback| that is invoked upon receipt of ServerHelloDone to validate
 * the received SCTs.
 * If the callback returns a non-positive result, the connection is terminated.
 * Call this function before beginning a handshake.
 * If a NULL |callback| is provided, ossl_SCT validation is disabled.
 * |arg| is arbitrary userdata that will be passed to the callback whenever it
 * is invoked. Ownership of |arg| remains with the caller.
 *
 * NOTE: A side-effect of setting a CT callback is that an OCSP stapled response
 *       will be requested.
 */
int ossl_SSL_set_ct_validation_callback(ossl_SSL *s, ossl_ssl_ct_validation_cb callback,
                                   void *arg);
int ossl_SSL_CTX_set_ct_validation_callback(ossl_SSL_CTX *ctx,
                                       ossl_ssl_ct_validation_cb callback,
                                       void *arg);
#define ossl_SSL_disable_ct(s) \
        ((void) SSL_set_validation_callback((s), NULL, NULL))
#define ossl_SSL_CTX_disable_ct(ctx) \
        ((void) SSL_CTX_set_validation_callback((ctx), NULL, NULL))

/*
 * The validation type enumerates the available behaviours of the built-in ossl_SSL
 * CT validation callback selected via ossl_SSL_enable_ct() and ossl_SSL_CTX_enable_ct().
 * The underlying callback is a static function in libssl.
 */
enum {
    ossl_SSL_CT_VALIDATION_PERMISSIVE = 0,
    ossl_SSL_CT_VALIDATION_STRICT
};

/*
 * Enable CT by setting up a callback that implements one of the built-in
 * validation variants.  The ossl_SSL_CT_VALIDATION_PERMISSIVE variant always
 * continues the handshake, the application can make appropriate decisions at
 * handshake completion.  The ossl_SSL_CT_VALIDATION_STRICT variant requires at
 * least one valid ossl_SCT, or else handshake termination will be requested.  The
 * handshake may continue anyway if ossl_SSL_VERIFY_NONE is in effect.
 */
int ossl_SSL_enable_ct(ossl_SSL *s, int validation_mode);
int ossl_SSL_CTX_enable_ct(ossl_SSL_CTX *ctx, int validation_mode);

/*
 * Report whether a non-NULL callback is enabled.
 */
int ossl_SSL_ct_is_enabled(const ossl_SSL *s);
int ossl_SSL_CTX_ct_is_enabled(const ossl_SSL_CTX *ctx);

/* Gets the SCTs received from a connection */
const ossl_STACK_OF(ossl_SCT) *ossl_SSL_get0_peer_scts(ossl_SSL *s);

/*
 * Loads the CT log list from the default location.
 * If a ossl_CTLOG_STORE has previously been set using SSL_CTX_set_ctlog_store,
 * the log information loaded from this file will be appended to the
 * ossl_CTLOG_STORE.
 * Returns 1 on success, 0 otherwise.
 */
int ossl_SSL_CTX_set_default_ctlog_list_file(ossl_SSL_CTX *ctx);

/*
 * Loads the CT log list from the specified file path.
 * If a ossl_CTLOG_STORE has previously been set using SSL_CTX_set_ctlog_store,
 * the log information loaded from this file will be appended to the
 * ossl_CTLOG_STORE.
 * Returns 1 on success, 0 otherwise.
 */
int ossl_SSL_CTX_set_ctlog_list_file(ossl_SSL_CTX *ctx, const char *path);

/*
 * Sets the CT log list used by all ossl_SSL connections created from this ossl_SSL_CTX.
 * Ownership of the ossl_CTLOG_STORE is transferred to the ossl_SSL_CTX.
 */
void ossl_SSL_CTX_set0_ctlog_store(ossl_SSL_CTX *ctx, ossl_CTLOG_STORE *logs);

/*
 * Gets the CT log list used by all ossl_SSL connections created from this ossl_SSL_CTX.
 * This will be NULL unless one of the following functions has been called:
 * - ossl_SSL_CTX_set_default_ctlog_list_file
 * - ossl_SSL_CTX_set_ctlog_list_file
 * - SSL_CTX_set_ctlog_store
 */
const ossl_CTLOG_STORE *ossl_SSL_CTX_get0_ctlog_store(const ossl_SSL_CTX *ctx);

# endif /* ossl_OPENSSL_NO_CT */

/* What the "other" parameter contains in security callback */
/* Mask for type */
# define ossl_SSL_SECOP_OTHER_TYPE    0xffff0000
# define ossl_SSL_SECOP_OTHER_NONE    0
# define ossl_SSL_SECOP_OTHER_CIPHER  (1 << 16)
# define ossl_SSL_SECOP_OTHER_CURVE   (2 << 16)
# define ossl_SSL_SECOP_OTHER_DH      (3 << 16)
# define ossl_SSL_SECOP_OTHER_PKEY    (4 << 16)
# define ossl_SSL_SECOP_OTHER_SIGALG  (5 << 16)
# define ossl_SSL_SECOP_OTHER_CERT    (6 << 16)

/* Indicated operation refers to peer key or certificate */
# define ossl_SSL_SECOP_PEER          0x1000

/* Values for "op" parameter in security callback */

/* Called to filter ciphers */
/* Ciphers client supports */
# define ossl_SSL_SECOP_CIPHER_SUPPORTED      (1 | ossl_SSL_SECOP_OTHER_CIPHER)
/* Cipher shared by client/server */
# define ossl_SSL_SECOP_CIPHER_SHARED         (2 | ossl_SSL_SECOP_OTHER_CIPHER)
/* Sanity check of cipher server selects */
# define ossl_SSL_SECOP_CIPHER_CHECK          (3 | ossl_SSL_SECOP_OTHER_CIPHER)
/* Curves supported by client */
# define ossl_SSL_SECOP_CURVE_SUPPORTED       (4 | ossl_SSL_SECOP_OTHER_CURVE)
/* Curves shared by client/server */
# define ossl_SSL_SECOP_CURVE_SHARED          (5 | ossl_SSL_SECOP_OTHER_CURVE)
/* Sanity check of curve server selects */
# define ossl_SSL_SECOP_CURVE_CHECK           (6 | ossl_SSL_SECOP_OTHER_CURVE)
/* Temporary ossl_DH key */
# define ossl_SSL_SECOP_TMP_DH                (7 | ossl_SSL_SECOP_OTHER_PKEY)
/* ossl_SSL/TLS version */
# define ossl_SSL_SECOP_VERSION               (9 | ossl_SSL_SECOP_OTHER_NONE)
/* Session tickets */
# define ossl_SSL_SECOP_TICKET                (10 | ossl_SSL_SECOP_OTHER_NONE)
/* Supported signature algorithms sent to peer */
# define ossl_SSL_SECOP_SIGALG_SUPPORTED      (11 | ossl_SSL_SECOP_OTHER_SIGALG)
/* Shared signature algorithm */
# define ossl_SSL_SECOP_SIGALG_SHARED         (12 | ossl_SSL_SECOP_OTHER_SIGALG)
/* Sanity check signature algorithm allowed */
# define ossl_SSL_SECOP_SIGALG_CHECK          (13 | ossl_SSL_SECOP_OTHER_SIGALG)
/* Used to get mask of supported public key signature algorithms */
# define ossl_SSL_SECOP_SIGALG_MASK           (14 | ossl_SSL_SECOP_OTHER_SIGALG)
/* Use to see if compression is allowed */
# define ossl_SSL_SECOP_COMPRESSION           (15 | ossl_SSL_SECOP_OTHER_NONE)
/* EE key in certificate */
# define ossl_SSL_SECOP_EE_KEY                (16 | ossl_SSL_SECOP_OTHER_CERT)
/* CA key in certificate */
# define ossl_SSL_SECOP_CA_KEY                (17 | ossl_SSL_SECOP_OTHER_CERT)
/* CA digest algorithm in certificate */
# define ossl_SSL_SECOP_CA_MD                 (18 | ossl_SSL_SECOP_OTHER_CERT)
/* Peer EE key in certificate */
# define ossl_SSL_SECOP_PEER_EE_KEY           (ossl_SSL_SECOP_EE_KEY | ossl_SSL_SECOP_PEER)
/* Peer CA key in certificate */
# define ossl_SSL_SECOP_PEER_CA_KEY           (ossl_SSL_SECOP_CA_KEY | ossl_SSL_SECOP_PEER)
/* Peer CA digest algorithm in certificate */
# define ossl_SSL_SECOP_PEER_CA_MD            (ossl_SSL_SECOP_CA_MD | ossl_SSL_SECOP_PEER)

void ossl_SSL_set_security_level(ossl_SSL *s, int level);
ossl___owur int ossl_SSL_get_security_level(const ossl_SSL *s);
void ossl_SSL_set_security_callback(ossl_SSL *s,
                               int (*cb) (const ossl_SSL *s, const ossl_SSL_CTX *ctx,
                                          int op, int bits, int nid,
                                          void *other, void *ex));
int (*ossl_SSL_get_security_callback(const ossl_SSL *s)) (const ossl_SSL *s,
                                                const ossl_SSL_CTX *ctx, int op,
                                                int bits, int nid, void *other,
                                                void *ex);
void ossl_SSL_set0_security_ex_data(ossl_SSL *s, void *ex);
ossl___owur void *ossl_SSL_get0_security_ex_data(const ossl_SSL *s);

void ossl_SSL_CTX_set_security_level(ossl_SSL_CTX *ctx, int level);
ossl___owur int ossl_SSL_CTX_get_security_level(const ossl_SSL_CTX *ctx);
void ossl_SSL_CTX_set_security_callback(ossl_SSL_CTX *ctx,
                                   int (*cb) (const ossl_SSL *s, const ossl_SSL_CTX *ctx,
                                              int op, int bits, int nid,
                                              void *other, void *ex));
int (*ossl_SSL_CTX_get_security_callback(const ossl_SSL_CTX *ctx)) (const ossl_SSL *s,
                                                          const ossl_SSL_CTX *ctx,
                                                          int op, int bits,
                                                          int nid,
                                                          void *other,
                                                          void *ex);
void ossl_SSL_CTX_set0_security_ex_data(ossl_SSL_CTX *ctx, void *ex);
ossl___owur void *ossl_SSL_CTX_get0_security_ex_data(const ossl_SSL_CTX *ctx);

/* ossl_OPENSSL_INIT flag 0x010000 reserved for internal use */
# define ossl_OPENSSL_INIT_NO_LOAD_SSL_STRINGS    0x00100000L
# define ossl_OPENSSL_INIT_LOAD_SSL_STRINGS       0x00200000L

# define ossl_OPENSSL_INIT_SSL_DEFAULT \
        (ossl_OPENSSL_INIT_LOAD_SSL_STRINGS | ossl_OPENSSL_INIT_LOAD_CRYPTO_STRINGS)

int ossl_OPENSSL_init_ssl(uint64_t opts, const ossl_OPENSSL_INIT_SETTINGS *settings);

# ifndef ossl_OPENSSL_NO_UNIT_TEST
ossl___owur const struct openssl_ssl_test_functions *SSL_test_functions(void);
# endif

ossl___owur int ossl_SSL_free_buffers(ossl_SSL *ssl);
ossl___owur int ossl_SSL_alloc_buffers(ossl_SSL *ssl);

/* Status codes passed to the decrypt session ticket callback. Some of these
 * are for internal use only and are never passed to the callback. */
typedef int ossl_SSL_TICKET_STATUS;

/* Support for ticket appdata */
/* fatal error, malloc failure */
# define ossl_SSL_TICKET_FATAL_ERR_MALLOC 0
/* fatal error, either from parsing or decrypting the ticket */
# define ossl_SSL_TICKET_FATAL_ERR_OTHER  1
/* No ticket present */
# define ossl_SSL_TICKET_NONE             2
/* Empty ticket present */
# define ossl_SSL_TICKET_EMPTY            3
/* the ticket couldn't be decrypted */
# define ossl_SSL_TICKET_NO_DECRYPT       4
/* a ticket was successfully decrypted */
# define ossl_SSL_TICKET_SUCCESS          5
/* same as above but the ticket needs to be renewed */
# define ossl_SSL_TICKET_SUCCESS_RENEW    6

/* Return codes for the decrypt session ticket callback */
typedef int ossl_SSL_TICKET_RETURN;

/* An error occurred */
#define ossl_SSL_TICKET_RETURN_ABORT             0
/* Do not use the ticket, do not send a renewed ticket to the client */
#define ossl_SSL_TICKET_RETURN_IGNORE            1
/* Do not use the ticket, send a renewed ticket to the client */
#define ossl_SSL_TICKET_RETURN_IGNORE_RENEW      2
/* Use the ticket, do not send a renewed ticket to the client */
#define ossl_SSL_TICKET_RETURN_USE               3
/* Use the ticket, send a renewed ticket to the client */
#define ossl_SSL_TICKET_RETURN_USE_RENEW         4

typedef int (*ossl_SSL_CTX_generate_session_ticket_fn)(ossl_SSL *s, void *arg);
typedef ossl_SSL_TICKET_RETURN (*ossl_SSL_CTX_decrypt_session_ticket_fn)(ossl_SSL *s, ossl_SSL_SESSION *ss,
                                                               const unsigned char *keyname,
                                                               size_t keyname_length,
                                                               ossl_SSL_TICKET_STATUS status,
                                                               void *arg);
int ossl_SSL_CTX_set_session_ticket_cb(ossl_SSL_CTX *ctx,
                                  ossl_SSL_CTX_generate_session_ticket_fn gen_cb,
                                  ossl_SSL_CTX_decrypt_session_ticket_fn dec_cb,
                                  void *arg);
int ossl_SSL_SESSION_set1_ticket_appdata(ossl_SSL_SESSION *ss, const void *data, size_t len);
int ossl_SSL_SESSION_get0_ticket_appdata(ossl_SSL_SESSION *ss, void **data, size_t *len);

typedef unsigned int (*ossl_DTLS_timer_cb)(ossl_SSL *s, unsigned int timer_us);

void ossl_DTLS_set_timer_cb(ossl_SSL *s, ossl_DTLS_timer_cb cb);


typedef int (*ossl_SSL_allow_early_data_cb_fn)(ossl_SSL *s, void *arg);
void ossl_SSL_CTX_set_allow_early_data_cb(ossl_SSL_CTX *ctx,
                                     ossl_SSL_allow_early_data_cb_fn cb,
                                     void *arg);
void ossl_SSL_set_allow_early_data_cb(ossl_SSL *s,
                                 ossl_SSL_allow_early_data_cb_fn cb,
                                 void *arg);

/* store the default cipher strings inside the library */
const char *ossl_OSSL_default_cipher_list(void);
const char *ossl_OSSL_default_ciphersuites(void);

# ifdef  __cplusplus
}
# endif
#endif
