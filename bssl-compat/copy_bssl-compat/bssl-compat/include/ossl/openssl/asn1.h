/*
 * WARNING: do not edit!
 * Generated by Makefile from ../../../openssl/source/include/openssl/asn1.h.in
 *
 * Copyright 1995-2021 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



#ifndef ossl_OPENSSL_ASN1_H
# define ossl_OPENSSL_ASN1_H
# pragma once

# include "ossl/openssl/macros.h"
# ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
#  define ossl_HEADER_ASN1_H
# endif

# include <time.h>
# include "ossl/openssl/e_os2.h"
# include "ossl/openssl/opensslconf.h"
# include "ossl/openssl/bio.h"
# include "ossl/openssl/safestack.h"
# include "ossl/openssl/asn1err.h"
# include "ossl/openssl/symhacks.h"

# include "ossl/openssl/types.h"
# include "ossl/openssl/bn.h"

# ifdef ossl_OPENSSL_BUILD_SHLIBCRYPTO
#  undef ossl_OPENSSL_EXTERN
#  define ossl_OPENSSL_EXTERN ossl_OPENSSL_EXPORT
# endif

#ifdef  __cplusplus
extern "C" {
#endif

# define ossl_V_ASN1_UNIVERSAL                0x00
# define ossl_V_ASN1_APPLICATION              0x40
# define ossl_V_ASN1_CONTEXT_SPECIFIC         0x80
# define ossl_V_ASN1_PRIVATE                  0xc0

# define ossl_V_ASN1_CONSTRUCTED              0x20
# define ossl_V_ASN1_PRIMITIVE_TAG            0x1f
# define ossl_V_ASN1_PRIMATIVE_TAG /*compat*/ ossl_V_ASN1_PRIMITIVE_TAG

# define ossl_V_ASN1_APP_CHOOSE               -2/* let the recipient choose */
# define ossl_V_ASN1_OTHER                    -3/* used in ossl_ASN1_TYPE */
# define ossl_V_ASN1_ANY                      -4/* used in ASN1 template code */

# define ossl_V_ASN1_UNDEF                    -1
/* ASN.1 tag values */
# define ossl_V_ASN1_EOC                      0
# define ossl_V_ASN1_BOOLEAN                  1 /**/
# define ossl_V_ASN1_INTEGER                  2
# define ossl_V_ASN1_BIT_STRING               3
# define ossl_V_ASN1_OCTET_STRING             4
# define ossl_V_ASN1_NULL                     5
# define ossl_V_ASN1_OBJECT                   6
# define ossl_V_ASN1_OBJECT_DESCRIPTOR        7
# define ossl_V_ASN1_EXTERNAL                 8
# define ossl_V_ASN1_REAL                     9
# define ossl_V_ASN1_ENUMERATED               10
# define ossl_V_ASN1_UTF8STRING               12
# define ossl_V_ASN1_SEQUENCE                 16
# define ossl_V_ASN1_SET                      17
# define ossl_V_ASN1_NUMERICSTRING            18 /**/
# define ossl_V_ASN1_PRINTABLESTRING          19
# define ossl_V_ASN1_T61STRING                20
# define ossl_V_ASN1_TELETEXSTRING            20/* alias */
# define ossl_V_ASN1_VIDEOTEXSTRING           21 /**/
# define ossl_V_ASN1_IA5STRING                22
# define ossl_V_ASN1_UTCTIME                  23
# define ossl_V_ASN1_GENERALIZEDTIME          24 /**/
# define ossl_V_ASN1_GRAPHICSTRING            25 /**/
# define ossl_V_ASN1_ISO64STRING              26 /**/
# define ossl_V_ASN1_VISIBLESTRING            26/* alias */
# define ossl_V_ASN1_GENERALSTRING            27 /**/
# define ossl_V_ASN1_UNIVERSALSTRING          28 /**/
# define ossl_V_ASN1_BMPSTRING                30

/*
 * NB the constants below are used internally by ossl_ASN1_INTEGER
 * and ossl_ASN1_ENUMERATED to indicate the sign. They are *not* on
 * the wire tag values.
 */

# define ossl_V_ASN1_NEG                      0x100
# define ossl_V_ASN1_NEG_INTEGER              (2 | ossl_V_ASN1_NEG)
# define ossl_V_ASN1_NEG_ENUMERATED           (10 | ossl_V_ASN1_NEG)

/* For use with ossl_d2i_ASN1_type_bytes() */
# define ossl_B_ASN1_NUMERICSTRING    0x0001
# define ossl_B_ASN1_PRINTABLESTRING  0x0002
# define ossl_B_ASN1_T61STRING        0x0004
# define ossl_B_ASN1_TELETEXSTRING    0x0004
# define ossl_B_ASN1_VIDEOTEXSTRING   0x0008
# define ossl_B_ASN1_IA5STRING        0x0010
# define ossl_B_ASN1_GRAPHICSTRING    0x0020
# define ossl_B_ASN1_ISO64STRING      0x0040
# define ossl_B_ASN1_VISIBLESTRING    0x0040
# define ossl_B_ASN1_GENERALSTRING    0x0080
# define ossl_B_ASN1_UNIVERSALSTRING  0x0100
# define ossl_B_ASN1_OCTET_STRING     0x0200
# define ossl_B_ASN1_BIT_STRING       0x0400
# define ossl_B_ASN1_BMPSTRING        0x0800
# define ossl_B_ASN1_UNKNOWN          0x1000
# define ossl_B_ASN1_UTF8STRING       0x2000
# define ossl_B_ASN1_UTCTIME          0x4000
# define ossl_B_ASN1_GENERALIZEDTIME  0x8000
# define ossl_B_ASN1_SEQUENCE         0x10000
/* For use with ossl_ASN1_mbstring_copy() */
# define ossl_MBSTRING_FLAG           0x1000
# define ossl_MBSTRING_UTF8           (ossl_MBSTRING_FLAG)
# define ossl_MBSTRING_ASC            (ossl_MBSTRING_FLAG|1)
# define ossl_MBSTRING_BMP            (ossl_MBSTRING_FLAG|2)
# define ossl_MBSTRING_UNIV           (ossl_MBSTRING_FLAG|4)
# define ossl_SMIME_OLDMIME           0x400
# define ossl_SMIME_CRLFEOL           0x800
# define ossl_SMIME_STREAM            0x1000

/* Stacks for types not otherwise defined in this header */
ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_X509_ALGOR, ossl_X509_ALGOR, ossl_X509_ALGOR)
#define ossl_sk_X509_ALGOR_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_X509_ALGOR_sk_type(sk))
#define ossl_sk_X509_ALGOR_value(sk, idx) ((ossl_X509_ALGOR *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_X509_ALGOR_sk_type(sk), (idx)))
#define ossl_sk_X509_ALGOR_new(cmp) ((ossl_STACK_OF(ossl_X509_ALGOR) *)ossl_OPENSSL_sk_new(ossl_ossl_check_X509_ALGOR_compfunc_type(cmp)))
#define ossl_sk_X509_ALGOR_new_null() ((ossl_STACK_OF(ossl_X509_ALGOR) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_X509_ALGOR_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_X509_ALGOR) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_X509_ALGOR_compfunc_type(cmp), (n)))
#define ossl_sk_X509_ALGOR_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_X509_ALGOR_sk_type(sk), (n))
#define ossl_sk_X509_ALGOR_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_X509_ALGOR_sk_type(sk))
#define ossl_sk_X509_ALGOR_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_X509_ALGOR_sk_type(sk))
#define ossl_sk_X509_ALGOR_delete(sk, i) ((ossl_X509_ALGOR *)ossl_OPENSSL_sk_delete(ossl_ossl_check_X509_ALGOR_sk_type(sk), (i)))
#define ossl_sk_X509_ALGOR_delete_ptr(sk, ptr) ((ossl_X509_ALGOR *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_X509_ALGOR_sk_type(sk), ossl_ossl_check_X509_ALGOR_type(ptr)))
#define ossl_sk_X509_ALGOR_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_X509_ALGOR_sk_type(sk), ossl_ossl_check_X509_ALGOR_type(ptr))
#define ossl_sk_X509_ALGOR_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_X509_ALGOR_sk_type(sk), ossl_ossl_check_X509_ALGOR_type(ptr))
#define ossl_sk_X509_ALGOR_pop(sk) ((ossl_X509_ALGOR *)ossl_OPENSSL_sk_pop(ossl_ossl_check_X509_ALGOR_sk_type(sk)))
#define ossl_sk_X509_ALGOR_shift(sk) ((ossl_X509_ALGOR *)ossl_OPENSSL_sk_shift(ossl_ossl_check_X509_ALGOR_sk_type(sk)))
#define ossl_sk_X509_ALGOR_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_X509_ALGOR_sk_type(sk),ossl_ossl_check_X509_ALGOR_freefunc_type(freefunc))
#define ossl_sk_X509_ALGOR_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_X509_ALGOR_sk_type(sk), ossl_ossl_check_X509_ALGOR_type(ptr), (idx))
#define ossl_sk_X509_ALGOR_set(sk, idx, ptr) ((ossl_X509_ALGOR *)ossl_OPENSSL_sk_set(ossl_ossl_check_X509_ALGOR_sk_type(sk), (idx), ossl_ossl_check_X509_ALGOR_type(ptr)))
#define ossl_sk_X509_ALGOR_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_X509_ALGOR_sk_type(sk), ossl_ossl_check_X509_ALGOR_type(ptr))
#define ossl_sk_X509_ALGOR_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_X509_ALGOR_sk_type(sk), ossl_ossl_check_X509_ALGOR_type(ptr))
#define ossl_sk_X509_ALGOR_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_X509_ALGOR_sk_type(sk), ossl_ossl_check_X509_ALGOR_type(ptr), pnum)
#define ossl_sk_X509_ALGOR_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_X509_ALGOR_sk_type(sk))
#define ossl_sk_X509_ALGOR_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_X509_ALGOR_sk_type(sk))
#define ossl_sk_X509_ALGOR_dup(sk) ((ossl_STACK_OF(ossl_X509_ALGOR) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_X509_ALGOR_sk_type(sk)))
#define ossl_sk_X509_ALGOR_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_X509_ALGOR) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_X509_ALGOR_sk_type(sk), ossl_ossl_check_X509_ALGOR_copyfunc_type(copyfunc), ossl_ossl_check_X509_ALGOR_freefunc_type(freefunc)))
#define ossl_sk_X509_ALGOR_set_cmp_func(sk, cmp) ((ossl_sk_X509_ALGOR_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_X509_ALGOR_sk_type(sk), ossl_ossl_check_X509_ALGOR_compfunc_type(cmp)))



# define ossl_ASN1_STRING_FLAG_BITS_LEFT 0x08/* Set if 0x07 has bits left value */
/*
 * This indicates that the ossl_ASN1_STRING is not a real value but just a place
 * holder for the location where indefinite length constructed data should be
 * inserted in the memory buffer
 */
# define ossl_ASN1_STRING_FLAG_NDEF 0x010

/*
 * This flag is used by the CMS code to indicate that a string is not
 * complete and is a place holder for content when it had all been accessed.
 * The flag will be reset when content has been written to it.
 */

# define ossl_ASN1_STRING_FLAG_CONT 0x020
/*
 * This flag is used by ASN1 code to indicate an ossl_ASN1_STRING is an MSTRING
 * type.
 */
# define ossl_ASN1_STRING_FLAG_MSTRING 0x040
/* String is embedded and only content should be freed */
# define ossl_ASN1_STRING_FLAG_EMBED 0x080
/* String should be parsed in RFC 5280's time format */
# define ossl_ASN1_STRING_FLAG_X509_TIME 0x100
/* This is the base type that holds just about everything :-) */
struct ossl_asn1_string_st {
    int length;
    int type;
    unsigned char *data;
    /*
     * The value of the following field depends on the type being held.  It
     * is mostly being used for BIT_STRING so if the input data has a
     * non-zero 'unused bits' value, it will be handled correctly
     */
    long flags;
};

/*
 * ossl_ASN1_ENCODING structure: this is used to save the received encoding of an
 * ASN1 type. This is useful to get round problems with invalid encodings
 * which can break signatures.
 */

typedef struct ossl_ASN1_ENCODING_st {
    unsigned char *enc;         /* DER encoding */
    long len;                   /* Length of encoding */
    int modified;               /* set to 1 if 'enc' is invalid */
} ossl_ASN1_ENCODING;

/* Used with ASN1 LONG type: if a long is set to this it is omitted */
# define ossl_ASN1_LONG_UNDEF 0x7fffffffL

# define ossl_STABLE_FLAGS_MALLOC     0x01
/*
 * A zero passed to ossl_ASN1_STRING_TABLE_new_add for the flags is interpreted
 * as "don't change" and ossl_STABLE_FLAGS_MALLOC is always set. By setting
 * ossl_STABLE_FLAGS_MALLOC only we can clear the existing value. Use the alias
 * ossl_STABLE_FLAGS_CLEAR to reflect this.
 */
# define ossl_STABLE_FLAGS_CLEAR      ossl_STABLE_FLAGS_MALLOC
# define ossl_STABLE_NO_MASK          0x02
# define ossl_DIRSTRING_TYPE  \
 (ossl_B_ASN1_PRINTABLESTRING|ossl_B_ASN1_T61STRING|ossl_B_ASN1_BMPSTRING|ossl_B_ASN1_UTF8STRING)
# define ossl_PKCS9STRING_TYPE (ossl_DIRSTRING_TYPE|ossl_B_ASN1_IA5STRING)

struct ossl_asn1_string_table_st {
    int nid;
    long minsize;
    long maxsize;
    unsigned long mask;
    unsigned long flags;
};

ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_ASN1_STRING_TABLE, ossl_ASN1_STRING_TABLE, ossl_ASN1_STRING_TABLE)
#define ossl_sk_ASN1_STRING_TABLE_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_ASN1_STRING_TABLE_sk_type(sk))
#define ossl_sk_ASN1_STRING_TABLE_value(sk, idx) ((ossl_ASN1_STRING_TABLE *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_ASN1_STRING_TABLE_sk_type(sk), (idx)))
#define ossl_sk_ASN1_STRING_TABLE_new(cmp) ((ossl_STACK_OF(ossl_ASN1_STRING_TABLE) *)ossl_OPENSSL_sk_new(ossl_ossl_check_ASN1_STRING_TABLE_compfunc_type(cmp)))
#define ossl_sk_ASN1_STRING_TABLE_new_null() ((ossl_STACK_OF(ossl_ASN1_STRING_TABLE) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_ASN1_STRING_TABLE_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_ASN1_STRING_TABLE) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_ASN1_STRING_TABLE_compfunc_type(cmp), (n)))
#define ossl_sk_ASN1_STRING_TABLE_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_ASN1_STRING_TABLE_sk_type(sk), (n))
#define ossl_sk_ASN1_STRING_TABLE_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_ASN1_STRING_TABLE_sk_type(sk))
#define ossl_sk_ASN1_STRING_TABLE_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_ASN1_STRING_TABLE_sk_type(sk))
#define ossl_sk_ASN1_STRING_TABLE_delete(sk, i) ((ossl_ASN1_STRING_TABLE *)ossl_OPENSSL_sk_delete(ossl_ossl_check_ASN1_STRING_TABLE_sk_type(sk), (i)))
#define ossl_sk_ASN1_STRING_TABLE_delete_ptr(sk, ptr) ((ossl_ASN1_STRING_TABLE *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_ASN1_STRING_TABLE_sk_type(sk), ossl_ossl_check_ASN1_STRING_TABLE_type(ptr)))
#define ossl_sk_ASN1_STRING_TABLE_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_ASN1_STRING_TABLE_sk_type(sk), ossl_ossl_check_ASN1_STRING_TABLE_type(ptr))
#define ossl_sk_ASN1_STRING_TABLE_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_ASN1_STRING_TABLE_sk_type(sk), ossl_ossl_check_ASN1_STRING_TABLE_type(ptr))
#define ossl_sk_ASN1_STRING_TABLE_pop(sk) ((ossl_ASN1_STRING_TABLE *)ossl_OPENSSL_sk_pop(ossl_ossl_check_ASN1_STRING_TABLE_sk_type(sk)))
#define ossl_sk_ASN1_STRING_TABLE_shift(sk) ((ossl_ASN1_STRING_TABLE *)ossl_OPENSSL_sk_shift(ossl_ossl_check_ASN1_STRING_TABLE_sk_type(sk)))
#define ossl_sk_ASN1_STRING_TABLE_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_ASN1_STRING_TABLE_sk_type(sk),ossl_ossl_check_ASN1_STRING_TABLE_freefunc_type(freefunc))
#define ossl_sk_ASN1_STRING_TABLE_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_ASN1_STRING_TABLE_sk_type(sk), ossl_ossl_check_ASN1_STRING_TABLE_type(ptr), (idx))
#define ossl_sk_ASN1_STRING_TABLE_set(sk, idx, ptr) ((ossl_ASN1_STRING_TABLE *)ossl_OPENSSL_sk_set(ossl_ossl_check_ASN1_STRING_TABLE_sk_type(sk), (idx), ossl_ossl_check_ASN1_STRING_TABLE_type(ptr)))
#define ossl_sk_ASN1_STRING_TABLE_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_ASN1_STRING_TABLE_sk_type(sk), ossl_ossl_check_ASN1_STRING_TABLE_type(ptr))
#define ossl_sk_ASN1_STRING_TABLE_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_ASN1_STRING_TABLE_sk_type(sk), ossl_ossl_check_ASN1_STRING_TABLE_type(ptr))
#define ossl_sk_ASN1_STRING_TABLE_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_ASN1_STRING_TABLE_sk_type(sk), ossl_ossl_check_ASN1_STRING_TABLE_type(ptr), pnum)
#define ossl_sk_ASN1_STRING_TABLE_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_ASN1_STRING_TABLE_sk_type(sk))
#define ossl_sk_ASN1_STRING_TABLE_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_ASN1_STRING_TABLE_sk_type(sk))
#define ossl_sk_ASN1_STRING_TABLE_dup(sk) ((ossl_STACK_OF(ossl_ASN1_STRING_TABLE) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_ASN1_STRING_TABLE_sk_type(sk)))
#define ossl_sk_ASN1_STRING_TABLE_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_ASN1_STRING_TABLE) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_ASN1_STRING_TABLE_sk_type(sk), ossl_ossl_check_ASN1_STRING_TABLE_copyfunc_type(copyfunc), ossl_ossl_check_ASN1_STRING_TABLE_freefunc_type(freefunc)))
#define ossl_sk_ASN1_STRING_TABLE_set_cmp_func(sk, cmp) ((ossl_sk_ASN1_STRING_TABLE_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_ASN1_STRING_TABLE_sk_type(sk), ossl_ossl_check_ASN1_STRING_TABLE_compfunc_type(cmp)))


/* size limits: this stuff is taken straight from RFC2459 */

# define ossl_ub_name                         32768
# define ossl_ub_common_name                  64
# define ossl_ub_locality_name                128
# define ossl_ub_state_name                   128
# define ossl_ub_organization_name            64
# define ossl_ub_organization_unit_name       64
# define ossl_ub_title                        64
# define ossl_ub_email_address                128

/*
 * Declarations for template structures: for full definitions see asn1t.h
 */
typedef struct ossl_ASN1_TEMPLATE_st ossl_ASN1_TEMPLATE;
typedef struct ossl_ASN1_TLC_st ossl_ASN1_TLC;
/* This is just an opaque pointer */
typedef struct ossl_ASN1_VALUE_st ossl_ASN1_VALUE;

/* Declare ASN1 functions: the implement macro in in asn1t.h */

/*
 * The mysterious 'extern' that's passed to some macros is innocuous,
 * and is there to quiet pre-C99 compilers that may complain about empty
 * arguments in macro calls.
 */

# define ossl_DECLARE_ASN1_FUNCTIONS_attr(attr, type)                            \
    ossl_DECLARE_ASN1_FUNCTIONS_name_attr(attr, type, type)
# define ossl_DECLARE_ASN1_FUNCTIONS(type)                                       \
    ossl_DECLARE_ASN1_FUNCTIONS_attr(extern, type)

# define ossl_DECLARE_ASN1_ALLOC_FUNCTIONS_attr(attr, type)                      \
    ossl_DECLARE_ASN1_ALLOC_FUNCTIONS_name_attr(attr, type, type)
# define ossl_DECLARE_ASN1_ALLOC_FUNCTIONS(type)                                 \
    ossl_DECLARE_ASN1_ALLOC_FUNCTIONS_attr(extern, type)

# define ossl_DECLARE_ASN1_FUNCTIONS_name_attr(attr, type, name)                 \
    ossl_DECLARE_ASN1_ALLOC_FUNCTIONS_name_attr(attr, type, name)                \
    ossl_DECLARE_ASN1_ENCODE_FUNCTIONS_name_attr(attr, type, name)
# define ossl_DECLARE_ASN1_FUNCTIONS_name(type, name)                            \
    ossl_DECLARE_ASN1_FUNCTIONS_name_attr(extern, type, name)

# define ossl_DECLARE_ASN1_ENCODE_FUNCTIONS_attr(attr, type, itname, name)       \
    ossl_DECLARE_ASN1_ENCODE_FUNCTIONS_only_attr(attr, type, name)               \
    ossl_DECLARE_ASN1_ITEM_attr(attr, itname)
# define ossl_DECLARE_ASN1_ENCODE_FUNCTIONS(type, itname, name)                  \
    ossl_DECLARE_ASN1_ENCODE_FUNCTIONS_attr(extern, type, itname, name)

# define ossl_DECLARE_ASN1_ENCODE_FUNCTIONS_name_attr(attr, type, name)          \
    ossl_DECLARE_ASN1_ENCODE_FUNCTIONS_attr(attr, type, name, name)
# define ossl_DECLARE_ASN1_ENCODE_FUNCTIONS_name(type, name) \
    ossl_DECLARE_ASN1_ENCODE_FUNCTIONS_name_attr(extern, type, name)

# define ossl_DECLARE_ASN1_ENCODE_FUNCTIONS_only_attr(attr, type, name)          \
    attr type *ossl_d2i_##name(type **a, const unsigned char **in, long len);    \
    attr int ossl_i2d_##name(const type *a, unsigned char **out);
# define ossl_DECLARE_ASN1_ENCODE_FUNCTIONS_only(type, name)                     \
    ossl_DECLARE_ASN1_ENCODE_FUNCTIONS_only_attr(extern, type, name)

# define ossl_DECLARE_ASN1_NDEF_FUNCTION_attr(attr, name)                        \
    attr int ossl_i2d_##name##_NDEF(const name *a, unsigned char **out);
# define ossl_DECLARE_ASN1_NDEF_FUNCTION(name)                                   \
    ossl_DECLARE_ASN1_NDEF_FUNCTION_attr(extern, name)

# define ossl_DECLARE_ASN1_ALLOC_FUNCTIONS_name_attr(attr, type, name)           \
    attr type *name##_new(void);                                            \
    attr void name##_free(type *a);
# define ossl_DECLARE_ASN1_ALLOC_FUNCTIONS_name(type, name)                      \
    ossl_DECLARE_ASN1_ALLOC_FUNCTIONS_name_attr(extern, type, name)

# define ossl_DECLARE_ASN1_DUP_FUNCTION_attr(attr, type)                         \
    ossl_DECLARE_ASN1_DUP_FUNCTION_name_attr(attr, type, type)
# define ossl_DECLARE_ASN1_DUP_FUNCTION(type)                                    \
    ossl_DECLARE_ASN1_DUP_FUNCTION_attr(extern, type)

# define ossl_DECLARE_ASN1_DUP_FUNCTION_name_attr(attr, type, name)              \
    attr type *ossl##_##name##_dup(const type *a);
# define ossl_DECLARE_ASN1_DUP_FUNCTION_name(type, name)                         \
    ossl_DECLARE_ASN1_DUP_FUNCTION_name_attr(extern, type, name)

# define ossl_DECLARE_ASN1_PRINT_FUNCTION_attr(attr, stname)                     \
    ossl_DECLARE_ASN1_PRINT_FUNCTION_fname_attr(attr, stname, stname)
# define ossl_DECLARE_ASN1_PRINT_FUNCTION(stname)                                \
    ossl_DECLARE_ASN1_PRINT_FUNCTION_attr(extern, stname)

# define ossl_DECLARE_ASN1_PRINT_FUNCTION_fname_attr(attr, stname, fname)        \
    attr int fname##_print_ctx(ossl_BIO *out, const stname *x, int indent,       \
                               const ossl_ASN1_PCTX *pctx);
# define ossl_DECLARE_ASN1_PRINT_FUNCTION_fname(stname, fname)                   \
    ossl_DECLARE_ASN1_PRINT_FUNCTION_fname_attr(extern, stname, fname)

# define ossl_D2I_OF(type) type *(*)(type **,const unsigned char **,long)
# define ossl_I2D_OF(type) int (*)(const type *,unsigned char **)

# define ossl_CHECKED_D2I_OF(type, d2i) \
    ((ossl_d2i_of_void*) (1 ? d2i : ((ossl_D2I_OF(type))0)))
# define ossl_CHECKED_I2D_OF(type, i2d) \
    ((ossl_i2d_of_void*) (1 ? i2d : ((ossl_I2D_OF(type))0)))
# define ossl_CHECKED_NEW_OF(type, xnew) \
    ((void *(*)(void)) (1 ? xnew : ((type *(*)(void))0)))
# define ossl_CHECKED_PTR_OF(type, p) \
    ((void*) (1 ? p : (type*)0))
# define ossl_CHECKED_PPTR_OF(type, p) \
    ((void**) (1 ? p : (type**)0))

# define ossl_TYPEDEF_D2I_OF(type) typedef type *ossl_d2i_of_##type(type **,const unsigned char **,long)
# define ossl_TYPEDEF_I2D_OF(type) typedef int ossl_i2d_of_##type(const type *,unsigned char **)
# define ossl_TYPEDEF_D2I2D_OF(type) ossl_TYPEDEF_D2I_OF(type); ossl_TYPEDEF_I2D_OF(type)

typedef void *ossl_d2i_of_void(void **, const unsigned char **, long);
typedef int ossl_i2d_of_void(const void *, unsigned char **);

/*-
 * The following macros and typedefs allow an ossl_ASN1_ITEM
 * to be embedded in a structure and referenced. Since
 * the ossl_ASN1_ITEM pointers need to be globally accessible
 * (possibly from shared libraries) they may exist in
 * different forms. On platforms that support it the
 * ossl_ASN1_ITEM structure itself will be globally exported.
 * Other platforms will export a function that returns
 * an ossl_ASN1_ITEM pointer.
 *
 * To handle both cases transparently the macros below
 * should be used instead of hard coding an ossl_ASN1_ITEM
 * pointer in a structure.
 *
 * The structure will look like this:
 *
 * typedef struct SOMETHING_st {
 *      ...
 *      ossl_ASN1_ITEM_EXP *iptr;
 *      ...
 * } SOMETHING;
 *
 * It would be initialised as e.g.:
 *
 * SOMETHING somevar = {...,ossl_ASN1_ITEM_ref(ossl_X509),...};
 *
 * and the actual pointer extracted with:
 *
 * const ossl_ASN1_ITEM *it = ossl_ASN1_ITEM_ptr(somevar.iptr);
 *
 * Finally an ossl_ASN1_ITEM pointer can be extracted from an
 * appropriate reference with: ossl_ASN1_ITEM_rptr(ossl_X509). This
 * would be used when a function takes an ossl_ASN1_ITEM * argument.
 *
 */


/*
 * Platforms that can't easily handle shared global variables are declared as
 * functions returning ossl_ASN1_ITEM pointers.
 */

/* ossl_ASN1_ITEM pointer exported type */
typedef const ossl_ASN1_ITEM *ossl_ASN1_ITEM_EXP (void);

/* Macro to obtain ossl_ASN1_ITEM pointer from exported type */
# define ossl_ASN1_ITEM_ptr(iptr) (iptr())

/* Macro to include ossl_ASN1_ITEM pointer from base type */
# define ossl_ASN1_ITEM_ref(iptr) (iptr##_it)

# define ossl_ASN1_ITEM_rptr(ref) (ref##_it())

# define ossl_DECLARE_ASN1_ITEM_attr(attr, name)                                 \
    attr const ossl_ASN1_ITEM * name##_it(void);
# define ossl_DECLARE_ASN1_ITEM(name)                                            \
    ossl_DECLARE_ASN1_ITEM_attr(extern, name)

/* Parameters used by ossl_ASN1_STRING_print_ex() */

/*
 * These determine which characters to escape: RFC2253 special characters,
 * control characters and MSB set characters
 */

# define ossl_ASN1_STRFLGS_ESC_2253           1
# define ossl_ASN1_STRFLGS_ESC_CTRL           2
# define ossl_ASN1_STRFLGS_ESC_MSB            4

/* Lower 8 bits are reserved as an output type specifier */
# define ossl_ASN1_DTFLGS_TYPE_MASK    0x0FUL
# define ossl_ASN1_DTFLGS_RFC822       0x00UL
# define ossl_ASN1_DTFLGS_ISO8601      0x01UL

/*
 * This flag determines how we do escaping: normally RC2253 backslash only,
 * set this to use backslash and quote.
 */

# define ossl_ASN1_STRFLGS_ESC_QUOTE          8

/* These three flags are internal use only. */

/* Character is a valid PrintableString character */
# define ossl_CHARTYPE_PRINTABLESTRING        0x10
/* Character needs escaping if it is the first character */
# define ossl_CHARTYPE_FIRST_ESC_2253         0x20
/* Character needs escaping if it is the last character */
# define ossl_CHARTYPE_LAST_ESC_2253          0x40

/*
 * NB the internal flags are safely reused below by flags handled at the top
 * level.
 */

/*
 * If this is set we convert all character strings to UTF8 first
 */

# define ossl_ASN1_STRFLGS_UTF8_CONVERT       0x10

/*
 * If this is set we don't attempt to interpret content: just assume all
 * strings are 1 byte per character. This will produce some pretty odd
 * looking output!
 */

# define ossl_ASN1_STRFLGS_IGNORE_TYPE        0x20

/* If this is set we include the string type in the output */
# define ossl_ASN1_STRFLGS_SHOW_TYPE          0x40

/*
 * This determines which strings to display and which to 'dump' (hex dump of
 * content octets or DER encoding). We can only dump non character strings or
 * everything. If we don't dump 'unknown' they are interpreted as character
 * strings with 1 octet per character and are subject to the usual escaping
 * options.
 */

# define ossl_ASN1_STRFLGS_DUMP_ALL           0x80
# define ossl_ASN1_STRFLGS_DUMP_UNKNOWN       0x100

/*
 * These determine what 'dumping' does, we can dump the content octets or the
 * DER encoding: both use the RFC2253 #XXXXX notation.
 */

# define ossl_ASN1_STRFLGS_DUMP_DER           0x200

/*
 * This flag specifies that RC2254 escaping shall be performed.
 */
#define ossl_ASN1_STRFLGS_ESC_2254           0x400

/*
 * All the string flags consistent with RFC2253, escaping control characters
 * isn't essential in RFC2253 but it is advisable anyway.
 */

# define ossl_ASN1_STRFLGS_RFC2253    (ossl_ASN1_STRFLGS_ESC_2253 | \
                                ossl_ASN1_STRFLGS_ESC_CTRL | \
                                ossl_ASN1_STRFLGS_ESC_MSB | \
                                ossl_ASN1_STRFLGS_UTF8_CONVERT | \
                                ossl_ASN1_STRFLGS_DUMP_UNKNOWN | \
                                ossl_ASN1_STRFLGS_DUMP_DER)


struct ossl_asn1_type_st {
    int type;
    union {
        char *ptr;
        ossl_ASN1_BOOLEAN boolean;
        ossl_ASN1_STRING *asn1_string;
        ossl_ASN1_OBJECT *object;
        ossl_ASN1_INTEGER *integer;
        ossl_ASN1_ENUMERATED *enumerated;
        ossl_ASN1_BIT_STRING *bit_string;
        ossl_ASN1_OCTET_STRING *octet_string;
        ossl_ASN1_PRINTABLESTRING *printablestring;
        ossl_ASN1_T61STRING *t61string;
        ossl_ASN1_IA5STRING *ia5string;
        ossl_ASN1_GENERALSTRING *generalstring;
        ossl_ASN1_BMPSTRING *bmpstring;
        ossl_ASN1_UNIVERSALSTRING *universalstring;
        ossl_ASN1_UTCTIME *utctime;
        ossl_ASN1_GENERALIZEDTIME *generalizedtime;
        ossl_ASN1_VISIBLESTRING *visiblestring;
        ossl_ASN1_UTF8STRING *utf8string;
        /*
         * set and sequence are left complete and still contain the set or
         * sequence bytes
         */
        ossl_ASN1_STRING *set;
        ossl_ASN1_STRING *sequence;
        ossl_ASN1_VALUE *asn1_value;
    } value;
};

ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_ASN1_TYPE, ossl_ASN1_TYPE, ossl_ASN1_TYPE)
#define ossl_sk_ASN1_TYPE_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_ASN1_TYPE_sk_type(sk))
#define ossl_sk_ASN1_TYPE_value(sk, idx) ((ossl_ASN1_TYPE *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_ASN1_TYPE_sk_type(sk), (idx)))
#define ossl_sk_ASN1_TYPE_new(cmp) ((ossl_STACK_OF(ossl_ASN1_TYPE) *)ossl_OPENSSL_sk_new(ossl_ossl_check_ASN1_TYPE_compfunc_type(cmp)))
#define ossl_sk_ASN1_TYPE_new_null() ((ossl_STACK_OF(ossl_ASN1_TYPE) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_ASN1_TYPE_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_ASN1_TYPE) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_ASN1_TYPE_compfunc_type(cmp), (n)))
#define ossl_sk_ASN1_TYPE_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_ASN1_TYPE_sk_type(sk), (n))
#define ossl_sk_ASN1_TYPE_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_ASN1_TYPE_sk_type(sk))
#define ossl_sk_ASN1_TYPE_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_ASN1_TYPE_sk_type(sk))
#define ossl_sk_ASN1_TYPE_delete(sk, i) ((ossl_ASN1_TYPE *)ossl_OPENSSL_sk_delete(ossl_ossl_check_ASN1_TYPE_sk_type(sk), (i)))
#define ossl_sk_ASN1_TYPE_delete_ptr(sk, ptr) ((ossl_ASN1_TYPE *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_ASN1_TYPE_sk_type(sk), ossl_ossl_check_ASN1_TYPE_type(ptr)))
#define ossl_sk_ASN1_TYPE_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_ASN1_TYPE_sk_type(sk), ossl_ossl_check_ASN1_TYPE_type(ptr))
#define ossl_sk_ASN1_TYPE_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_ASN1_TYPE_sk_type(sk), ossl_ossl_check_ASN1_TYPE_type(ptr))
#define ossl_sk_ASN1_TYPE_pop(sk) ((ossl_ASN1_TYPE *)ossl_OPENSSL_sk_pop(ossl_ossl_check_ASN1_TYPE_sk_type(sk)))
#define ossl_sk_ASN1_TYPE_shift(sk) ((ossl_ASN1_TYPE *)ossl_OPENSSL_sk_shift(ossl_ossl_check_ASN1_TYPE_sk_type(sk)))
#define ossl_sk_ASN1_TYPE_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_ASN1_TYPE_sk_type(sk),ossl_ossl_check_ASN1_TYPE_freefunc_type(freefunc))
#define ossl_sk_ASN1_TYPE_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_ASN1_TYPE_sk_type(sk), ossl_ossl_check_ASN1_TYPE_type(ptr), (idx))
#define ossl_sk_ASN1_TYPE_set(sk, idx, ptr) ((ossl_ASN1_TYPE *)ossl_OPENSSL_sk_set(ossl_ossl_check_ASN1_TYPE_sk_type(sk), (idx), ossl_ossl_check_ASN1_TYPE_type(ptr)))
#define ossl_sk_ASN1_TYPE_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_ASN1_TYPE_sk_type(sk), ossl_ossl_check_ASN1_TYPE_type(ptr))
#define ossl_sk_ASN1_TYPE_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_ASN1_TYPE_sk_type(sk), ossl_ossl_check_ASN1_TYPE_type(ptr))
#define ossl_sk_ASN1_TYPE_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_ASN1_TYPE_sk_type(sk), ossl_ossl_check_ASN1_TYPE_type(ptr), pnum)
#define ossl_sk_ASN1_TYPE_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_ASN1_TYPE_sk_type(sk))
#define ossl_sk_ASN1_TYPE_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_ASN1_TYPE_sk_type(sk))
#define ossl_sk_ASN1_TYPE_dup(sk) ((ossl_STACK_OF(ossl_ASN1_TYPE) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_ASN1_TYPE_sk_type(sk)))
#define ossl_sk_ASN1_TYPE_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_ASN1_TYPE) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_ASN1_TYPE_sk_type(sk), ossl_ossl_check_ASN1_TYPE_copyfunc_type(copyfunc), ossl_ossl_check_ASN1_TYPE_freefunc_type(freefunc)))
#define ossl_sk_ASN1_TYPE_set_cmp_func(sk, cmp) ((ossl_sk_ASN1_TYPE_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_ASN1_TYPE_sk_type(sk), ossl_ossl_check_ASN1_TYPE_compfunc_type(cmp)))


typedef ossl_STACK_OF(ossl_ASN1_TYPE) ossl_ASN1_SEQUENCE_ANY;

ossl_DECLARE_ASN1_ENCODE_FUNCTIONS_name(ossl_ASN1_SEQUENCE_ANY, ossl_ASN1_SEQUENCE_ANY)
ossl_DECLARE_ASN1_ENCODE_FUNCTIONS_name(ossl_ASN1_SEQUENCE_ANY, ossl_ASN1_SET_ANY)

/* This is used to contain a list of bit names */
typedef struct ossl_BIT_STRING_BITNAME_st {
    int bitnum;
    const char *lname;
    const char *sname;
} ossl_BIT_STRING_BITNAME;

# define ossl_B_ASN1_TIME \
                        ossl_B_ASN1_UTCTIME | \
                        ossl_B_ASN1_GENERALIZEDTIME

# define ossl_B_ASN1_PRINTABLE \
                        ossl_B_ASN1_NUMERICSTRING| \
                        ossl_B_ASN1_PRINTABLESTRING| \
                        ossl_B_ASN1_T61STRING| \
                        ossl_B_ASN1_IA5STRING| \
                        ossl_B_ASN1_BIT_STRING| \
                        ossl_B_ASN1_UNIVERSALSTRING|\
                        ossl_B_ASN1_BMPSTRING|\
                        ossl_B_ASN1_UTF8STRING|\
                        ossl_B_ASN1_SEQUENCE|\
                        ossl_B_ASN1_UNKNOWN

# define ossl_B_ASN1_DIRECTORYSTRING \
                        ossl_B_ASN1_PRINTABLESTRING| \
                        ossl_B_ASN1_TELETEXSTRING|\
                        ossl_B_ASN1_BMPSTRING|\
                        ossl_B_ASN1_UNIVERSALSTRING|\
                        ossl_B_ASN1_UTF8STRING

# define ossl_B_ASN1_DISPLAYTEXT \
                        ossl_B_ASN1_IA5STRING| \
                        ossl_B_ASN1_VISIBLESTRING| \
                        ossl_B_ASN1_BMPSTRING|\
                        ossl_B_ASN1_UTF8STRING

ossl_DECLARE_ASN1_ALLOC_FUNCTIONS_name(ossl_ASN1_TYPE, ossl_ASN1_TYPE)
ossl_DECLARE_ASN1_ENCODE_FUNCTIONS(ossl_ASN1_TYPE, ossl_ASN1_ANY, ossl_ASN1_TYPE)

int ossl_ASN1_TYPE_get(const ossl_ASN1_TYPE *a);
void ossl_ASN1_TYPE_set(ossl_ASN1_TYPE *a, int type, void *value);
int ossl_ASN1_TYPE_set1(ossl_ASN1_TYPE *a, int type, const void *value);
int ossl_ASN1_TYPE_cmp(const ossl_ASN1_TYPE *a, const ossl_ASN1_TYPE *b);

ossl_ASN1_TYPE *ossl_ASN1_TYPE_pack_sequence(const ossl_ASN1_ITEM *it, void *s, ossl_ASN1_TYPE **t);
void *ossl_ASN1_TYPE_unpack_sequence(const ossl_ASN1_ITEM *it, const ossl_ASN1_TYPE *t);

ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_ASN1_OBJECT, ossl_ASN1_OBJECT, ossl_ASN1_OBJECT)
#define ossl_sk_ASN1_OBJECT_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_ASN1_OBJECT_sk_type(sk))
#define ossl_sk_ASN1_OBJECT_value(sk, idx) ((ossl_ASN1_OBJECT *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_ASN1_OBJECT_sk_type(sk), (idx)))
#define ossl_sk_ASN1_OBJECT_new(cmp) ((ossl_STACK_OF(ossl_ASN1_OBJECT) *)ossl_OPENSSL_sk_new(ossl_ossl_check_ASN1_OBJECT_compfunc_type(cmp)))
#define ossl_sk_ASN1_OBJECT_new_null() ((ossl_STACK_OF(ossl_ASN1_OBJECT) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_ASN1_OBJECT_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_ASN1_OBJECT) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_ASN1_OBJECT_compfunc_type(cmp), (n)))
#define ossl_sk_ASN1_OBJECT_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_ASN1_OBJECT_sk_type(sk), (n))
#define ossl_sk_ASN1_OBJECT_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_ASN1_OBJECT_sk_type(sk))
#define ossl_sk_ASN1_OBJECT_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_ASN1_OBJECT_sk_type(sk))
#define ossl_sk_ASN1_OBJECT_delete(sk, i) ((ossl_ASN1_OBJECT *)ossl_OPENSSL_sk_delete(ossl_ossl_check_ASN1_OBJECT_sk_type(sk), (i)))
#define ossl_sk_ASN1_OBJECT_delete_ptr(sk, ptr) ((ossl_ASN1_OBJECT *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_ASN1_OBJECT_sk_type(sk), ossl_ossl_check_ASN1_OBJECT_type(ptr)))
#define ossl_sk_ASN1_OBJECT_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_ASN1_OBJECT_sk_type(sk), ossl_ossl_check_ASN1_OBJECT_type(ptr))
#define ossl_sk_ASN1_OBJECT_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_ASN1_OBJECT_sk_type(sk), ossl_ossl_check_ASN1_OBJECT_type(ptr))
#define ossl_sk_ASN1_OBJECT_pop(sk) ((ossl_ASN1_OBJECT *)ossl_OPENSSL_sk_pop(ossl_ossl_check_ASN1_OBJECT_sk_type(sk)))
#define ossl_sk_ASN1_OBJECT_shift(sk) ((ossl_ASN1_OBJECT *)ossl_OPENSSL_sk_shift(ossl_ossl_check_ASN1_OBJECT_sk_type(sk)))
#define ossl_sk_ASN1_OBJECT_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_ASN1_OBJECT_sk_type(sk),ossl_ossl_check_ASN1_OBJECT_freefunc_type(freefunc))
#define ossl_sk_ASN1_OBJECT_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_ASN1_OBJECT_sk_type(sk), ossl_ossl_check_ASN1_OBJECT_type(ptr), (idx))
#define ossl_sk_ASN1_OBJECT_set(sk, idx, ptr) ((ossl_ASN1_OBJECT *)ossl_OPENSSL_sk_set(ossl_ossl_check_ASN1_OBJECT_sk_type(sk), (idx), ossl_ossl_check_ASN1_OBJECT_type(ptr)))
#define ossl_sk_ASN1_OBJECT_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_ASN1_OBJECT_sk_type(sk), ossl_ossl_check_ASN1_OBJECT_type(ptr))
#define ossl_sk_ASN1_OBJECT_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_ASN1_OBJECT_sk_type(sk), ossl_ossl_check_ASN1_OBJECT_type(ptr))
#define ossl_sk_ASN1_OBJECT_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_ASN1_OBJECT_sk_type(sk), ossl_ossl_check_ASN1_OBJECT_type(ptr), pnum)
#define ossl_sk_ASN1_OBJECT_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_ASN1_OBJECT_sk_type(sk))
#define ossl_sk_ASN1_OBJECT_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_ASN1_OBJECT_sk_type(sk))
#define ossl_sk_ASN1_OBJECT_dup(sk) ((ossl_STACK_OF(ossl_ASN1_OBJECT) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_ASN1_OBJECT_sk_type(sk)))
#define ossl_sk_ASN1_OBJECT_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_ASN1_OBJECT) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_ASN1_OBJECT_sk_type(sk), ossl_ossl_check_ASN1_OBJECT_copyfunc_type(copyfunc), ossl_ossl_check_ASN1_OBJECT_freefunc_type(freefunc)))
#define ossl_sk_ASN1_OBJECT_set_cmp_func(sk, cmp) ((ossl_sk_ASN1_OBJECT_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_ASN1_OBJECT_sk_type(sk), ossl_ossl_check_ASN1_OBJECT_compfunc_type(cmp)))


ossl_DECLARE_ASN1_FUNCTIONS(ossl_ASN1_OBJECT)

ossl_ASN1_STRING *ossl_ASN1_STRING_new(void);
void ossl_ASN1_STRING_free(ossl_ASN1_STRING *a);
void ossl_ASN1_STRING_clear_free(ossl_ASN1_STRING *a);
int ossl_ASN1_STRING_copy(ossl_ASN1_STRING *dst, const ossl_ASN1_STRING *str);
ossl_DECLARE_ASN1_DUP_FUNCTION(ossl_ASN1_STRING)
ossl_ASN1_STRING *ossl_ASN1_STRING_type_new(int type);
int ossl_ASN1_STRING_cmp(const ossl_ASN1_STRING *a, const ossl_ASN1_STRING *b);
  /*
   * Since this is used to store all sorts of things, via macros, for now,
   * make its data void *
   */
int ossl_ASN1_STRING_set(ossl_ASN1_STRING *str, const void *data, int len);
void ossl_ASN1_STRING_set0(ossl_ASN1_STRING *str, void *data, int len);
int ossl_ASN1_STRING_length(const ossl_ASN1_STRING *x);
# ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
ossl_OSSL_DEPRECATEDIN_3_0 void ossl_ASN1_STRING_length_set(ossl_ASN1_STRING *x, int n);
# endif
int ossl_ASN1_STRING_type(const ossl_ASN1_STRING *x);
# ifndef ossl_OPENSSL_NO_DEPRECATED_1_1_0
ossl_OSSL_DEPRECATEDIN_1_1_0 unsigned char *ossl_ASN1_STRING_data(ossl_ASN1_STRING *x);
# endif
const unsigned char *ossl_ASN1_STRING_get0_data(const ossl_ASN1_STRING *x);

ossl_DECLARE_ASN1_FUNCTIONS(ossl_ASN1_BIT_STRING)
int ossl_ASN1_BIT_STRING_set(ossl_ASN1_BIT_STRING *a, unsigned char *d, int length);
int ossl_ASN1_BIT_STRING_set_bit(ossl_ASN1_BIT_STRING *a, int n, int value);
int ossl_ASN1_BIT_STRING_get_bit(const ossl_ASN1_BIT_STRING *a, int n);
int ossl_ASN1_BIT_STRING_check(const ossl_ASN1_BIT_STRING *a,
                          const unsigned char *flags, int flags_len);

int ossl_ASN1_BIT_STRING_name_print(ossl_BIO *out, ossl_ASN1_BIT_STRING *bs,
                               ossl_BIT_STRING_BITNAME *tbl, int indent);
int ossl_ASN1_BIT_STRING_num_asc(const char *name, ossl_BIT_STRING_BITNAME *tbl);
int ossl_ASN1_BIT_STRING_set_asc(ossl_ASN1_BIT_STRING *bs, const char *name, int value,
                            ossl_BIT_STRING_BITNAME *tbl);

ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_ASN1_INTEGER, ossl_ASN1_INTEGER, ossl_ASN1_INTEGER)
#define ossl_sk_ASN1_INTEGER_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_ASN1_INTEGER_sk_type(sk))
#define ossl_sk_ASN1_INTEGER_value(sk, idx) ((ossl_ASN1_INTEGER *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_ASN1_INTEGER_sk_type(sk), (idx)))
#define ossl_sk_ASN1_INTEGER_new(cmp) ((ossl_STACK_OF(ossl_ASN1_INTEGER) *)ossl_OPENSSL_sk_new(ossl_ossl_check_ASN1_INTEGER_compfunc_type(cmp)))
#define ossl_sk_ASN1_INTEGER_new_null() ((ossl_STACK_OF(ossl_ASN1_INTEGER) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_ASN1_INTEGER_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_ASN1_INTEGER) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_ASN1_INTEGER_compfunc_type(cmp), (n)))
#define ossl_sk_ASN1_INTEGER_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_ASN1_INTEGER_sk_type(sk), (n))
#define ossl_sk_ASN1_INTEGER_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_ASN1_INTEGER_sk_type(sk))
#define ossl_sk_ASN1_INTEGER_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_ASN1_INTEGER_sk_type(sk))
#define ossl_sk_ASN1_INTEGER_delete(sk, i) ((ossl_ASN1_INTEGER *)ossl_OPENSSL_sk_delete(ossl_ossl_check_ASN1_INTEGER_sk_type(sk), (i)))
#define ossl_sk_ASN1_INTEGER_delete_ptr(sk, ptr) ((ossl_ASN1_INTEGER *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_ASN1_INTEGER_sk_type(sk), ossl_ossl_check_ASN1_INTEGER_type(ptr)))
#define ossl_sk_ASN1_INTEGER_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_ASN1_INTEGER_sk_type(sk), ossl_ossl_check_ASN1_INTEGER_type(ptr))
#define ossl_sk_ASN1_INTEGER_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_ASN1_INTEGER_sk_type(sk), ossl_ossl_check_ASN1_INTEGER_type(ptr))
#define ossl_sk_ASN1_INTEGER_pop(sk) ((ossl_ASN1_INTEGER *)ossl_OPENSSL_sk_pop(ossl_ossl_check_ASN1_INTEGER_sk_type(sk)))
#define ossl_sk_ASN1_INTEGER_shift(sk) ((ossl_ASN1_INTEGER *)ossl_OPENSSL_sk_shift(ossl_ossl_check_ASN1_INTEGER_sk_type(sk)))
#define ossl_sk_ASN1_INTEGER_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_ASN1_INTEGER_sk_type(sk),ossl_ossl_check_ASN1_INTEGER_freefunc_type(freefunc))
#define ossl_sk_ASN1_INTEGER_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_ASN1_INTEGER_sk_type(sk), ossl_ossl_check_ASN1_INTEGER_type(ptr), (idx))
#define ossl_sk_ASN1_INTEGER_set(sk, idx, ptr) ((ossl_ASN1_INTEGER *)ossl_OPENSSL_sk_set(ossl_ossl_check_ASN1_INTEGER_sk_type(sk), (idx), ossl_ossl_check_ASN1_INTEGER_type(ptr)))
#define ossl_sk_ASN1_INTEGER_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_ASN1_INTEGER_sk_type(sk), ossl_ossl_check_ASN1_INTEGER_type(ptr))
#define ossl_sk_ASN1_INTEGER_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_ASN1_INTEGER_sk_type(sk), ossl_ossl_check_ASN1_INTEGER_type(ptr))
#define ossl_sk_ASN1_INTEGER_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_ASN1_INTEGER_sk_type(sk), ossl_ossl_check_ASN1_INTEGER_type(ptr), pnum)
#define ossl_sk_ASN1_INTEGER_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_ASN1_INTEGER_sk_type(sk))
#define ossl_sk_ASN1_INTEGER_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_ASN1_INTEGER_sk_type(sk))
#define ossl_sk_ASN1_INTEGER_dup(sk) ((ossl_STACK_OF(ossl_ASN1_INTEGER) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_ASN1_INTEGER_sk_type(sk)))
#define ossl_sk_ASN1_INTEGER_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_ASN1_INTEGER) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_ASN1_INTEGER_sk_type(sk), ossl_ossl_check_ASN1_INTEGER_copyfunc_type(copyfunc), ossl_ossl_check_ASN1_INTEGER_freefunc_type(freefunc)))
#define ossl_sk_ASN1_INTEGER_set_cmp_func(sk, cmp) ((ossl_sk_ASN1_INTEGER_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_ASN1_INTEGER_sk_type(sk), ossl_ossl_check_ASN1_INTEGER_compfunc_type(cmp)))



ossl_DECLARE_ASN1_FUNCTIONS(ossl_ASN1_INTEGER)
ossl_ASN1_INTEGER *ossl_d2i_ASN1_UINTEGER(ossl_ASN1_INTEGER **a, const unsigned char **pp,
                                long length);
ossl_DECLARE_ASN1_DUP_FUNCTION(ossl_ASN1_INTEGER)
int ossl_ASN1_INTEGER_cmp(const ossl_ASN1_INTEGER *x, const ossl_ASN1_INTEGER *y);

ossl_DECLARE_ASN1_FUNCTIONS(ossl_ASN1_ENUMERATED)

int ossl_ASN1_UTCTIME_check(const ossl_ASN1_UTCTIME *a);
ossl_ASN1_UTCTIME *ossl_ASN1_UTCTIME_set(ossl_ASN1_UTCTIME *s, time_t t);
ossl_ASN1_UTCTIME *ossl_ASN1_UTCTIME_adj(ossl_ASN1_UTCTIME *s, time_t t,
                               int offset_day, long offset_sec);
int ossl_ASN1_UTCTIME_set_string(ossl_ASN1_UTCTIME *s, const char *str);
int ossl_ASN1_UTCTIME_cmp_time_t(const ossl_ASN1_UTCTIME *s, time_t t);

int ossl_ASN1_GENERALIZEDTIME_check(const ossl_ASN1_GENERALIZEDTIME *a);
ossl_ASN1_GENERALIZEDTIME *ossl_ASN1_GENERALIZEDTIME_set(ossl_ASN1_GENERALIZEDTIME *s,
                                               time_t t);
ossl_ASN1_GENERALIZEDTIME *ossl_ASN1_GENERALIZEDTIME_adj(ossl_ASN1_GENERALIZEDTIME *s,
                                               time_t t, int offset_day,
                                               long offset_sec);
int ossl_ASN1_GENERALIZEDTIME_set_string(ossl_ASN1_GENERALIZEDTIME *s, const char *str);

int ossl_ASN1_TIME_diff(int *pday, int *psec,
                   const ossl_ASN1_TIME *from, const ossl_ASN1_TIME *to);

ossl_DECLARE_ASN1_FUNCTIONS(ossl_ASN1_OCTET_STRING)
ossl_DECLARE_ASN1_DUP_FUNCTION(ossl_ASN1_OCTET_STRING)
int ossl_ASN1_OCTET_STRING_cmp(const ossl_ASN1_OCTET_STRING *a,
                          const ossl_ASN1_OCTET_STRING *b);
int ossl_ASN1_OCTET_STRING_set(ossl_ASN1_OCTET_STRING *str, const unsigned char *data,
                          int len);

ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_ASN1_UTF8STRING, ossl_ASN1_UTF8STRING, ossl_ASN1_UTF8STRING)
#define ossl_sk_ASN1_UTF8STRING_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_ASN1_UTF8STRING_sk_type(sk))
#define ossl_sk_ASN1_UTF8STRING_value(sk, idx) ((ossl_ASN1_UTF8STRING *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_ASN1_UTF8STRING_sk_type(sk), (idx)))
#define ossl_sk_ASN1_UTF8STRING_new(cmp) ((ossl_STACK_OF(ossl_ASN1_UTF8STRING) *)ossl_OPENSSL_sk_new(ossl_ossl_check_ASN1_UTF8STRING_compfunc_type(cmp)))
#define ossl_sk_ASN1_UTF8STRING_new_null() ((ossl_STACK_OF(ossl_ASN1_UTF8STRING) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_ASN1_UTF8STRING_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_ASN1_UTF8STRING) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_ASN1_UTF8STRING_compfunc_type(cmp), (n)))
#define ossl_sk_ASN1_UTF8STRING_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_ASN1_UTF8STRING_sk_type(sk), (n))
#define ossl_sk_ASN1_UTF8STRING_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_ASN1_UTF8STRING_sk_type(sk))
#define ossl_sk_ASN1_UTF8STRING_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_ASN1_UTF8STRING_sk_type(sk))
#define ossl_sk_ASN1_UTF8STRING_delete(sk, i) ((ossl_ASN1_UTF8STRING *)ossl_OPENSSL_sk_delete(ossl_ossl_check_ASN1_UTF8STRING_sk_type(sk), (i)))
#define ossl_sk_ASN1_UTF8STRING_delete_ptr(sk, ptr) ((ossl_ASN1_UTF8STRING *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_ASN1_UTF8STRING_sk_type(sk), ossl_ossl_check_ASN1_UTF8STRING_type(ptr)))
#define ossl_sk_ASN1_UTF8STRING_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_ASN1_UTF8STRING_sk_type(sk), ossl_ossl_check_ASN1_UTF8STRING_type(ptr))
#define ossl_sk_ASN1_UTF8STRING_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_ASN1_UTF8STRING_sk_type(sk), ossl_ossl_check_ASN1_UTF8STRING_type(ptr))
#define ossl_sk_ASN1_UTF8STRING_pop(sk) ((ossl_ASN1_UTF8STRING *)ossl_OPENSSL_sk_pop(ossl_ossl_check_ASN1_UTF8STRING_sk_type(sk)))
#define ossl_sk_ASN1_UTF8STRING_shift(sk) ((ossl_ASN1_UTF8STRING *)ossl_OPENSSL_sk_shift(ossl_ossl_check_ASN1_UTF8STRING_sk_type(sk)))
#define ossl_sk_ASN1_UTF8STRING_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_ASN1_UTF8STRING_sk_type(sk),ossl_ossl_check_ASN1_UTF8STRING_freefunc_type(freefunc))
#define ossl_sk_ASN1_UTF8STRING_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_ASN1_UTF8STRING_sk_type(sk), ossl_ossl_check_ASN1_UTF8STRING_type(ptr), (idx))
#define ossl_sk_ASN1_UTF8STRING_set(sk, idx, ptr) ((ossl_ASN1_UTF8STRING *)ossl_OPENSSL_sk_set(ossl_ossl_check_ASN1_UTF8STRING_sk_type(sk), (idx), ossl_ossl_check_ASN1_UTF8STRING_type(ptr)))
#define ossl_sk_ASN1_UTF8STRING_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_ASN1_UTF8STRING_sk_type(sk), ossl_ossl_check_ASN1_UTF8STRING_type(ptr))
#define ossl_sk_ASN1_UTF8STRING_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_ASN1_UTF8STRING_sk_type(sk), ossl_ossl_check_ASN1_UTF8STRING_type(ptr))
#define ossl_sk_ASN1_UTF8STRING_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_ASN1_UTF8STRING_sk_type(sk), ossl_ossl_check_ASN1_UTF8STRING_type(ptr), pnum)
#define ossl_sk_ASN1_UTF8STRING_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_ASN1_UTF8STRING_sk_type(sk))
#define ossl_sk_ASN1_UTF8STRING_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_ASN1_UTF8STRING_sk_type(sk))
#define ossl_sk_ASN1_UTF8STRING_dup(sk) ((ossl_STACK_OF(ossl_ASN1_UTF8STRING) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_ASN1_UTF8STRING_sk_type(sk)))
#define ossl_sk_ASN1_UTF8STRING_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_ASN1_UTF8STRING) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_ASN1_UTF8STRING_sk_type(sk), ossl_ossl_check_ASN1_UTF8STRING_copyfunc_type(copyfunc), ossl_ossl_check_ASN1_UTF8STRING_freefunc_type(freefunc)))
#define ossl_sk_ASN1_UTF8STRING_set_cmp_func(sk, cmp) ((ossl_sk_ASN1_UTF8STRING_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_ASN1_UTF8STRING_sk_type(sk), ossl_ossl_check_ASN1_UTF8STRING_compfunc_type(cmp)))


ossl_DECLARE_ASN1_FUNCTIONS(ossl_ASN1_VISIBLESTRING)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_ASN1_UNIVERSALSTRING)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_ASN1_UTF8STRING)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_ASN1_NULL)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_ASN1_BMPSTRING)

int ossl_UTF8_getc(const unsigned char *str, int len, unsigned long *val);
int ossl_UTF8_putc(unsigned char *str, int len, unsigned long value);

ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_ASN1_GENERALSTRING, ossl_ASN1_GENERALSTRING, ossl_ASN1_GENERALSTRING)
#define ossl_sk_ASN1_GENERALSTRING_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_ASN1_GENERALSTRING_sk_type(sk))
#define ossl_sk_ASN1_GENERALSTRING_value(sk, idx) ((ossl_ASN1_GENERALSTRING *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_ASN1_GENERALSTRING_sk_type(sk), (idx)))
#define ossl_sk_ASN1_GENERALSTRING_new(cmp) ((ossl_STACK_OF(ossl_ASN1_GENERALSTRING) *)ossl_OPENSSL_sk_new(ossl_ossl_check_ASN1_GENERALSTRING_compfunc_type(cmp)))
#define ossl_sk_ASN1_GENERALSTRING_new_null() ((ossl_STACK_OF(ossl_ASN1_GENERALSTRING) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_ASN1_GENERALSTRING_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_ASN1_GENERALSTRING) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_ASN1_GENERALSTRING_compfunc_type(cmp), (n)))
#define ossl_sk_ASN1_GENERALSTRING_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_ASN1_GENERALSTRING_sk_type(sk), (n))
#define ossl_sk_ASN1_GENERALSTRING_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_ASN1_GENERALSTRING_sk_type(sk))
#define ossl_sk_ASN1_GENERALSTRING_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_ASN1_GENERALSTRING_sk_type(sk))
#define ossl_sk_ASN1_GENERALSTRING_delete(sk, i) ((ossl_ASN1_GENERALSTRING *)ossl_OPENSSL_sk_delete(ossl_ossl_check_ASN1_GENERALSTRING_sk_type(sk), (i)))
#define ossl_sk_ASN1_GENERALSTRING_delete_ptr(sk, ptr) ((ossl_ASN1_GENERALSTRING *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_ASN1_GENERALSTRING_sk_type(sk), ossl_ossl_check_ASN1_GENERALSTRING_type(ptr)))
#define ossl_sk_ASN1_GENERALSTRING_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_ASN1_GENERALSTRING_sk_type(sk), ossl_ossl_check_ASN1_GENERALSTRING_type(ptr))
#define ossl_sk_ASN1_GENERALSTRING_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_ASN1_GENERALSTRING_sk_type(sk), ossl_ossl_check_ASN1_GENERALSTRING_type(ptr))
#define ossl_sk_ASN1_GENERALSTRING_pop(sk) ((ossl_ASN1_GENERALSTRING *)ossl_OPENSSL_sk_pop(ossl_ossl_check_ASN1_GENERALSTRING_sk_type(sk)))
#define ossl_sk_ASN1_GENERALSTRING_shift(sk) ((ossl_ASN1_GENERALSTRING *)ossl_OPENSSL_sk_shift(ossl_ossl_check_ASN1_GENERALSTRING_sk_type(sk)))
#define ossl_sk_ASN1_GENERALSTRING_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_ASN1_GENERALSTRING_sk_type(sk),ossl_ossl_check_ASN1_GENERALSTRING_freefunc_type(freefunc))
#define ossl_sk_ASN1_GENERALSTRING_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_ASN1_GENERALSTRING_sk_type(sk), ossl_ossl_check_ASN1_GENERALSTRING_type(ptr), (idx))
#define ossl_sk_ASN1_GENERALSTRING_set(sk, idx, ptr) ((ossl_ASN1_GENERALSTRING *)ossl_OPENSSL_sk_set(ossl_ossl_check_ASN1_GENERALSTRING_sk_type(sk), (idx), ossl_ossl_check_ASN1_GENERALSTRING_type(ptr)))
#define ossl_sk_ASN1_GENERALSTRING_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_ASN1_GENERALSTRING_sk_type(sk), ossl_ossl_check_ASN1_GENERALSTRING_type(ptr))
#define ossl_sk_ASN1_GENERALSTRING_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_ASN1_GENERALSTRING_sk_type(sk), ossl_ossl_check_ASN1_GENERALSTRING_type(ptr))
#define ossl_sk_ASN1_GENERALSTRING_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_ASN1_GENERALSTRING_sk_type(sk), ossl_ossl_check_ASN1_GENERALSTRING_type(ptr), pnum)
#define ossl_sk_ASN1_GENERALSTRING_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_ASN1_GENERALSTRING_sk_type(sk))
#define ossl_sk_ASN1_GENERALSTRING_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_ASN1_GENERALSTRING_sk_type(sk))
#define ossl_sk_ASN1_GENERALSTRING_dup(sk) ((ossl_STACK_OF(ossl_ASN1_GENERALSTRING) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_ASN1_GENERALSTRING_sk_type(sk)))
#define ossl_sk_ASN1_GENERALSTRING_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_ASN1_GENERALSTRING) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_ASN1_GENERALSTRING_sk_type(sk), ossl_ossl_check_ASN1_GENERALSTRING_copyfunc_type(copyfunc), ossl_ossl_check_ASN1_GENERALSTRING_freefunc_type(freefunc)))
#define ossl_sk_ASN1_GENERALSTRING_set_cmp_func(sk, cmp) ((ossl_sk_ASN1_GENERALSTRING_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_ASN1_GENERALSTRING_sk_type(sk), ossl_ossl_check_ASN1_GENERALSTRING_compfunc_type(cmp)))


ossl_DECLARE_ASN1_FUNCTIONS_name(ossl_ASN1_STRING, ossl_ASN1_PRINTABLE)

ossl_DECLARE_ASN1_FUNCTIONS_name(ossl_ASN1_STRING, ossl_DIRECTORYSTRING)
ossl_DECLARE_ASN1_FUNCTIONS_name(ossl_ASN1_STRING, ossl_DISPLAYTEXT)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_ASN1_PRINTABLESTRING)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_ASN1_T61STRING)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_ASN1_IA5STRING)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_ASN1_GENERALSTRING)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_ASN1_UTCTIME)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_ASN1_GENERALIZEDTIME)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_ASN1_TIME)

ossl_DECLARE_ASN1_DUP_FUNCTION(ossl_ASN1_TIME)
ossl_DECLARE_ASN1_DUP_FUNCTION(ossl_ASN1_UTCTIME)
ossl_DECLARE_ASN1_DUP_FUNCTION(ossl_ASN1_GENERALIZEDTIME)

ossl_DECLARE_ASN1_ITEM(ossl_ASN1_OCTET_STRING_NDEF)

ossl_ASN1_TIME *ossl_ASN1_TIME_set(ossl_ASN1_TIME *s, time_t t);
ossl_ASN1_TIME *ossl_ASN1_TIME_adj(ossl_ASN1_TIME *s, time_t t,
                         int offset_day, long offset_sec);
int ossl_ASN1_TIME_check(const ossl_ASN1_TIME *t);
ossl_ASN1_GENERALIZEDTIME *ossl_ASN1_TIME_to_generalizedtime(const ossl_ASN1_TIME *t,
                                                   ossl_ASN1_GENERALIZEDTIME **out);
int ossl_ASN1_TIME_set_string(ossl_ASN1_TIME *s, const char *str);
int ossl_ASN1_TIME_set_string_X509(ossl_ASN1_TIME *s, const char *str);
int ossl_ASN1_TIME_to_tm(const ossl_ASN1_TIME *s, struct tm *tm);
int ossl_ASN1_TIME_normalize(ossl_ASN1_TIME *s);
int ossl_ASN1_TIME_cmp_time_t(const ossl_ASN1_TIME *s, time_t t);
int ossl_ASN1_TIME_compare(const ossl_ASN1_TIME *a, const ossl_ASN1_TIME *b);

int ossl_i2a_ASN1_INTEGER(ossl_BIO *bp, const ossl_ASN1_INTEGER *a);
int ossl_a2i_ASN1_INTEGER(ossl_BIO *bp, ossl_ASN1_INTEGER *bs, char *buf, int size);
int ossl_i2a_ASN1_ENUMERATED(ossl_BIO *bp, const ossl_ASN1_ENUMERATED *a);
int ossl_a2i_ASN1_ENUMERATED(ossl_BIO *bp, ossl_ASN1_ENUMERATED *bs, char *buf, int size);
int ossl_i2a_ASN1_OBJECT(ossl_BIO *bp, const ossl_ASN1_OBJECT *a);
int ossl_a2i_ASN1_STRING(ossl_BIO *bp, ossl_ASN1_STRING *bs, char *buf, int size);
int ossl_i2a_ASN1_STRING(ossl_BIO *bp, const ossl_ASN1_STRING *a, int type);
int ossl_i2t_ASN1_OBJECT(char *buf, int buf_len, const ossl_ASN1_OBJECT *a);

int ossl_a2d_ASN1_OBJECT(unsigned char *out, int olen, const char *buf, int num);
ossl_ASN1_OBJECT *ossl_ASN1_OBJECT_create(int nid, unsigned char *data, int len,
                                const char *sn, const char *ln);

int ossl_ASN1_INTEGER_get_int64(int64_t *pr, const ossl_ASN1_INTEGER *a);
int ossl_ASN1_INTEGER_set_int64(ossl_ASN1_INTEGER *a, int64_t r);
int ossl_ASN1_INTEGER_get_uint64(uint64_t *pr, const ossl_ASN1_INTEGER *a);
int ossl_ASN1_INTEGER_set_uint64(ossl_ASN1_INTEGER *a, uint64_t r);

int ossl_ASN1_INTEGER_set(ossl_ASN1_INTEGER *a, long v);
long ossl_ASN1_INTEGER_get(const ossl_ASN1_INTEGER *a);
ossl_ASN1_INTEGER *ossl_BN_to_ASN1_INTEGER(const ossl_BIGNUM *bn, ossl_ASN1_INTEGER *ai);
ossl_BIGNUM *ossl_ASN1_INTEGER_to_BN(const ossl_ASN1_INTEGER *ai, ossl_BIGNUM *bn);

int ossl_ASN1_ENUMERATED_get_int64(int64_t *pr, const ossl_ASN1_ENUMERATED *a);
int ossl_ASN1_ENUMERATED_set_int64(ossl_ASN1_ENUMERATED *a, int64_t r);


int ossl_ASN1_ENUMERATED_set(ossl_ASN1_ENUMERATED *a, long v);
long ossl_ASN1_ENUMERATED_get(const ossl_ASN1_ENUMERATED *a);
ossl_ASN1_ENUMERATED *ossl_BN_to_ASN1_ENUMERATED(const ossl_BIGNUM *bn, ossl_ASN1_ENUMERATED *ai);
ossl_BIGNUM *ossl_ASN1_ENUMERATED_to_BN(const ossl_ASN1_ENUMERATED *ai, ossl_BIGNUM *bn);

/* General */
/* given a string, return the correct type, max is the maximum length */
int ossl_ASN1_PRINTABLE_type(const unsigned char *s, int max);

unsigned long ossl_ASN1_tag2bit(int tag);

/* SPECIALS */
int ossl_ASN1_get_object(const unsigned char **pp, long *plength, int *ptag,
                    int *pclass, long omax);
int ossl_ASN1_check_infinite_end(unsigned char **p, long len);
int ossl_ASN1_const_check_infinite_end(const unsigned char **p, long len);
void ossl_ASN1_put_object(unsigned char **pp, int constructed, int length,
                     int tag, int xclass);
int ossl_ASN1_put_eoc(unsigned char **pp);
int ossl_ASN1_object_size(int constructed, int length, int tag);

/* Used to implement other functions */
void *ossl_ASN1_dup(ossl_i2d_of_void *i2d, ossl_d2i_of_void *d2i, const void *x);

# define ossl_ASN1_dup_of(type,i2d,d2i,x) \
    ((type*)ossl_ASN1_dup(ossl_CHECKED_I2D_OF(type, i2d), \
                     ossl_CHECKED_D2I_OF(type, d2i), \
                     ossl_CHECKED_PTR_OF(const type, x)))

void *ossl_ASN1_item_dup(const ossl_ASN1_ITEM *it, const void *x);
int ossl_ASN1_item_sign_ex(const ossl_ASN1_ITEM *it, ossl_X509_ALGOR *algor1,
                      ossl_X509_ALGOR *algor2, ossl_ASN1_BIT_STRING *signature,
                      const void *data, const ossl_ASN1_OCTET_STRING *id,
                      ossl_EVP_PKEY *pkey, const ossl_EVP_MD *md, ossl_OSSL_LIB_CTX *libctx,
                      const char *propq);
int ossl_ASN1_item_verify_ex(const ossl_ASN1_ITEM *it, const ossl_X509_ALGOR *alg,
                        const ossl_ASN1_BIT_STRING *signature, const void *data,
                        const ossl_ASN1_OCTET_STRING *id, ossl_EVP_PKEY *pkey,
                        ossl_OSSL_LIB_CTX *libctx, const char *propq);

/* ASN1 alloc/free macros for when a type is only used internally */

# define ossl_M_ASN1_new_of(type) (type *)ossl_ASN1_item_new(ossl_ASN1_ITEM_rptr(type))
# define ossl_M_ASN1_free_of(x, type) \
                ossl_ASN1_item_free(ossl_CHECKED_PTR_OF(type, x), ossl_ASN1_ITEM_rptr(type))

# ifndef ossl_OPENSSL_NO_STDIO
void *ossl_ASN1_d2i_fp(void *(*xnew) (void), ossl_d2i_of_void *d2i, FILE *in, void **x);

#  define ossl_ASN1_d2i_fp_of(type,xnew,d2i,in,x) \
    ((type*)ossl_ASN1_d2i_fp(ossl_CHECKED_NEW_OF(type, xnew), \
                        ossl_CHECKED_D2I_OF(type, d2i), \
                        in, \
                        ossl_CHECKED_PPTR_OF(type, x)))

void *ossl_ASN1_item_d2i_fp_ex(const ossl_ASN1_ITEM *it, FILE *in, void *x,
                          ossl_OSSL_LIB_CTX *libctx, const char *propq);
void *ossl_ASN1_item_d2i_fp(const ossl_ASN1_ITEM *it, FILE *in, void *x);
int ossl_ASN1_i2d_fp(ossl_i2d_of_void *i2d, FILE *out, const void *x);

#  define ossl_ASN1_i2d_fp_of(type,i2d,out,x) \
    (ossl_ASN1_i2d_fp(ossl_CHECKED_I2D_OF(type, i2d), \
                 out, \
                 ossl_CHECKED_PTR_OF(const type, x)))

int ossl_ASN1_item_i2d_fp(const ossl_ASN1_ITEM *it, FILE *out, const void *x);
int ossl_ASN1_STRING_print_ex_fp(FILE *fp, const ossl_ASN1_STRING *str, unsigned long flags);
# endif

int ossl_ASN1_STRING_to_UTF8(unsigned char **out, const ossl_ASN1_STRING *in);

void *ossl_ASN1_d2i_bio(void *(*xnew) (void), ossl_d2i_of_void *d2i, ossl_BIO *in, void **x);

#  define ossl_ASN1_d2i_bio_of(type,xnew,d2i,in,x) \
    ((type*)ossl_ASN1_d2i_bio( ossl_CHECKED_NEW_OF(type, xnew), \
                          ossl_CHECKED_D2I_OF(type, d2i), \
                          in, \
                          ossl_CHECKED_PPTR_OF(type, x)))

void *ossl_ASN1_item_d2i_bio_ex(const ossl_ASN1_ITEM *it, ossl_BIO *in, void *pval,
                           ossl_OSSL_LIB_CTX *libctx, const char *propq);
void *ossl_ASN1_item_d2i_bio(const ossl_ASN1_ITEM *it, ossl_BIO *in, void *pval);
int ossl_ASN1_i2d_bio(ossl_i2d_of_void *i2d, ossl_BIO *out, const void *x);

#  define ossl_ASN1_i2d_bio_of(type,i2d,out,x) \
    (ossl_ASN1_i2d_bio(ossl_CHECKED_I2D_OF(type, i2d), \
                  out, \
                  ossl_CHECKED_PTR_OF(const type, x)))

int ossl_ASN1_item_i2d_bio(const ossl_ASN1_ITEM *it, ossl_BIO *out, const void *x);
ossl_BIO *ossl_ASN1_item_i2d_mem_bio(const ossl_ASN1_ITEM *it, const ossl_ASN1_VALUE *val);
int ossl_ASN1_UTCTIME_print(ossl_BIO *fp, const ossl_ASN1_UTCTIME *a);
int ossl_ASN1_GENERALIZEDTIME_print(ossl_BIO *fp, const ossl_ASN1_GENERALIZEDTIME *a);
int ossl_ASN1_TIME_print(ossl_BIO *bp, const ossl_ASN1_TIME *tm);
int ossl_ASN1_TIME_print_ex(ossl_BIO *bp, const ossl_ASN1_TIME *tm, unsigned long flags);
int ossl_ASN1_STRING_print(ossl_BIO *bp, const ossl_ASN1_STRING *v);
int ossl_ASN1_STRING_print_ex(ossl_BIO *out, const ossl_ASN1_STRING *str, unsigned long flags);
int ossl_ASN1_buf_print(ossl_BIO *bp, const unsigned char *buf, size_t buflen, int off);
int ossl_ASN1_bn_print(ossl_BIO *bp, const char *number, const ossl_BIGNUM *num,
                  unsigned char *buf, int off);
int ossl_ASN1_parse(ossl_BIO *bp, const unsigned char *pp, long len, int indent);
int ossl_ASN1_parse_dump(ossl_BIO *bp, const unsigned char *pp, long len, int indent,
                    int dump);
const char *ossl_ASN1_tag2str(int tag);

/* Used to load and write Netscape format cert */

int ossl_ASN1_UNIVERSALSTRING_to_string(ossl_ASN1_UNIVERSALSTRING *s);

int ossl_ASN1_TYPE_set_octetstring(ossl_ASN1_TYPE *a, unsigned char *data, int len);
int ossl_ASN1_TYPE_get_octetstring(const ossl_ASN1_TYPE *a, unsigned char *data, int max_len);
int ossl_ASN1_TYPE_set_int_octetstring(ossl_ASN1_TYPE *a, long num,
                                  unsigned char *data, int len);
int ossl_ASN1_TYPE_get_int_octetstring(const ossl_ASN1_TYPE *a, long *num,
                                  unsigned char *data, int max_len);

void *ossl_ASN1_item_unpack(const ossl_ASN1_STRING *oct, const ossl_ASN1_ITEM *it);

ossl_ASN1_STRING *ossl_ASN1_item_pack(void *obj, const ossl_ASN1_ITEM *it,
                            ossl_ASN1_OCTET_STRING **oct);

void ossl_ASN1_STRING_set_default_mask(unsigned long mask);
int ossl_ASN1_STRING_set_default_mask_asc(const char *p);
unsigned long ossl_ASN1_STRING_get_default_mask(void);
int ossl_ASN1_mbstring_copy(ossl_ASN1_STRING **out, const unsigned char *in, int len,
                       int inform, unsigned long mask);
int ossl_ASN1_mbstring_ncopy(ossl_ASN1_STRING **out, const unsigned char *in, int len,
                        int inform, unsigned long mask,
                        long minsize, long maxsize);

ossl_ASN1_STRING *ossl_ASN1_STRING_set_by_NID(ossl_ASN1_STRING **out,
                                    const unsigned char *in, int inlen,
                                    int inform, int nid);
ossl_ASN1_STRING_TABLE *ossl_ASN1_STRING_TABLE_get(int nid);
int ossl_ASN1_STRING_TABLE_add(int, long, long, unsigned long, unsigned long);
void ossl_ASN1_STRING_TABLE_cleanup(void);

/* ASN1 template functions */

/* Old API compatible functions */
ossl_ASN1_VALUE *ossl_ASN1_item_new(const ossl_ASN1_ITEM *it);
ossl_ASN1_VALUE *ossl_ASN1_item_new_ex(const ossl_ASN1_ITEM *it, ossl_OSSL_LIB_CTX *libctx,
                             const char *propq);
void ossl_ASN1_item_free(ossl_ASN1_VALUE *val, const ossl_ASN1_ITEM *it);
ossl_ASN1_VALUE *ossl_ASN1_item_d2i_ex(ossl_ASN1_VALUE **val, const unsigned char **in,
                             long len, const ossl_ASN1_ITEM *it,
                             ossl_OSSL_LIB_CTX *libctx, const char *propq);
ossl_ASN1_VALUE *ossl_ASN1_item_d2i(ossl_ASN1_VALUE **val, const unsigned char **in,
                          long len, const ossl_ASN1_ITEM *it);
int ossl_ASN1_item_i2d(const ossl_ASN1_VALUE *val, unsigned char **out, const ossl_ASN1_ITEM *it);
int ossl_ASN1_item_ndef_i2d(const ossl_ASN1_VALUE *val, unsigned char **out,
                       const ossl_ASN1_ITEM *it);

void ossl_ASN1_add_oid_module(void);
void ossl_ASN1_add_stable_module(void);

ossl_ASN1_TYPE *ossl_ASN1_generate_nconf(const char *str, ossl_CONF *nconf);
ossl_ASN1_TYPE *ossl_ASN1_generate_v3(const char *str, ossl_X509V3_CTX *cnf);
int ossl_ASN1_str2mask(const char *str, unsigned long *pmask);

/* ASN1 Print flags */

/* Indicate missing OPTIONAL fields */
# define ossl_ASN1_PCTX_FLAGS_SHOW_ABSENT             0x001
/* Mark start and end of SEQUENCE */
# define ossl_ASN1_PCTX_FLAGS_SHOW_SEQUENCE           0x002
/* Mark start and end of SEQUENCE/SET OF */
# define ossl_ASN1_PCTX_FLAGS_SHOW_SSOF               0x004
/* Show the ASN1 type of primitives */
# define ossl_ASN1_PCTX_FLAGS_SHOW_TYPE               0x008
/* Don't show ASN1 type of ANY */
# define ossl_ASN1_PCTX_FLAGS_NO_ANY_TYPE             0x010
/* Don't show ASN1 type of MSTRINGs */
# define ossl_ASN1_PCTX_FLAGS_NO_MSTRING_TYPE         0x020
/* Don't show field names in SEQUENCE */
# define ossl_ASN1_PCTX_FLAGS_NO_FIELD_NAME           0x040
/* Show structure names of each SEQUENCE field */
# define ossl_ASN1_PCTX_FLAGS_SHOW_FIELD_STRUCT_NAME  0x080
/* Don't show structure name even at top level */
# define ossl_ASN1_PCTX_FLAGS_NO_STRUCT_NAME          0x100

int ossl_ASN1_item_print(ossl_BIO *out, const ossl_ASN1_VALUE *ifld, int indent,
                    const ossl_ASN1_ITEM *it, const ossl_ASN1_PCTX *pctx);
ossl_ASN1_PCTX *ossl_ASN1_PCTX_new(void);
void ossl_ASN1_PCTX_free(ossl_ASN1_PCTX *p);
unsigned long ossl_ASN1_PCTX_get_flags(const ossl_ASN1_PCTX *p);
void ossl_ASN1_PCTX_set_flags(ossl_ASN1_PCTX *p, unsigned long flags);
unsigned long ossl_ASN1_PCTX_get_nm_flags(const ossl_ASN1_PCTX *p);
void ossl_ASN1_PCTX_set_nm_flags(ossl_ASN1_PCTX *p, unsigned long flags);
unsigned long ossl_ASN1_PCTX_get_cert_flags(const ossl_ASN1_PCTX *p);
void ossl_ASN1_PCTX_set_cert_flags(ossl_ASN1_PCTX *p, unsigned long flags);
unsigned long ossl_ASN1_PCTX_get_oid_flags(const ossl_ASN1_PCTX *p);
void ossl_ASN1_PCTX_set_oid_flags(ossl_ASN1_PCTX *p, unsigned long flags);
unsigned long ossl_ASN1_PCTX_get_str_flags(const ossl_ASN1_PCTX *p);
void ossl_ASN1_PCTX_set_str_flags(ossl_ASN1_PCTX *p, unsigned long flags);

ossl_ASN1_SCTX *ossl_ASN1_SCTX_new(int (*scan_cb) (ossl_ASN1_SCTX *ctx));
void ossl_ASN1_SCTX_free(ossl_ASN1_SCTX *p);
const ossl_ASN1_ITEM *ossl_ASN1_SCTX_get_item(ossl_ASN1_SCTX *p);
const ossl_ASN1_TEMPLATE *ossl_ASN1_SCTX_get_template(ossl_ASN1_SCTX *p);
unsigned long ossl_ASN1_SCTX_get_flags(ossl_ASN1_SCTX *p);
void ossl_ASN1_SCTX_set_app_data(ossl_ASN1_SCTX *p, void *data);
void *ossl_ASN1_SCTX_get_app_data(ossl_ASN1_SCTX *p);

const ossl_BIO_METHOD *ossl_BIO_f_asn1(void);

/* cannot constify val because of ossl_CMS_stream() */
ossl_BIO *ossl_BIO_new_NDEF(ossl_BIO *out, ossl_ASN1_VALUE *val, const ossl_ASN1_ITEM *it);

int ossl_i2d_ASN1_bio_stream(ossl_BIO *out, ossl_ASN1_VALUE *val, ossl_BIO *in, int flags,
                        const ossl_ASN1_ITEM *it);
int ossl_PEM_write_bio_ASN1_stream(ossl_BIO *out, ossl_ASN1_VALUE *val, ossl_BIO *in, int flags,
                              const char *hdr, const ossl_ASN1_ITEM *it);
/* cannot constify val because of ossl_CMS_dataFinal() */
int ossl_SMIME_write_ASN1(ossl_BIO *bio, ossl_ASN1_VALUE *val, ossl_BIO *data, int flags,
                     int ctype_nid, int econt_nid,
                     ossl_STACK_OF(ossl_X509_ALGOR) *mdalgs, const ossl_ASN1_ITEM *it);
int ossl_SMIME_write_ASN1_ex(ossl_BIO *bio, ossl_ASN1_VALUE *val, ossl_BIO *data, int flags,
                        int ctype_nid, int econt_nid,
                        ossl_STACK_OF(ossl_X509_ALGOR) *mdalgs, const ossl_ASN1_ITEM *it,
                        ossl_OSSL_LIB_CTX *libctx, const char *propq);
ossl_ASN1_VALUE *ossl_SMIME_read_ASN1(ossl_BIO *bio, ossl_BIO **bcont, const ossl_ASN1_ITEM *it);
ossl_ASN1_VALUE *ossl_SMIME_read_ASN1_ex(ossl_BIO *bio, int flags, ossl_BIO **bcont,
                               const ossl_ASN1_ITEM *it, ossl_ASN1_VALUE **x,
                               ossl_OSSL_LIB_CTX *libctx, const char *propq);
int ossl_SMIME_crlf_copy(ossl_BIO *in, ossl_BIO *out, int flags);
int ossl_SMIME_text(ossl_BIO *in, ossl_BIO *out);

const ossl_ASN1_ITEM *ossl_ASN1_ITEM_lookup(const char *name);
const ossl_ASN1_ITEM *ossl_ASN1_ITEM_get(size_t i);

/* Legacy compatibility */
# define ossl_DECLARE_ASN1_FUNCTIONS_fname(type, itname, name) \
         ossl_DECLARE_ASN1_ALLOC_FUNCTIONS_name(type, name) \
         ossl_DECLARE_ASN1_ENCODE_FUNCTIONS(type, itname, name)
# define ossl_DECLARE_ASN1_FUNCTIONS_const(type) ossl_DECLARE_ASN1_FUNCTIONS(type)
# define ossl_DECLARE_ASN1_ENCODE_FUNCTIONS_const(type, name) \
         ossl_DECLARE_ASN1_ENCODE_FUNCTIONS(type, name)
# define ossl_I2D_OF_const(type) ossl_I2D_OF(type)
# define ossl_ASN1_dup_of_const(type,i2d,d2i,x) ossl_ASN1_dup_of(type,i2d,d2i,x)
# define ossl_ASN1_i2d_fp_of_const(type,i2d,out,x) ossl_ASN1_i2d_fp_of(type,i2d,out,x)
# define ossl_ASN1_i2d_bio_of_const(type,i2d,out,x) ossl_ASN1_i2d_bio_of(type,i2d,out,x)

# ifdef  __cplusplus
}
# endif
#endif
