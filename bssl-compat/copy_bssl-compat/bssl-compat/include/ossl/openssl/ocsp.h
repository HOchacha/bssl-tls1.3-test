/*
 * WARNING: do not edit!
 * Generated by Makefile from ../../../openssl/source/include/openssl/ocsp.h.in
 *
 * Copyright 2000-2021 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



#ifndef ossl_OPENSSL_OCSP_H
# define ossl_OPENSSL_OCSP_H
# pragma once

# include "ossl/openssl/macros.h"
# ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
#  define ossl_HEADER_OCSP_H
# endif

# include "ossl/openssl/opensslconf.h"
# include "ossl/openssl/http.h"
# include "ossl/openssl/asn1.h"

/*
 * These definitions are outside the ossl_OPENSSL_NO_OCSP guard because although for
 * historical reasons they have OCSP_* names, they can actually be used
 * independently of OCSP. E.g. see RFC5280
 */
/*-
 *   CRLReason ::= ENUMERATED {
 *        unspecified             (0),
 *        keyCompromise           (1),
 *        cACompromise            (2),
 *        affiliationChanged      (3),
 *        superseded              (4),
 *        cessationOfOperation    (5),
 *        certificateHold         (6),
 *        -- value 7 is not used
 *        removeFromCRL           (8),
 *        privilegeWithdrawn      (9),
 *        aACompromise           (10) }
 */
# define ossl_OCSP_REVOKED_STATUS_NOSTATUS                -1
# define ossl_OCSP_REVOKED_STATUS_UNSPECIFIED             0
# define ossl_OCSP_REVOKED_STATUS_KEYCOMPROMISE           1
# define ossl_OCSP_REVOKED_STATUS_CACOMPROMISE            2
# define ossl_OCSP_REVOKED_STATUS_AFFILIATIONCHANGED      3
# define ossl_OCSP_REVOKED_STATUS_SUPERSEDED              4
# define ossl_OCSP_REVOKED_STATUS_CESSATIONOFOPERATION    5
# define ossl_OCSP_REVOKED_STATUS_CERTIFICATEHOLD         6
# define ossl_OCSP_REVOKED_STATUS_REMOVEFROMCRL           8
# define ossl_OCSP_REVOKED_STATUS_PRIVILEGEWITHDRAWN      9
# define ossl_OCSP_REVOKED_STATUS_AACOMPROMISE            10


# ifndef ossl_OPENSSL_NO_OCSP

#  include "ossl/openssl/x509.h"
#  include "ossl/openssl/x509v3.h"
#  include "ossl/openssl/safestack.h"
#  include "ossl/openssl/ocsperr.h"

#  ifdef __cplusplus
extern "C" {
#  endif

/* Various flags and values */

#  define ossl_OCSP_DEFAULT_NONCE_LENGTH       16

#  define ossl_OCSP_NOCERTS                    0x1
#  define ossl_OCSP_NOINTERN                   0x2
#  define ossl_OCSP_NOSIGS                     0x4
#  define ossl_OCSP_NOCHAIN                    0x8
#  define ossl_OCSP_NOVERIFY                   0x10
#  define ossl_OCSP_NOEXPLICIT                 0x20
#  define ossl_OCSP_NOCASIGN                   0x40
#  define ossl_OCSP_NODELEGATED                0x80
#  define ossl_OCSP_NOCHECKS                   0x100
#  define ossl_OCSP_TRUSTOTHER                 0x200
#  define ossl_OCSP_RESPID_KEY                 0x400
#  define ossl_OCSP_NOTIME                     0x800
#  define ossl_OCSP_PARTIAL_CHAIN              0x1000

typedef struct ossl_ocsp_cert_id_st ossl_OCSP_CERTID;
typedef struct ossl_ocsp_one_request_st ossl_OCSP_ONEREQ;
typedef struct ossl_ocsp_req_info_st ossl_OCSP_REQINFO;
typedef struct ossl_ocsp_signature_st ossl_OCSP_SIGNATURE;
typedef struct ossl_ocsp_request_st ossl_OCSP_REQUEST;

ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_OCSP_CERTID, ossl_OCSP_CERTID, ossl_OCSP_CERTID)
#define ossl_sk_OCSP_CERTID_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_OCSP_CERTID_sk_type(sk))
#define ossl_sk_OCSP_CERTID_value(sk, idx) ((ossl_OCSP_CERTID *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_OCSP_CERTID_sk_type(sk), (idx)))
#define ossl_sk_OCSP_CERTID_new(cmp) ((ossl_STACK_OF(ossl_OCSP_CERTID) *)ossl_OPENSSL_sk_new(ossl_ossl_check_OCSP_CERTID_compfunc_type(cmp)))
#define ossl_sk_OCSP_CERTID_new_null() ((ossl_STACK_OF(ossl_OCSP_CERTID) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_OCSP_CERTID_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_OCSP_CERTID) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_OCSP_CERTID_compfunc_type(cmp), (n)))
#define ossl_sk_OCSP_CERTID_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_OCSP_CERTID_sk_type(sk), (n))
#define ossl_sk_OCSP_CERTID_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_OCSP_CERTID_sk_type(sk))
#define ossl_sk_OCSP_CERTID_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_OCSP_CERTID_sk_type(sk))
#define ossl_sk_OCSP_CERTID_delete(sk, i) ((ossl_OCSP_CERTID *)ossl_OPENSSL_sk_delete(ossl_ossl_check_OCSP_CERTID_sk_type(sk), (i)))
#define ossl_sk_OCSP_CERTID_delete_ptr(sk, ptr) ((ossl_OCSP_CERTID *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_OCSP_CERTID_sk_type(sk), ossl_ossl_check_OCSP_CERTID_type(ptr)))
#define ossl_sk_OCSP_CERTID_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_OCSP_CERTID_sk_type(sk), ossl_ossl_check_OCSP_CERTID_type(ptr))
#define ossl_sk_OCSP_CERTID_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_OCSP_CERTID_sk_type(sk), ossl_ossl_check_OCSP_CERTID_type(ptr))
#define ossl_sk_OCSP_CERTID_pop(sk) ((ossl_OCSP_CERTID *)ossl_OPENSSL_sk_pop(ossl_ossl_check_OCSP_CERTID_sk_type(sk)))
#define ossl_sk_OCSP_CERTID_shift(sk) ((ossl_OCSP_CERTID *)ossl_OPENSSL_sk_shift(ossl_ossl_check_OCSP_CERTID_sk_type(sk)))
#define ossl_sk_OCSP_CERTID_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_OCSP_CERTID_sk_type(sk),ossl_ossl_check_OCSP_CERTID_freefunc_type(freefunc))
#define ossl_sk_OCSP_CERTID_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_OCSP_CERTID_sk_type(sk), ossl_ossl_check_OCSP_CERTID_type(ptr), (idx))
#define ossl_sk_OCSP_CERTID_set(sk, idx, ptr) ((ossl_OCSP_CERTID *)ossl_OPENSSL_sk_set(ossl_ossl_check_OCSP_CERTID_sk_type(sk), (idx), ossl_ossl_check_OCSP_CERTID_type(ptr)))
#define ossl_sk_OCSP_CERTID_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_OCSP_CERTID_sk_type(sk), ossl_ossl_check_OCSP_CERTID_type(ptr))
#define ossl_sk_OCSP_CERTID_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_OCSP_CERTID_sk_type(sk), ossl_ossl_check_OCSP_CERTID_type(ptr))
#define ossl_sk_OCSP_CERTID_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_OCSP_CERTID_sk_type(sk), ossl_ossl_check_OCSP_CERTID_type(ptr), pnum)
#define ossl_sk_OCSP_CERTID_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_OCSP_CERTID_sk_type(sk))
#define ossl_sk_OCSP_CERTID_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_OCSP_CERTID_sk_type(sk))
#define ossl_sk_OCSP_CERTID_dup(sk) ((ossl_STACK_OF(ossl_OCSP_CERTID) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_OCSP_CERTID_sk_type(sk)))
#define ossl_sk_OCSP_CERTID_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_OCSP_CERTID) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_OCSP_CERTID_sk_type(sk), ossl_ossl_check_OCSP_CERTID_copyfunc_type(copyfunc), ossl_ossl_check_OCSP_CERTID_freefunc_type(freefunc)))
#define ossl_sk_OCSP_CERTID_set_cmp_func(sk, cmp) ((ossl_sk_OCSP_CERTID_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_OCSP_CERTID_sk_type(sk), ossl_ossl_check_OCSP_CERTID_compfunc_type(cmp)))
ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_OCSP_ONEREQ, ossl_OCSP_ONEREQ, ossl_OCSP_ONEREQ)
#define ossl_sk_OCSP_ONEREQ_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_OCSP_ONEREQ_sk_type(sk))
#define ossl_sk_OCSP_ONEREQ_value(sk, idx) ((ossl_OCSP_ONEREQ *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_OCSP_ONEREQ_sk_type(sk), (idx)))
#define ossl_sk_OCSP_ONEREQ_new(cmp) ((ossl_STACK_OF(ossl_OCSP_ONEREQ) *)ossl_OPENSSL_sk_new(ossl_ossl_check_OCSP_ONEREQ_compfunc_type(cmp)))
#define ossl_sk_OCSP_ONEREQ_new_null() ((ossl_STACK_OF(ossl_OCSP_ONEREQ) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_OCSP_ONEREQ_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_OCSP_ONEREQ) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_OCSP_ONEREQ_compfunc_type(cmp), (n)))
#define ossl_sk_OCSP_ONEREQ_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_OCSP_ONEREQ_sk_type(sk), (n))
#define ossl_sk_OCSP_ONEREQ_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_OCSP_ONEREQ_sk_type(sk))
#define ossl_sk_OCSP_ONEREQ_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_OCSP_ONEREQ_sk_type(sk))
#define ossl_sk_OCSP_ONEREQ_delete(sk, i) ((ossl_OCSP_ONEREQ *)ossl_OPENSSL_sk_delete(ossl_ossl_check_OCSP_ONEREQ_sk_type(sk), (i)))
#define ossl_sk_OCSP_ONEREQ_delete_ptr(sk, ptr) ((ossl_OCSP_ONEREQ *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_OCSP_ONEREQ_sk_type(sk), ossl_ossl_check_OCSP_ONEREQ_type(ptr)))
#define ossl_sk_OCSP_ONEREQ_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_OCSP_ONEREQ_sk_type(sk), ossl_ossl_check_OCSP_ONEREQ_type(ptr))
#define ossl_sk_OCSP_ONEREQ_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_OCSP_ONEREQ_sk_type(sk), ossl_ossl_check_OCSP_ONEREQ_type(ptr))
#define ossl_sk_OCSP_ONEREQ_pop(sk) ((ossl_OCSP_ONEREQ *)ossl_OPENSSL_sk_pop(ossl_ossl_check_OCSP_ONEREQ_sk_type(sk)))
#define ossl_sk_OCSP_ONEREQ_shift(sk) ((ossl_OCSP_ONEREQ *)ossl_OPENSSL_sk_shift(ossl_ossl_check_OCSP_ONEREQ_sk_type(sk)))
#define ossl_sk_OCSP_ONEREQ_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_OCSP_ONEREQ_sk_type(sk),ossl_ossl_check_OCSP_ONEREQ_freefunc_type(freefunc))
#define ossl_sk_OCSP_ONEREQ_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_OCSP_ONEREQ_sk_type(sk), ossl_ossl_check_OCSP_ONEREQ_type(ptr), (idx))
#define ossl_sk_OCSP_ONEREQ_set(sk, idx, ptr) ((ossl_OCSP_ONEREQ *)ossl_OPENSSL_sk_set(ossl_ossl_check_OCSP_ONEREQ_sk_type(sk), (idx), ossl_ossl_check_OCSP_ONEREQ_type(ptr)))
#define ossl_sk_OCSP_ONEREQ_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_OCSP_ONEREQ_sk_type(sk), ossl_ossl_check_OCSP_ONEREQ_type(ptr))
#define ossl_sk_OCSP_ONEREQ_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_OCSP_ONEREQ_sk_type(sk), ossl_ossl_check_OCSP_ONEREQ_type(ptr))
#define ossl_sk_OCSP_ONEREQ_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_OCSP_ONEREQ_sk_type(sk), ossl_ossl_check_OCSP_ONEREQ_type(ptr), pnum)
#define ossl_sk_OCSP_ONEREQ_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_OCSP_ONEREQ_sk_type(sk))
#define ossl_sk_OCSP_ONEREQ_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_OCSP_ONEREQ_sk_type(sk))
#define ossl_sk_OCSP_ONEREQ_dup(sk) ((ossl_STACK_OF(ossl_OCSP_ONEREQ) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_OCSP_ONEREQ_sk_type(sk)))
#define ossl_sk_OCSP_ONEREQ_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_OCSP_ONEREQ) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_OCSP_ONEREQ_sk_type(sk), ossl_ossl_check_OCSP_ONEREQ_copyfunc_type(copyfunc), ossl_ossl_check_OCSP_ONEREQ_freefunc_type(freefunc)))
#define ossl_sk_OCSP_ONEREQ_set_cmp_func(sk, cmp) ((ossl_sk_OCSP_ONEREQ_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_OCSP_ONEREQ_sk_type(sk), ossl_ossl_check_OCSP_ONEREQ_compfunc_type(cmp)))


#  define ossl_OCSP_RESPONSE_STATUS_SUCCESSFUL           0
#  define ossl_OCSP_RESPONSE_STATUS_MALFORMEDREQUEST     1
#  define ossl_OCSP_RESPONSE_STATUS_INTERNALERROR        2
#  define ossl_OCSP_RESPONSE_STATUS_TRYLATER             3
#  define ossl_OCSP_RESPONSE_STATUS_SIGREQUIRED          5
#  define ossl_OCSP_RESPONSE_STATUS_UNAUTHORIZED         6

typedef struct ossl_ocsp_resp_bytes_st ossl_OCSP_RESPBYTES;

#  define ossl_V_OCSP_RESPID_NAME 0
#  define ossl_V_OCSP_RESPID_KEY  1

ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_OCSP_RESPID, ossl_OCSP_RESPID, ossl_OCSP_RESPID)
#define ossl_sk_OCSP_RESPID_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_OCSP_RESPID_sk_type(sk))
#define ossl_sk_OCSP_RESPID_value(sk, idx) ((ossl_OCSP_RESPID *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_OCSP_RESPID_sk_type(sk), (idx)))
#define ossl_sk_OCSP_RESPID_new(cmp) ((ossl_STACK_OF(ossl_OCSP_RESPID) *)ossl_OPENSSL_sk_new(ossl_ossl_check_OCSP_RESPID_compfunc_type(cmp)))
#define ossl_sk_OCSP_RESPID_new_null() ((ossl_STACK_OF(ossl_OCSP_RESPID) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_OCSP_RESPID_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_OCSP_RESPID) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_OCSP_RESPID_compfunc_type(cmp), (n)))
#define ossl_sk_OCSP_RESPID_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_OCSP_RESPID_sk_type(sk), (n))
#define ossl_sk_OCSP_RESPID_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_OCSP_RESPID_sk_type(sk))
#define ossl_sk_OCSP_RESPID_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_OCSP_RESPID_sk_type(sk))
#define ossl_sk_OCSP_RESPID_delete(sk, i) ((ossl_OCSP_RESPID *)ossl_OPENSSL_sk_delete(ossl_ossl_check_OCSP_RESPID_sk_type(sk), (i)))
#define ossl_sk_OCSP_RESPID_delete_ptr(sk, ptr) ((ossl_OCSP_RESPID *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_OCSP_RESPID_sk_type(sk), ossl_ossl_check_OCSP_RESPID_type(ptr)))
#define ossl_sk_OCSP_RESPID_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_OCSP_RESPID_sk_type(sk), ossl_ossl_check_OCSP_RESPID_type(ptr))
#define ossl_sk_OCSP_RESPID_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_OCSP_RESPID_sk_type(sk), ossl_ossl_check_OCSP_RESPID_type(ptr))
#define ossl_sk_OCSP_RESPID_pop(sk) ((ossl_OCSP_RESPID *)ossl_OPENSSL_sk_pop(ossl_ossl_check_OCSP_RESPID_sk_type(sk)))
#define ossl_sk_OCSP_RESPID_shift(sk) ((ossl_OCSP_RESPID *)ossl_OPENSSL_sk_shift(ossl_ossl_check_OCSP_RESPID_sk_type(sk)))
#define ossl_sk_OCSP_RESPID_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_OCSP_RESPID_sk_type(sk),ossl_ossl_check_OCSP_RESPID_freefunc_type(freefunc))
#define ossl_sk_OCSP_RESPID_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_OCSP_RESPID_sk_type(sk), ossl_ossl_check_OCSP_RESPID_type(ptr), (idx))
#define ossl_sk_OCSP_RESPID_set(sk, idx, ptr) ((ossl_OCSP_RESPID *)ossl_OPENSSL_sk_set(ossl_ossl_check_OCSP_RESPID_sk_type(sk), (idx), ossl_ossl_check_OCSP_RESPID_type(ptr)))
#define ossl_sk_OCSP_RESPID_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_OCSP_RESPID_sk_type(sk), ossl_ossl_check_OCSP_RESPID_type(ptr))
#define ossl_sk_OCSP_RESPID_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_OCSP_RESPID_sk_type(sk), ossl_ossl_check_OCSP_RESPID_type(ptr))
#define ossl_sk_OCSP_RESPID_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_OCSP_RESPID_sk_type(sk), ossl_ossl_check_OCSP_RESPID_type(ptr), pnum)
#define ossl_sk_OCSP_RESPID_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_OCSP_RESPID_sk_type(sk))
#define ossl_sk_OCSP_RESPID_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_OCSP_RESPID_sk_type(sk))
#define ossl_sk_OCSP_RESPID_dup(sk) ((ossl_STACK_OF(ossl_OCSP_RESPID) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_OCSP_RESPID_sk_type(sk)))
#define ossl_sk_OCSP_RESPID_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_OCSP_RESPID) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_OCSP_RESPID_sk_type(sk), ossl_ossl_check_OCSP_RESPID_copyfunc_type(copyfunc), ossl_ossl_check_OCSP_RESPID_freefunc_type(freefunc)))
#define ossl_sk_OCSP_RESPID_set_cmp_func(sk, cmp) ((ossl_sk_OCSP_RESPID_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_OCSP_RESPID_sk_type(sk), ossl_ossl_check_OCSP_RESPID_compfunc_type(cmp)))


typedef struct ossl_ocsp_revoked_info_st ossl_OCSP_REVOKEDINFO;

#  define ossl_V_OCSP_CERTSTATUS_GOOD    0
#  define ossl_V_OCSP_CERTSTATUS_REVOKED 1
#  define ossl_V_OCSP_CERTSTATUS_UNKNOWN 2

typedef struct ossl_ocsp_cert_status_st ossl_OCSP_CERTSTATUS;
typedef struct ossl_ocsp_single_response_st ossl_OCSP_SINGLERESP;

ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_OCSP_SINGLERESP, ossl_OCSP_SINGLERESP, ossl_OCSP_SINGLERESP)
#define ossl_sk_OCSP_SINGLERESP_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_OCSP_SINGLERESP_sk_type(sk))
#define ossl_sk_OCSP_SINGLERESP_value(sk, idx) ((ossl_OCSP_SINGLERESP *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_OCSP_SINGLERESP_sk_type(sk), (idx)))
#define ossl_sk_OCSP_SINGLERESP_new(cmp) ((ossl_STACK_OF(ossl_OCSP_SINGLERESP) *)ossl_OPENSSL_sk_new(ossl_ossl_check_OCSP_SINGLERESP_compfunc_type(cmp)))
#define ossl_sk_OCSP_SINGLERESP_new_null() ((ossl_STACK_OF(ossl_OCSP_SINGLERESP) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_OCSP_SINGLERESP_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_OCSP_SINGLERESP) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_OCSP_SINGLERESP_compfunc_type(cmp), (n)))
#define ossl_sk_OCSP_SINGLERESP_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_OCSP_SINGLERESP_sk_type(sk), (n))
#define ossl_sk_OCSP_SINGLERESP_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_OCSP_SINGLERESP_sk_type(sk))
#define ossl_sk_OCSP_SINGLERESP_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_OCSP_SINGLERESP_sk_type(sk))
#define ossl_sk_OCSP_SINGLERESP_delete(sk, i) ((ossl_OCSP_SINGLERESP *)ossl_OPENSSL_sk_delete(ossl_ossl_check_OCSP_SINGLERESP_sk_type(sk), (i)))
#define ossl_sk_OCSP_SINGLERESP_delete_ptr(sk, ptr) ((ossl_OCSP_SINGLERESP *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_OCSP_SINGLERESP_sk_type(sk), ossl_ossl_check_OCSP_SINGLERESP_type(ptr)))
#define ossl_sk_OCSP_SINGLERESP_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_OCSP_SINGLERESP_sk_type(sk), ossl_ossl_check_OCSP_SINGLERESP_type(ptr))
#define ossl_sk_OCSP_SINGLERESP_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_OCSP_SINGLERESP_sk_type(sk), ossl_ossl_check_OCSP_SINGLERESP_type(ptr))
#define ossl_sk_OCSP_SINGLERESP_pop(sk) ((ossl_OCSP_SINGLERESP *)ossl_OPENSSL_sk_pop(ossl_ossl_check_OCSP_SINGLERESP_sk_type(sk)))
#define ossl_sk_OCSP_SINGLERESP_shift(sk) ((ossl_OCSP_SINGLERESP *)ossl_OPENSSL_sk_shift(ossl_ossl_check_OCSP_SINGLERESP_sk_type(sk)))
#define ossl_sk_OCSP_SINGLERESP_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_OCSP_SINGLERESP_sk_type(sk),ossl_ossl_check_OCSP_SINGLERESP_freefunc_type(freefunc))
#define ossl_sk_OCSP_SINGLERESP_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_OCSP_SINGLERESP_sk_type(sk), ossl_ossl_check_OCSP_SINGLERESP_type(ptr), (idx))
#define ossl_sk_OCSP_SINGLERESP_set(sk, idx, ptr) ((ossl_OCSP_SINGLERESP *)ossl_OPENSSL_sk_set(ossl_ossl_check_OCSP_SINGLERESP_sk_type(sk), (idx), ossl_ossl_check_OCSP_SINGLERESP_type(ptr)))
#define ossl_sk_OCSP_SINGLERESP_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_OCSP_SINGLERESP_sk_type(sk), ossl_ossl_check_OCSP_SINGLERESP_type(ptr))
#define ossl_sk_OCSP_SINGLERESP_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_OCSP_SINGLERESP_sk_type(sk), ossl_ossl_check_OCSP_SINGLERESP_type(ptr))
#define ossl_sk_OCSP_SINGLERESP_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_OCSP_SINGLERESP_sk_type(sk), ossl_ossl_check_OCSP_SINGLERESP_type(ptr), pnum)
#define ossl_sk_OCSP_SINGLERESP_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_OCSP_SINGLERESP_sk_type(sk))
#define ossl_sk_OCSP_SINGLERESP_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_OCSP_SINGLERESP_sk_type(sk))
#define ossl_sk_OCSP_SINGLERESP_dup(sk) ((ossl_STACK_OF(ossl_OCSP_SINGLERESP) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_OCSP_SINGLERESP_sk_type(sk)))
#define ossl_sk_OCSP_SINGLERESP_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_OCSP_SINGLERESP) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_OCSP_SINGLERESP_sk_type(sk), ossl_ossl_check_OCSP_SINGLERESP_copyfunc_type(copyfunc), ossl_ossl_check_OCSP_SINGLERESP_freefunc_type(freefunc)))
#define ossl_sk_OCSP_SINGLERESP_set_cmp_func(sk, cmp) ((ossl_sk_OCSP_SINGLERESP_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_OCSP_SINGLERESP_sk_type(sk), ossl_ossl_check_OCSP_SINGLERESP_compfunc_type(cmp)))


typedef struct ossl_ocsp_response_data_st ossl_OCSP_RESPDATA;

typedef struct ossl_ocsp_basic_response_st ossl_OCSP_BASICRESP;

typedef struct ossl_ocsp_crl_id_st ossl_OCSP_CRLID;
typedef struct ossl_ocsp_service_locator_st ossl_OCSP_SERVICELOC;

#  define ossl_PEM_STRING_OCSP_REQUEST "OCSP REQUEST"
#  define ossl_PEM_STRING_OCSP_RESPONSE "OCSP RESPONSE"

#  define ossl_d2i_OCSP_REQUEST_bio(bp,p) ossl_ASN1_d2i_bio_of(ossl_OCSP_REQUEST,ossl_OCSP_REQUEST_new,ossl_d2i_OCSP_REQUEST,bp,p)

#  define ossl_d2i_OCSP_RESPONSE_bio(bp,p) ossl_ASN1_d2i_bio_of(ossl_OCSP_RESPONSE,ossl_OCSP_RESPONSE_new,ossl_d2i_OCSP_RESPONSE,bp,p)

#  define ossl_PEM_read_bio_OCSP_REQUEST(bp,x,cb) (ossl_OCSP_REQUEST *)ossl_PEM_ASN1_read_bio( \
     (char *(*)())ossl_d2i_OCSP_REQUEST,ossl_PEM_STRING_OCSP_REQUEST, \
     bp,(char **)(x),cb,NULL)

#  define ossl_PEM_read_bio_OCSP_RESPONSE(bp,x,cb) (ossl_OCSP_RESPONSE *)ossl_PEM_ASN1_read_bio(\
     (char *(*)())ossl_d2i_OCSP_RESPONSE,ossl_PEM_STRING_OCSP_RESPONSE, \
     bp,(char **)(x),cb,NULL)

#  define ossl_PEM_write_bio_OCSP_REQUEST(bp,o) \
    ossl_PEM_ASN1_write_bio((int (*)())ossl_i2d_OCSP_REQUEST,ossl_PEM_STRING_OCSP_REQUEST,\
                        bp,(char *)(o), NULL,NULL,0,NULL,NULL)

#  define ossl_PEM_write_bio_OCSP_RESPONSE(bp,o) \
    ossl_PEM_ASN1_write_bio((int (*)())ossl_i2d_OCSP_RESPONSE,ossl_PEM_STRING_OCSP_RESPONSE,\
                        bp,(char *)(o), NULL,NULL,0,NULL,NULL)

#  define ossl_i2d_OCSP_RESPONSE_bio(bp,o) ossl_ASN1_i2d_bio_of(ossl_OCSP_RESPONSE,ossl_i2d_OCSP_RESPONSE,bp,o)

#  define ossl_i2d_OCSP_REQUEST_bio(bp,o) ossl_ASN1_i2d_bio_of(ossl_OCSP_REQUEST,ossl_i2d_OCSP_REQUEST,bp,o)

#  define ossl_ASN1_BIT_STRING_digest(data,type,md,len) \
        ossl_ASN1_item_digest(ossl_ASN1_ITEM_rptr(ossl_ASN1_BIT_STRING),type,data,md,len)

#  define ossl_OCSP_CERTSTATUS_dup(cs)\
                (ossl_OCSP_CERTSTATUS*)ossl_ASN1_dup((ossl_i2d_of_void *)ossl_i2d_OCSP_CERTSTATUS,\
                (ossl_d2i_of_void *)ossl_d2i_OCSP_CERTSTATUS,(char *)(cs))

ossl_DECLARE_ASN1_DUP_FUNCTION(ossl_OCSP_CERTID)

ossl_OSSL_HTTP_REQ_CTX *ossl_OCSP_sendreq_new(ossl_BIO *io, const char *path,
                                    const ossl_OCSP_REQUEST *req, int buf_size);
ossl_OCSP_RESPONSE *ossl_OCSP_sendreq_bio(ossl_BIO *b, const char *path, ossl_OCSP_REQUEST *req);

#  ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
typedef ossl_OSSL_HTTP_REQ_CTX ossl_OCSP_REQ_CTX;
#   define ossl_OCSP_REQ_CTX_new(io, buf_size) \
        ossl_OSSL_HTTP_REQ_CTX_new(io, io, buf_size)
#   define ossl_OCSP_REQ_CTX_free ossl_OSSL_HTTP_REQ_CTX_free
#   define ossl_OCSP_REQ_CTX_http(rctx, op, path) \
        (ossl_OSSL_HTTP_REQ_CTX_set_expected(rctx, NULL, 1 /* asn1 */, 0, 0) && \
         ossl_OSSL_HTTP_REQ_CTX_set_request_line(rctx, strcmp(op, "POST") == 0, \
                                            NULL, NULL, path))
#   define ossl_OCSP_REQ_CTX_add1_header ossl_OSSL_HTTP_REQ_CTX_add1_header
#   define ossl_OCSP_REQ_CTX_i2d(r, it, req) \
        ossl_OSSL_HTTP_REQ_CTX_set1_req(r, "application/ocsp-request", it, req)
#   define ossl_OCSP_REQ_CTX_set1_req(r, req) \
        ossl_OCSP_REQ_CTX_i2d(r, ossl_ASN1_ITEM_rptr(ossl_OCSP_REQUEST), (ossl_ASN1_VALUE *)(req))
#   define ossl_OCSP_REQ_CTX_nbio ossl_OSSL_HTTP_REQ_CTX_nbio
#   define ossl_OCSP_REQ_CTX_nbio_d2i ossl_OSSL_HTTP_REQ_CTX_nbio_d2i
#   define ossl_OCSP_sendreq_nbio(p, r) \
        ossl_OSSL_HTTP_REQ_CTX_nbio_d2i(r, (ossl_ASN1_VALUE **)(p), \
                                   ossl_ASN1_ITEM_rptr(ossl_OCSP_RESPONSE))
#   define ossl_OCSP_REQ_CTX_get0_mem_bio ossl_OSSL_HTTP_REQ_CTX_get0_mem_bio
#   define ossl_OCSP_set_max_response_length ossl_OSSL_HTTP_REQ_CTX_set_max_response_length
#  endif

ossl_OCSP_CERTID *ossl_OCSP_cert_to_id(const ossl_EVP_MD *dgst, const ossl_X509 *subject,
                             const ossl_X509 *issuer);

ossl_OCSP_CERTID *ossl_OCSP_cert_id_new(const ossl_EVP_MD *dgst,
                              const ossl_X509_NAME *issuerName,
                              const ossl_ASN1_BIT_STRING *issuerKey,
                              const ossl_ASN1_INTEGER *serialNumber);

ossl_OCSP_ONEREQ *ossl_OCSP_request_add0_id(ossl_OCSP_REQUEST *req, ossl_OCSP_CERTID *cid);

int ossl_OCSP_request_add1_nonce(ossl_OCSP_REQUEST *req, unsigned char *val, int len);
int ossl_OCSP_basic_add1_nonce(ossl_OCSP_BASICRESP *resp, unsigned char *val, int len);
int ossl_OCSP_check_nonce(ossl_OCSP_REQUEST *req, ossl_OCSP_BASICRESP *bs);
int ossl_OCSP_copy_nonce(ossl_OCSP_BASICRESP *resp, ossl_OCSP_REQUEST *req);

int ossl_OCSP_request_set1_name(ossl_OCSP_REQUEST *req, const ossl_X509_NAME *nm);
int ossl_OCSP_request_add1_cert(ossl_OCSP_REQUEST *req, ossl_X509 *cert);

int ossl_OCSP_request_sign(ossl_OCSP_REQUEST *req,
                      ossl_X509 *signer,
                      ossl_EVP_PKEY *key,
                      const ossl_EVP_MD *dgst,
                      ossl_STACK_OF(ossl_X509) *certs, unsigned long flags);

int ossl_OCSP_response_status(ossl_OCSP_RESPONSE *resp);
ossl_OCSP_BASICRESP *ossl_OCSP_response_get1_basic(ossl_OCSP_RESPONSE *resp);

const ossl_ASN1_OCTET_STRING *ossl_OCSP_resp_get0_signature(const ossl_OCSP_BASICRESP *bs);
const ossl_X509_ALGOR *ossl_OCSP_resp_get0_tbs_sigalg(const ossl_OCSP_BASICRESP *bs);
const ossl_OCSP_RESPDATA *ossl_OCSP_resp_get0_respdata(const ossl_OCSP_BASICRESP *bs);
int ossl_OCSP_resp_get0_signer(ossl_OCSP_BASICRESP *bs, ossl_X509 **signer,
                          ossl_STACK_OF(ossl_X509) *extra_certs);

int ossl_OCSP_resp_count(ossl_OCSP_BASICRESP *bs);
ossl_OCSP_SINGLERESP *ossl_OCSP_resp_get0(ossl_OCSP_BASICRESP *bs, int idx);
const ossl_ASN1_GENERALIZEDTIME *ossl_OCSP_resp_get0_produced_at(const ossl_OCSP_BASICRESP* bs);
const ossl_STACK_OF(ossl_X509) *ossl_OCSP_resp_get0_certs(const ossl_OCSP_BASICRESP *bs);
int ossl_OCSP_resp_get0_id(const ossl_OCSP_BASICRESP *bs,
                      const ossl_ASN1_OCTET_STRING **pid,
                      const ossl_X509_NAME **pname);
int ossl_OCSP_resp_get1_id(const ossl_OCSP_BASICRESP *bs,
                      ossl_ASN1_OCTET_STRING **pid,
                      ossl_X509_NAME **pname);

int ossl_OCSP_resp_find(ossl_OCSP_BASICRESP *bs, ossl_OCSP_CERTID *id, int last);
int ossl_OCSP_single_get0_status(ossl_OCSP_SINGLERESP *single, int *reason,
                            ossl_ASN1_GENERALIZEDTIME **revtime,
                            ossl_ASN1_GENERALIZEDTIME **thisupd,
                            ossl_ASN1_GENERALIZEDTIME **nextupd);
int ossl_OCSP_resp_find_status(ossl_OCSP_BASICRESP *bs, ossl_OCSP_CERTID *id, int *status,
                          int *reason,
                          ossl_ASN1_GENERALIZEDTIME **revtime,
                          ossl_ASN1_GENERALIZEDTIME **thisupd,
                          ossl_ASN1_GENERALIZEDTIME **nextupd);
int ossl_OCSP_check_validity(ossl_ASN1_GENERALIZEDTIME *thisupd,
                        ossl_ASN1_GENERALIZEDTIME *nextupd, long sec, long maxsec);

int ossl_OCSP_request_verify(ossl_OCSP_REQUEST *req, ossl_STACK_OF(ossl_X509) *certs,
                        ossl_X509_STORE *store, unsigned long flags);

#  define ossl_OCSP_parse_url(url, host, port, path, ssl) \
    ossl_OSSL_HTTP_parse_url(url, ssl, NULL, host, port, NULL, path, NULL, NULL)

int ossl_OCSP_id_issuer_cmp(const ossl_OCSP_CERTID *a, const ossl_OCSP_CERTID *b);
int ossl_OCSP_id_cmp(const ossl_OCSP_CERTID *a, const ossl_OCSP_CERTID *b);

int ossl_OCSP_request_onereq_count(ossl_OCSP_REQUEST *req);
ossl_OCSP_ONEREQ *ossl_OCSP_request_onereq_get0(ossl_OCSP_REQUEST *req, int i);
ossl_OCSP_CERTID *ossl_OCSP_onereq_get0_id(ossl_OCSP_ONEREQ *one);
int ossl_OCSP_id_get0_info(ossl_ASN1_OCTET_STRING **piNameHash, ossl_ASN1_OBJECT **pmd,
                      ossl_ASN1_OCTET_STRING **pikeyHash,
                      ossl_ASN1_INTEGER **pserial, ossl_OCSP_CERTID *cid);
int ossl_OCSP_request_is_signed(ossl_OCSP_REQUEST *req);
ossl_OCSP_RESPONSE *ossl_OCSP_response_create(int status, ossl_OCSP_BASICRESP *bs);
ossl_OCSP_SINGLERESP *ossl_OCSP_basic_add1_status(ossl_OCSP_BASICRESP *rsp,
                                        ossl_OCSP_CERTID *cid,
                                        int status, int reason,
                                        ossl_ASN1_TIME *revtime,
                                        ossl_ASN1_TIME *thisupd,
                                        ossl_ASN1_TIME *nextupd);
int ossl_OCSP_basic_add1_cert(ossl_OCSP_BASICRESP *resp, ossl_X509 *cert);
int ossl_OCSP_basic_sign(ossl_OCSP_BASICRESP *brsp,
                    ossl_X509 *signer, ossl_EVP_PKEY *key, const ossl_EVP_MD *dgst,
                    ossl_STACK_OF(ossl_X509) *certs, unsigned long flags);
int ossl_OCSP_basic_sign_ctx(ossl_OCSP_BASICRESP *brsp,
                        ossl_X509 *signer, ossl_EVP_MD_CTX *ctx,
                        ossl_STACK_OF(ossl_X509) *certs, unsigned long flags);
int ossl_OCSP_RESPID_set_by_name(ossl_OCSP_RESPID *respid, ossl_X509 *cert);
int ossl_OCSP_RESPID_set_by_key_ex(ossl_OCSP_RESPID *respid, ossl_X509 *cert,
                              ossl_OSSL_LIB_CTX *libctx, const char *propq);
int ossl_OCSP_RESPID_set_by_key(ossl_OCSP_RESPID *respid, ossl_X509 *cert);
int ossl_OCSP_RESPID_match_ex(ossl_OCSP_RESPID *respid, ossl_X509 *cert, ossl_OSSL_LIB_CTX *libctx,
                         const char *propq);
int ossl_OCSP_RESPID_match(ossl_OCSP_RESPID *respid, ossl_X509 *cert);

ossl_X509_EXTENSION *ossl_OCSP_crlID_new(const char *url, long *n, char *tim);

ossl_X509_EXTENSION *ossl_OCSP_accept_responses_new(char **oids);

ossl_X509_EXTENSION *ossl_OCSP_archive_cutoff_new(char *tim);

ossl_X509_EXTENSION *ossl_OCSP_url_svcloc_new(const ossl_X509_NAME *issuer, const char **urls);

int ossl_OCSP_REQUEST_get_ext_count(ossl_OCSP_REQUEST *x);
int ossl_OCSP_REQUEST_get_ext_by_NID(ossl_OCSP_REQUEST *x, int nid, int lastpos);
int ossl_OCSP_REQUEST_get_ext_by_OBJ(ossl_OCSP_REQUEST *x, const ossl_ASN1_OBJECT *obj,
                                int lastpos);
int ossl_OCSP_REQUEST_get_ext_by_critical(ossl_OCSP_REQUEST *x, int crit, int lastpos);
ossl_X509_EXTENSION *ossl_OCSP_REQUEST_get_ext(ossl_OCSP_REQUEST *x, int loc);
ossl_X509_EXTENSION *ossl_OCSP_REQUEST_delete_ext(ossl_OCSP_REQUEST *x, int loc);
void *ossl_OCSP_REQUEST_get1_ext_d2i(ossl_OCSP_REQUEST *x, int nid, int *crit,
                                int *idx);
int ossl_OCSP_REQUEST_add1_ext_i2d(ossl_OCSP_REQUEST *x, int nid, void *value, int crit,
                              unsigned long flags);
int ossl_OCSP_REQUEST_add_ext(ossl_OCSP_REQUEST *x, ossl_X509_EXTENSION *ex, int loc);

int ossl_OCSP_ONEREQ_get_ext_count(ossl_OCSP_ONEREQ *x);
int ossl_OCSP_ONEREQ_get_ext_by_NID(ossl_OCSP_ONEREQ *x, int nid, int lastpos);
int ossl_OCSP_ONEREQ_get_ext_by_OBJ(ossl_OCSP_ONEREQ *x, const ossl_ASN1_OBJECT *obj, int lastpos);
int ossl_OCSP_ONEREQ_get_ext_by_critical(ossl_OCSP_ONEREQ *x, int crit, int lastpos);
ossl_X509_EXTENSION *ossl_OCSP_ONEREQ_get_ext(ossl_OCSP_ONEREQ *x, int loc);
ossl_X509_EXTENSION *ossl_OCSP_ONEREQ_delete_ext(ossl_OCSP_ONEREQ *x, int loc);
void *ossl_OCSP_ONEREQ_get1_ext_d2i(ossl_OCSP_ONEREQ *x, int nid, int *crit, int *idx);
int ossl_OCSP_ONEREQ_add1_ext_i2d(ossl_OCSP_ONEREQ *x, int nid, void *value, int crit,
                             unsigned long flags);
int ossl_OCSP_ONEREQ_add_ext(ossl_OCSP_ONEREQ *x, ossl_X509_EXTENSION *ex, int loc);

int ossl_OCSP_BASICRESP_get_ext_count(ossl_OCSP_BASICRESP *x);
int ossl_OCSP_BASICRESP_get_ext_by_NID(ossl_OCSP_BASICRESP *x, int nid, int lastpos);
int ossl_OCSP_BASICRESP_get_ext_by_OBJ(ossl_OCSP_BASICRESP *x, const ossl_ASN1_OBJECT *obj,
                                  int lastpos);
int ossl_OCSP_BASICRESP_get_ext_by_critical(ossl_OCSP_BASICRESP *x, int crit,
                                       int lastpos);
ossl_X509_EXTENSION *ossl_OCSP_BASICRESP_get_ext(ossl_OCSP_BASICRESP *x, int loc);
ossl_X509_EXTENSION *ossl_OCSP_BASICRESP_delete_ext(ossl_OCSP_BASICRESP *x, int loc);
void *ossl_OCSP_BASICRESP_get1_ext_d2i(ossl_OCSP_BASICRESP *x, int nid, int *crit,
                                  int *idx);
int ossl_OCSP_BASICRESP_add1_ext_i2d(ossl_OCSP_BASICRESP *x, int nid, void *value,
                                int crit, unsigned long flags);
int ossl_OCSP_BASICRESP_add_ext(ossl_OCSP_BASICRESP *x, ossl_X509_EXTENSION *ex, int loc);

int ossl_OCSP_SINGLERESP_get_ext_count(ossl_OCSP_SINGLERESP *x);
int ossl_OCSP_SINGLERESP_get_ext_by_NID(ossl_OCSP_SINGLERESP *x, int nid, int lastpos);
int ossl_OCSP_SINGLERESP_get_ext_by_OBJ(ossl_OCSP_SINGLERESP *x, const ossl_ASN1_OBJECT *obj,
                                   int lastpos);
int ossl_OCSP_SINGLERESP_get_ext_by_critical(ossl_OCSP_SINGLERESP *x, int crit,
                                        int lastpos);
ossl_X509_EXTENSION *ossl_OCSP_SINGLERESP_get_ext(ossl_OCSP_SINGLERESP *x, int loc);
ossl_X509_EXTENSION *ossl_OCSP_SINGLERESP_delete_ext(ossl_OCSP_SINGLERESP *x, int loc);
void *ossl_OCSP_SINGLERESP_get1_ext_d2i(ossl_OCSP_SINGLERESP *x, int nid, int *crit,
                                   int *idx);
int ossl_OCSP_SINGLERESP_add1_ext_i2d(ossl_OCSP_SINGLERESP *x, int nid, void *value,
                                 int crit, unsigned long flags);
int ossl_OCSP_SINGLERESP_add_ext(ossl_OCSP_SINGLERESP *x, ossl_X509_EXTENSION *ex, int loc);
const ossl_OCSP_CERTID *ossl_OCSP_SINGLERESP_get0_id(const ossl_OCSP_SINGLERESP *x);

ossl_DECLARE_ASN1_FUNCTIONS(ossl_OCSP_SINGLERESP)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_OCSP_CERTSTATUS)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_OCSP_REVOKEDINFO)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_OCSP_BASICRESP)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_OCSP_RESPDATA)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_OCSP_RESPID)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_OCSP_RESPONSE)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_OCSP_RESPBYTES)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_OCSP_ONEREQ)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_OCSP_CERTID)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_OCSP_REQUEST)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_OCSP_SIGNATURE)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_OCSP_REQINFO)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_OCSP_CRLID)
ossl_DECLARE_ASN1_FUNCTIONS(ossl_OCSP_SERVICELOC)

const char *ossl_OCSP_response_status_str(long s);
const char *ossl_OCSP_cert_status_str(long s);
const char *ossl_OCSP_crl_reason_str(long s);

int ossl_OCSP_REQUEST_print(ossl_BIO *bp, ossl_OCSP_REQUEST *a, unsigned long flags);
int ossl_OCSP_RESPONSE_print(ossl_BIO *bp, ossl_OCSP_RESPONSE *o, unsigned long flags);

int ossl_OCSP_basic_verify(ossl_OCSP_BASICRESP *bs, ossl_STACK_OF(ossl_X509) *certs,
                      ossl_X509_STORE *st, unsigned long flags);


#  ifdef  __cplusplus
}
#  endif
# endif /* !defined(ossl_OPENSSL_NO_OCSP) */
#endif
