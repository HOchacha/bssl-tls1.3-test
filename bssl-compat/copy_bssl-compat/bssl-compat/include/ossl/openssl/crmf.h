/*-
 * WARNING: do not edit!
 * Generated by Makefile from ../../../openssl/source/include/openssl/crmf.h.in
 *
 * Copyright 2007-2021 The OpenSSL Project Authors. All Rights Reserved.
 * Copyright Nokia 2007-2019
 * Copyright Siemens AG 2015-2019
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 *
 * CRMF (RFC 4211) implementation by M. Peylo, M. Viljanen, and D. von Oheimb.
 */



#ifndef ossl_OPENSSL_CRMF_H
# define ossl_OPENSSL_CRMF_H

# include "ossl/openssl/opensslconf.h"

# ifndef ossl_OPENSSL_NO_CRMF
#  include "ossl/openssl/opensslv.h"
#  include "ossl/openssl/safestack.h"
#  include "ossl/openssl/crmferr.h"
#  include "ossl/openssl/x509v3.h" /* for ossl_GENERAL_NAME etc. */

/* explicit #includes not strictly needed since implied by the above: */
#  include "ossl/openssl/types.h"
#  include "ossl/openssl/x509.h"

#  ifdef __cplusplus
extern "C" {
#  endif

#  define ossl_OSSL_CRMF_POPOPRIVKEY_THISMESSAGE          0
#  define ossl_OSSL_CRMF_POPOPRIVKEY_SUBSEQUENTMESSAGE    1
#  define ossl_OSSL_CRMF_POPOPRIVKEY_DHMAC                2
#  define ossl_OSSL_CRMF_POPOPRIVKEY_AGREEMAC             3
#  define ossl_OSSL_CRMF_POPOPRIVKEY_ENCRYPTEDKEY         4

#  define ossl_OSSL_CRMF_SUBSEQUENTMESSAGE_ENCRCERT       0
#  define ossl_OSSL_CRMF_SUBSEQUENTMESSAGE_CHALLENGERESP  1

typedef struct ossl_ossl_crmf_encryptedvalue_st ossl_OSSL_CRMF_ENCRYPTEDVALUE;
ossl_DECLARE_ASN1_FUNCTIONS(ossl_OSSL_CRMF_ENCRYPTEDVALUE)
typedef struct ossl_ossl_crmf_msg_st ossl_OSSL_CRMF_MSG;
ossl_DECLARE_ASN1_FUNCTIONS(ossl_OSSL_CRMF_MSG)
ossl_DECLARE_ASN1_DUP_FUNCTION(ossl_OSSL_CRMF_MSG)
ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_OSSL_CRMF_MSG, ossl_OSSL_CRMF_MSG, ossl_OSSL_CRMF_MSG)
#define ossl_sk_OSSL_CRMF_MSG_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_OSSL_CRMF_MSG_sk_type(sk))
#define ossl_sk_OSSL_CRMF_MSG_value(sk, idx) ((ossl_OSSL_CRMF_MSG *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_OSSL_CRMF_MSG_sk_type(sk), (idx)))
#define ossl_sk_OSSL_CRMF_MSG_new(cmp) ((ossl_STACK_OF(ossl_OSSL_CRMF_MSG) *)ossl_OPENSSL_sk_new(ossl_ossl_check_OSSL_CRMF_MSG_compfunc_type(cmp)))
#define ossl_sk_OSSL_CRMF_MSG_new_null() ((ossl_STACK_OF(ossl_OSSL_CRMF_MSG) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_OSSL_CRMF_MSG_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_OSSL_CRMF_MSG) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_OSSL_CRMF_MSG_compfunc_type(cmp), (n)))
#define ossl_sk_OSSL_CRMF_MSG_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_OSSL_CRMF_MSG_sk_type(sk), (n))
#define ossl_sk_OSSL_CRMF_MSG_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_OSSL_CRMF_MSG_sk_type(sk))
#define ossl_sk_OSSL_CRMF_MSG_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_OSSL_CRMF_MSG_sk_type(sk))
#define ossl_sk_OSSL_CRMF_MSG_delete(sk, i) ((ossl_OSSL_CRMF_MSG *)ossl_OPENSSL_sk_delete(ossl_ossl_check_OSSL_CRMF_MSG_sk_type(sk), (i)))
#define ossl_sk_OSSL_CRMF_MSG_delete_ptr(sk, ptr) ((ossl_OSSL_CRMF_MSG *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_OSSL_CRMF_MSG_sk_type(sk), ossl_ossl_check_OSSL_CRMF_MSG_type(ptr)))
#define ossl_sk_OSSL_CRMF_MSG_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_OSSL_CRMF_MSG_sk_type(sk), ossl_ossl_check_OSSL_CRMF_MSG_type(ptr))
#define ossl_sk_OSSL_CRMF_MSG_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_OSSL_CRMF_MSG_sk_type(sk), ossl_ossl_check_OSSL_CRMF_MSG_type(ptr))
#define ossl_sk_OSSL_CRMF_MSG_pop(sk) ((ossl_OSSL_CRMF_MSG *)ossl_OPENSSL_sk_pop(ossl_ossl_check_OSSL_CRMF_MSG_sk_type(sk)))
#define ossl_sk_OSSL_CRMF_MSG_shift(sk) ((ossl_OSSL_CRMF_MSG *)ossl_OPENSSL_sk_shift(ossl_ossl_check_OSSL_CRMF_MSG_sk_type(sk)))
#define ossl_sk_OSSL_CRMF_MSG_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_OSSL_CRMF_MSG_sk_type(sk),ossl_ossl_check_OSSL_CRMF_MSG_freefunc_type(freefunc))
#define ossl_sk_OSSL_CRMF_MSG_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_OSSL_CRMF_MSG_sk_type(sk), ossl_ossl_check_OSSL_CRMF_MSG_type(ptr), (idx))
#define ossl_sk_OSSL_CRMF_MSG_set(sk, idx, ptr) ((ossl_OSSL_CRMF_MSG *)ossl_OPENSSL_sk_set(ossl_ossl_check_OSSL_CRMF_MSG_sk_type(sk), (idx), ossl_ossl_check_OSSL_CRMF_MSG_type(ptr)))
#define ossl_sk_OSSL_CRMF_MSG_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_OSSL_CRMF_MSG_sk_type(sk), ossl_ossl_check_OSSL_CRMF_MSG_type(ptr))
#define ossl_sk_OSSL_CRMF_MSG_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_OSSL_CRMF_MSG_sk_type(sk), ossl_ossl_check_OSSL_CRMF_MSG_type(ptr))
#define ossl_sk_OSSL_CRMF_MSG_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_OSSL_CRMF_MSG_sk_type(sk), ossl_ossl_check_OSSL_CRMF_MSG_type(ptr), pnum)
#define ossl_sk_OSSL_CRMF_MSG_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_OSSL_CRMF_MSG_sk_type(sk))
#define ossl_sk_OSSL_CRMF_MSG_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_OSSL_CRMF_MSG_sk_type(sk))
#define ossl_sk_OSSL_CRMF_MSG_dup(sk) ((ossl_STACK_OF(ossl_OSSL_CRMF_MSG) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_OSSL_CRMF_MSG_sk_type(sk)))
#define ossl_sk_OSSL_CRMF_MSG_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_OSSL_CRMF_MSG) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_OSSL_CRMF_MSG_sk_type(sk), ossl_ossl_check_OSSL_CRMF_MSG_copyfunc_type(copyfunc), ossl_ossl_check_OSSL_CRMF_MSG_freefunc_type(freefunc)))
#define ossl_sk_OSSL_CRMF_MSG_set_cmp_func(sk, cmp) ((ossl_sk_OSSL_CRMF_MSG_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_OSSL_CRMF_MSG_sk_type(sk), ossl_ossl_check_OSSL_CRMF_MSG_compfunc_type(cmp)))

typedef struct ossl_ossl_crmf_attributetypeandvalue_st ossl_OSSL_CRMF_ATTRIBUTETYPEANDVALUE;
typedef struct ossl_ossl_crmf_pbmparameter_st ossl_OSSL_CRMF_PBMPARAMETER;
ossl_DECLARE_ASN1_FUNCTIONS(ossl_OSSL_CRMF_PBMPARAMETER)
typedef struct ossl_ossl_crmf_poposigningkey_st ossl_OSSL_CRMF_POPOSIGNINGKEY;
typedef struct ossl_ossl_crmf_certrequest_st ossl_OSSL_CRMF_CERTREQUEST;
typedef struct ossl_ossl_crmf_certid_st ossl_OSSL_CRMF_CERTID;
ossl_DECLARE_ASN1_FUNCTIONS(ossl_OSSL_CRMF_CERTID)
ossl_DECLARE_ASN1_DUP_FUNCTION(ossl_OSSL_CRMF_CERTID)
ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_OSSL_CRMF_CERTID, ossl_OSSL_CRMF_CERTID, ossl_OSSL_CRMF_CERTID)
#define ossl_sk_OSSL_CRMF_CERTID_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_OSSL_CRMF_CERTID_sk_type(sk))
#define ossl_sk_OSSL_CRMF_CERTID_value(sk, idx) ((ossl_OSSL_CRMF_CERTID *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_OSSL_CRMF_CERTID_sk_type(sk), (idx)))
#define ossl_sk_OSSL_CRMF_CERTID_new(cmp) ((ossl_STACK_OF(ossl_OSSL_CRMF_CERTID) *)ossl_OPENSSL_sk_new(ossl_ossl_check_OSSL_CRMF_CERTID_compfunc_type(cmp)))
#define ossl_sk_OSSL_CRMF_CERTID_new_null() ((ossl_STACK_OF(ossl_OSSL_CRMF_CERTID) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_OSSL_CRMF_CERTID_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_OSSL_CRMF_CERTID) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_OSSL_CRMF_CERTID_compfunc_type(cmp), (n)))
#define ossl_sk_OSSL_CRMF_CERTID_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_OSSL_CRMF_CERTID_sk_type(sk), (n))
#define ossl_sk_OSSL_CRMF_CERTID_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_OSSL_CRMF_CERTID_sk_type(sk))
#define ossl_sk_OSSL_CRMF_CERTID_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_OSSL_CRMF_CERTID_sk_type(sk))
#define ossl_sk_OSSL_CRMF_CERTID_delete(sk, i) ((ossl_OSSL_CRMF_CERTID *)ossl_OPENSSL_sk_delete(ossl_ossl_check_OSSL_CRMF_CERTID_sk_type(sk), (i)))
#define ossl_sk_OSSL_CRMF_CERTID_delete_ptr(sk, ptr) ((ossl_OSSL_CRMF_CERTID *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_OSSL_CRMF_CERTID_sk_type(sk), ossl_ossl_check_OSSL_CRMF_CERTID_type(ptr)))
#define ossl_sk_OSSL_CRMF_CERTID_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_OSSL_CRMF_CERTID_sk_type(sk), ossl_ossl_check_OSSL_CRMF_CERTID_type(ptr))
#define ossl_sk_OSSL_CRMF_CERTID_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_OSSL_CRMF_CERTID_sk_type(sk), ossl_ossl_check_OSSL_CRMF_CERTID_type(ptr))
#define ossl_sk_OSSL_CRMF_CERTID_pop(sk) ((ossl_OSSL_CRMF_CERTID *)ossl_OPENSSL_sk_pop(ossl_ossl_check_OSSL_CRMF_CERTID_sk_type(sk)))
#define ossl_sk_OSSL_CRMF_CERTID_shift(sk) ((ossl_OSSL_CRMF_CERTID *)ossl_OPENSSL_sk_shift(ossl_ossl_check_OSSL_CRMF_CERTID_sk_type(sk)))
#define ossl_sk_OSSL_CRMF_CERTID_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_OSSL_CRMF_CERTID_sk_type(sk),ossl_ossl_check_OSSL_CRMF_CERTID_freefunc_type(freefunc))
#define ossl_sk_OSSL_CRMF_CERTID_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_OSSL_CRMF_CERTID_sk_type(sk), ossl_ossl_check_OSSL_CRMF_CERTID_type(ptr), (idx))
#define ossl_sk_OSSL_CRMF_CERTID_set(sk, idx, ptr) ((ossl_OSSL_CRMF_CERTID *)ossl_OPENSSL_sk_set(ossl_ossl_check_OSSL_CRMF_CERTID_sk_type(sk), (idx), ossl_ossl_check_OSSL_CRMF_CERTID_type(ptr)))
#define ossl_sk_OSSL_CRMF_CERTID_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_OSSL_CRMF_CERTID_sk_type(sk), ossl_ossl_check_OSSL_CRMF_CERTID_type(ptr))
#define ossl_sk_OSSL_CRMF_CERTID_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_OSSL_CRMF_CERTID_sk_type(sk), ossl_ossl_check_OSSL_CRMF_CERTID_type(ptr))
#define ossl_sk_OSSL_CRMF_CERTID_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_OSSL_CRMF_CERTID_sk_type(sk), ossl_ossl_check_OSSL_CRMF_CERTID_type(ptr), pnum)
#define ossl_sk_OSSL_CRMF_CERTID_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_OSSL_CRMF_CERTID_sk_type(sk))
#define ossl_sk_OSSL_CRMF_CERTID_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_OSSL_CRMF_CERTID_sk_type(sk))
#define ossl_sk_OSSL_CRMF_CERTID_dup(sk) ((ossl_STACK_OF(ossl_OSSL_CRMF_CERTID) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_OSSL_CRMF_CERTID_sk_type(sk)))
#define ossl_sk_OSSL_CRMF_CERTID_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_OSSL_CRMF_CERTID) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_OSSL_CRMF_CERTID_sk_type(sk), ossl_ossl_check_OSSL_CRMF_CERTID_copyfunc_type(copyfunc), ossl_ossl_check_OSSL_CRMF_CERTID_freefunc_type(freefunc)))
#define ossl_sk_OSSL_CRMF_CERTID_set_cmp_func(sk, cmp) ((ossl_sk_OSSL_CRMF_CERTID_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_OSSL_CRMF_CERTID_sk_type(sk), ossl_ossl_check_OSSL_CRMF_CERTID_compfunc_type(cmp)))


typedef struct ossl_ossl_crmf_pkipublicationinfo_st ossl_OSSL_CRMF_PKIPUBLICATIONINFO;
ossl_DECLARE_ASN1_FUNCTIONS(ossl_OSSL_CRMF_PKIPUBLICATIONINFO)
typedef struct ossl_ossl_crmf_singlepubinfo_st ossl_OSSL_CRMF_SINGLEPUBINFO;
ossl_DECLARE_ASN1_FUNCTIONS(ossl_OSSL_CRMF_SINGLEPUBINFO)
typedef struct ossl_ossl_crmf_certtemplate_st ossl_OSSL_CRMF_CERTTEMPLATE;
ossl_DECLARE_ASN1_FUNCTIONS(ossl_OSSL_CRMF_CERTTEMPLATE)
typedef ossl_STACK_OF(ossl_OSSL_CRMF_MSG) ossl_OSSL_CRMF_MSGS;
ossl_DECLARE_ASN1_FUNCTIONS(ossl_OSSL_CRMF_MSGS)

typedef struct ossl_ossl_crmf_optionalvalidity_st ossl_OSSL_CRMF_OPTIONALVALIDITY;

/* crmf_pbm.c */
ossl_OSSL_CRMF_PBMPARAMETER *ossl_OSSL_CRMF_pbmp_new(ossl_OSSL_LIB_CTX *libctx, size_t slen,
                                           int owfnid, size_t itercnt,
                                           int macnid);
int ossl_OSSL_CRMF_pbm_new(ossl_OSSL_LIB_CTX *libctx, const char *propq,
                      const ossl_OSSL_CRMF_PBMPARAMETER *pbmp,
                      const unsigned char *msg, size_t msglen,
                      const unsigned char *sec, size_t seclen,
                      unsigned char **mac, size_t *maclen);

/* crmf_lib.c */
int ossl_OSSL_CRMF_MSG_set1_regCtrl_regToken(ossl_OSSL_CRMF_MSG *msg,
                                        const ossl_ASN1_UTF8STRING *tok);
ossl_ASN1_UTF8STRING
*ossl_OSSL_CRMF_MSG_get0_regCtrl_regToken(const ossl_OSSL_CRMF_MSG *msg);
int ossl_OSSL_CRMF_MSG_set1_regCtrl_authenticator(ossl_OSSL_CRMF_MSG *msg,
                                             const ossl_ASN1_UTF8STRING *auth);
ossl_ASN1_UTF8STRING
*ossl_OSSL_CRMF_MSG_get0_regCtrl_authenticator(const ossl_OSSL_CRMF_MSG *msg);
int
ossl_OSSL_CRMF_MSG_PKIPublicationInfo_push0_SinglePubInfo(ossl_OSSL_CRMF_PKIPUBLICATIONINFO *pi,
                                                     ossl_OSSL_CRMF_SINGLEPUBINFO *spi);
#  define ossl_OSSL_CRMF_PUB_METHOD_DONTCARE 0
#  define ossl_OSSL_CRMF_PUB_METHOD_X500     1
#  define ossl_OSSL_CRMF_PUB_METHOD_WEB      2
#  define ossl_OSSL_CRMF_PUB_METHOD_LDAP     3
int ossl_OSSL_CRMF_MSG_set0_SinglePubInfo(ossl_OSSL_CRMF_SINGLEPUBINFO *spi,
                                     int method, ossl_GENERAL_NAME *nm);
#  define ossl_OSSL_CRMF_PUB_ACTION_DONTPUBLISH   0
#  define ossl_OSSL_CRMF_PUB_ACTION_PLEASEPUBLISH 1
int ossl_OSSL_CRMF_MSG_set_PKIPublicationInfo_action(ossl_OSSL_CRMF_PKIPUBLICATIONINFO *pi,
                                                int action);
int ossl_OSSL_CRMF_MSG_set1_regCtrl_pkiPublicationInfo(ossl_OSSL_CRMF_MSG *msg,
                                                  const ossl_OSSL_CRMF_PKIPUBLICATIONINFO *pi);
ossl_OSSL_CRMF_PKIPUBLICATIONINFO
*ossl_OSSL_CRMF_MSG_get0_regCtrl_pkiPublicationInfo(const ossl_OSSL_CRMF_MSG *msg);
int ossl_OSSL_CRMF_MSG_set1_regCtrl_protocolEncrKey(ossl_OSSL_CRMF_MSG *msg,
                                               const ossl_X509_PUBKEY *pubkey);
ossl_X509_PUBKEY
*ossl_OSSL_CRMF_MSG_get0_regCtrl_protocolEncrKey(const ossl_OSSL_CRMF_MSG *msg);
int ossl_OSSL_CRMF_MSG_set1_regCtrl_oldCertID(ossl_OSSL_CRMF_MSG *msg,
                                         const ossl_OSSL_CRMF_CERTID *cid);
ossl_OSSL_CRMF_CERTID
*ossl_OSSL_CRMF_MSG_get0_regCtrl_oldCertID(const ossl_OSSL_CRMF_MSG *msg);
ossl_OSSL_CRMF_CERTID *ossl_OSSL_CRMF_CERTID_gen(const ossl_X509_NAME *issuer,
                                       const ossl_ASN1_INTEGER *serial);

int ossl_OSSL_CRMF_MSG_set1_regInfo_utf8Pairs(ossl_OSSL_CRMF_MSG *msg,
                                         const ossl_ASN1_UTF8STRING *utf8pairs);
ossl_ASN1_UTF8STRING
*ossl_OSSL_CRMF_MSG_get0_regInfo_utf8Pairs(const ossl_OSSL_CRMF_MSG *msg);
int ossl_OSSL_CRMF_MSG_set1_regInfo_certReq(ossl_OSSL_CRMF_MSG *msg,
                                       const ossl_OSSL_CRMF_CERTREQUEST *cr);
ossl_OSSL_CRMF_CERTREQUEST
*ossl_OSSL_CRMF_MSG_get0_regInfo_certReq(const ossl_OSSL_CRMF_MSG *msg);

int ossl_OSSL_CRMF_MSG_set0_validity(ossl_OSSL_CRMF_MSG *crm,
                                ossl_ASN1_TIME *notBefore, ossl_ASN1_TIME *notAfter);
int ossl_OSSL_CRMF_MSG_set_certReqId(ossl_OSSL_CRMF_MSG *crm, int rid);
int ossl_OSSL_CRMF_MSG_get_certReqId(const ossl_OSSL_CRMF_MSG *crm);
int ossl_OSSL_CRMF_MSG_set0_extensions(ossl_OSSL_CRMF_MSG *crm, ossl_X509_EXTENSIONS *exts);

int ossl_OSSL_CRMF_MSG_push0_extension(ossl_OSSL_CRMF_MSG *crm, ossl_X509_EXTENSION *ext);
#  define ossl_OSSL_CRMF_POPO_NONE       -1
#  define ossl_OSSL_CRMF_POPO_RAVERIFIED 0
#  define ossl_OSSL_CRMF_POPO_SIGNATURE  1
#  define ossl_OSSL_CRMF_POPO_KEYENC     2
#  define ossl_OSSL_CRMF_POPO_KEYAGREE   3
int ossl_OSSL_CRMF_MSG_create_popo(int meth, ossl_OSSL_CRMF_MSG *crm,
                              ossl_EVP_PKEY *pkey, const ossl_EVP_MD *digest,
                              ossl_OSSL_LIB_CTX *libctx, const char *propq);
int ossl_OSSL_CRMF_MSGS_verify_popo(const ossl_OSSL_CRMF_MSGS *reqs,
                               int rid, int acceptRAVerified,
                               ossl_OSSL_LIB_CTX *libctx, const char *propq);
ossl_OSSL_CRMF_CERTTEMPLATE *ossl_OSSL_CRMF_MSG_get0_tmpl(const ossl_OSSL_CRMF_MSG *crm);
const ossl_ASN1_INTEGER
*ossl_OSSL_CRMF_CERTTEMPLATE_get0_serialNumber(const ossl_OSSL_CRMF_CERTTEMPLATE *tmpl);
const ossl_X509_NAME
*ossl_OSSL_CRMF_CERTTEMPLATE_get0_subject(const ossl_OSSL_CRMF_CERTTEMPLATE *tmpl);
const ossl_X509_NAME
*ossl_OSSL_CRMF_CERTTEMPLATE_get0_issuer(const ossl_OSSL_CRMF_CERTTEMPLATE *tmpl);
ossl_X509_EXTENSIONS
*ossl_OSSL_CRMF_CERTTEMPLATE_get0_extensions(const ossl_OSSL_CRMF_CERTTEMPLATE *tmpl);
const ossl_X509_NAME
*ossl_OSSL_CRMF_CERTID_get0_issuer(const ossl_OSSL_CRMF_CERTID *cid);
const ossl_ASN1_INTEGER
*ossl_OSSL_CRMF_CERTID_get0_serialNumber(const ossl_OSSL_CRMF_CERTID *cid);
int ossl_OSSL_CRMF_CERTTEMPLATE_fill(ossl_OSSL_CRMF_CERTTEMPLATE *tmpl,
                                ossl_EVP_PKEY *pubkey,
                                const ossl_X509_NAME *subject,
                                const ossl_X509_NAME *issuer,
                                const ossl_ASN1_INTEGER *serial);
ossl_X509
*ossl_OSSL_CRMF_ENCRYPTEDVALUE_get1_encCert(const ossl_OSSL_CRMF_ENCRYPTEDVALUE *ecert,
                                       ossl_OSSL_LIB_CTX *libctx, const char *propq,
                                       ossl_EVP_PKEY *pkey);

#  ifdef __cplusplus
}
#  endif
# endif /* !defined(ossl_OPENSSL_NO_CRMF) */
#endif /* !defined(ossl_OPENSSL_CRMF_H) */
