/*
 * WARNING: do not edit!
 * Generated by Makefile from ../../../openssl/source/include/openssl/bio.h.in
 *
 * Copyright 1995-2022 The OpenSSL Project Authors. All Rights Reserved.
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */


#ifndef ossl_OPENSSL_BIO_H
# define ossl_OPENSSL_BIO_H
# pragma once

# include "ossl/openssl/macros.h"
# ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
#  define ossl_HEADER_BIO_H
# endif

# include "ossl/openssl/e_os2.h"

# ifndef ossl_OPENSSL_NO_STDIO
#  include <stdio.h>
# endif
# include <stdarg.h>

# include "ossl/openssl/crypto.h"
# include "ossl/openssl/bioerr.h"
# include "ossl/openssl/core.h"

#ifdef  __cplusplus
extern "C" {
#endif

/* There are the classes of BIOs */
# define ossl_BIO_TYPE_DESCRIPTOR     0x0100 /* socket, fd, connect or accept */
# define ossl_BIO_TYPE_FILTER         0x0200
# define ossl_BIO_TYPE_SOURCE_SINK    0x0400

/* These are the 'types' of BIOs */
# define ossl_BIO_TYPE_NONE             0
# define ossl_BIO_TYPE_MEM            ( 1|ossl_BIO_TYPE_SOURCE_SINK)
# define ossl_BIO_TYPE_FILE           ( 2|ossl_BIO_TYPE_SOURCE_SINK)

# define ossl_BIO_TYPE_FD             ( 4|ossl_BIO_TYPE_SOURCE_SINK|ossl_BIO_TYPE_DESCRIPTOR)
# define ossl_BIO_TYPE_SOCKET         ( 5|ossl_BIO_TYPE_SOURCE_SINK|ossl_BIO_TYPE_DESCRIPTOR)
# define ossl_BIO_TYPE_NULL           ( 6|ossl_BIO_TYPE_SOURCE_SINK)
# define ossl_BIO_TYPE_SSL            ( 7|ossl_BIO_TYPE_FILTER)
# define ossl_BIO_TYPE_MD             ( 8|ossl_BIO_TYPE_FILTER)
# define ossl_BIO_TYPE_BUFFER         ( 9|ossl_BIO_TYPE_FILTER)
# define ossl_BIO_TYPE_CIPHER         (10|ossl_BIO_TYPE_FILTER)
# define ossl_BIO_TYPE_BASE64         (11|ossl_BIO_TYPE_FILTER)
# define ossl_BIO_TYPE_CONNECT        (12|ossl_BIO_TYPE_SOURCE_SINK|ossl_BIO_TYPE_DESCRIPTOR)
# define ossl_BIO_TYPE_ACCEPT         (13|ossl_BIO_TYPE_SOURCE_SINK|ossl_BIO_TYPE_DESCRIPTOR)

# define ossl_BIO_TYPE_NBIO_TEST      (16|ossl_BIO_TYPE_FILTER)/* server proxy ossl_BIO */
# define ossl_BIO_TYPE_NULL_FILTER    (17|ossl_BIO_TYPE_FILTER)
# define ossl_BIO_TYPE_BIO            (19|ossl_BIO_TYPE_SOURCE_SINK)/* half a ossl_BIO pair */
# define ossl_BIO_TYPE_LINEBUFFER     (20|ossl_BIO_TYPE_FILTER)
# define ossl_BIO_TYPE_DGRAM          (21|ossl_BIO_TYPE_SOURCE_SINK|ossl_BIO_TYPE_DESCRIPTOR)
# define ossl_BIO_TYPE_ASN1           (22|ossl_BIO_TYPE_FILTER)
# define ossl_BIO_TYPE_COMP           (23|ossl_BIO_TYPE_FILTER)
# ifndef ossl_OPENSSL_NO_SCTP
#  define BIO_TYPE_DGRAM_SCTP    (24|ossl_BIO_TYPE_SOURCE_SINK|ossl_BIO_TYPE_DESCRIPTOR)
# endif
# define ossl_BIO_TYPE_CORE_TO_PROV   (25|ossl_BIO_TYPE_SOURCE_SINK)

#define ossl_BIO_TYPE_START           128

/*
 * BIO_FILENAME_READ|ossl_BIO_CLOSE to open or close on free.
 * ossl_BIO_set_fp(in,stdin,ossl_BIO_NOCLOSE);
 */
# define ossl_BIO_NOCLOSE             0x00
# define ossl_BIO_CLOSE               0x01

/*
 * These are used in the following macros and are passed to ossl_BIO_ctrl()
 */
# define ossl_BIO_CTRL_RESET          1/* opt - rewind/zero etc */
# define ossl_BIO_CTRL_EOF            2/* opt - are we at the eof */
# define ossl_BIO_CTRL_INFO           3/* opt - extra tit-bits */
# define ossl_BIO_CTRL_SET            4/* man - set the 'IO' type */
# define ossl_BIO_CTRL_GET            5/* man - get the 'IO' type */
# define ossl_BIO_CTRL_PUSH           6/* opt - internal, used to signify change */
# define ossl_BIO_CTRL_POP            7/* opt - internal, used to signify change */
# define ossl_BIO_CTRL_GET_CLOSE      8/* man - set the 'close' on free */
# define ossl_BIO_CTRL_SET_CLOSE      9/* man - set the 'close' on free */
# define ossl_BIO_CTRL_PENDING        10/* opt - is their more data buffered */
# define ossl_BIO_CTRL_FLUSH          11/* opt - 'flush' buffered output */
# define ossl_BIO_CTRL_DUP            12/* man - extra stuff for 'duped' ossl_BIO */
# define ossl_BIO_CTRL_WPENDING       13/* opt - number of bytes still to write */
# define ossl_BIO_CTRL_SET_CALLBACK   14/* opt - set callback function */
# define ossl_BIO_CTRL_GET_CALLBACK   15/* opt - set callback function */

# define ossl_BIO_CTRL_PEEK           29/* ossl_BIO_f_buffer special */
# define ossl_BIO_CTRL_SET_FILENAME   30/* ossl_BIO_s_file special */

/* dgram ossl_BIO stuff */
# define ossl_BIO_CTRL_DGRAM_CONNECT       31/* ossl_BIO dgram special */
# define ossl_BIO_CTRL_DGRAM_SET_CONNECTED 32/* allow for an externally connected
                                         * socket to be passed in */
# define ossl_BIO_CTRL_DGRAM_SET_RECV_TIMEOUT 33/* setsockopt, essentially */
# define ossl_BIO_CTRL_DGRAM_GET_RECV_TIMEOUT 34/* getsockopt, essentially */
# define ossl_BIO_CTRL_DGRAM_SET_SEND_TIMEOUT 35/* setsockopt, essentially */
# define ossl_BIO_CTRL_DGRAM_GET_SEND_TIMEOUT 36/* getsockopt, essentially */

# define ossl_BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP 37/* flag whether the last */
# define ossl_BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP 38/* I/O operation timed out */

/* #ifdef IP_MTU_DISCOVER */
# define ossl_BIO_CTRL_DGRAM_MTU_DISCOVER       39/* set DF bit on egress packets */
/* #endif */

# define ossl_BIO_CTRL_DGRAM_QUERY_MTU          40/* as kernel for current MTU */
# define ossl_BIO_CTRL_DGRAM_GET_FALLBACK_MTU   47
# define ossl_BIO_CTRL_DGRAM_GET_MTU            41/* get cached value for MTU */
# define ossl_BIO_CTRL_DGRAM_SET_MTU            42/* set cached value for MTU.
                                              * want to use this if asking
                                              * the kernel fails */

# define ossl_BIO_CTRL_DGRAM_MTU_EXCEEDED       43/* check whether the MTU was
                                              * exceed in the previous write
                                              * operation */

# define ossl_BIO_CTRL_DGRAM_GET_PEER           46
# define ossl_BIO_CTRL_DGRAM_SET_PEER           44/* Destination for the data */

# define ossl_BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT   45/* Next DTLS handshake timeout
                                              * to adjust socket timeouts */
# define ossl_BIO_CTRL_DGRAM_SET_DONT_FRAG      48

# define ossl_BIO_CTRL_DGRAM_GET_MTU_OVERHEAD   49

/* Deliberately outside of ossl_OPENSSL_NO_SCTP - used in bss_dgram.c */
#  define ossl_BIO_CTRL_DGRAM_SCTP_SET_IN_HANDSHAKE    50
# ifndef ossl_OPENSSL_NO_SCTP
/* SCTP stuff */
#  define BIO_CTRL_DGRAM_SCTP_ADD_AUTH_KEY                51
#  define BIO_CTRL_DGRAM_SCTP_NEXT_AUTH_KEY               52
#  define BIO_CTRL_DGRAM_SCTP_AUTH_CCS_RCVD               53
#  define BIO_CTRL_DGRAM_SCTP_GET_SNDINFO         60
#  define BIO_CTRL_DGRAM_SCTP_SET_SNDINFO         61
#  define BIO_CTRL_DGRAM_SCTP_GET_RCVINFO         62
#  define BIO_CTRL_DGRAM_SCTP_SET_RCVINFO         63
#  define BIO_CTRL_DGRAM_SCTP_GET_PRINFO                  64
#  define BIO_CTRL_DGRAM_SCTP_SET_PRINFO                  65
#  define BIO_CTRL_DGRAM_SCTP_SAVE_SHUTDOWN               70
# endif

# define ossl_BIO_CTRL_DGRAM_SET_PEEK_MODE      71

/*
 * internal ossl_BIO:
 * # define BIO_CTRL_SET_KTLS_SEND                 72
 * # define BIO_CTRL_SET_KTLS_SEND_CTRL_MSG        74
 * # define BIO_CTRL_CLEAR_KTLS_CTRL_MSG           75
 */

# define ossl_BIO_CTRL_GET_KTLS_SEND                 73
# define ossl_BIO_CTRL_GET_KTLS_RECV                 76

# define ossl_BIO_CTRL_DGRAM_SCTP_WAIT_FOR_DRY       77
# define ossl_BIO_CTRL_DGRAM_SCTP_MSG_WAITING        78

/* ossl_BIO_f_prefix controls */
# define ossl_BIO_CTRL_SET_PREFIX                    79
# define ossl_BIO_CTRL_SET_INDENT                    80
# define ossl_BIO_CTRL_GET_INDENT                    81

# ifndef ossl_OPENSSL_NO_KTLS
#  define ossl_BIO_get_ktls_send(b)         \
     (ossl_BIO_ctrl(b, ossl_BIO_CTRL_GET_KTLS_SEND, 0, NULL) > 0)
#  define ossl_BIO_get_ktls_recv(b)         \
     (ossl_BIO_ctrl(b, ossl_BIO_CTRL_GET_KTLS_RECV, 0, NULL) > 0)
# else
#  define ossl_BIO_get_ktls_send(b)  (0)
#  define ossl_BIO_get_ktls_recv(b)  (0)
# endif

/* modifiers */
# define ossl_BIO_FP_READ             0x02
# define ossl_BIO_FP_WRITE            0x04
# define ossl_BIO_FP_APPEND           0x08
# define ossl_BIO_FP_TEXT             0x10

# define ossl_BIO_FLAGS_READ          0x01
# define ossl_BIO_FLAGS_WRITE         0x02
# define ossl_BIO_FLAGS_IO_SPECIAL    0x04
# define ossl_BIO_FLAGS_RWS (ossl_BIO_FLAGS_READ|ossl_BIO_FLAGS_WRITE|ossl_BIO_FLAGS_IO_SPECIAL)
# define ossl_BIO_FLAGS_SHOULD_RETRY  0x08
# ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
/* This #define was replaced by an internal constant and should not be used. */
#  define ossl_BIO_FLAGS_UPLINK       0
# endif

# define ossl_BIO_FLAGS_BASE64_NO_NL  0x100

/*
 * This is used with memory BIOs:
 * ossl_BIO_FLAGS_MEM_RDONLY means we shouldn't free up or change the data in any way;
 * ossl_BIO_FLAGS_NONCLEAR_RST means we shouldn't clear data on reset.
 */
# define ossl_BIO_FLAGS_MEM_RDONLY    0x200
# define ossl_BIO_FLAGS_NONCLEAR_RST  0x400
# define ossl_BIO_FLAGS_IN_EOF        0x800

/* the ossl_BIO FLAGS values 0x1000 to 0x4000 are reserved for internal KTLS flags */

typedef union ossl_bio_addr_st ossl_BIO_ADDR;
typedef struct ossl_bio_addrinfo_st ossl_BIO_ADDRINFO;

int ossl_BIO_get_new_index(void);
void ossl_BIO_set_flags(ossl_BIO *b, int flags);
int ossl_BIO_test_flags(const ossl_BIO *b, int flags);
void ossl_BIO_clear_flags(ossl_BIO *b, int flags);

# define ossl_BIO_get_flags(b) ossl_BIO_test_flags(b, ~(0x0))
# define ossl_BIO_set_retry_special(b) \
                ossl_BIO_set_flags(b, (ossl_BIO_FLAGS_IO_SPECIAL|ossl_BIO_FLAGS_SHOULD_RETRY))
# define ossl_BIO_set_retry_read(b) \
                ossl_BIO_set_flags(b, (ossl_BIO_FLAGS_READ|ossl_BIO_FLAGS_SHOULD_RETRY))
# define ossl_BIO_set_retry_write(b) \
                ossl_BIO_set_flags(b, (ossl_BIO_FLAGS_WRITE|ossl_BIO_FLAGS_SHOULD_RETRY))

/* These are normally used internally in BIOs */
# define ossl_BIO_clear_retry_flags(b) \
                ossl_BIO_clear_flags(b, (ossl_BIO_FLAGS_RWS|ossl_BIO_FLAGS_SHOULD_RETRY))
# define ossl_BIO_get_retry_flags(b) \
                ossl_BIO_test_flags(b, (ossl_BIO_FLAGS_RWS|ossl_BIO_FLAGS_SHOULD_RETRY))

/* These should be used by the application to tell why we should retry */
# define ossl_BIO_should_read(a)              ossl_BIO_test_flags(a, ossl_BIO_FLAGS_READ)
# define ossl_BIO_should_write(a)             ossl_BIO_test_flags(a, ossl_BIO_FLAGS_WRITE)
# define ossl_BIO_should_io_special(a)        ossl_BIO_test_flags(a, ossl_BIO_FLAGS_IO_SPECIAL)
# define ossl_BIO_retry_type(a)               ossl_BIO_test_flags(a, ossl_BIO_FLAGS_RWS)
# define ossl_BIO_should_retry(a)             ossl_BIO_test_flags(a, ossl_BIO_FLAGS_SHOULD_RETRY)

/*
 * The next three are used in conjunction with the ossl_BIO_should_io_special()
 * condition.  After this returns true, ossl_BIO *ossl_BIO_get_retry_BIO(ossl_BIO *bio, int
 * *reason); will walk the ossl_BIO stack and return the 'reason' for the special
 * and the offending ossl_BIO. Given a ossl_BIO, ossl_BIO_get_retry_reason(bio) will return
 * the code.
 */
/*
 * Returned from the ossl_SSL bio when the certificate retrieval code had an error
 */
# define ossl_BIO_RR_SSL_X509_LOOKUP          0x01
/* Returned from the connect ossl_BIO when a connect would have blocked */
# define ossl_BIO_RR_CONNECT                  0x02
/* Returned from the accept ossl_BIO when an accept would have blocked */
# define ossl_BIO_RR_ACCEPT                   0x03

/* These are passed by the ossl_BIO callback */
# define ossl_BIO_CB_FREE     0x01
# define ossl_BIO_CB_READ     0x02
# define ossl_BIO_CB_WRITE    0x03
# define ossl_BIO_CB_PUTS     0x04
# define ossl_BIO_CB_GETS     0x05
# define ossl_BIO_CB_CTRL     0x06

/*
 * The callback is called before and after the underling operation, The
 * ossl_BIO_CB_RETURN flag indicates if it is after the call
 */
# define ossl_BIO_CB_RETURN   0x80
# define ossl_BIO_CB_return(a) ((a)|ossl_BIO_CB_RETURN)
# define ossl_BIO_cb_pre(a)   (!((a)&ossl_BIO_CB_RETURN))
# define ossl_BIO_cb_post(a)  ((a)&ossl_BIO_CB_RETURN)

# ifndef ossl_OPENSSL_NO_DEPRECATED_3_0
typedef long (*ossl_BIO_callback_fn)(ossl_BIO *b, int oper, const char *argp, int argi,
                                long argl, long ret);
ossl_OSSL_DEPRECATEDIN_3_0 ossl_BIO_callback_fn ossl_BIO_get_callback(const ossl_BIO *b);
ossl_OSSL_DEPRECATEDIN_3_0 void ossl_BIO_set_callback(ossl_BIO *b, ossl_BIO_callback_fn callback);
ossl_OSSL_DEPRECATEDIN_3_0 long ossl_BIO_debug_callback(ossl_BIO *bio, int cmd,
                                               const char *argp, int argi,
                                               long argl, long ret);
# endif

typedef long (*ossl_BIO_callback_fn_ex)(ossl_BIO *b, int oper, const char *argp,
                                   size_t len, int argi,
                                   long argl, int ret, size_t *processed);
ossl_BIO_callback_fn_ex ossl_BIO_get_callback_ex(const ossl_BIO *b);
void ossl_BIO_set_callback_ex(ossl_BIO *b, ossl_BIO_callback_fn_ex callback);
long ossl_BIO_debug_callback_ex(ossl_BIO *bio, int oper, const char *argp, size_t len,
                           int argi, long argl, int ret, size_t *processed);

char *ossl_BIO_get_callback_arg(const ossl_BIO *b);
void ossl_BIO_set_callback_arg(ossl_BIO *b, char *arg);

typedef struct ossl_bio_method_st ossl_BIO_METHOD;

const char *ossl_BIO_method_name(const ossl_BIO *b);
int ossl_BIO_method_type(const ossl_BIO *b);

typedef int ossl_BIO_info_cb(ossl_BIO *, int, int);
typedef ossl_BIO_info_cb ossl_bio_info_cb;  /* backward compatibility */

ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_BIO, ossl_BIO, ossl_BIO)
#define ossl_sk_BIO_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_BIO_sk_type(sk))
#define ossl_sk_BIO_value(sk, idx) ((ossl_BIO *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_BIO_sk_type(sk), (idx)))
#define ossl_sk_BIO_new(cmp) ((ossl_STACK_OF(ossl_BIO) *)ossl_OPENSSL_sk_new(ossl_ossl_check_BIO_compfunc_type(cmp)))
#define ossl_sk_BIO_new_null() ((ossl_STACK_OF(ossl_BIO) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_BIO_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_BIO) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_BIO_compfunc_type(cmp), (n)))
#define ossl_sk_BIO_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_BIO_sk_type(sk), (n))
#define ossl_sk_BIO_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_BIO_sk_type(sk))
#define ossl_sk_BIO_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_BIO_sk_type(sk))
#define ossl_sk_BIO_delete(sk, i) ((ossl_BIO *)ossl_OPENSSL_sk_delete(ossl_ossl_check_BIO_sk_type(sk), (i)))
#define ossl_sk_BIO_delete_ptr(sk, ptr) ((ossl_BIO *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_BIO_sk_type(sk), ossl_ossl_check_BIO_type(ptr)))
#define ossl_sk_BIO_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_BIO_sk_type(sk), ossl_ossl_check_BIO_type(ptr))
#define ossl_sk_BIO_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_BIO_sk_type(sk), ossl_ossl_check_BIO_type(ptr))
#define ossl_sk_BIO_pop(sk) ((ossl_BIO *)ossl_OPENSSL_sk_pop(ossl_ossl_check_BIO_sk_type(sk)))
#define ossl_sk_BIO_shift(sk) ((ossl_BIO *)ossl_OPENSSL_sk_shift(ossl_ossl_check_BIO_sk_type(sk)))
#define ossl_sk_BIO_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_BIO_sk_type(sk),ossl_ossl_check_BIO_freefunc_type(freefunc))
#define ossl_sk_BIO_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_BIO_sk_type(sk), ossl_ossl_check_BIO_type(ptr), (idx))
#define ossl_sk_BIO_set(sk, idx, ptr) ((ossl_BIO *)ossl_OPENSSL_sk_set(ossl_ossl_check_BIO_sk_type(sk), (idx), ossl_ossl_check_BIO_type(ptr)))
#define ossl_sk_BIO_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_BIO_sk_type(sk), ossl_ossl_check_BIO_type(ptr))
#define ossl_sk_BIO_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_BIO_sk_type(sk), ossl_ossl_check_BIO_type(ptr))
#define ossl_sk_BIO_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_BIO_sk_type(sk), ossl_ossl_check_BIO_type(ptr), pnum)
#define ossl_sk_BIO_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_BIO_sk_type(sk))
#define ossl_sk_BIO_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_BIO_sk_type(sk))
#define ossl_sk_BIO_dup(sk) ((ossl_STACK_OF(ossl_BIO) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_BIO_sk_type(sk)))
#define ossl_sk_BIO_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_BIO) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_BIO_sk_type(sk), ossl_ossl_check_BIO_copyfunc_type(copyfunc), ossl_ossl_check_BIO_freefunc_type(freefunc)))
#define ossl_sk_BIO_set_cmp_func(sk, cmp) ((ossl_sk_BIO_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_BIO_sk_type(sk), ossl_ossl_check_BIO_compfunc_type(cmp)))



/* Prefix and suffix callback in ASN1 ossl_BIO */
typedef int ossl_asn1_ps_func (ossl_BIO *b, unsigned char **pbuf, int *plen,
                          void *parg);

typedef void (*ossl_BIO_dgram_sctp_notification_handler_fn) (ossl_BIO *b,
                                                        void *context,
                                                        void *buf);
# ifndef ossl_OPENSSL_NO_SCTP
/* SCTP parameter structs */
struct bio_dgram_sctp_sndinfo {
    uint16_t snd_sid;
    uint16_t snd_flags;
    uint32_t snd_ppid;
    uint32_t snd_context;
};

struct bio_dgram_sctp_rcvinfo {
    uint16_t rcv_sid;
    uint16_t rcv_ssn;
    uint16_t rcv_flags;
    uint32_t rcv_ppid;
    uint32_t rcv_tsn;
    uint32_t rcv_cumtsn;
    uint32_t rcv_context;
};

struct bio_dgram_sctp_prinfo {
    uint16_t pr_policy;
    uint32_t pr_value;
};
# endif

/*
 * #define BIO_CONN_get_param_hostname ossl_BIO_ctrl
 */

# define ossl_BIO_C_SET_CONNECT                       100
# define ossl_BIO_C_DO_STATE_MACHINE                  101
# define ossl_BIO_C_SET_NBIO                          102
/* # define BIO_C_SET_PROXY_PARAM                   103 */
# define ossl_BIO_C_SET_FD                            104
# define ossl_BIO_C_GET_FD                            105
# define ossl_BIO_C_SET_FILE_PTR                      106
# define ossl_BIO_C_GET_FILE_PTR                      107
# define ossl_BIO_C_SET_FILENAME                      108
# define ossl_BIO_C_SET_SSL                           109
# define ossl_BIO_C_GET_SSL                           110
# define ossl_BIO_C_SET_MD                            111
# define ossl_BIO_C_GET_MD                            112
# define ossl_BIO_C_GET_CIPHER_STATUS                 113
# define ossl_BIO_C_SET_BUF_MEM                       114
# define ossl_BIO_C_GET_BUF_MEM_PTR                   115
# define ossl_BIO_C_GET_BUFF_NUM_LINES                116
# define ossl_BIO_C_SET_BUFF_SIZE                     117
# define ossl_BIO_C_SET_ACCEPT                        118
# define ossl_BIO_C_SSL_MODE                          119
# define ossl_BIO_C_GET_MD_CTX                        120
/* # define BIO_C_GET_PROXY_PARAM                   121 */
# define ossl_BIO_C_SET_BUFF_READ_DATA                122/* data to read first */
# define ossl_BIO_C_GET_CONNECT                       123
# define ossl_BIO_C_GET_ACCEPT                        124
# define ossl_BIO_C_SET_SSL_RENEGOTIATE_BYTES         125
# define ossl_BIO_C_GET_SSL_NUM_RENEGOTIATES          126
# define ossl_BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT       127
# define ossl_BIO_C_FILE_SEEK                         128
# define ossl_BIO_C_GET_CIPHER_CTX                    129
# define ossl_BIO_C_SET_BUF_MEM_EOF_RETURN            130/* return end of input
                                                     * value */
# define ossl_BIO_C_SET_BIND_MODE                     131
# define ossl_BIO_C_GET_BIND_MODE                     132
# define ossl_BIO_C_FILE_TELL                         133
# define ossl_BIO_C_GET_SOCKS                         134
# define ossl_BIO_C_SET_SOCKS                         135

# define ossl_BIO_C_SET_WRITE_BUF_SIZE                136/* for ossl_BIO_s_bio */
# define ossl_BIO_C_GET_WRITE_BUF_SIZE                137
# define ossl_BIO_C_MAKE_BIO_PAIR                     138
# define ossl_BIO_C_DESTROY_BIO_PAIR                  139
# define ossl_BIO_C_GET_WRITE_GUARANTEE               140
# define ossl_BIO_C_GET_READ_REQUEST                  141
# define ossl_BIO_C_SHUTDOWN_WR                       142
# define ossl_BIO_C_NREAD0                            143
# define ossl_BIO_C_NREAD                             144
# define ossl_BIO_C_NWRITE0                           145
# define ossl_BIO_C_NWRITE                            146
# define ossl_BIO_C_RESET_READ_REQUEST                147
# define ossl_BIO_C_SET_MD_CTX                        148

# define ossl_BIO_C_SET_PREFIX                        149
# define ossl_BIO_C_GET_PREFIX                        150
# define ossl_BIO_C_SET_SUFFIX                        151
# define ossl_BIO_C_GET_SUFFIX                        152

# define ossl_BIO_C_SET_EX_ARG                        153
# define ossl_BIO_C_GET_EX_ARG                        154

# define ossl_BIO_C_SET_CONNECT_MODE                  155

# define ossl_BIO_set_app_data(s,arg)         ossl_BIO_set_ex_data(s,0,arg)
# define ossl_BIO_get_app_data(s)             ossl_BIO_get_ex_data(s,0)

# define ossl_BIO_set_nbio(b,n)             ossl_BIO_ctrl(b,ossl_BIO_C_SET_NBIO,(n),NULL)

# ifndef ossl_OPENSSL_NO_SOCK
/* IP families we support, for ossl_BIO_s_connect() and ossl_BIO_s_accept() */
/* Note: the underlying operating system may not support some of them */
#  define ossl_BIO_FAMILY_IPV4                         4
#  define ossl_BIO_FAMILY_IPV6                         6
#  define ossl_BIO_FAMILY_IPANY                        256

/* ossl_BIO_s_connect() */
#  define ossl_BIO_set_conn_hostname(b,name) ossl_BIO_ctrl(b,ossl_BIO_C_SET_CONNECT,0, \
                                                 (char *)(name))
#  define ossl_BIO_set_conn_port(b,port)     ossl_BIO_ctrl(b,ossl_BIO_C_SET_CONNECT,1, \
                                                 (char *)(port))
#  define ossl_BIO_set_conn_address(b,addr)  ossl_BIO_ctrl(b,ossl_BIO_C_SET_CONNECT,2, \
                                                 (char *)(addr))
#  define ossl_BIO_set_conn_ip_family(b,f)   ossl_BIO_int_ctrl(b,ossl_BIO_C_SET_CONNECT,3,f)
#  define ossl_BIO_get_conn_hostname(b)      ((const char *)ossl_BIO_ptr_ctrl(b,ossl_BIO_C_GET_CONNECT,0))
#  define ossl_BIO_get_conn_port(b)          ((const char *)ossl_BIO_ptr_ctrl(b,ossl_BIO_C_GET_CONNECT,1))
#  define ossl_BIO_get_conn_address(b)       ((const ossl_BIO_ADDR *)ossl_BIO_ptr_ctrl(b,ossl_BIO_C_GET_CONNECT,2))
#  define ossl_BIO_get_conn_ip_family(b)     ossl_BIO_ctrl(b,ossl_BIO_C_GET_CONNECT,3,NULL)
#  define ossl_BIO_set_conn_mode(b,n)        ossl_BIO_ctrl(b,ossl_BIO_C_SET_CONNECT_MODE,(n),NULL)

/* ossl_BIO_s_accept() */
#  define ossl_BIO_set_accept_name(b,name)   ossl_BIO_ctrl(b,ossl_BIO_C_SET_ACCEPT,0, \
                                                 (char *)(name))
#  define ossl_BIO_set_accept_port(b,port)   ossl_BIO_ctrl(b,ossl_BIO_C_SET_ACCEPT,1, \
                                                 (char *)(port))
#  define ossl_BIO_get_accept_name(b)        ((const char *)ossl_BIO_ptr_ctrl(b,ossl_BIO_C_GET_ACCEPT,0))
#  define ossl_BIO_get_accept_port(b)        ((const char *)ossl_BIO_ptr_ctrl(b,ossl_BIO_C_GET_ACCEPT,1))
#  define ossl_BIO_get_peer_name(b)          ((const char *)ossl_BIO_ptr_ctrl(b,ossl_BIO_C_GET_ACCEPT,2))
#  define ossl_BIO_get_peer_port(b)          ((const char *)ossl_BIO_ptr_ctrl(b,ossl_BIO_C_GET_ACCEPT,3))
/* #define ossl_BIO_set_nbio(b,n)    ossl_BIO_ctrl(b,ossl_BIO_C_SET_NBIO,(n),NULL) */
#  define ossl_BIO_set_nbio_accept(b,n)      ossl_BIO_ctrl(b,ossl_BIO_C_SET_ACCEPT,2,(n)?(void *)"a":NULL)
#  define ossl_BIO_set_accept_bios(b,bio)    ossl_BIO_ctrl(b,ossl_BIO_C_SET_ACCEPT,3, \
                                                 (char *)(bio))
#  define ossl_BIO_set_accept_ip_family(b,f) ossl_BIO_int_ctrl(b,ossl_BIO_C_SET_ACCEPT,4,f)
#  define ossl_BIO_get_accept_ip_family(b)   ossl_BIO_ctrl(b,ossl_BIO_C_GET_ACCEPT,4,NULL)

/* Aliases kept for backward compatibility */
#  define ossl_BIO_BIND_NORMAL                 0
#  define ossl_BIO_BIND_REUSEADDR              ossl_BIO_SOCK_REUSEADDR
#  define ossl_BIO_BIND_REUSEADDR_IF_UNUSED    ossl_BIO_SOCK_REUSEADDR
#  define ossl_BIO_set_bind_mode(b,mode) ossl_BIO_ctrl(b,ossl_BIO_C_SET_BIND_MODE,mode,NULL)
#  define ossl_BIO_get_bind_mode(b)    ossl_BIO_ctrl(b,ossl_BIO_C_GET_BIND_MODE,0,NULL)
# endif /* ossl_OPENSSL_NO_SOCK */

# define ossl_BIO_do_connect(b)       ossl_BIO_do_handshake(b)
# define ossl_BIO_do_accept(b)        ossl_BIO_do_handshake(b)

# define ossl_BIO_do_handshake(b)     ossl_BIO_ctrl(b,ossl_BIO_C_DO_STATE_MACHINE,0,NULL)

/* ossl_BIO_s_datagram(), ossl_BIO_s_fd(), ossl_BIO_s_socket(), ossl_BIO_s_accept() and ossl_BIO_s_connect() */
# define ossl_BIO_set_fd(b,fd,c)      ossl_BIO_int_ctrl(b,ossl_BIO_C_SET_FD,c,fd)
# define ossl_BIO_get_fd(b,c)         ossl_BIO_ctrl(b,ossl_BIO_C_GET_FD,0,(char *)(c))

/* ossl_BIO_s_file() */
# define ossl_BIO_set_fp(b,fp,c)      ossl_BIO_ctrl(b,ossl_BIO_C_SET_FILE_PTR,c,(char *)(fp))
# define ossl_BIO_get_fp(b,fpp)       ossl_BIO_ctrl(b,ossl_BIO_C_GET_FILE_PTR,0,(char *)(fpp))

/* ossl_BIO_s_fd() and ossl_BIO_s_file() */
# define ossl_BIO_seek(b,ofs) (int)ossl_BIO_ctrl(b,ossl_BIO_C_FILE_SEEK,ofs,NULL)
# define ossl_BIO_tell(b)     (int)ossl_BIO_ctrl(b,ossl_BIO_C_FILE_TELL,0,NULL)

/*
 * name is cast to lose const, but might be better to route through a
 * function so we can do it safely
 */
# ifdef CONST_STRICT
/*
 * If you are wondering why this isn't defined, its because CONST_STRICT is
 * purely a compile-time kludge to allow const to be checked.
 */
int ossl_BIO_read_filename(ossl_BIO *b, const char *name);
# else
#  define ossl_BIO_read_filename(b,name) (int)ossl_BIO_ctrl(b,ossl_BIO_C_SET_FILENAME, \
                ossl_BIO_CLOSE|ossl_BIO_FP_READ,(char *)(name))
# endif
# define ossl_BIO_write_filename(b,name) (int)ossl_BIO_ctrl(b,ossl_BIO_C_SET_FILENAME, \
                ossl_BIO_CLOSE|ossl_BIO_FP_WRITE,name)
# define ossl_BIO_append_filename(b,name) (int)ossl_BIO_ctrl(b,ossl_BIO_C_SET_FILENAME, \
                ossl_BIO_CLOSE|ossl_BIO_FP_APPEND,name)
# define ossl_BIO_rw_filename(b,name) (int)ossl_BIO_ctrl(b,ossl_BIO_C_SET_FILENAME, \
                ossl_BIO_CLOSE|ossl_BIO_FP_READ|ossl_BIO_FP_WRITE,name)

/*
 * WARNING WARNING, this ups the reference count on the read bio of the ossl_SSL
 * structure.  This is because the ssl read ossl_BIO is now pointed to by the
 * next_bio field in the bio.  So when you free the ossl_BIO, make sure you are
 * doing a ossl_BIO_free_all() to catch the underlying ossl_BIO.
 */
# define ossl_BIO_set_ssl(b,ssl,c)    ossl_BIO_ctrl(b,ossl_BIO_C_SET_SSL,c,(char *)(ssl))
# define ossl_BIO_get_ssl(b,sslp)     ossl_BIO_ctrl(b,ossl_BIO_C_GET_SSL,0,(char *)(sslp))
# define ossl_BIO_set_ssl_mode(b,client)      ossl_BIO_ctrl(b,ossl_BIO_C_SSL_MODE,client,NULL)
# define ossl_BIO_set_ssl_renegotiate_bytes(b,num) \
        ossl_BIO_ctrl(b,ossl_BIO_C_SET_SSL_RENEGOTIATE_BYTES,num,NULL)
# define ossl_BIO_get_num_renegotiates(b) \
        ossl_BIO_ctrl(b,ossl_BIO_C_GET_SSL_NUM_RENEGOTIATES,0,NULL)
# define ossl_BIO_set_ssl_renegotiate_timeout(b,seconds) \
        ossl_BIO_ctrl(b,ossl_BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT,seconds,NULL)

/* defined in evp.h */
/* #define ossl_BIO_set_md(b,md)     ossl_BIO_ctrl(b,ossl_BIO_C_SET_MD,1,(char *)(md)) */

# define ossl_BIO_get_mem_data(b,pp)  ossl_BIO_ctrl(b,ossl_BIO_CTRL_INFO,0,(char *)(pp))
# define ossl_BIO_set_mem_buf(b,bm,c) ossl_BIO_ctrl(b,ossl_BIO_C_SET_BUF_MEM,c,(char *)(bm))
# define ossl_BIO_get_mem_ptr(b,pp)   ossl_BIO_ctrl(b,ossl_BIO_C_GET_BUF_MEM_PTR,0, \
                                          (char *)(pp))
# define ossl_BIO_set_mem_eof_return(b,v) \
                                ossl_BIO_ctrl(b,ossl_BIO_C_SET_BUF_MEM_EOF_RETURN,v,NULL)

/* For the ossl_BIO_f_buffer() type */
# define ossl_BIO_get_buffer_num_lines(b)     ossl_BIO_ctrl(b,ossl_BIO_C_GET_BUFF_NUM_LINES,0,NULL)
# define ossl_BIO_set_buffer_size(b,size)     ossl_BIO_ctrl(b,ossl_BIO_C_SET_BUFF_SIZE,size,NULL)
# define ossl_BIO_set_read_buffer_size(b,size) ossl_BIO_int_ctrl(b,ossl_BIO_C_SET_BUFF_SIZE,size,0)
# define ossl_BIO_set_write_buffer_size(b,size) ossl_BIO_int_ctrl(b,ossl_BIO_C_SET_BUFF_SIZE,size,1)
# define ossl_BIO_set_buffer_read_data(b,buf,num) ossl_BIO_ctrl(b,ossl_BIO_C_SET_BUFF_READ_DATA,num,buf)

/* Don't use the next one unless you know what you are doing :-) */
# define ossl_BIO_dup_state(b,ret)    ossl_BIO_ctrl(b,ossl_BIO_CTRL_DUP,0,(char *)(ret))

# define ossl_BIO_reset(b)            (int)ossl_BIO_ctrl(b,ossl_BIO_CTRL_RESET,0,NULL)
# define ossl_BIO_eof(b)              (int)ossl_BIO_ctrl(b,ossl_BIO_CTRL_EOF,0,NULL)
# define ossl_BIO_set_close(b,c)      (int)ossl_BIO_ctrl(b,ossl_BIO_CTRL_SET_CLOSE,(c),NULL)
# define ossl_BIO_get_close(b)        (int)ossl_BIO_ctrl(b,ossl_BIO_CTRL_GET_CLOSE,0,NULL)
# define ossl_BIO_pending(b)          (int)ossl_BIO_ctrl(b,ossl_BIO_CTRL_PENDING,0,NULL)
# define ossl_BIO_wpending(b)         (int)ossl_BIO_ctrl(b,ossl_BIO_CTRL_WPENDING,0,NULL)
/* ...pending macros have inappropriate return type */
size_t ossl_BIO_ctrl_pending(ossl_BIO *b);
size_t ossl_BIO_ctrl_wpending(ossl_BIO *b);
# define ossl_BIO_flush(b)            (int)ossl_BIO_ctrl(b,ossl_BIO_CTRL_FLUSH,0,NULL)
# define ossl_BIO_get_info_callback(b,cbp) (int)ossl_BIO_ctrl(b,ossl_BIO_CTRL_GET_CALLBACK,0, \
                                                   cbp)
# define ossl_BIO_set_info_callback(b,cb) (int)ossl_BIO_callback_ctrl(b,ossl_BIO_CTRL_SET_CALLBACK,cb)

/* For the ossl_BIO_f_buffer() type */
# define ossl_BIO_buffer_get_num_lines(b) ossl_BIO_ctrl(b,ossl_BIO_CTRL_GET,0,NULL)
# define ossl_BIO_buffer_peek(b,s,l) ossl_BIO_ctrl(b,ossl_BIO_CTRL_PEEK,(l),(s))

/* For ossl_BIO_s_bio() */
# define ossl_BIO_set_write_buf_size(b,size) (int)ossl_BIO_ctrl(b,ossl_BIO_C_SET_WRITE_BUF_SIZE,size,NULL)
# define ossl_BIO_get_write_buf_size(b,size) (size_t)ossl_BIO_ctrl(b,ossl_BIO_C_GET_WRITE_BUF_SIZE,size,NULL)
# define ossl_BIO_make_bio_pair(b1,b2)   (int)ossl_BIO_ctrl(b1,ossl_BIO_C_MAKE_BIO_PAIR,0,b2)
# define ossl_BIO_destroy_bio_pair(b)    (int)ossl_BIO_ctrl(b,ossl_BIO_C_DESTROY_BIO_PAIR,0,NULL)
# define ossl_BIO_shutdown_wr(b) (int)ossl_BIO_ctrl(b, ossl_BIO_C_SHUTDOWN_WR, 0, NULL)
/* macros with inappropriate type -- but ...pending macros use int too: */
# define ossl_BIO_get_write_guarantee(b) (int)ossl_BIO_ctrl(b,ossl_BIO_C_GET_WRITE_GUARANTEE,0,NULL)
# define ossl_BIO_get_read_request(b)    (int)ossl_BIO_ctrl(b,ossl_BIO_C_GET_READ_REQUEST,0,NULL)
size_t ossl_BIO_ctrl_get_write_guarantee(ossl_BIO *b);
size_t ossl_BIO_ctrl_get_read_request(ossl_BIO *b);
int ossl_BIO_ctrl_reset_read_request(ossl_BIO *b);

/* ctrl macros for dgram */
# define ossl_BIO_ctrl_dgram_connect(b,peer)  \
                     (int)ossl_BIO_ctrl(b,ossl_BIO_CTRL_DGRAM_CONNECT,0, (char *)(peer))
# define ossl_BIO_ctrl_set_connected(b,peer) \
         (int)ossl_BIO_ctrl(b, ossl_BIO_CTRL_DGRAM_SET_CONNECTED, 0, (char *)(peer))
# define ossl_BIO_dgram_recv_timedout(b) \
         (int)ossl_BIO_ctrl(b, ossl_BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP, 0, NULL)
# define ossl_BIO_dgram_send_timedout(b) \
         (int)ossl_BIO_ctrl(b, ossl_BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP, 0, NULL)
# define ossl_BIO_dgram_get_peer(b,peer) \
         (int)ossl_BIO_ctrl(b, ossl_BIO_CTRL_DGRAM_GET_PEER, 0, (char *)(peer))
# define ossl_BIO_dgram_set_peer(b,peer) \
         (int)ossl_BIO_ctrl(b, ossl_BIO_CTRL_DGRAM_SET_PEER, 0, (char *)(peer))
# define ossl_BIO_dgram_get_mtu_overhead(b) \
         (unsigned int)ossl_BIO_ctrl((b), ossl_BIO_CTRL_DGRAM_GET_MTU_OVERHEAD, 0, NULL)

/* ctrl macros for ossl_BIO_f_prefix */
# define ossl_BIO_set_prefix(b,p) ossl_BIO_ctrl((b), ossl_BIO_CTRL_SET_PREFIX, 0, (void *)(p))
# define ossl_BIO_set_indent(b,i) ossl_BIO_ctrl((b), ossl_BIO_CTRL_SET_INDENT, (i), NULL)
# define ossl_BIO_get_indent(b) ossl_BIO_ctrl((b), ossl_BIO_CTRL_GET_INDENT, 0, NULL)

#define ossl_BIO_get_ex_new_index(l, p, newf, dupf, freef) \
    ossl_CRYPTO_get_ex_new_index(ossl_CRYPTO_EX_INDEX_BIO, l, p, newf, dupf, freef)
int ossl_BIO_set_ex_data(ossl_BIO *bio, int idx, void *data);
void *ossl_BIO_get_ex_data(const ossl_BIO *bio, int idx);
uint64_t ossl_BIO_number_read(ossl_BIO *bio);
uint64_t ossl_BIO_number_written(ossl_BIO *bio);

/* For ossl_BIO_f_asn1() */
int ossl_BIO_asn1_set_prefix(ossl_BIO *b, ossl_asn1_ps_func *prefix,
                        ossl_asn1_ps_func *prefix_free);
int ossl_BIO_asn1_get_prefix(ossl_BIO *b, ossl_asn1_ps_func **pprefix,
                        ossl_asn1_ps_func **pprefix_free);
int ossl_BIO_asn1_set_suffix(ossl_BIO *b, ossl_asn1_ps_func *suffix,
                        ossl_asn1_ps_func *suffix_free);
int ossl_BIO_asn1_get_suffix(ossl_BIO *b, ossl_asn1_ps_func **psuffix,
                        ossl_asn1_ps_func **psuffix_free);

const ossl_BIO_METHOD *ossl_BIO_s_file(void);
ossl_BIO *ossl_BIO_new_file(const char *filename, const char *mode);
ossl_BIO *ossl_BIO_new_from_core_bio(ossl_OSSL_LIB_CTX *libctx, ossl_OSSL_CORE_BIO *corebio);
# ifndef ossl_OPENSSL_NO_STDIO
ossl_BIO *ossl_BIO_new_fp(FILE *stream, int close_flag);
# endif
ossl_BIO *ossl_BIO_new_ex(ossl_OSSL_LIB_CTX *libctx, const ossl_BIO_METHOD *method);
ossl_BIO *ossl_BIO_new(const ossl_BIO_METHOD *type);
int ossl_BIO_free(ossl_BIO *a);
void ossl_BIO_set_data(ossl_BIO *a, void *ptr);
void *ossl_BIO_get_data(ossl_BIO *a);
void ossl_BIO_set_init(ossl_BIO *a, int init);
int ossl_BIO_get_init(ossl_BIO *a);
void ossl_BIO_set_shutdown(ossl_BIO *a, int shut);
int ossl_BIO_get_shutdown(ossl_BIO *a);
void ossl_BIO_vfree(ossl_BIO *a);
int ossl_BIO_up_ref(ossl_BIO *a);
int ossl_BIO_read(ossl_BIO *b, void *data, int dlen);
int ossl_BIO_read_ex(ossl_BIO *b, void *data, size_t dlen, size_t *readbytes);
int ossl_BIO_gets(ossl_BIO *bp, char *buf, int size);
int ossl_BIO_get_line(ossl_BIO *bio, char *buf, int size);
int ossl_BIO_write(ossl_BIO *b, const void *data, int dlen);
int ossl_BIO_write_ex(ossl_BIO *b, const void *data, size_t dlen, size_t *written);
int ossl_BIO_puts(ossl_BIO *bp, const char *buf);
int ossl_BIO_indent(ossl_BIO *b, int indent, int max);
long ossl_BIO_ctrl(ossl_BIO *bp, int cmd, long larg, void *parg);
long ossl_BIO_callback_ctrl(ossl_BIO *b, int cmd, ossl_BIO_info_cb *fp);
void *ossl_BIO_ptr_ctrl(ossl_BIO *bp, int cmd, long larg);
long ossl_BIO_int_ctrl(ossl_BIO *bp, int cmd, long larg, int iarg);
ossl_BIO *ossl_BIO_push(ossl_BIO *b, ossl_BIO *append);
ossl_BIO *ossl_BIO_pop(ossl_BIO *b);
void ossl_BIO_free_all(ossl_BIO *a);
ossl_BIO *ossl_BIO_find_type(ossl_BIO *b, int bio_type);
ossl_BIO *ossl_BIO_next(ossl_BIO *b);
void ossl_BIO_set_next(ossl_BIO *b, ossl_BIO *next);
ossl_BIO *ossl_BIO_get_retry_BIO(ossl_BIO *bio, int *reason);
int ossl_BIO_get_retry_reason(ossl_BIO *bio);
void ossl_BIO_set_retry_reason(ossl_BIO *bio, int reason);
ossl_BIO *ossl_BIO_dup_chain(ossl_BIO *in);

int ossl_BIO_nread0(ossl_BIO *bio, char **buf);
int ossl_BIO_nread(ossl_BIO *bio, char **buf, int num);
int ossl_BIO_nwrite0(ossl_BIO *bio, char **buf);
int ossl_BIO_nwrite(ossl_BIO *bio, char **buf, int num);

const ossl_BIO_METHOD *ossl_BIO_s_mem(void);
const ossl_BIO_METHOD *ossl_BIO_s_secmem(void);
ossl_BIO *ossl_BIO_new_mem_buf(const void *buf, int len);
# ifndef ossl_OPENSSL_NO_SOCK
const ossl_BIO_METHOD *ossl_BIO_s_socket(void);
const ossl_BIO_METHOD *ossl_BIO_s_connect(void);
const ossl_BIO_METHOD *ossl_BIO_s_accept(void);
# endif
const ossl_BIO_METHOD *ossl_BIO_s_fd(void);
const ossl_BIO_METHOD *ossl_BIO_s_log(void);
const ossl_BIO_METHOD *ossl_BIO_s_bio(void);
const ossl_BIO_METHOD *ossl_BIO_s_null(void);
const ossl_BIO_METHOD *ossl_BIO_f_null(void);
const ossl_BIO_METHOD *ossl_BIO_f_buffer(void);
const ossl_BIO_METHOD *ossl_BIO_f_readbuffer(void);
const ossl_BIO_METHOD *ossl_BIO_f_linebuffer(void);
const ossl_BIO_METHOD *ossl_BIO_f_nbio_test(void);
const ossl_BIO_METHOD *ossl_BIO_f_prefix(void);
const ossl_BIO_METHOD *ossl_BIO_s_core(void);
# ifndef ossl_OPENSSL_NO_DGRAM
const ossl_BIO_METHOD *ossl_BIO_s_datagram(void);
int ossl_BIO_dgram_non_fatal_error(int error);
ossl_BIO *ossl_BIO_new_dgram(int fd, int close_flag);
#  ifndef ossl_OPENSSL_NO_SCTP
const ossl_BIO_METHOD *BIO_s_datagram_sctp(void);
ossl_BIO *BIO_new_dgram_sctp(int fd, int close_flag);
int BIO_dgram_is_sctp(ossl_BIO *bio);
int BIO_dgram_sctp_notification_cb(ossl_BIO *b,
                ossl_BIO_dgram_sctp_notification_handler_fn handle_notifications,
                void *context);
int BIO_dgram_sctp_wait_for_dry(ossl_BIO *b);
int BIO_dgram_sctp_msg_waiting(ossl_BIO *b);
#  endif
# endif

# ifndef ossl_OPENSSL_NO_SOCK
int ossl_BIO_sock_should_retry(int i);
int ossl_BIO_sock_non_fatal_error(int error);
int ossl_BIO_socket_wait(int fd, int for_read, time_t max_time);
# endif
int ossl_BIO_wait(ossl_BIO *bio, time_t max_time, unsigned int nap_milliseconds);
int ossl_BIO_do_connect_retry(ossl_BIO *bio, int timeout, int nap_milliseconds);

int ossl_BIO_fd_should_retry(int i);
int ossl_BIO_fd_non_fatal_error(int error);
int ossl_BIO_dump_cb(int (*cb) (const void *data, size_t len, void *u),
                void *u, const void *s, int len);
int ossl_BIO_dump_indent_cb(int (*cb) (const void *data, size_t len, void *u),
                       void *u, const void *s, int len, int indent);
int ossl_BIO_dump(ossl_BIO *b, const void *bytes, int len);
int ossl_BIO_dump_indent(ossl_BIO *b, const void *bytes, int len, int indent);
# ifndef ossl_OPENSSL_NO_STDIO
int ossl_BIO_dump_fp(FILE *fp, const void *s, int len);
int ossl_BIO_dump_indent_fp(FILE *fp, const void *s, int len, int indent);
# endif
int ossl_BIO_hex_string(ossl_BIO *out, int indent, int width, const void *data,
                   int datalen);

# ifndef ossl_OPENSSL_NO_SOCK
ossl_BIO_ADDR *ossl_BIO_ADDR_new(void);
int ossl_BIO_ADDR_rawmake(ossl_BIO_ADDR *ap, int family,
                     const void *where, size_t wherelen, unsigned short port);
void ossl_BIO_ADDR_free(ossl_BIO_ADDR *);
void ossl_BIO_ADDR_clear(ossl_BIO_ADDR *ap);
int ossl_BIO_ADDR_family(const ossl_BIO_ADDR *ap);
int ossl_BIO_ADDR_rawaddress(const ossl_BIO_ADDR *ap, void *p, size_t *l);
unsigned short ossl_BIO_ADDR_rawport(const ossl_BIO_ADDR *ap);
char *ossl_BIO_ADDR_hostname_string(const ossl_BIO_ADDR *ap, int numeric);
char *ossl_BIO_ADDR_service_string(const ossl_BIO_ADDR *ap, int numeric);
char *ossl_BIO_ADDR_path_string(const ossl_BIO_ADDR *ap);

const ossl_BIO_ADDRINFO *ossl_BIO_ADDRINFO_next(const ossl_BIO_ADDRINFO *bai);
int ossl_BIO_ADDRINFO_family(const ossl_BIO_ADDRINFO *bai);
int ossl_BIO_ADDRINFO_socktype(const ossl_BIO_ADDRINFO *bai);
int ossl_BIO_ADDRINFO_protocol(const ossl_BIO_ADDRINFO *bai);
const ossl_BIO_ADDR *ossl_BIO_ADDRINFO_address(const ossl_BIO_ADDRINFO *bai);
void ossl_BIO_ADDRINFO_free(ossl_BIO_ADDRINFO *bai);

enum ossl_BIO_hostserv_priorities {
    ossl_BIO_PARSE_PRIO_HOST, ossl_BIO_PARSE_PRIO_SERV
};
int ossl_BIO_parse_hostserv(const char *hostserv, char **host, char **service,
                       enum ossl_BIO_hostserv_priorities hostserv_prio);
enum ossl_BIO_lookup_type {
    ossl_BIO_LOOKUP_CLIENT, ossl_BIO_LOOKUP_SERVER
};
int ossl_BIO_lookup(const char *host, const char *service,
               enum ossl_BIO_lookup_type lookup_type,
               int family, int socktype, ossl_BIO_ADDRINFO **res);
int ossl_BIO_lookup_ex(const char *host, const char *service,
                  int lookup_type, int family, int socktype, int protocol,
                  ossl_BIO_ADDRINFO **res);
int ossl_BIO_sock_error(int sock);
int ossl_BIO_socket_ioctl(int fd, long type, void *arg);
int ossl_BIO_socket_nbio(int fd, int mode);
int ossl_BIO_sock_init(void);
# ifndef ossl_OPENSSL_NO_DEPRECATED_1_1_0
#  define ossl_BIO_sock_cleanup() while(0) continue
# endif
int ossl_BIO_set_tcp_ndelay(int sock, int turn_on);
# ifndef ossl_OPENSSL_NO_DEPRECATED_1_1_0
ossl_OSSL_DEPRECATEDIN_1_1_0 struct ossl_hostent *ossl_BIO_gethostbyname(const char *name);
ossl_OSSL_DEPRECATEDIN_1_1_0 int ossl_BIO_get_port(const char *str, unsigned short *port_ptr);
ossl_OSSL_DEPRECATEDIN_1_1_0 int ossl_BIO_get_host_ip(const char *str, unsigned char *ip);
ossl_OSSL_DEPRECATEDIN_1_1_0 int ossl_BIO_get_accept_socket(char *host_port, int mode);
ossl_OSSL_DEPRECATEDIN_1_1_0 int ossl_BIO_accept(int sock, char **ip_port);
# endif

union ossl_BIO_sock_info_u {
    ossl_BIO_ADDR *addr;
};
enum ossl_BIO_sock_info_type {
    ossl_BIO_SOCK_INFO_ADDRESS
};
int ossl_BIO_sock_info(int sock,
                  enum ossl_BIO_sock_info_type type, union ossl_BIO_sock_info_u *info);

#  define ossl_BIO_SOCK_REUSEADDR    0x01
#  define ossl_BIO_SOCK_V6_ONLY      0x02
#  define ossl_BIO_SOCK_KEEPALIVE    0x04
#  define ossl_BIO_SOCK_NONBLOCK     0x08
#  define ossl_BIO_SOCK_NODELAY      0x10

int ossl_BIO_socket(int domain, int socktype, int protocol, int options);
int ossl_BIO_connect(int sock, const ossl_BIO_ADDR *addr, int options);
int ossl_BIO_bind(int sock, const ossl_BIO_ADDR *addr, int options);
int ossl_BIO_listen(int sock, const ossl_BIO_ADDR *addr, int options);
int ossl_BIO_accept_ex(int accept_sock, ossl_BIO_ADDR *addr, int options);
int ossl_BIO_closesocket(int sock);

ossl_BIO *ossl_BIO_new_socket(int sock, int close_flag);
ossl_BIO *ossl_BIO_new_connect(const char *host_port);
ossl_BIO *ossl_BIO_new_accept(const char *host_port);
# endif /* ossl_OPENSSL_NO_SOCK*/

ossl_BIO *ossl_BIO_new_fd(int fd, int close_flag);

int ossl_BIO_new_bio_pair(ossl_BIO **bio1, size_t writebuf1,
                     ossl_BIO **bio2, size_t writebuf2);
/*
 * If successful, returns 1 and in *bio1, *bio2 two ossl_BIO pair endpoints.
 * Otherwise returns 0 and sets *bio1 and *bio2 to NULL. Size 0 uses default
 * value.
 */

void ossl_BIO_copy_next_retry(ossl_BIO *b);

/*
 * long BIO_ghbn_ctrl(int cmd,int iarg,char *parg);
 */

# define ossl_ossl_bio__attr__(x)
# if defined(__GNUC__) && defined(__STDC_VERSION__) \
    && !defined(__MINGW32__) && !defined(__MINGW64__) \
    && !defined(__APPLE__)
    /*
     * Because we support the 'z' modifier, which made its appearance in C99,
     * we can't use __attribute__ with pre C99 dialects.
     */
#  if __STDC_VERSION__ >= 199901L
#   undef ossl_ossl_bio__attr__
#   define ossl_ossl_bio__attr__ __attribute__
#   if __GNUC__*10 + __GNUC_MINOR__ >= 44
#    define ossl_ossl_bio__printf__ __gnu_printf__
#   else
#    define ossl_ossl_bio__printf__ __printf__
#   endif
#  endif
# endif
int ossl_BIO_printf(ossl_BIO *bio, const char *format, ...)
ossl_ossl_bio__attr__((__format__(ossl_ossl_bio__printf__, 2, 3)));
int ossl_BIO_vprintf(ossl_BIO *bio, const char *format, va_list args)
ossl_ossl_bio__attr__((__format__(ossl_ossl_bio__printf__, 2, 0)));
int ossl_BIO_snprintf(char *buf, size_t n, const char *format, ...)
ossl_ossl_bio__attr__((__format__(ossl_ossl_bio__printf__, 3, 4)));
int ossl_BIO_vsnprintf(char *buf, size_t n, const char *format, va_list args)
ossl_ossl_bio__attr__((__format__(ossl_ossl_bio__printf__, 3, 0)));
# undef ossl_ossl_bio__attr__
# undef ossl_ossl_bio__printf__


ossl_BIO_METHOD *ossl_BIO_meth_new(int type, const char *name);
void ossl_BIO_meth_free(ossl_BIO_METHOD *biom);
int (*ossl_BIO_meth_get_write(const ossl_BIO_METHOD *biom)) (ossl_BIO *, const char *, int);
int (*ossl_BIO_meth_get_write_ex(const ossl_BIO_METHOD *biom)) (ossl_BIO *, const char *, size_t,
                                                size_t *);
int ossl_BIO_meth_set_write(ossl_BIO_METHOD *biom,
                       int (*write) (ossl_BIO *, const char *, int));
int ossl_BIO_meth_set_write_ex(ossl_BIO_METHOD *biom,
                       int (*bwrite) (ossl_BIO *, const char *, size_t, size_t *));
int (*ossl_BIO_meth_get_read(const ossl_BIO_METHOD *biom)) (ossl_BIO *, char *, int);
int (*ossl_BIO_meth_get_read_ex(const ossl_BIO_METHOD *biom)) (ossl_BIO *, char *, size_t, size_t *);
int ossl_BIO_meth_set_read(ossl_BIO_METHOD *biom,
                      int (*read) (ossl_BIO *, char *, int));
int ossl_BIO_meth_set_read_ex(ossl_BIO_METHOD *biom,
                         int (*bread) (ossl_BIO *, char *, size_t, size_t *));
int (*ossl_BIO_meth_get_puts(const ossl_BIO_METHOD *biom)) (ossl_BIO *, const char *);
int ossl_BIO_meth_set_puts(ossl_BIO_METHOD *biom,
                      int (*puts) (ossl_BIO *, const char *));
int (*ossl_BIO_meth_get_gets(const ossl_BIO_METHOD *biom)) (ossl_BIO *, char *, int);
int ossl_BIO_meth_set_gets(ossl_BIO_METHOD *biom,
                      int (*ossl_gets) (ossl_BIO *, char *, int));
long (*ossl_BIO_meth_get_ctrl(const ossl_BIO_METHOD *biom)) (ossl_BIO *, int, long, void *);
int ossl_BIO_meth_set_ctrl(ossl_BIO_METHOD *biom,
                      long (*ctrl) (ossl_BIO *, int, long, void *));
int (*ossl_BIO_meth_get_create(const ossl_BIO_METHOD *bion)) (ossl_BIO *);
int ossl_BIO_meth_set_create(ossl_BIO_METHOD *biom, int (*create) (ossl_BIO *));
int (*ossl_BIO_meth_get_destroy(const ossl_BIO_METHOD *biom)) (ossl_BIO *);
int ossl_BIO_meth_set_destroy(ossl_BIO_METHOD *biom, int (*destroy) (ossl_BIO *));
long (*ossl_BIO_meth_get_callback_ctrl(const ossl_BIO_METHOD *biom))
                                 (ossl_BIO *, int, ossl_BIO_info_cb *);
int ossl_BIO_meth_set_callback_ctrl(ossl_BIO_METHOD *biom,
                               long (*callback_ctrl) (ossl_BIO *, int,
                                                      ossl_BIO_info_cb *));

# ifdef  __cplusplus
}
# endif
#endif
