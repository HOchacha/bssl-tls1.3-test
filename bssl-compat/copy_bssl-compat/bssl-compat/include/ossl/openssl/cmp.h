/*
 * WARNING: do not edit!
 * Generated by Makefile from ../../../openssl/source/include/openssl/cmp.h.in
 *
 * Copyright 2007-2023 The OpenSSL Project Authors. All Rights Reserved.
 * Copyright Nokia 2007-2019
 * Copyright Siemens AG 2015-2019
 *
 * Licensed under the Apache License 2.0 (the "License").  You may not use
 * this file except in compliance with the License.  You can obtain a copy
 * in the file LICENSE in the source distribution or at
 * https://www.openssl.org/source/license.html
 */



#ifndef ossl_OPENSSL_CMP_H
# define ossl_OPENSSL_CMP_H

# include "ossl/openssl/opensslconf.h"
# ifndef ossl_OPENSSL_NO_CMP

#  include "ossl/openssl/crmf.h"
#  include "ossl/openssl/cmperr.h"
#  include "ossl/openssl/cmp_util.h"
#  include "ossl/openssl/http.h"

/* explicit #includes not strictly needed since implied by the above: */
#  include "ossl/openssl/types.h"
#  include "ossl/openssl/safestack.h"
#  include "ossl/openssl/x509.h"
#  include "ossl/openssl/x509v3.h"

#  ifdef __cplusplus
extern "C" {
#  endif

#  define ossl_OSSL_CMP_PVNO 2

/*-
 *   PKIFailureInfo ::= BIT STRING {
 *   -- since we can fail in more than one way!
 *   -- More codes may be added in the future if/when required.
 *       badAlg              (0),
 *       -- unrecognized or unsupported Algorithm Identifier
 *       badMessageCheck     (1),
 *       -- integrity check failed (e.g., signature did not verify)
 *       badRequest          (2),
 *       -- transaction not permitted or supported
 *       badTime             (3),
 *       -- messageTime was not sufficiently close to the system time,
 *       -- as defined by local policy
 *       badCertId           (4),
 *       -- no certificate could be found matching the provided criteria
 *       badDataFormat       (5),
 *       -- the data submitted has the wrong format
 *       wrongAuthority      (6),
 *       -- the authority indicated in the request is different from the
 *       -- one creating the response token
 *       incorrectData       (7),
 *       -- the requester's data is incorrect (for notary services)
 *       missingTimeStamp    (8),
 *       -- when the timestamp is missing but should be there
 *       -- (by policy)
 *       badPOP              (9),
 *       -- the proof-of-possession failed
 *       certRevoked         (10),
 *          -- the certificate has already been revoked
 *       certConfirmed       (11),
 *          -- the certificate has already been confirmed
 *       wrongIntegrity      (12),
 *          -- invalid integrity, password based instead of signature or
 *          -- vice versa
 *       badRecipientNonce   (13),
 *          -- invalid recipient nonce, either missing or wrong value
 *       timeNotAvailable    (14),
 *          -- the TSA's time source is not available
 *       unacceptedPolicy    (15),
 *          -- the requested TSA policy is not supported by the TSA.
 *       unacceptedExtension (16),
 *          -- the requested extension is not supported by the TSA.
 *       addInfoNotAvailable (17),
 *          -- the additional information requested could not be
 *          -- understood or is not available
 *       badSenderNonce      (18),
 *          -- invalid sender nonce, either missing or wrong size
 *       badCertTemplate     (19),
 *          -- invalid cert. template or missing mandatory information
 *       signerNotTrusted    (20),
 *          -- signer of the message unknown or not trusted
 *       transactionIdInUse  (21),
 *          -- the transaction identifier is already in use
 *       unsupportedVersion  (22),
 *          -- the version of the message is not supported
 *       notAuthorized       (23),
 *          -- the sender was not authorized to make the preceding
 *          -- request or perform the preceding action
 *       systemUnavail       (24),
 *       -- the request cannot be handled due to system unavailability
 *       systemFailure       (25),
 *       -- the request cannot be handled due to system failure
 *       duplicateCertReq    (26)
 *       -- certificate cannot be issued because a duplicate
 *       -- certificate already exists
 *   }
 */
#  define ossl_OSSL_CMP_PKIFAILUREINFO_badAlg 0
#  define ossl_OSSL_CMP_PKIFAILUREINFO_badMessageCheck 1
#  define ossl_OSSL_CMP_PKIFAILUREINFO_badRequest 2
#  define ossl_OSSL_CMP_PKIFAILUREINFO_badTime 3
#  define ossl_OSSL_CMP_PKIFAILUREINFO_badCertId 4
#  define ossl_OSSL_CMP_PKIFAILUREINFO_badDataFormat 5
#  define ossl_OSSL_CMP_PKIFAILUREINFO_wrongAuthority 6
#  define ossl_OSSL_CMP_PKIFAILUREINFO_incorrectData 7
#  define ossl_OSSL_CMP_PKIFAILUREINFO_missingTimeStamp 8
#  define ossl_OSSL_CMP_PKIFAILUREINFO_badPOP 9
#  define ossl_OSSL_CMP_PKIFAILUREINFO_certRevoked 10
#  define ossl_OSSL_CMP_PKIFAILUREINFO_certConfirmed 11
#  define ossl_OSSL_CMP_PKIFAILUREINFO_wrongIntegrity 12
#  define ossl_OSSL_CMP_PKIFAILUREINFO_badRecipientNonce 13
#  define ossl_OSSL_CMP_PKIFAILUREINFO_timeNotAvailable 14
#  define ossl_OSSL_CMP_PKIFAILUREINFO_unacceptedPolicy 15
#  define ossl_OSSL_CMP_PKIFAILUREINFO_unacceptedExtension 16
#  define ossl_OSSL_CMP_PKIFAILUREINFO_addInfoNotAvailable 17
#  define ossl_OSSL_CMP_PKIFAILUREINFO_badSenderNonce 18
#  define ossl_OSSL_CMP_PKIFAILUREINFO_badCertTemplate 19
#  define ossl_OSSL_CMP_PKIFAILUREINFO_signerNotTrusted 20
#  define ossl_OSSL_CMP_PKIFAILUREINFO_transactionIdInUse 21
#  define ossl_OSSL_CMP_PKIFAILUREINFO_unsupportedVersion 22
#  define ossl_OSSL_CMP_PKIFAILUREINFO_notAuthorized 23
#  define ossl_OSSL_CMP_PKIFAILUREINFO_systemUnavail 24
#  define ossl_OSSL_CMP_PKIFAILUREINFO_systemFailure 25
#  define ossl_OSSL_CMP_PKIFAILUREINFO_duplicateCertReq 26
#  define ossl_OSSL_CMP_PKIFAILUREINFO_MAX 26
#  define ossl_OSSL_CMP_PKIFAILUREINFO_MAX_BIT_PATTERN \
    ((1 << (ossl_OSSL_CMP_PKIFAILUREINFO_MAX + 1)) - 1)
#  if ossl_OSSL_CMP_PKIFAILUREINFO_MAX_BIT_PATTERN > INT_MAX
#   error CMP_PKIFAILUREINFO_MAX bit pattern does not fit in type int
#  endif

typedef ossl_ASN1_BIT_STRING ossl_OSSL_CMP_PKIFAILUREINFO;

#  define ossl_OSSL_CMP_CTX_FAILINFO_badAlg (1 << 0)
#  define ossl_OSSL_CMP_CTX_FAILINFO_badMessageCheck (1 << 1)
#  define ossl_OSSL_CMP_CTX_FAILINFO_badRequest (1 << 2)
#  define ossl_OSSL_CMP_CTX_FAILINFO_badTime (1 << 3)
#  define ossl_OSSL_CMP_CTX_FAILINFO_badCertId (1 << 4)
#  define ossl_OSSL_CMP_CTX_FAILINFO_badDataFormat (1 << 5)
#  define ossl_OSSL_CMP_CTX_FAILINFO_wrongAuthority (1 << 6)
#  define ossl_OSSL_CMP_CTX_FAILINFO_incorrectData (1 << 7)
#  define ossl_OSSL_CMP_CTX_FAILINFO_missingTimeStamp (1 << 8)
#  define ossl_OSSL_CMP_CTX_FAILINFO_badPOP (1 << 9)
#  define ossl_OSSL_CMP_CTX_FAILINFO_certRevoked (1 << 10)
#  define ossl_OSSL_CMP_CTX_FAILINFO_certConfirmed (1 << 11)
#  define ossl_OSSL_CMP_CTX_FAILINFO_wrongIntegrity (1 << 12)
#  define ossl_OSSL_CMP_CTX_FAILINFO_badRecipientNonce (1 << 13)
#  define ossl_OSSL_CMP_CTX_FAILINFO_timeNotAvailable (1 << 14)
#  define ossl_OSSL_CMP_CTX_FAILINFO_unacceptedPolicy (1 << 15)
#  define ossl_OSSL_CMP_CTX_FAILINFO_unacceptedExtension (1 << 16)
#  define ossl_OSSL_CMP_CTX_FAILINFO_addInfoNotAvailable (1 << 17)
#  define ossl_OSSL_CMP_CTX_FAILINFO_badSenderNonce (1 << 18)
#  define ossl_OSSL_CMP_CTX_FAILINFO_badCertTemplate (1 << 19)
#  define ossl_OSSL_CMP_CTX_FAILINFO_signerNotTrusted (1 << 20)
#  define ossl_OSSL_CMP_CTX_FAILINFO_transactionIdInUse (1 << 21)
#  define ossl_OSSL_CMP_CTX_FAILINFO_unsupportedVersion (1 << 22)
#  define ossl_OSSL_CMP_CTX_FAILINFO_notAuthorized (1 << 23)
#  define ossl_OSSL_CMP_CTX_FAILINFO_systemUnavail (1 << 24)
#  define ossl_OSSL_CMP_CTX_FAILINFO_systemFailure (1 << 25)
#  define ossl_OSSL_CMP_CTX_FAILINFO_duplicateCertReq (1 << 26)

/*-
 *   PKIStatus ::= INTEGER {
 *       accepted                (0),
 *       -- you got exactly what you asked for
 *       grantedWithMods        (1),
 *       -- you got something like what you asked for; the
 *       -- requester is responsible for ascertaining the differences
 *       rejection              (2),
 *       -- you don't get it, more information elsewhere in the message
 *       waiting                (3),
 *       -- the request body part has not yet been processed; expect to
 *       -- hear more later (note: proper handling of this status
 *       -- response MAY use the polling req/rep PKIMessages specified
 *       -- in Section 5.3.22; alternatively, polling in the underlying
 *       -- transport layer MAY have some utility in this regard)
 *       revocationWarning      (4),
 *       -- this message contains a warning that a revocation is
 *       -- imminent
 *       revocationNotification (5),
 *       -- notification that a revocation has occurred
 *       keyUpdateWarning       (6)
 *       -- update already done for the oldCertId specified in
 *       -- CertReqMsg
 *   }
 */
#  define ossl_OSSL_CMP_PKISTATUS_request                -3
#  define ossl_OSSL_CMP_PKISTATUS_trans                  -2
#  define ossl_OSSL_CMP_PKISTATUS_unspecified            -1
#  define ossl_OSSL_CMP_PKISTATUS_accepted               0
#  define ossl_OSSL_CMP_PKISTATUS_grantedWithMods        1
#  define ossl_OSSL_CMP_PKISTATUS_rejection              2
#  define ossl_OSSL_CMP_PKISTATUS_waiting                3
#  define ossl_OSSL_CMP_PKISTATUS_revocationWarning      4
#  define ossl_OSSL_CMP_PKISTATUS_revocationNotification 5
#  define ossl_OSSL_CMP_PKISTATUS_keyUpdateWarning       6

typedef ossl_ASN1_INTEGER ossl_OSSL_CMP_PKISTATUS;
ossl_DECLARE_ASN1_ITEM(ossl_OSSL_CMP_PKISTATUS)

#  define ossl_OSSL_CMP_CERTORENCCERT_CERTIFICATE 0
#  define ossl_OSSL_CMP_CERTORENCCERT_ENCRYPTEDCERT 1

/* data type declarations */
typedef struct ossl_ossl_cmp_ctx_st ossl_OSSL_CMP_CTX;
typedef struct ossl_ossl_cmp_pkiheader_st ossl_OSSL_CMP_PKIHEADER;
ossl_DECLARE_ASN1_FUNCTIONS(ossl_OSSL_CMP_PKIHEADER)
typedef struct ossl_ossl_cmp_msg_st ossl_OSSL_CMP_MSG;
ossl_DECLARE_ASN1_DUP_FUNCTION(ossl_OSSL_CMP_MSG)
ossl_DECLARE_ASN1_ENCODE_FUNCTIONS(ossl_OSSL_CMP_MSG, ossl_OSSL_CMP_MSG, ossl_OSSL_CMP_MSG)
typedef struct ossl_ossl_cmp_certstatus_st ossl_OSSL_CMP_CERTSTATUS;
ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_OSSL_CMP_CERTSTATUS, ossl_OSSL_CMP_CERTSTATUS, ossl_OSSL_CMP_CERTSTATUS)
#define ossl_sk_OSSL_CMP_CERTSTATUS_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_OSSL_CMP_CERTSTATUS_sk_type(sk))
#define ossl_sk_OSSL_CMP_CERTSTATUS_value(sk, idx) ((ossl_OSSL_CMP_CERTSTATUS *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_OSSL_CMP_CERTSTATUS_sk_type(sk), (idx)))
#define ossl_sk_OSSL_CMP_CERTSTATUS_new(cmp) ((ossl_STACK_OF(ossl_OSSL_CMP_CERTSTATUS) *)ossl_OPENSSL_sk_new(ossl_ossl_check_OSSL_CMP_CERTSTATUS_compfunc_type(cmp)))
#define ossl_sk_OSSL_CMP_CERTSTATUS_new_null() ((ossl_STACK_OF(ossl_OSSL_CMP_CERTSTATUS) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_OSSL_CMP_CERTSTATUS_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_OSSL_CMP_CERTSTATUS) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_OSSL_CMP_CERTSTATUS_compfunc_type(cmp), (n)))
#define ossl_sk_OSSL_CMP_CERTSTATUS_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk), (n))
#define ossl_sk_OSSL_CMP_CERTSTATUS_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk))
#define ossl_sk_OSSL_CMP_CERTSTATUS_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk))
#define ossl_sk_OSSL_CMP_CERTSTATUS_delete(sk, i) ((ossl_OSSL_CMP_CERTSTATUS *)ossl_OPENSSL_sk_delete(ossl_ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk), (i)))
#define ossl_sk_OSSL_CMP_CERTSTATUS_delete_ptr(sk, ptr) ((ossl_OSSL_CMP_CERTSTATUS *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk), ossl_ossl_check_OSSL_CMP_CERTSTATUS_type(ptr)))
#define ossl_sk_OSSL_CMP_CERTSTATUS_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk), ossl_ossl_check_OSSL_CMP_CERTSTATUS_type(ptr))
#define ossl_sk_OSSL_CMP_CERTSTATUS_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk), ossl_ossl_check_OSSL_CMP_CERTSTATUS_type(ptr))
#define ossl_sk_OSSL_CMP_CERTSTATUS_pop(sk) ((ossl_OSSL_CMP_CERTSTATUS *)ossl_OPENSSL_sk_pop(ossl_ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk)))
#define ossl_sk_OSSL_CMP_CERTSTATUS_shift(sk) ((ossl_OSSL_CMP_CERTSTATUS *)ossl_OPENSSL_sk_shift(ossl_ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk)))
#define ossl_sk_OSSL_CMP_CERTSTATUS_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk),ossl_ossl_check_OSSL_CMP_CERTSTATUS_freefunc_type(freefunc))
#define ossl_sk_OSSL_CMP_CERTSTATUS_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk), ossl_ossl_check_OSSL_CMP_CERTSTATUS_type(ptr), (idx))
#define ossl_sk_OSSL_CMP_CERTSTATUS_set(sk, idx, ptr) ((ossl_OSSL_CMP_CERTSTATUS *)ossl_OPENSSL_sk_set(ossl_ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk), (idx), ossl_ossl_check_OSSL_CMP_CERTSTATUS_type(ptr)))
#define ossl_sk_OSSL_CMP_CERTSTATUS_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk), ossl_ossl_check_OSSL_CMP_CERTSTATUS_type(ptr))
#define ossl_sk_OSSL_CMP_CERTSTATUS_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk), ossl_ossl_check_OSSL_CMP_CERTSTATUS_type(ptr))
#define ossl_sk_OSSL_CMP_CERTSTATUS_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk), ossl_ossl_check_OSSL_CMP_CERTSTATUS_type(ptr), pnum)
#define ossl_sk_OSSL_CMP_CERTSTATUS_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk))
#define ossl_sk_OSSL_CMP_CERTSTATUS_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_OSSL_CMP_CERTSTATUS_sk_type(sk))
#define ossl_sk_OSSL_CMP_CERTSTATUS_dup(sk) ((ossl_STACK_OF(ossl_OSSL_CMP_CERTSTATUS) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_OSSL_CMP_CERTSTATUS_sk_type(sk)))
#define ossl_sk_OSSL_CMP_CERTSTATUS_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_OSSL_CMP_CERTSTATUS) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_OSSL_CMP_CERTSTATUS_sk_type(sk), ossl_ossl_check_OSSL_CMP_CERTSTATUS_copyfunc_type(copyfunc), ossl_ossl_check_OSSL_CMP_CERTSTATUS_freefunc_type(freefunc)))
#define ossl_sk_OSSL_CMP_CERTSTATUS_set_cmp_func(sk, cmp) ((ossl_sk_OSSL_CMP_CERTSTATUS_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_OSSL_CMP_CERTSTATUS_sk_type(sk), ossl_ossl_check_OSSL_CMP_CERTSTATUS_compfunc_type(cmp)))

typedef struct ossl_ossl_cmp_itav_st ossl_OSSL_CMP_ITAV;
ossl_DECLARE_ASN1_DUP_FUNCTION(ossl_OSSL_CMP_ITAV)
ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_OSSL_CMP_ITAV, ossl_OSSL_CMP_ITAV, ossl_OSSL_CMP_ITAV)
#define ossl_sk_OSSL_CMP_ITAV_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_OSSL_CMP_ITAV_sk_type(sk))
#define ossl_sk_OSSL_CMP_ITAV_value(sk, idx) ((ossl_OSSL_CMP_ITAV *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_OSSL_CMP_ITAV_sk_type(sk), (idx)))
#define ossl_sk_OSSL_CMP_ITAV_new(cmp) ((ossl_STACK_OF(ossl_OSSL_CMP_ITAV) *)ossl_OPENSSL_sk_new(ossl_ossl_check_OSSL_CMP_ITAV_compfunc_type(cmp)))
#define ossl_sk_OSSL_CMP_ITAV_new_null() ((ossl_STACK_OF(ossl_OSSL_CMP_ITAV) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_OSSL_CMP_ITAV_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_OSSL_CMP_ITAV) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_OSSL_CMP_ITAV_compfunc_type(cmp), (n)))
#define ossl_sk_OSSL_CMP_ITAV_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_OSSL_CMP_ITAV_sk_type(sk), (n))
#define ossl_sk_OSSL_CMP_ITAV_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_OSSL_CMP_ITAV_sk_type(sk))
#define ossl_sk_OSSL_CMP_ITAV_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_OSSL_CMP_ITAV_sk_type(sk))
#define ossl_sk_OSSL_CMP_ITAV_delete(sk, i) ((ossl_OSSL_CMP_ITAV *)ossl_OPENSSL_sk_delete(ossl_ossl_check_OSSL_CMP_ITAV_sk_type(sk), (i)))
#define ossl_sk_OSSL_CMP_ITAV_delete_ptr(sk, ptr) ((ossl_OSSL_CMP_ITAV *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_OSSL_CMP_ITAV_sk_type(sk), ossl_ossl_check_OSSL_CMP_ITAV_type(ptr)))
#define ossl_sk_OSSL_CMP_ITAV_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_OSSL_CMP_ITAV_sk_type(sk), ossl_ossl_check_OSSL_CMP_ITAV_type(ptr))
#define ossl_sk_OSSL_CMP_ITAV_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_OSSL_CMP_ITAV_sk_type(sk), ossl_ossl_check_OSSL_CMP_ITAV_type(ptr))
#define ossl_sk_OSSL_CMP_ITAV_pop(sk) ((ossl_OSSL_CMP_ITAV *)ossl_OPENSSL_sk_pop(ossl_ossl_check_OSSL_CMP_ITAV_sk_type(sk)))
#define ossl_sk_OSSL_CMP_ITAV_shift(sk) ((ossl_OSSL_CMP_ITAV *)ossl_OPENSSL_sk_shift(ossl_ossl_check_OSSL_CMP_ITAV_sk_type(sk)))
#define ossl_sk_OSSL_CMP_ITAV_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_OSSL_CMP_ITAV_sk_type(sk),ossl_ossl_check_OSSL_CMP_ITAV_freefunc_type(freefunc))
#define ossl_sk_OSSL_CMP_ITAV_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_OSSL_CMP_ITAV_sk_type(sk), ossl_ossl_check_OSSL_CMP_ITAV_type(ptr), (idx))
#define ossl_sk_OSSL_CMP_ITAV_set(sk, idx, ptr) ((ossl_OSSL_CMP_ITAV *)ossl_OPENSSL_sk_set(ossl_ossl_check_OSSL_CMP_ITAV_sk_type(sk), (idx), ossl_ossl_check_OSSL_CMP_ITAV_type(ptr)))
#define ossl_sk_OSSL_CMP_ITAV_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_OSSL_CMP_ITAV_sk_type(sk), ossl_ossl_check_OSSL_CMP_ITAV_type(ptr))
#define ossl_sk_OSSL_CMP_ITAV_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_OSSL_CMP_ITAV_sk_type(sk), ossl_ossl_check_OSSL_CMP_ITAV_type(ptr))
#define ossl_sk_OSSL_CMP_ITAV_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_OSSL_CMP_ITAV_sk_type(sk), ossl_ossl_check_OSSL_CMP_ITAV_type(ptr), pnum)
#define ossl_sk_OSSL_CMP_ITAV_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_OSSL_CMP_ITAV_sk_type(sk))
#define ossl_sk_OSSL_CMP_ITAV_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_OSSL_CMP_ITAV_sk_type(sk))
#define ossl_sk_OSSL_CMP_ITAV_dup(sk) ((ossl_STACK_OF(ossl_OSSL_CMP_ITAV) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_OSSL_CMP_ITAV_sk_type(sk)))
#define ossl_sk_OSSL_CMP_ITAV_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_OSSL_CMP_ITAV) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_OSSL_CMP_ITAV_sk_type(sk), ossl_ossl_check_OSSL_CMP_ITAV_copyfunc_type(copyfunc), ossl_ossl_check_OSSL_CMP_ITAV_freefunc_type(freefunc)))
#define ossl_sk_OSSL_CMP_ITAV_set_cmp_func(sk, cmp) ((ossl_sk_OSSL_CMP_ITAV_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_OSSL_CMP_ITAV_sk_type(sk), ossl_ossl_check_OSSL_CMP_ITAV_compfunc_type(cmp)))

typedef struct ossl_ossl_cmp_revrepcontent_st ossl_OSSL_CMP_REVREPCONTENT;
typedef struct ossl_ossl_cmp_pkisi_st ossl_OSSL_CMP_PKISI;
ossl_DECLARE_ASN1_FUNCTIONS(ossl_OSSL_CMP_PKISI)
ossl_DECLARE_ASN1_DUP_FUNCTION(ossl_OSSL_CMP_PKISI)
ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_OSSL_CMP_PKISI, ossl_OSSL_CMP_PKISI, ossl_OSSL_CMP_PKISI)
#define ossl_sk_OSSL_CMP_PKISI_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_OSSL_CMP_PKISI_sk_type(sk))
#define ossl_sk_OSSL_CMP_PKISI_value(sk, idx) ((ossl_OSSL_CMP_PKISI *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_OSSL_CMP_PKISI_sk_type(sk), (idx)))
#define ossl_sk_OSSL_CMP_PKISI_new(cmp) ((ossl_STACK_OF(ossl_OSSL_CMP_PKISI) *)ossl_OPENSSL_sk_new(ossl_ossl_check_OSSL_CMP_PKISI_compfunc_type(cmp)))
#define ossl_sk_OSSL_CMP_PKISI_new_null() ((ossl_STACK_OF(ossl_OSSL_CMP_PKISI) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_OSSL_CMP_PKISI_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_OSSL_CMP_PKISI) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_OSSL_CMP_PKISI_compfunc_type(cmp), (n)))
#define ossl_sk_OSSL_CMP_PKISI_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_OSSL_CMP_PKISI_sk_type(sk), (n))
#define ossl_sk_OSSL_CMP_PKISI_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_OSSL_CMP_PKISI_sk_type(sk))
#define ossl_sk_OSSL_CMP_PKISI_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_OSSL_CMP_PKISI_sk_type(sk))
#define ossl_sk_OSSL_CMP_PKISI_delete(sk, i) ((ossl_OSSL_CMP_PKISI *)ossl_OPENSSL_sk_delete(ossl_ossl_check_OSSL_CMP_PKISI_sk_type(sk), (i)))
#define ossl_sk_OSSL_CMP_PKISI_delete_ptr(sk, ptr) ((ossl_OSSL_CMP_PKISI *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_OSSL_CMP_PKISI_sk_type(sk), ossl_ossl_check_OSSL_CMP_PKISI_type(ptr)))
#define ossl_sk_OSSL_CMP_PKISI_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_OSSL_CMP_PKISI_sk_type(sk), ossl_ossl_check_OSSL_CMP_PKISI_type(ptr))
#define ossl_sk_OSSL_CMP_PKISI_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_OSSL_CMP_PKISI_sk_type(sk), ossl_ossl_check_OSSL_CMP_PKISI_type(ptr))
#define ossl_sk_OSSL_CMP_PKISI_pop(sk) ((ossl_OSSL_CMP_PKISI *)ossl_OPENSSL_sk_pop(ossl_ossl_check_OSSL_CMP_PKISI_sk_type(sk)))
#define ossl_sk_OSSL_CMP_PKISI_shift(sk) ((ossl_OSSL_CMP_PKISI *)ossl_OPENSSL_sk_shift(ossl_ossl_check_OSSL_CMP_PKISI_sk_type(sk)))
#define ossl_sk_OSSL_CMP_PKISI_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_OSSL_CMP_PKISI_sk_type(sk),ossl_ossl_check_OSSL_CMP_PKISI_freefunc_type(freefunc))
#define ossl_sk_OSSL_CMP_PKISI_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_OSSL_CMP_PKISI_sk_type(sk), ossl_ossl_check_OSSL_CMP_PKISI_type(ptr), (idx))
#define ossl_sk_OSSL_CMP_PKISI_set(sk, idx, ptr) ((ossl_OSSL_CMP_PKISI *)ossl_OPENSSL_sk_set(ossl_ossl_check_OSSL_CMP_PKISI_sk_type(sk), (idx), ossl_ossl_check_OSSL_CMP_PKISI_type(ptr)))
#define ossl_sk_OSSL_CMP_PKISI_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_OSSL_CMP_PKISI_sk_type(sk), ossl_ossl_check_OSSL_CMP_PKISI_type(ptr))
#define ossl_sk_OSSL_CMP_PKISI_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_OSSL_CMP_PKISI_sk_type(sk), ossl_ossl_check_OSSL_CMP_PKISI_type(ptr))
#define ossl_sk_OSSL_CMP_PKISI_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_OSSL_CMP_PKISI_sk_type(sk), ossl_ossl_check_OSSL_CMP_PKISI_type(ptr), pnum)
#define ossl_sk_OSSL_CMP_PKISI_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_OSSL_CMP_PKISI_sk_type(sk))
#define ossl_sk_OSSL_CMP_PKISI_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_OSSL_CMP_PKISI_sk_type(sk))
#define ossl_sk_OSSL_CMP_PKISI_dup(sk) ((ossl_STACK_OF(ossl_OSSL_CMP_PKISI) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_OSSL_CMP_PKISI_sk_type(sk)))
#define ossl_sk_OSSL_CMP_PKISI_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_OSSL_CMP_PKISI) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_OSSL_CMP_PKISI_sk_type(sk), ossl_ossl_check_OSSL_CMP_PKISI_copyfunc_type(copyfunc), ossl_ossl_check_OSSL_CMP_PKISI_freefunc_type(freefunc)))
#define ossl_sk_OSSL_CMP_PKISI_set_cmp_func(sk, cmp) ((ossl_sk_OSSL_CMP_PKISI_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_OSSL_CMP_PKISI_sk_type(sk), ossl_ossl_check_OSSL_CMP_PKISI_compfunc_type(cmp)))

typedef struct ossl_ossl_cmp_certrepmessage_st ossl_OSSL_CMP_CERTREPMESSAGE;
ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_OSSL_CMP_CERTREPMESSAGE, ossl_OSSL_CMP_CERTREPMESSAGE, ossl_OSSL_CMP_CERTREPMESSAGE)
#define ossl_sk_OSSL_CMP_CERTREPMESSAGE_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_OSSL_CMP_CERTREPMESSAGE_sk_type(sk))
#define ossl_sk_OSSL_CMP_CERTREPMESSAGE_value(sk, idx) ((ossl_OSSL_CMP_CERTREPMESSAGE *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), (idx)))
#define ossl_sk_OSSL_CMP_CERTREPMESSAGE_new(cmp) ((ossl_STACK_OF(ossl_OSSL_CMP_CERTREPMESSAGE) *)ossl_OPENSSL_sk_new(ossl_ossl_check_OSSL_CMP_CERTREPMESSAGE_compfunc_type(cmp)))
#define ossl_sk_OSSL_CMP_CERTREPMESSAGE_new_null() ((ossl_STACK_OF(ossl_OSSL_CMP_CERTREPMESSAGE) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_OSSL_CMP_CERTREPMESSAGE_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_OSSL_CMP_CERTREPMESSAGE) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_OSSL_CMP_CERTREPMESSAGE_compfunc_type(cmp), (n)))
#define ossl_sk_OSSL_CMP_CERTREPMESSAGE_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), (n))
#define ossl_sk_OSSL_CMP_CERTREPMESSAGE_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk))
#define ossl_sk_OSSL_CMP_CERTREPMESSAGE_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk))
#define ossl_sk_OSSL_CMP_CERTREPMESSAGE_delete(sk, i) ((ossl_OSSL_CMP_CERTREPMESSAGE *)ossl_OPENSSL_sk_delete(ossl_ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), (i)))
#define ossl_sk_OSSL_CMP_CERTREPMESSAGE_delete_ptr(sk, ptr) ((ossl_OSSL_CMP_CERTREPMESSAGE *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), ossl_ossl_check_OSSL_CMP_CERTREPMESSAGE_type(ptr)))
#define ossl_sk_OSSL_CMP_CERTREPMESSAGE_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), ossl_ossl_check_OSSL_CMP_CERTREPMESSAGE_type(ptr))
#define ossl_sk_OSSL_CMP_CERTREPMESSAGE_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), ossl_ossl_check_OSSL_CMP_CERTREPMESSAGE_type(ptr))
#define ossl_sk_OSSL_CMP_CERTREPMESSAGE_pop(sk) ((ossl_OSSL_CMP_CERTREPMESSAGE *)ossl_OPENSSL_sk_pop(ossl_ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk)))
#define ossl_sk_OSSL_CMP_CERTREPMESSAGE_shift(sk) ((ossl_OSSL_CMP_CERTREPMESSAGE *)ossl_OPENSSL_sk_shift(ossl_ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk)))
#define ossl_sk_OSSL_CMP_CERTREPMESSAGE_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk),ossl_ossl_check_OSSL_CMP_CERTREPMESSAGE_freefunc_type(freefunc))
#define ossl_sk_OSSL_CMP_CERTREPMESSAGE_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), ossl_ossl_check_OSSL_CMP_CERTREPMESSAGE_type(ptr), (idx))
#define ossl_sk_OSSL_CMP_CERTREPMESSAGE_set(sk, idx, ptr) ((ossl_OSSL_CMP_CERTREPMESSAGE *)ossl_OPENSSL_sk_set(ossl_ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), (idx), ossl_ossl_check_OSSL_CMP_CERTREPMESSAGE_type(ptr)))
#define ossl_sk_OSSL_CMP_CERTREPMESSAGE_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), ossl_ossl_check_OSSL_CMP_CERTREPMESSAGE_type(ptr))
#define ossl_sk_OSSL_CMP_CERTREPMESSAGE_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), ossl_ossl_check_OSSL_CMP_CERTREPMESSAGE_type(ptr))
#define ossl_sk_OSSL_CMP_CERTREPMESSAGE_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), ossl_ossl_check_OSSL_CMP_CERTREPMESSAGE_type(ptr), pnum)
#define ossl_sk_OSSL_CMP_CERTREPMESSAGE_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk))
#define ossl_sk_OSSL_CMP_CERTREPMESSAGE_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_OSSL_CMP_CERTREPMESSAGE_sk_type(sk))
#define ossl_sk_OSSL_CMP_CERTREPMESSAGE_dup(sk) ((ossl_STACK_OF(ossl_OSSL_CMP_CERTREPMESSAGE) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_OSSL_CMP_CERTREPMESSAGE_sk_type(sk)))
#define ossl_sk_OSSL_CMP_CERTREPMESSAGE_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_OSSL_CMP_CERTREPMESSAGE) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), ossl_ossl_check_OSSL_CMP_CERTREPMESSAGE_copyfunc_type(copyfunc), ossl_ossl_check_OSSL_CMP_CERTREPMESSAGE_freefunc_type(freefunc)))
#define ossl_sk_OSSL_CMP_CERTREPMESSAGE_set_cmp_func(sk, cmp) ((ossl_sk_OSSL_CMP_CERTREPMESSAGE_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_OSSL_CMP_CERTREPMESSAGE_sk_type(sk), ossl_ossl_check_OSSL_CMP_CERTREPMESSAGE_compfunc_type(cmp)))

typedef struct ossl_ossl_cmp_pollrep_st ossl_OSSL_CMP_POLLREP;
typedef ossl_STACK_OF(ossl_OSSL_CMP_POLLREP) ossl_OSSL_CMP_POLLREPCONTENT;
typedef struct ossl_ossl_cmp_certresponse_st ossl_OSSL_CMP_CERTRESPONSE;
ossl_SKM_DEFINE_STACK_OF_INTERNAL(ossl_OSSL_CMP_CERTRESPONSE, ossl_OSSL_CMP_CERTRESPONSE, ossl_OSSL_CMP_CERTRESPONSE)
#define ossl_sk_OSSL_CMP_CERTRESPONSE_num(sk) ossl_OPENSSL_sk_num(ossl_ossl_check_const_OSSL_CMP_CERTRESPONSE_sk_type(sk))
#define ossl_sk_OSSL_CMP_CERTRESPONSE_value(sk, idx) ((ossl_OSSL_CMP_CERTRESPONSE *)ossl_OPENSSL_sk_value(ossl_ossl_check_const_OSSL_CMP_CERTRESPONSE_sk_type(sk), (idx)))
#define ossl_sk_OSSL_CMP_CERTRESPONSE_new(cmp) ((ossl_STACK_OF(ossl_OSSL_CMP_CERTRESPONSE) *)ossl_OPENSSL_sk_new(ossl_ossl_check_OSSL_CMP_CERTRESPONSE_compfunc_type(cmp)))
#define ossl_sk_OSSL_CMP_CERTRESPONSE_new_null() ((ossl_STACK_OF(ossl_OSSL_CMP_CERTRESPONSE) *)ossl_OPENSSL_sk_new_null())
#define ossl_sk_OSSL_CMP_CERTRESPONSE_new_reserve(cmp, n) ((ossl_STACK_OF(ossl_OSSL_CMP_CERTRESPONSE) *)ossl_OPENSSL_sk_new_reserve(ossl_ossl_check_OSSL_CMP_CERTRESPONSE_compfunc_type(cmp), (n)))
#define ossl_sk_OSSL_CMP_CERTRESPONSE_reserve(sk, n) ossl_OPENSSL_sk_reserve(ossl_ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk), (n))
#define ossl_sk_OSSL_CMP_CERTRESPONSE_free(sk) ossl_OPENSSL_sk_free(ossl_ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk))
#define ossl_sk_OSSL_CMP_CERTRESPONSE_zero(sk) ossl_OPENSSL_sk_zero(ossl_ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk))
#define ossl_sk_OSSL_CMP_CERTRESPONSE_delete(sk, i) ((ossl_OSSL_CMP_CERTRESPONSE *)ossl_OPENSSL_sk_delete(ossl_ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk), (i)))
#define ossl_sk_OSSL_CMP_CERTRESPONSE_delete_ptr(sk, ptr) ((ossl_OSSL_CMP_CERTRESPONSE *)ossl_OPENSSL_sk_delete_ptr(ossl_ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk), ossl_ossl_check_OSSL_CMP_CERTRESPONSE_type(ptr)))
#define ossl_sk_OSSL_CMP_CERTRESPONSE_push(sk, ptr) ossl_OPENSSL_sk_push(ossl_ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk), ossl_ossl_check_OSSL_CMP_CERTRESPONSE_type(ptr))
#define ossl_sk_OSSL_CMP_CERTRESPONSE_unshift(sk, ptr) ossl_OPENSSL_sk_unshift(ossl_ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk), ossl_ossl_check_OSSL_CMP_CERTRESPONSE_type(ptr))
#define ossl_sk_OSSL_CMP_CERTRESPONSE_pop(sk) ((ossl_OSSL_CMP_CERTRESPONSE *)ossl_OPENSSL_sk_pop(ossl_ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk)))
#define ossl_sk_OSSL_CMP_CERTRESPONSE_shift(sk) ((ossl_OSSL_CMP_CERTRESPONSE *)ossl_OPENSSL_sk_shift(ossl_ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk)))
#define ossl_sk_OSSL_CMP_CERTRESPONSE_pop_free(sk, freefunc) ossl_OPENSSL_sk_pop_free(ossl_ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk),ossl_ossl_check_OSSL_CMP_CERTRESPONSE_freefunc_type(freefunc))
#define ossl_sk_OSSL_CMP_CERTRESPONSE_insert(sk, ptr, idx) ossl_OPENSSL_sk_insert(ossl_ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk), ossl_ossl_check_OSSL_CMP_CERTRESPONSE_type(ptr), (idx))
#define ossl_sk_OSSL_CMP_CERTRESPONSE_set(sk, idx, ptr) ((ossl_OSSL_CMP_CERTRESPONSE *)ossl_OPENSSL_sk_set(ossl_ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk), (idx), ossl_ossl_check_OSSL_CMP_CERTRESPONSE_type(ptr)))
#define ossl_sk_OSSL_CMP_CERTRESPONSE_find(sk, ptr) ossl_OPENSSL_sk_find(ossl_ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk), ossl_ossl_check_OSSL_CMP_CERTRESPONSE_type(ptr))
#define ossl_sk_OSSL_CMP_CERTRESPONSE_find_ex(sk, ptr) ossl_OPENSSL_sk_find_ex(ossl_ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk), ossl_ossl_check_OSSL_CMP_CERTRESPONSE_type(ptr))
#define ossl_sk_OSSL_CMP_CERTRESPONSE_find_all(sk, ptr, pnum) ossl_OPENSSL_sk_find_all(ossl_ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk), ossl_ossl_check_OSSL_CMP_CERTRESPONSE_type(ptr), pnum)
#define ossl_sk_OSSL_CMP_CERTRESPONSE_sort(sk) ossl_OPENSSL_sk_sort(ossl_ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk))
#define ossl_sk_OSSL_CMP_CERTRESPONSE_is_sorted(sk) ossl_OPENSSL_sk_is_sorted(ossl_ossl_check_const_OSSL_CMP_CERTRESPONSE_sk_type(sk))
#define ossl_sk_OSSL_CMP_CERTRESPONSE_dup(sk) ((ossl_STACK_OF(ossl_OSSL_CMP_CERTRESPONSE) *)ossl_OPENSSL_sk_dup(ossl_ossl_check_const_OSSL_CMP_CERTRESPONSE_sk_type(sk)))
#define ossl_sk_OSSL_CMP_CERTRESPONSE_deep_copy(sk, copyfunc, freefunc) ((ossl_STACK_OF(ossl_OSSL_CMP_CERTRESPONSE) *)ossl_OPENSSL_sk_deep_copy(ossl_ossl_check_const_OSSL_CMP_CERTRESPONSE_sk_type(sk), ossl_ossl_check_OSSL_CMP_CERTRESPONSE_copyfunc_type(copyfunc), ossl_ossl_check_OSSL_CMP_CERTRESPONSE_freefunc_type(freefunc)))
#define ossl_sk_OSSL_CMP_CERTRESPONSE_set_cmp_func(sk, cmp) ((ossl_sk_OSSL_CMP_CERTRESPONSE_compfunc)ossl_OPENSSL_sk_set_cmp_func(ossl_ossl_check_OSSL_CMP_CERTRESPONSE_sk_type(sk), ossl_ossl_check_OSSL_CMP_CERTRESPONSE_compfunc_type(cmp)))

typedef ossl_STACK_OF(ossl_ASN1_UTF8STRING) ossl_OSSL_CMP_PKIFREETEXT;

/*
 * function DECLARATIONS
 */

/* from cmp_asn.c */
ossl_OSSL_CMP_ITAV *ossl_OSSL_CMP_ITAV_create(ossl_ASN1_OBJECT *type, ossl_ASN1_TYPE *value);
void ossl_OSSL_CMP_ITAV_set0(ossl_OSSL_CMP_ITAV *itav, ossl_ASN1_OBJECT *type,
                        ossl_ASN1_TYPE *value);
ossl_ASN1_OBJECT *ossl_OSSL_CMP_ITAV_get0_type(const ossl_OSSL_CMP_ITAV *itav);
ossl_ASN1_TYPE *ossl_OSSL_CMP_ITAV_get0_value(const ossl_OSSL_CMP_ITAV *itav);
int ossl_OSSL_CMP_ITAV_push0_stack_item(ossl_STACK_OF(ossl_OSSL_CMP_ITAV) **itav_sk_p,
                                   ossl_OSSL_CMP_ITAV *itav);
void ossl_OSSL_CMP_ITAV_free(ossl_OSSL_CMP_ITAV *itav);
void ossl_OSSL_CMP_MSG_free(ossl_OSSL_CMP_MSG *msg);

/* from cmp_ctx.c */
ossl_OSSL_CMP_CTX *ossl_OSSL_CMP_CTX_new(ossl_OSSL_LIB_CTX *libctx, const char *propq);
void ossl_OSSL_CMP_CTX_free(ossl_OSSL_CMP_CTX *ctx);
int ossl_OSSL_CMP_CTX_reinit(ossl_OSSL_CMP_CTX *ctx);
/* CMP general options: */
#  define ossl_OSSL_CMP_OPT_LOG_VERBOSITY 0
/* CMP transfer options: */
#  define ossl_OSSL_CMP_OPT_KEEP_ALIVE 10
#  define ossl_OSSL_CMP_OPT_MSG_TIMEOUT 11
#  define ossl_OSSL_CMP_OPT_TOTAL_TIMEOUT 12
/* CMP request options: */
#  define ossl_OSSL_CMP_OPT_VALIDITY_DAYS 20
#  define ossl_OSSL_CMP_OPT_SUBJECTALTNAME_NODEFAULT 21
#  define ossl_OSSL_CMP_OPT_SUBJECTALTNAME_CRITICAL 22
#  define ossl_OSSL_CMP_OPT_POLICIES_CRITICAL 23
#  define ossl_OSSL_CMP_OPT_POPO_METHOD 24
#  define ossl_OSSL_CMP_OPT_IMPLICIT_CONFIRM 25
#  define ossl_OSSL_CMP_OPT_DISABLE_CONFIRM 26
#  define ossl_OSSL_CMP_OPT_REVOCATION_REASON 27
/* CMP protection options: */
#  define ossl_OSSL_CMP_OPT_UNPROTECTED_SEND 30
#  define ossl_OSSL_CMP_OPT_UNPROTECTED_ERRORS 31
#  define ossl_OSSL_CMP_OPT_OWF_ALGNID 32
#  define ossl_OSSL_CMP_OPT_MAC_ALGNID 33
#  define ossl_OSSL_CMP_OPT_DIGEST_ALGNID 34
#  define ossl_OSSL_CMP_OPT_IGNORE_KEYUSAGE 35
#  define ossl_OSSL_CMP_OPT_PERMIT_TA_IN_EXTRACERTS_FOR_IR 36
int ossl_OSSL_CMP_CTX_set_option(ossl_OSSL_CMP_CTX *ctx, int opt, int val);
int ossl_OSSL_CMP_CTX_get_option(const ossl_OSSL_CMP_CTX *ctx, int opt);
/* CMP-specific callback for logging and outputting the error queue: */
int ossl_OSSL_CMP_CTX_set_log_cb(ossl_OSSL_CMP_CTX *ctx, ossl_OSSL_CMP_log_cb_t cb);
#  define ossl_OSSL_CMP_CTX_set_log_verbosity(ctx, level) \
    ossl_OSSL_CMP_CTX_set_option(ctx, ossl_OSSL_CMP_OPT_LOG_VERBOSITY, level)
void ossl_OSSL_CMP_CTX_print_errors(const ossl_OSSL_CMP_CTX *ctx);
/* message transfer: */
int ossl_OSSL_CMP_CTX_set1_serverPath(ossl_OSSL_CMP_CTX *ctx, const char *path);
int ossl_OSSL_CMP_CTX_set1_server(ossl_OSSL_CMP_CTX *ctx, const char *address);
int ossl_OSSL_CMP_CTX_set_serverPort(ossl_OSSL_CMP_CTX *ctx, int port);
int ossl_OSSL_CMP_CTX_set1_proxy(ossl_OSSL_CMP_CTX *ctx, const char *name);
int ossl_OSSL_CMP_CTX_set1_no_proxy(ossl_OSSL_CMP_CTX *ctx, const char *names);
int ossl_OSSL_CMP_CTX_set_http_cb(ossl_OSSL_CMP_CTX *ctx, ossl_OSSL_HTTP_bio_cb_t cb);
int ossl_OSSL_CMP_CTX_set_http_cb_arg(ossl_OSSL_CMP_CTX *ctx, void *arg);
void *ossl_OSSL_CMP_CTX_get_http_cb_arg(const ossl_OSSL_CMP_CTX *ctx);
typedef ossl_OSSL_CMP_MSG *(*ossl_OSSL_CMP_transfer_cb_t) (ossl_OSSL_CMP_CTX *ctx,
                                                 const ossl_OSSL_CMP_MSG *req);
int ossl_OSSL_CMP_CTX_set_transfer_cb(ossl_OSSL_CMP_CTX *ctx, ossl_OSSL_CMP_transfer_cb_t cb);
int ossl_OSSL_CMP_CTX_set_transfer_cb_arg(ossl_OSSL_CMP_CTX *ctx, void *arg);
void *ossl_OSSL_CMP_CTX_get_transfer_cb_arg(const ossl_OSSL_CMP_CTX *ctx);
/* server authentication: */
int ossl_OSSL_CMP_CTX_set1_srvCert(ossl_OSSL_CMP_CTX *ctx, ossl_X509 *cert);
int ossl_OSSL_CMP_CTX_set1_expected_sender(ossl_OSSL_CMP_CTX *ctx, const ossl_X509_NAME *name);
int ossl_OSSL_CMP_CTX_set0_trustedStore(ossl_OSSL_CMP_CTX *ctx, ossl_X509_STORE *store);
ossl_X509_STORE *ossl_OSSL_CMP_CTX_get0_trustedStore(const ossl_OSSL_CMP_CTX *ctx);
int ossl_OSSL_CMP_CTX_set1_untrusted(ossl_OSSL_CMP_CTX *ctx, ossl_STACK_OF(ossl_X509) *certs);
ossl_STACK_OF(ossl_X509) *ossl_OSSL_CMP_CTX_get0_untrusted(const ossl_OSSL_CMP_CTX *ctx);
/* client authentication: */
int ossl_OSSL_CMP_CTX_set1_cert(ossl_OSSL_CMP_CTX *ctx, ossl_X509 *cert);
int ossl_OSSL_CMP_CTX_build_cert_chain(ossl_OSSL_CMP_CTX *ctx, ossl_X509_STORE *own_trusted,
                                  ossl_STACK_OF(ossl_X509) *candidates);
int ossl_OSSL_CMP_CTX_set1_pkey(ossl_OSSL_CMP_CTX *ctx, ossl_EVP_PKEY *pkey);
int ossl_OSSL_CMP_CTX_set1_referenceValue(ossl_OSSL_CMP_CTX *ctx,
                                     const unsigned char *ref, int len);
int ossl_OSSL_CMP_CTX_set1_secretValue(ossl_OSSL_CMP_CTX *ctx,
                                  const unsigned char *sec, int len);
/* CMP message header and extra certificates: */
int ossl_OSSL_CMP_CTX_set1_recipient(ossl_OSSL_CMP_CTX *ctx, const ossl_X509_NAME *name);
int ossl_OSSL_CMP_CTX_push0_geninfo_ITAV(ossl_OSSL_CMP_CTX *ctx, ossl_OSSL_CMP_ITAV *itav);
int ossl_OSSL_CMP_CTX_reset_geninfo_ITAVs(ossl_OSSL_CMP_CTX *ctx);
int ossl_OSSL_CMP_CTX_set1_extraCertsOut(ossl_OSSL_CMP_CTX *ctx,
                                    ossl_STACK_OF(ossl_X509) *extraCertsOut);
/* certificate template: */
int ossl_OSSL_CMP_CTX_set0_newPkey(ossl_OSSL_CMP_CTX *ctx, int priv, ossl_EVP_PKEY *pkey);
ossl_EVP_PKEY *ossl_OSSL_CMP_CTX_get0_newPkey(const ossl_OSSL_CMP_CTX *ctx, int priv);
int ossl_OSSL_CMP_CTX_set1_issuer(ossl_OSSL_CMP_CTX *ctx, const ossl_X509_NAME *name);
int ossl_OSSL_CMP_CTX_set1_subjectName(ossl_OSSL_CMP_CTX *ctx, const ossl_X509_NAME *name);
int ossl_OSSL_CMP_CTX_push1_subjectAltName(ossl_OSSL_CMP_CTX *ctx,
                                      const ossl_GENERAL_NAME *name);
int ossl_OSSL_CMP_CTX_set0_reqExtensions(ossl_OSSL_CMP_CTX *ctx, ossl_X509_EXTENSIONS *exts);
int ossl_OSSL_CMP_CTX_reqExtensions_have_SAN(ossl_OSSL_CMP_CTX *ctx);
int ossl_OSSL_CMP_CTX_push0_policy(ossl_OSSL_CMP_CTX *ctx, ossl_POLICYINFO *pinfo);
int ossl_OSSL_CMP_CTX_set1_oldCert(ossl_OSSL_CMP_CTX *ctx, ossl_X509 *cert);
int ossl_OSSL_CMP_CTX_set1_p10CSR(ossl_OSSL_CMP_CTX *ctx, const ossl_X509_REQ *csr);
/* misc body contents: */
int ossl_OSSL_CMP_CTX_push0_genm_ITAV(ossl_OSSL_CMP_CTX *ctx, ossl_OSSL_CMP_ITAV *itav);
/* certificate confirmation: */
typedef int (*ossl_OSSL_CMP_certConf_cb_t) (ossl_OSSL_CMP_CTX *ctx, ossl_X509 *cert,
                                       int fail_info, const char **txt);
int ossl_OSSL_CMP_certConf_cb(ossl_OSSL_CMP_CTX *ctx, ossl_X509 *cert, int fail_info,
                         const char **text);
int ossl_OSSL_CMP_CTX_set_certConf_cb(ossl_OSSL_CMP_CTX *ctx, ossl_OSSL_CMP_certConf_cb_t cb);
int ossl_OSSL_CMP_CTX_set_certConf_cb_arg(ossl_OSSL_CMP_CTX *ctx, void *arg);
void *ossl_OSSL_CMP_CTX_get_certConf_cb_arg(const ossl_OSSL_CMP_CTX *ctx);
/* result fetching: */
int ossl_OSSL_CMP_CTX_get_status(const ossl_OSSL_CMP_CTX *ctx);
ossl_OSSL_CMP_PKIFREETEXT *ossl_OSSL_CMP_CTX_get0_statusString(const ossl_OSSL_CMP_CTX *ctx);
int ossl_OSSL_CMP_CTX_get_failInfoCode(const ossl_OSSL_CMP_CTX *ctx);
#  define ossl_OSSL_CMP_PKISI_BUFLEN 1024
ossl_X509 *ossl_OSSL_CMP_CTX_get0_newCert(const ossl_OSSL_CMP_CTX *ctx);
ossl_STACK_OF(ossl_X509) *ossl_OSSL_CMP_CTX_get1_newChain(const ossl_OSSL_CMP_CTX *ctx);
ossl_STACK_OF(ossl_X509) *ossl_OSSL_CMP_CTX_get1_caPubs(const ossl_OSSL_CMP_CTX *ctx);
ossl_STACK_OF(ossl_X509) *ossl_OSSL_CMP_CTX_get1_extraCertsIn(const ossl_OSSL_CMP_CTX *ctx);
int ossl_OSSL_CMP_CTX_set1_transactionID(ossl_OSSL_CMP_CTX *ctx,
                                    const ossl_ASN1_OCTET_STRING *id);
int ossl_OSSL_CMP_CTX_set1_senderNonce(ossl_OSSL_CMP_CTX *ctx,
                                  const ossl_ASN1_OCTET_STRING *nonce);

/* from cmp_status.c */
char *ossl_OSSL_CMP_CTX_snprint_PKIStatus(const ossl_OSSL_CMP_CTX *ctx, char *buf,
                                     size_t bufsize);
char *ossl_OSSL_CMP_snprint_PKIStatusInfo(const ossl_OSSL_CMP_PKISI *statusInfo,
                                     char *buf, size_t bufsize);
ossl_OSSL_CMP_PKISI *
ossl_OSSL_CMP_STATUSINFO_new(int status, int fail_info, const char *text);

/* from cmp_hdr.c */
ossl_ASN1_OCTET_STRING *ossl_OSSL_CMP_HDR_get0_transactionID(const
                                                   ossl_OSSL_CMP_PKIHEADER *hdr);
ossl_ASN1_OCTET_STRING *ossl_OSSL_CMP_HDR_get0_recipNonce(const ossl_OSSL_CMP_PKIHEADER *hdr);

/* from cmp_msg.c */
ossl_OSSL_CMP_PKIHEADER *ossl_OSSL_CMP_MSG_get0_header(const ossl_OSSL_CMP_MSG *msg);
int ossl_OSSL_CMP_MSG_get_bodytype(const ossl_OSSL_CMP_MSG *msg);
int ossl_OSSL_CMP_MSG_update_transactionID(ossl_OSSL_CMP_CTX *ctx, ossl_OSSL_CMP_MSG *msg);
int ossl_OSSL_CMP_MSG_update_recipNonce(ossl_OSSL_CMP_CTX *ctx, ossl_OSSL_CMP_MSG *msg);
ossl_OSSL_CRMF_MSG *ossl_OSSL_CMP_CTX_setup_CRM(ossl_OSSL_CMP_CTX *ctx, int for_KUR, int rid);
ossl_OSSL_CMP_MSG *ossl_OSSL_CMP_MSG_read(const char *file, ossl_OSSL_LIB_CTX *libctx,
                                const char *propq);
int ossl_OSSL_CMP_MSG_write(const char *file, const ossl_OSSL_CMP_MSG *msg);
ossl_OSSL_CMP_MSG *ossl_d2i_OSSL_CMP_MSG_bio(ossl_BIO *bio, ossl_OSSL_CMP_MSG **msg);
int ossl_i2d_OSSL_CMP_MSG_bio(ossl_BIO *bio, const ossl_OSSL_CMP_MSG *msg);

/* from cmp_vfy.c */
int ossl_OSSL_CMP_validate_msg(ossl_OSSL_CMP_CTX *ctx, const ossl_OSSL_CMP_MSG *msg);
int ossl_OSSL_CMP_validate_cert_path(const ossl_OSSL_CMP_CTX *ctx,
                                ossl_X509_STORE *trusted_store, ossl_X509 *cert);

/* from cmp_http.c */
ossl_OSSL_CMP_MSG *ossl_OSSL_CMP_MSG_http_perform(ossl_OSSL_CMP_CTX *ctx,
                                        const ossl_OSSL_CMP_MSG *req);

/* from cmp_server.c */
typedef struct ossl_ossl_cmp_srv_ctx_st ossl_OSSL_CMP_SRV_CTX;
ossl_OSSL_CMP_MSG *ossl_OSSL_CMP_SRV_process_request(ossl_OSSL_CMP_SRV_CTX *srv_ctx,
                                           const ossl_OSSL_CMP_MSG *req);
ossl_OSSL_CMP_MSG * ossl_OSSL_CMP_CTX_server_perform(ossl_OSSL_CMP_CTX *client_ctx,
                                           const ossl_OSSL_CMP_MSG *req);
ossl_OSSL_CMP_SRV_CTX *ossl_OSSL_CMP_SRV_CTX_new(ossl_OSSL_LIB_CTX *libctx, const char *propq);
void ossl_OSSL_CMP_SRV_CTX_free(ossl_OSSL_CMP_SRV_CTX *srv_ctx);
typedef ossl_OSSL_CMP_PKISI *(*ossl_OSSL_CMP_SRV_cert_request_cb_t)
    (ossl_OSSL_CMP_SRV_CTX *srv_ctx, const ossl_OSSL_CMP_MSG *req, int certReqId,
     const ossl_OSSL_CRMF_MSG *crm, const ossl_X509_REQ *p10cr,
     ossl_X509 **certOut, ossl_STACK_OF(ossl_X509) **chainOut, ossl_STACK_OF(ossl_X509) **caPubs);
typedef ossl_OSSL_CMP_PKISI *(*ossl_OSSL_CMP_SRV_rr_cb_t)(ossl_OSSL_CMP_SRV_CTX *srv_ctx,
                                                const ossl_OSSL_CMP_MSG *req,
                                                const ossl_X509_NAME *issuer,
                                                const ossl_ASN1_INTEGER *serial);
typedef int (*ossl_OSSL_CMP_SRV_genm_cb_t)(ossl_OSSL_CMP_SRV_CTX *srv_ctx,
                                      const ossl_OSSL_CMP_MSG *req,
                                      const ossl_STACK_OF(ossl_OSSL_CMP_ITAV) *in,
                                      ossl_STACK_OF(ossl_OSSL_CMP_ITAV) **out);
typedef void (*ossl_OSSL_CMP_SRV_error_cb_t)(ossl_OSSL_CMP_SRV_CTX *srv_ctx,
                                        const ossl_OSSL_CMP_MSG *req,
                                        const ossl_OSSL_CMP_PKISI *statusInfo,
                                        const ossl_ASN1_INTEGER *errorCode,
                                        const ossl_OSSL_CMP_PKIFREETEXT *errDetails);
typedef int (*ossl_OSSL_CMP_SRV_certConf_cb_t)(ossl_OSSL_CMP_SRV_CTX *srv_ctx,
                                          const ossl_OSSL_CMP_MSG *req,
                                          int certReqId,
                                          const ossl_ASN1_OCTET_STRING *certHash,
                                          const ossl_OSSL_CMP_PKISI *si);
typedef int (*ossl_OSSL_CMP_SRV_pollReq_cb_t)(ossl_OSSL_CMP_SRV_CTX *srv_ctx,
                                         const ossl_OSSL_CMP_MSG *req, int certReqId,
                                         ossl_OSSL_CMP_MSG **certReq,
                                         int64_t *check_after);
int ossl_OSSL_CMP_SRV_CTX_init(ossl_OSSL_CMP_SRV_CTX *srv_ctx, void *custom_ctx,
                          ossl_OSSL_CMP_SRV_cert_request_cb_t process_cert_request,
                          ossl_OSSL_CMP_SRV_rr_cb_t process_rr,
                          ossl_OSSL_CMP_SRV_genm_cb_t process_genm,
                          ossl_OSSL_CMP_SRV_error_cb_t process_error,
                          ossl_OSSL_CMP_SRV_certConf_cb_t process_certConf,
                          ossl_OSSL_CMP_SRV_pollReq_cb_t process_pollReq);
ossl_OSSL_CMP_CTX *ossl_OSSL_CMP_SRV_CTX_get0_cmp_ctx(const ossl_OSSL_CMP_SRV_CTX *srv_ctx);
void *ossl_OSSL_CMP_SRV_CTX_get0_custom_ctx(const ossl_OSSL_CMP_SRV_CTX *srv_ctx);
int ossl_OSSL_CMP_SRV_CTX_set_send_unprotected_errors(ossl_OSSL_CMP_SRV_CTX *srv_ctx,
                                                 int val);
int ossl_OSSL_CMP_SRV_CTX_set_accept_unprotected(ossl_OSSL_CMP_SRV_CTX *srv_ctx, int val);
int ossl_OSSL_CMP_SRV_CTX_set_accept_raverified(ossl_OSSL_CMP_SRV_CTX *srv_ctx, int val);
int ossl_OSSL_CMP_SRV_CTX_set_grant_implicit_confirm(ossl_OSSL_CMP_SRV_CTX *srv_ctx,
                                                int val);

/* from cmp_client.c */
ossl_X509 *ossl_OSSL_CMP_exec_certreq(ossl_OSSL_CMP_CTX *ctx, int req_type,
                            const ossl_OSSL_CRMF_MSG *crm);
#  define ossl_OSSL_CMP_IR    0
#  define ossl_OSSL_CMP_CR    2
#  define ossl_OSSL_CMP_P10CR 4
#  define ossl_OSSL_CMP_KUR   7
#  define ossl_OSSL_CMP_exec_IR_ses(ctx) \
    ossl_OSSL_CMP_exec_certreq(ctx, ossl_OSSL_CMP_IR, NULL)
#  define ossl_OSSL_CMP_exec_CR_ses(ctx) \
    ossl_OSSL_CMP_exec_certreq(ctx, ossl_OSSL_CMP_CR, NULL)
#  define ossl_OSSL_CMP_exec_P10CR_ses(ctx) \
    ossl_OSSL_CMP_exec_certreq(ctx, ossl_OSSL_CMP_P10CR, NULL)
#  define ossl_OSSL_CMP_exec_KUR_ses(ctx) \
    ossl_OSSL_CMP_exec_certreq(ctx, ossl_OSSL_CMP_KUR, NULL)
int ossl_OSSL_CMP_try_certreq(ossl_OSSL_CMP_CTX *ctx, int req_type,
                         const ossl_OSSL_CRMF_MSG *crm, int *checkAfter);
int ossl_OSSL_CMP_exec_RR_ses(ossl_OSSL_CMP_CTX *ctx);
ossl_STACK_OF(ossl_OSSL_CMP_ITAV) *ossl_OSSL_CMP_exec_GENM_ses(ossl_OSSL_CMP_CTX *ctx);

#  ifdef  __cplusplus
}
#  endif
# endif /* !defined(ossl_OPENSSL_NO_CMP) */
#endif /* !defined(ossl_OPENSSL_CMP_H) */
